
FlightControllerF401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cafc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  0800cca0  0800cca0  0001cca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4a8  0800d4a8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4a8  0800d4a8  0001d4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4b0  0800d4b0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4b0  0800d4b0  0001d4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4b4  0800d4b4  0001d4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000744  200001e4  0800d69c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  0800d69c  00020928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000234c7  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b1d  00000000  00000000  000436db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  000471f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  00048730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001aab0  00000000  00000000  00049ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001325f  00000000  00000000  00064588  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009828a  00000000  00000000  000777e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010fa71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006574  00000000  00000000  0010faec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc84 	.word	0x0800cc84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800cc84 	.word	0x0800cc84

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MPU9250_OnActivate>:

static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

__weak void MPU9250_OnActivate()
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8000f6c:	f7ff fff4 	bl	8000f58 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(GYRO_CSN_GPIO_Port, GYRO_CSN_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <MPU9250_Activate+0x18>)
 8000f76:	f005 fb37 	bl	80065e8 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020000 	.word	0x40020000

08000f84 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CSN_GPIO_Port, GYRO_CSN_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <MPU9250_Deactivate+0x14>)
 8000f8e:	f005 fb2b 	bl	80065e8 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020000 	.word	0x40020000

08000f9c <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000faa:	f107 020f 	add.w	r2, r7, #15
 8000fae:	1df9      	adds	r1, r7, #7
 8000fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <SPIx_WriteRead+0x38>)
 8000fba:	f006 fb5e 	bl	800767a <HAL_SPI_TransmitReceive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SPIx_WriteRead+0x2c>
	{
		return -1;
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	e000      	b.n	8000fca <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000624 	.word	0x20000624

08000fd8 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8000fe8:	f7ff ffbe 	bl	8000f68 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffd4 	bl	8000f9c <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8000ff4:	e00a      	b.n	800100c <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*pBuffer);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffce 	bl	8000f9c <SPIx_WriteRead>
		NumByteToWrite--;
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	3b01      	subs	r3, #1
 8001004:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3301      	adds	r3, #1
 800100a:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 800100c:	883b      	ldrh	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f1      	bne.n	8000ff6 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 8001012:	f7ff ffb7 	bl	8000f84 <MPU9250_Deactivate>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
 800102c:	4613      	mov	r3, r2
 800102e:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001030:	f7ff ff9a 	bl	8000f68 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	4313      	orrs	r3, r2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 800103e:	f107 010f 	add.w	r1, r7, #15
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	2201      	movs	r2, #1
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <MPU_SPI_Read+0x48>)
 800104a:	f006 f8d9 	bl	8007200 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&MPU9250_SPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 800104e:	883a      	ldrh	r2, [r7, #0]
 8001050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <MPU_SPI_Read+0x48>)
 8001058:	f006 fa06 	bl	8007468 <HAL_SPI_Receive>
	MPU9250_Deactivate();
 800105c:	f7ff ff92 	bl	8000f84 <MPU9250_Deactivate>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000624 	.word	0x20000624

0800106c <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 800107c:	79f9      	ldrb	r1, [r7, #7]
 800107e:	1dbb      	adds	r3, r7, #6
 8001080:	2201      	movs	r2, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffa8 	bl	8000fd8 <MPU_SPI_Write>
	HAL_Delay(10);
 8001088:	200a      	movs	r0, #10
 800108a:	f004 fa51 	bl	8005530 <HAL_Delay>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	603a      	str	r2, [r7, #0]
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	460b      	mov	r3, r1
 80010a4:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4619      	mov	r1, r3
 80010ae:	6838      	ldr	r0, [r7, #0]
 80010b0:	f7ff ffb6 	bl	8001020 <MPU_SPI_Read>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80010cc:	2325      	movs	r3, #37	; 0x25
 80010ce:	220c      	movs	r2, #12
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffca 	bl	800106c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80010d8:	2226      	movs	r2, #38	; 0x26
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f7ff ffc4 	bl	800106c <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80010e4:	2263      	movs	r2, #99	; 0x63
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f7ff ffbe 	bl	800106c <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 80010f0:	2227      	movs	r2, #39	; 0x27
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f7ff ffb5 	bl	800106c <writeRegister>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	603a      	str	r2, [r7, #0]
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	460b      	mov	r3, r1
 8001118:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 800111a:	2025      	movs	r0, #37	; 0x25
 800111c:	220c      	movs	r2, #12
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	4313      	orrs	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff ffa1 	bl	800106c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800112a:	2226      	movs	r2, #38	; 0x26
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	4619      	mov	r1, r3
 8001130:	4610      	mov	r0, r2
 8001132:	f7ff ff9b 	bl	800106c <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8001136:	2027      	movs	r0, #39	; 0x27
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	4313      	orrs	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff ff93 	bl	800106c <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f004 f9f2 	bl	8005530 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800114c:	2049      	movs	r0, #73	; 0x49
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff ff9f 	bl	8001096 <readRegisters>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8001164:	2375      	movs	r3, #117	; 0x75
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <whoAmI+0x18>)
 8001168:	2101      	movs	r1, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff93 	bl	8001096 <readRegisters>

	// return the register value
	return _buffer[0];
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <whoAmI+0x18>)
 8001172:	781b      	ldrb	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000200 	.word	0x20000200

0800117c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8001180:	2300      	movs	r3, #0
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <whoAmIAK8963+0x18>)
 8001184:	2101      	movs	r1, #1
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ffbf 	bl	800110a <readAK8963Registers>
	// return the register value
	return _buffer[0];
 800118c:	4b01      	ldr	r3, [pc, #4]	; (8001194 <whoAmIAK8963+0x18>)
 800118e:	781b      	ldrb	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000200 	.word	0x20000200

08001198 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800119e:	236b      	movs	r3, #107	; 0x6b
 80011a0:	2201      	movs	r2, #1
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff61 	bl	800106c <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80011aa:	236a      	movs	r3, #106	; 0x6a
 80011ac:	2220      	movs	r2, #32
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5b 	bl	800106c <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80011b6:	2324      	movs	r3, #36	; 0x24
 80011b8:	220d      	movs	r2, #13
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff55 	bl	800106c <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80011c2:	230a      	movs	r3, #10
 80011c4:	2200      	movs	r2, #0
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff77 	bl	80010bc <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80011ce:	236b      	movs	r3, #107	; 0x6b
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff49 	bl	800106c <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80011da:	200a      	movs	r0, #10
 80011dc:	f004 f9a8 	bl	8005530 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80011e0:	230b      	movs	r3, #11
 80011e2:	2201      	movs	r2, #1
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff68 	bl	80010bc <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80011ec:	236b      	movs	r3, #107	; 0x6b
 80011ee:	2201      	movs	r2, #1
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff3a 	bl	800106c <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80011f8:	f7ff ffb2 	bl	8001160 <whoAmI>
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b71      	cmp	r3, #113	; 0x71
 8001204:	d004      	beq.n	8001210 <MPU9250_Init+0x78>
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b73      	cmp	r3, #115	; 0x73
 800120a:	d001      	beq.n	8001210 <MPU9250_Init+0x78>
	{
		return 1;
 800120c:	2301      	movs	r3, #1
 800120e:	e06c      	b.n	80012ea <MPU9250_Init+0x152>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8001210:	236c      	movs	r3, #108	; 0x6c
 8001212:	2200      	movs	r2, #0
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff28 	bl	800106c <writeRegister>

	// setting accel range to 8G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_8G);
 800121c:	231c      	movs	r3, #28
 800121e:	2210      	movs	r2, #16
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff22 	bl	800106c <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS);
 8001228:	231b      	movs	r3, #27
 800122a:	2218      	movs	r2, #24
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff1c 	bl	800106c <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8001234:	231d      	movs	r3, #29
 8001236:	2201      	movs	r2, #1
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff16 	bl	800106c <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8001240:	231a      	movs	r3, #26
 8001242:	2201      	movs	r2, #1
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff10 	bl	800106c <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 800124c:	2319      	movs	r3, #25
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff0b 	bl	800106c <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8001256:	236a      	movs	r3, #106	; 0x6a
 8001258:	2220      	movs	r2, #32
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff05 	bl	800106c <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8001262:	2324      	movs	r3, #36	; 0x24
 8001264:	220d      	movs	r2, #13
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff feff 	bl	800106c <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 800126e:	f7ff ff85 	bl	800117c <whoAmIAK8963>
 8001272:	4603      	mov	r3, r0
 8001274:	2b48      	cmp	r3, #72	; 0x48
 8001276:	d001      	beq.n	800127c <MPU9250_Init+0xe4>
	{
		return 1;
 8001278:	2301      	movs	r3, #1
 800127a:	e036      	b.n	80012ea <MPU9250_Init+0x152>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800127c:	230a      	movs	r3, #10
 800127e:	2200      	movs	r2, #0
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff1a 	bl	80010bc <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f004 f951 	bl	8005530 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 800128e:	230a      	movs	r3, #10
 8001290:	220f      	movs	r2, #15
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff11 	bl	80010bc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800129a:	2064      	movs	r0, #100	; 0x64
 800129c:	f004 f948 	bl	8005530 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80012a0:	2310      	movs	r3, #16
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <MPU9250_Init+0x15c>)
 80012a4:	2103      	movs	r1, #3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff2f 	bl	800110a <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80012ac:	230a      	movs	r3, #10
 80012ae:	2200      	movs	r2, #0
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff02 	bl	80010bc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f004 f939 	bl	8005530 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80012be:	230a      	movs	r3, #10
 80012c0:	2216      	movs	r2, #22
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fef9 	bl	80010bc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	; 0x64
 80012cc:	f004 f930 	bl	8005530 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80012d0:	236b      	movs	r3, #107	; 0x6b
 80012d2:	2201      	movs	r2, #1
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fec8 	bl	800106c <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80012dc:	2303      	movs	r3, #3
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <MPU9250_Init+0x160>)
 80012e0:	2107      	movs	r1, #7
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff11 	bl	800110a <readAK8963Registers>

	// successful init, return 0
	return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000218 	.word	0x20000218
 80012f8:	20000200 	.word	0x20000200

080012fc <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(struct MPUstr* DataStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8001304:	233b      	movs	r3, #59	; 0x3b
 8001306:	4a60      	ldr	r2, [pc, #384]	; (8001488 <MPU9250_GetData+0x18c>)
 8001308:	2115      	movs	r1, #21
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fec3 	bl	8001096 <readRegisters>

	// combine into 16 bit values
	DataStruct->Accelerometer_X_RAW = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001310:	4b5d      	ldr	r3, [pc, #372]	; (8001488 <MPU9250_GetData+0x18c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <MPU9250_GetData+0x18c>)
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21a      	sxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y_RAW = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <MPU9250_GetData+0x18c>)
 8001328:	789b      	ldrb	r3, [r3, #2]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <MPU9250_GetData+0x18c>)
 8001330:	78db      	ldrb	r3, [r3, #3]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z_RAW = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 800133c:	4b52      	ldr	r3, [pc, #328]	; (8001488 <MPU9250_GetData+0x18c>)
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <MPU9250_GetData+0x18c>)
 8001346:	795b      	ldrb	r3, [r3, #5]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21a      	sxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	809a      	strh	r2, [r3, #4]
	DataStruct->Gyroscope_X_RAW = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8001352:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <MPU9250_GetData+0x18c>)
 8001354:	7a1b      	ldrb	r3, [r3, #8]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <MPU9250_GetData+0x18c>)
 800135c:	7a5b      	ldrb	r3, [r3, #9]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y_RAW = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <MPU9250_GetData+0x18c>)
 800136a:	7a9b      	ldrb	r3, [r3, #10]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <MPU9250_GetData+0x18c>)
 8001372:	7adb      	ldrb	r3, [r3, #11]
 8001374:	b21b      	sxth	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b21a      	sxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z_RAW = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <MPU9250_GetData+0x18c>)
 8001380:	7b1b      	ldrb	r3, [r3, #12]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <MPU9250_GetData+0x18c>)
 8001388:	7b5b      	ldrb	r3, [r3, #13]
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b21a      	sxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	815a      	strh	r2, [r3, #10]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MPU9250_GetData+0x18c>)
 8001396:	7bdb      	ldrb	r3, [r3, #15]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <MPU9250_GetData+0x18c>)
 800139e:	7b9b      	ldrb	r3, [r3, #14]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	81fb      	strh	r3, [r7, #14]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <MPU9250_GetData+0x18c>)
 80013a8:	7c5b      	ldrb	r3, [r3, #17]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MPU9250_GetData+0x18c>)
 80013b0:	7c1b      	ldrb	r3, [r3, #16]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	81bb      	strh	r3, [r7, #12]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80013b8:	4b33      	ldr	r3, [pc, #204]	; (8001488 <MPU9250_GetData+0x18c>)
 80013ba:	7cdb      	ldrb	r3, [r3, #19]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	4b31      	ldr	r3, [pc, #196]	; (8001488 <MPU9250_GetData+0x18c>)
 80013c2:	7c9b      	ldrb	r3, [r3, #18]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	817b      	strh	r3, [r7, #10]

	DataStruct->Mag_X_RAW = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80013ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MPU9250_GetData+0x190>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3b80      	subs	r3, #128	; 0x80
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013e4:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8001490 <MPU9250_GetData+0x194>
 80013e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fc:	ee17 3a90 	vmov	r3, s15
 8001400:	b21a      	sxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	819a      	strh	r2, [r3, #12]
	DataStruct->Mag_Y_RAW = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8001406:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MPU9250_GetData+0x190>)
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	3b80      	subs	r3, #128	; 0x80
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001420:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8001490 <MPU9250_GetData+0x194>
 8001424:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800142c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001438:	ee17 3a90 	vmov	r3, s15
 800143c:	b21a      	sxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	81da      	strh	r2, [r3, #14]
	DataStruct->Mag_Z_RAW  = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8001442:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MPU9250_GetData+0x190>)
 8001450:	789b      	ldrb	r3, [r3, #2]
 8001452:	3b80      	subs	r3, #128	; 0x80
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800145c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8001490 <MPU9250_GetData+0x194>
 8001460:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800146c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001474:	ee17 3a90 	vmov	r3, s15
 8001478:	b21a      	sxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	821a      	strh	r2, [r3, #16]
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000200 	.word	0x20000200
 800148c:	20000218 	.word	0x20000218
 8001490:	43800000 	.word	0x43800000
 8001494:	00000000 	.word	0x00000000

08001498 <MPU_CalculateFromRAWData>:
	if ( ang->roll < -180 ) ang->roll += 360;
	ang->roll=-ang->roll; //positive angle drone tilt to right
}

void MPU_CalculateFromRAWData(struct MPUstr* d,float timedelta)
{
 8001498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800149c:	b08c      	sub	sp, #48	; 0x30
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	ed87 0a02 	vstr	s0, [r7, #8]
	float AccelVectorRoll;
	float p,q,r;
	float X,Y,Z;

	//Offset RAW gyro values with calibrated offsets
	d->Gyroscope_X_Cal = (float)(d->Gyroscope_X_RAW) - d->Offset_Gyro_X;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	edc3 7a08 	vstr	s15, [r3, #32]
	d->Gyroscope_Y_Cal = (float)(d->Gyroscope_Y_RAW) - d->Offset_Gyro_Y;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80014d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	d->Gyroscope_Z_Cal = (float)(d->Gyroscope_Z_RAW) - d->Offset_Gyro_Z;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80014f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	//GYRO AND ACCEL DATA in STANDARD X,Y,Z directions Roll (nose), Pitch(right wing), Yaw (down)
	//Sensor MPU 6050 axis position X (right wing), Y (nose), Z (up)
	d->Gyro_X = d->Gyroscope_Y_Cal;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150a:	ee17 3a90 	vmov	r3, s15
 800150e:	b21a      	sxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	865a      	strh	r2, [r3, #50]	; 0x32
	d->Gyro_Y = d->Gyroscope_X_Cal;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	edd3 7a08 	vldr	s15, [r3, #32]
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 3a90 	vmov	r3, s15
 8001522:	b21a      	sxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	869a      	strh	r2, [r3, #52]	; 0x34
	d->Gyro_Z = -d->Gyroscope_Z_Cal;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800152e:	eef1 7a67 	vneg.f32	s15, s15
 8001532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001536:	ee17 3a90 	vmov	r3, s15
 800153a:	b21a      	sxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	86da      	strh	r2, [r3, #54]	; 0x36

	d->Accel_X = d->Accelerometer_Y_RAW;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	859a      	strh	r2, [r3, #44]	; 0x2c
	d->Accel_Y = d->Accelerometer_X_RAW;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	85da      	strh	r2, [r3, #46]	; 0x2e
	d->Accel_Z = -d->Accelerometer_Z_RAW;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800155a:	b29b      	uxth	r3, r3
 800155c:	425b      	negs	r3, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	b21a      	sxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	861a      	strh	r2, [r3, #48]	; 0x30


	//Accelerometer angles-----------------------------------------------------------------
	AccelVectorRoll =  sqrt( (d->Accel_X * d->Accel_X) + (d->Accel_Z * d->Accel_Z) );
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001574:	fb03 f202 	mul.w	r2, r3, r2
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800157e:	4619      	mov	r1, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001586:	fb03 f301 	mul.w	r3, r3, r1
 800158a:	4413      	add	r3, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffd1 	bl	8000534 <__aeabi_i2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	ec43 2b10 	vmov	d0, r2, r3
 800159a:	f00a f8d5 	bl	800b748 <sqrt>
 800159e:	ec53 2b10 	vmov	r2, r3, d0
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fb07 	bl	8000bb8 <__aeabi_d2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	AccelVectorPitch = sqrt( (d->Accel_Y * d->Accel_Y) + (d->Accel_Z * d->Accel_Z) );
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80015bc:	fb03 f202 	mul.w	r2, r3, r2
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80015c6:	4619      	mov	r1, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80015ce:	fb03 f301 	mul.w	r3, r3, r1
 80015d2:	4413      	add	r3, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffad 	bl	8000534 <__aeabi_i2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	ec43 2b10 	vmov	d0, r2, r3
 80015e2:	f00a f8b1 	bl	800b748 <sqrt>
 80015e6:	ec53 2b10 	vmov	r2, r3, d0
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fae3 	bl	8000bb8 <__aeabi_d2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28

	d->Angle_Accel_Roll  = -atan(d->Accel_Y/AccelVectorRoll) * RADIANSTODEGREES;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001604:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001608:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800160c:	ee16 0a90 	vmov	r0, s13
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	ec43 2b10 	vmov	d0, r2, r3
 800161c:	f009 fe2c 	bl	800b278 <atan>
 8001620:	ec53 2b10 	vmov	r2, r3, d0
 8001624:	4614      	mov	r4, r2
 8001626:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800162a:	a3fb      	add	r3, pc, #1004	; (adr r3, 8001a18 <MPU_CalculateFromRAWData+0x580>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe ffe8 	bl	8000608 <__aeabi_dmul>
 8001638:	4603      	mov	r3, r0
 800163a:	460c      	mov	r4, r1
 800163c:	4618      	mov	r0, r3
 800163e:	4621      	mov	r1, r4
 8001640:	f7ff faba 	bl	8000bb8 <__aeabi_d2f>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
	d->Angle_Accel_Pitch = atan(d->Accel_X/AccelVectorPitch) * RADIANSTODEGREES;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001658:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800165c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001660:	ee16 0a90 	vmov	r0, s13
 8001664:	f7fe ff78 	bl	8000558 <__aeabi_f2d>
 8001668:	4603      	mov	r3, r0
 800166a:	460c      	mov	r4, r1
 800166c:	ec44 3b10 	vmov	d0, r3, r4
 8001670:	f009 fe02 	bl	800b278 <atan>
 8001674:	ec51 0b10 	vmov	r0, r1, d0
 8001678:	a3e7      	add	r3, pc, #924	; (adr r3, 8001a18 <MPU_CalculateFromRAWData+0x580>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe ffc3 	bl	8000608 <__aeabi_dmul>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	4618      	mov	r0, r3
 8001688:	4621      	mov	r1, r4
 800168a:	f7ff fa95 	bl	8000bb8 <__aeabi_d2f>
 800168e:	4602      	mov	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	641a      	str	r2, [r3, #64]	; 0x40

	//Compensate offset with spirit level manual offset
	d->Angle_Accel_Pitch-=ACCELPITCHMANUALOFFSET;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	641a      	str	r2, [r3, #64]	; 0x40
	d->Angle_Accel_Roll-=ACCELROLLMANUALOFFSET;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	645a      	str	r2, [r3, #68]	; 0x44
	//Save angles in Radians
	d->Angle_Accel_Pitch_Rad=d->Angle_Accel_Pitch*DEGREESTORADIANS;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016aa:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 8001a10 <MPU_CalculateFromRAWData+0x578>
 80016ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	d->Angle_Accel_Roll_Rad=d->Angle_Accel_Roll*DEGREESTORADIANS;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016be:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 8001a10 <MPU_CalculateFromRAWData+0x578>
 80016c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	//Calculate angular gyro velocities----------------------------------------------------
	d->AngleSpeed_Gyro_X = d->Gyro_X / GYROCONSTANT;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016da:	eddf 6ace 	vldr	s13, [pc, #824]	; 8001a14 <MPU_CalculateFromRAWData+0x57c>
 80016de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	d->AngleSpeed_Gyro_Y = d->Gyro_Y / GYROCONSTANT;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80016ee:	ee07 3a90 	vmov	s15, r3
 80016f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f6:	eddf 6ac7 	vldr	s13, [pc, #796]	; 8001a14 <MPU_CalculateFromRAWData+0x57c>
 80016fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	d->AngleSpeed_Gyro_Z = d->Gyro_Z / GYROCONSTANT;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001712:	eddf 6ac0 	vldr	s13, [pc, #768]	; 8001a14 <MPU_CalculateFromRAWData+0x57c>
 8001716:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	//convert angular velocity to radians/s
	p = d->AngleSpeed_Gyro_X * DEGREESTORADIANS;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001726:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001a10 <MPU_CalculateFromRAWData+0x578>
 800172a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800172e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	q = d->AngleSpeed_Gyro_Y * DEGREESTORADIANS;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001738:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001a10 <MPU_CalculateFromRAWData+0x578>
 800173c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001740:	edc7 7a08 	vstr	s15, [r7, #32]
	r = d->AngleSpeed_Gyro_Z * DEGREESTORADIANS;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 800174a:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001a10 <MPU_CalculateFromRAWData+0x578>
 800174e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001752:	edc7 7a07 	vstr	s15, [r7, #28]

	//Save Angles in radians from previous STEP
	X = d->Roll_Rad;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175c:	61bb      	str	r3, [r7, #24]
	Y = d->Pitch_Rad;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001764:	617b      	str	r3, [r7, #20]
	Z = d->Angle_Gyro_Yaw_Rad ;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800176a:	613b      	str	r3, [r7, #16]

	//TRANSFORM gyro data to Euler Angles with complementary filter with accelerometer
	d->Roll_Rad   = 0.999 * (X + timedelta * (p  +  q*sin(X)*tan(Y) + r*cos(X)*tan(Y) ) ) + 0.001*d->Angle_Accel_Roll_Rad;
 800176c:	69b8      	ldr	r0, [r7, #24]
 800176e:	f7fe fef3 	bl	8000558 <__aeabi_f2d>
 8001772:	4604      	mov	r4, r0
 8001774:	460d      	mov	r5, r1
 8001776:	68b8      	ldr	r0, [r7, #8]
 8001778:	f7fe feee 	bl	8000558 <__aeabi_f2d>
 800177c:	4680      	mov	r8, r0
 800177e:	4689      	mov	r9, r1
 8001780:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001782:	f7fe fee9 	bl	8000558 <__aeabi_f2d>
 8001786:	4682      	mov	sl, r0
 8001788:	468b      	mov	fp, r1
 800178a:	6a38      	ldr	r0, [r7, #32]
 800178c:	f7fe fee4 	bl	8000558 <__aeabi_f2d>
 8001790:	e9c7 0100 	strd	r0, r1, [r7]
 8001794:	69b8      	ldr	r0, [r7, #24]
 8001796:	f7fe fedf 	bl	8000558 <__aeabi_f2d>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	ec43 2b10 	vmov	d0, r2, r3
 80017a2:	f009 ff59 	bl	800b658 <sin>
 80017a6:	ec53 2b10 	vmov	r2, r3, d0
 80017aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ae:	f7fe ff2b 	bl	8000608 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	e9c7 2300 	strd	r2, r3, [r7]
 80017ba:	6978      	ldr	r0, [r7, #20]
 80017bc:	f7fe fecc 	bl	8000558 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	ec43 2b10 	vmov	d0, r2, r3
 80017c8:	f009 ff8e 	bl	800b6e8 <tan>
 80017cc:	ec53 2b10 	vmov	r2, r3, d0
 80017d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017d4:	f7fe ff18 	bl	8000608 <__aeabi_dmul>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4650      	mov	r0, sl
 80017de:	4659      	mov	r1, fp
 80017e0:	f7fe fd5c 	bl	800029c <__adddf3>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4692      	mov	sl, r2
 80017ea:	469b      	mov	fp, r3
 80017ec:	69f8      	ldr	r0, [r7, #28]
 80017ee:	f7fe feb3 	bl	8000558 <__aeabi_f2d>
 80017f2:	e9c7 0100 	strd	r0, r1, [r7]
 80017f6:	69b8      	ldr	r0, [r7, #24]
 80017f8:	f7fe feae 	bl	8000558 <__aeabi_f2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	ec43 2b10 	vmov	d0, r2, r3
 8001804:	f009 fed8 	bl	800b5b8 <cos>
 8001808:	ec53 2b10 	vmov	r2, r3, d0
 800180c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001810:	f7fe fefa 	bl	8000608 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	e9c7 2300 	strd	r2, r3, [r7]
 800181c:	6978      	ldr	r0, [r7, #20]
 800181e:	f7fe fe9b 	bl	8000558 <__aeabi_f2d>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	ec43 2b10 	vmov	d0, r2, r3
 800182a:	f009 ff5d 	bl	800b6e8 <tan>
 800182e:	ec53 2b10 	vmov	r2, r3, d0
 8001832:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001836:	f7fe fee7 	bl	8000608 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4650      	mov	r0, sl
 8001840:	4659      	mov	r1, fp
 8001842:	f7fe fd2b 	bl	800029c <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4640      	mov	r0, r8
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fedb 	bl	8000608 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fd1f 	bl	800029c <__adddf3>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	4618      	mov	r0, r3
 8001864:	4621      	mov	r1, r4
 8001866:	a366      	add	r3, pc, #408	; (adr r3, 8001a00 <MPU_CalculateFromRAWData+0x568>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fecc 	bl	8000608 <__aeabi_dmul>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4625      	mov	r5, r4
 8001876:	461c      	mov	r4, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe6b 	bl	8000558 <__aeabi_f2d>
 8001882:	a361      	add	r3, pc, #388	; (adr r3, 8001a08 <MPU_CalculateFromRAWData+0x570>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe febe 	bl	8000608 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	f7fe fd02 	bl	800029c <__adddf3>
 8001898:	4603      	mov	r3, r0
 800189a:	460c      	mov	r4, r1
 800189c:	4618      	mov	r0, r3
 800189e:	4621      	mov	r1, r4
 80018a0:	f7ff f98a 	bl	8000bb8 <__aeabi_d2f>
 80018a4:	4602      	mov	r2, r0
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	d->Pitch_Rad  = 0.999 * (Y + timedelta * (q * cos(X) -  r * sin(X) ) 			    ) + 0.001*d->Angle_Accel_Pitch_Rad;
 80018ac:	6978      	ldr	r0, [r7, #20]
 80018ae:	f7fe fe53 	bl	8000558 <__aeabi_f2d>
 80018b2:	4604      	mov	r4, r0
 80018b4:	460d      	mov	r5, r1
 80018b6:	68b8      	ldr	r0, [r7, #8]
 80018b8:	f7fe fe4e 	bl	8000558 <__aeabi_f2d>
 80018bc:	4680      	mov	r8, r0
 80018be:	4689      	mov	r9, r1
 80018c0:	6a38      	ldr	r0, [r7, #32]
 80018c2:	f7fe fe49 	bl	8000558 <__aeabi_f2d>
 80018c6:	4682      	mov	sl, r0
 80018c8:	468b      	mov	fp, r1
 80018ca:	69b8      	ldr	r0, [r7, #24]
 80018cc:	f7fe fe44 	bl	8000558 <__aeabi_f2d>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	ec43 2b10 	vmov	d0, r2, r3
 80018d8:	f009 fe6e 	bl	800b5b8 <cos>
 80018dc:	ec53 2b10 	vmov	r2, r3, d0
 80018e0:	4650      	mov	r0, sl
 80018e2:	4659      	mov	r1, fp
 80018e4:	f7fe fe90 	bl	8000608 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4692      	mov	sl, r2
 80018ee:	469b      	mov	fp, r3
 80018f0:	69f8      	ldr	r0, [r7, #28]
 80018f2:	f7fe fe31 	bl	8000558 <__aeabi_f2d>
 80018f6:	e9c7 0100 	strd	r0, r1, [r7]
 80018fa:	69b8      	ldr	r0, [r7, #24]
 80018fc:	f7fe fe2c 	bl	8000558 <__aeabi_f2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	ec43 2b10 	vmov	d0, r2, r3
 8001908:	f009 fea6 	bl	800b658 <sin>
 800190c:	ec53 2b10 	vmov	r2, r3, d0
 8001910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001914:	f7fe fe78 	bl	8000608 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4650      	mov	r0, sl
 800191e:	4659      	mov	r1, fp
 8001920:	f7fe fcba 	bl	8000298 <__aeabi_dsub>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4640      	mov	r0, r8
 800192a:	4649      	mov	r1, r9
 800192c:	f7fe fe6c 	bl	8000608 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fcb0 	bl	800029c <__adddf3>
 800193c:	4603      	mov	r3, r0
 800193e:	460c      	mov	r4, r1
 8001940:	4618      	mov	r0, r3
 8001942:	4621      	mov	r1, r4
 8001944:	a32e      	add	r3, pc, #184	; (adr r3, 8001a00 <MPU_CalculateFromRAWData+0x568>)
 8001946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194a:	f7fe fe5d 	bl	8000608 <__aeabi_dmul>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	4625      	mov	r5, r4
 8001954:	461c      	mov	r4, r3
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdfc 	bl	8000558 <__aeabi_f2d>
 8001960:	a329      	add	r3, pc, #164	; (adr r3, 8001a08 <MPU_CalculateFromRAWData+0x570>)
 8001962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001966:	f7fe fe4f 	bl	8000608 <__aeabi_dmul>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4620      	mov	r0, r4
 8001970:	4629      	mov	r1, r5
 8001972:	f7fe fc93 	bl	800029c <__adddf3>
 8001976:	4603      	mov	r3, r0
 8001978:	460c      	mov	r4, r1
 800197a:	4618      	mov	r0, r3
 800197c:	4621      	mov	r1, r4
 800197e:	f7ff f91b 	bl	8000bb8 <__aeabi_d2f>
 8001982:	4602      	mov	r2, r0
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	d->Angle_Gyro_Yaw_Rad = Z + timedelta * (q*sin(X)/cos(Y) + r*cos(X)/cos(Y) ); //Only Gyro Angle will drift
 800198a:	6938      	ldr	r0, [r7, #16]
 800198c:	f7fe fde4 	bl	8000558 <__aeabi_f2d>
 8001990:	4604      	mov	r4, r0
 8001992:	460d      	mov	r5, r1
 8001994:	68b8      	ldr	r0, [r7, #8]
 8001996:	f7fe fddf 	bl	8000558 <__aeabi_f2d>
 800199a:	4680      	mov	r8, r0
 800199c:	4689      	mov	r9, r1
 800199e:	6a38      	ldr	r0, [r7, #32]
 80019a0:	f7fe fdda 	bl	8000558 <__aeabi_f2d>
 80019a4:	4682      	mov	sl, r0
 80019a6:	468b      	mov	fp, r1
 80019a8:	69b8      	ldr	r0, [r7, #24]
 80019aa:	f7fe fdd5 	bl	8000558 <__aeabi_f2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	ec43 2b10 	vmov	d0, r2, r3
 80019b6:	f009 fe4f 	bl	800b658 <sin>
 80019ba:	ec53 2b10 	vmov	r2, r3, d0
 80019be:	4650      	mov	r0, sl
 80019c0:	4659      	mov	r1, fp
 80019c2:	f7fe fe21 	bl	8000608 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4692      	mov	sl, r2
 80019cc:	469b      	mov	fp, r3
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7fe fdc2 	bl	8000558 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	ec43 2b10 	vmov	d0, r2, r3
 80019dc:	f009 fdec 	bl	800b5b8 <cos>
 80019e0:	ec53 2b10 	vmov	r2, r3, d0
 80019e4:	4650      	mov	r0, sl
 80019e6:	4659      	mov	r1, fp
 80019e8:	f7fe ff38 	bl	800085c <__aeabi_ddiv>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4692      	mov	sl, r2
 80019f2:	469b      	mov	fp, r3
 80019f4:	69f8      	ldr	r0, [r7, #28]
 80019f6:	f7fe fdaf 	bl	8000558 <__aeabi_f2d>
 80019fa:	e013      	b.n	8001a24 <MPU_CalculateFromRAWData+0x58c>
 80019fc:	f3af 8000 	nop.w
 8001a00:	d916872b 	.word	0xd916872b
 8001a04:	3feff7ce 	.word	0x3feff7ce
 8001a08:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a0c:	3f50624d 	.word	0x3f50624d
 8001a10:	3c8efa35 	.word	0x3c8efa35
 8001a14:	41833333 	.word	0x41833333
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	404ca5dc 	.word	0x404ca5dc
 8001a20:	42652ee1 	.word	0x42652ee1
 8001a24:	e9c7 0100 	strd	r0, r1, [r7]
 8001a28:	69b8      	ldr	r0, [r7, #24]
 8001a2a:	f7fe fd95 	bl	8000558 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	ec43 2b10 	vmov	d0, r2, r3
 8001a36:	f009 fdbf 	bl	800b5b8 <cos>
 8001a3a:	ec53 2b10 	vmov	r2, r3, d0
 8001a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a42:	f7fe fde1 	bl	8000608 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	e9c7 2300 	strd	r2, r3, [r7]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7fe fd82 	bl	8000558 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ec43 2b10 	vmov	d0, r2, r3
 8001a5c:	f009 fdac 	bl	800b5b8 <cos>
 8001a60:	ec53 2b10 	vmov	r2, r3, d0
 8001a64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a68:	f7fe fef8 	bl	800085c <__aeabi_ddiv>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4650      	mov	r0, sl
 8001a72:	4659      	mov	r1, fp
 8001a74:	f7fe fc12 	bl	800029c <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4640      	mov	r0, r8
 8001a7e:	4649      	mov	r1, r9
 8001a80:	f7fe fdc2 	bl	8000608 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7fe fc06 	bl	800029c <__adddf3>
 8001a90:	4603      	mov	r3, r0
 8001a92:	460c      	mov	r4, r1
 8001a94:	4618      	mov	r0, r3
 8001a96:	4621      	mov	r1, r4
 8001a98:	f7ff f88e 	bl	8000bb8 <__aeabi_d2f>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	669a      	str	r2, [r3, #104]	; 0x68

	//Convert to Degrees
	d->Roll   = d->Roll_Rad * RADIANSTODEGREES;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001aa8:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 8001a20 <MPU_CalculateFromRAWData+0x588>
 8001aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	d->Pitch  = d->Pitch_Rad * RADIANSTODEGREES;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001abc:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 8001a20 <MPU_CalculateFromRAWData+0x588>
 8001ac0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	d->Angle_Gyro_Yaw   = d->Angle_Gyro_Yaw_Rad * RADIANSTODEGREES;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001ad0:	ed1f 7a2d 	vldr	s14, [pc, #-180]	; 8001a20 <MPU_CalculateFromRAWData+0x588>
 8001ad4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
}
 8001ade:	bf00      	nop
 8001ae0:	3730      	adds	r7, #48	; 0x30
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ae8 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001af4:	887a      	ldrh	r2, [r7, #2]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60da      	str	r2, [r3, #12]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	b29b      	uxth	r3, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	887b      	ldrh	r3, [r7, #2]
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
 8001b40:	e001      	b.n	8001b46 <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b5a:	463b      	mov	r3, r7
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	605a      	str	r2, [r3, #4]
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_ADC1_Init+0x98>)
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <MX_ADC1_Init+0x9c>)
 8001b6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_ADC1_Init+0x98>)
 8001b6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_ADC1_Init+0x98>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_ADC1_Init+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_ADC1_Init+0x98>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_ADC1_Init+0x98>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_ADC1_Init+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <MX_ADC1_Init+0x98>)
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <MX_ADC1_Init+0xa0>)
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b9a:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_ADC1_Init+0x98>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <MX_ADC1_Init+0x98>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <MX_ADC1_Init+0x98>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <MX_ADC1_Init+0x98>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bb4:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_ADC1_Init+0x98>)
 8001bb6:	f003 fcdd 	bl	8005574 <HAL_ADC_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001bc0:	f001 f9f0 	bl	8002fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <MX_ADC1_Init+0x98>)
 8001bd6:	f003 fe49 	bl	800586c <HAL_ADC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001be0:	f001 f9e0 	bl	8002fa4 <Error_Handler>
  }

}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000025c 	.word	0x2000025c
 8001bf0:	40012000 	.word	0x40012000
 8001bf4:	0f000001 	.word	0x0f000001

08001bf8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a17      	ldr	r2, [pc, #92]	; (8001c74 <HAL_ADC_MspInit+0x7c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d127      	bne.n	8001c6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_ADC_MspInit+0x80>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <HAL_ADC_MspInit+0x80>)
 8001c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_ADC_MspInit+0x80>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_ADC_MspInit+0x80>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <HAL_ADC_MspInit+0x80>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <HAL_ADC_MspInit+0x80>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c52:	2301      	movs	r3, #1
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c56:	2303      	movs	r3, #3
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <HAL_ADC_MspInit+0x84>)
 8001c66:	f004 fb3d 	bl	80062e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40012000 	.word	0x40012000
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000

08001c80 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a3b      	ldr	r2, [pc, #236]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a34      	ldr	r2, [pc, #208]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a2d      	ldr	r2, [pc, #180]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <MX_GPIO_Init+0x128>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0c:	4827      	ldr	r0, [pc, #156]	; (8001dac <MX_GPIO_Init+0x12c>)
 8001d0e:	f004 fc6b 	bl	80065e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CSN_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	f248 0110 	movw	r1, #32784	; 0x8010
 8001d18:	4825      	ldr	r0, [pc, #148]	; (8001db0 <MX_GPIO_Init+0x130>)
 8001d1a:	f004 fc65 	bl	80065e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d24:	4823      	ldr	r0, [pc, #140]	; (8001db4 <MX_GPIO_Init+0x134>)
 8001d26:	f004 fc5f 	bl	80065e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	4619      	mov	r1, r3
 8001d42:	481a      	ldr	r0, [pc, #104]	; (8001dac <MX_GPIO_Init+0x12c>)
 8001d44:	f004 face 	bl	80062e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GYRO_CSN_Pin|NRF24_CSN_Pin;
 8001d48:	f248 0310 	movw	r3, #32784	; 0x8010
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4813      	ldr	r0, [pc, #76]	; (8001db0 <MX_GPIO_Init+0x130>)
 8001d62:	f004 fabf 	bl	80062e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <MX_GPIO_Init+0x134>)
 8001d80:	f004 fab0 	bl	80062e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001d92:	f107 0314 	add.w	r3, r7, #20
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_GPIO_Init+0x130>)
 8001d9a:	f004 faa3 	bl	80062e4 <HAL_GPIO_Init>

}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	40020400 	.word	0x40020400

08001db8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dbe:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <MX_I2C1_Init+0x54>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dc4:	4a12      	ldr	r2, [pc, #72]	; (8001e10 <MX_I2C1_Init+0x58>)
 8001dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <MX_I2C1_Init+0x50>)
 8001df6:	f004 fc2b 	bl	8006650 <HAL_I2C_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e00:	f001 f8d0 	bl	8002fa4 <Error_Handler>
  }

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200002a4 	.word	0x200002a4
 8001e0c:	40005400 	.word	0x40005400
 8001e10:	000186a0 	.word	0x000186a0

08001e14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a19      	ldr	r2, [pc, #100]	; (8001e98 <HAL_I2C_MspInit+0x84>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12c      	bne.n	8001e90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e58:	2312      	movs	r3, #18
 8001e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e64:	2304      	movs	r3, #4
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <HAL_I2C_MspInit+0x8c>)
 8001e70:	f004 fa38 	bl	80062e4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e82:	6413      	str	r3, [r2, #64]	; 0x40
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_I2C_MspInit+0x88>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40005400 	.word	0x40005400
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020400 	.word	0x40020400

08001ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eac:	f003 face 	bl	800544c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eb0:	f000 fd50 	bl	8002954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eb4:	f7ff fee4 	bl	8001c80 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001eb8:	f003 f96a 	bl	8005190 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001ebc:	f7ff fe4a 	bl	8001b54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001ec0:	f7ff ff7a 	bl	8001db8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001ec4:	f001 fc30 	bl	8003728 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ec8:	f001 fc64 	bl	8003794 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001ecc:	f001 fc98 	bl	8003800 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001ed0:	f003 f898 	bl	8005004 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001ed4:	f003 fa1e 	bl	8005314 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8001ed8:	4832      	ldr	r0, [pc, #200]	; (8001fa4 <main+0x100>)
 8001eda:	f003 fb8f 	bl	80055fc <HAL_ADC_Start>

  //DEFAULT FLASH CONSTANTS--------------------------------------------------------------------------
  FlashDataDefault.controlData=CONTROLWORD;
 8001ede:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <main+0x104>)
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	601a      	str	r2, [r3, #0]
  FlashDataDefault.pid_p_gain_pitch=3.0;
 8001ee4:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <main+0x104>)
 8001ee6:	4a31      	ldr	r2, [pc, #196]	; (8001fac <main+0x108>)
 8001ee8:	605a      	str	r2, [r3, #4]
  FlashDataDefault.pid_i_gain_pitch=0.0;
 8001eea:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <main+0x104>)
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  FlashDataDefault.pid_d_gain_pitch=400.0;
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <main+0x104>)
 8001ef4:	4a2e      	ldr	r2, [pc, #184]	; (8001fb0 <main+0x10c>)
 8001ef6:	60da      	str	r2, [r3, #12]
  FlashDataDefault.pid_p_gain_roll=3.0;
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <main+0x104>)
 8001efa:	4a2c      	ldr	r2, [pc, #176]	; (8001fac <main+0x108>)
 8001efc:	611a      	str	r2, [r3, #16]
  FlashDataDefault.pid_i_gain_roll=0.0;
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <main+0x104>)
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
  FlashDataDefault.pid_d_gain_roll=400.0;
 8001f06:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <main+0x104>)
 8001f08:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <main+0x10c>)
 8001f0a:	619a      	str	r2, [r3, #24]
  FlashDataDefault.pid_p_gain_yaw=3.0;
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <main+0x104>)
 8001f0e:	4a27      	ldr	r2, [pc, #156]	; (8001fac <main+0x108>)
 8001f10:	61da      	str	r2, [r3, #28]
  FlashDataDefault.pid_i_gain_yaw=0.0;
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <main+0x104>)
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	621a      	str	r2, [r3, #32]
  FlashDataDefault.pid_d_gain_yaw=0.0;
 8001f1a:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <main+0x104>)
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
  FlashDataDefault.pid_max_pitch = 400;
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <main+0x104>)
 8001f24:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f28:	629a      	str	r2, [r3, #40]	; 0x28
  FlashDataDefault.pid_i_max_pitch = 100;
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <main+0x104>)
 8001f2c:	2264      	movs	r2, #100	; 0x64
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  FlashDataDefault.pid_max_roll = 400;
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <main+0x104>)
 8001f32:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
  FlashDataDefault.pid_i_max_roll = 100;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <main+0x104>)
 8001f3a:	2264      	movs	r2, #100	; 0x64
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
  FlashDataDefault.pid_max_yaw = 0; //no yaw
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <main+0x104>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	639a      	str	r2, [r3, #56]	; 0x38
  FlashDataDefault.pid_i_max_yaw = 100;
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <main+0x104>)
 8001f46:	2264      	movs	r2, #100	; 0x64
 8001f48:	63da      	str	r2, [r3, #60]	; 0x3c
  FlashDataDefault.maxpitchdegree=20; //degrees
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <main+0x104>)
 8001f4c:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <main+0x110>)
 8001f4e:	641a      	str	r2, [r3, #64]	; 0x40
  FlashDataDefault.maxrolldegree=20;  //degrees
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <main+0x104>)
 8001f52:	4a18      	ldr	r2, [pc, #96]	; (8001fb4 <main+0x110>)
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
  FlashDataDefault.maxyawdegree=30;  //degrees per second rotation
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <main+0x104>)
 8001f58:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <main+0x114>)
 8001f5a:	649a      	str	r2, [r3, #72]	; 0x48
  FlashDataDefault.minthrottle=80;    //80counts of 1000 to spin rotors
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <main+0x104>)
 8001f5e:	4a17      	ldr	r2, [pc, #92]	; (8001fbc <main+0x118>)
 8001f60:	64da      	str	r2, [r3, #76]	; 0x4c
  FlashDataDefault.maxthrottle=800;   //800counts of 1000 (80%)
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <main+0x104>)
 8001f64:	4a16      	ldr	r2, [pc, #88]	; (8001fc0 <main+0x11c>)
 8001f66:	651a      	str	r2, [r3, #80]	; 0x50


  if( CheckFlashData(FLASHCONSTADDR) == CONTROLWORD ) //Check if any Data is present
 8001f68:	4816      	ldr	r0, [pc, #88]	; (8001fc4 <main+0x120>)
 8001f6a:	f000 fef5 	bl	8002d58 <CheckFlashData>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b07      	cmp	r3, #7
 8001f72:	d131      	bne.n	8001fd8 <main+0x134>
  {
	  //Read Data and Save parameters into ACTIVE structure
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 8001f74:	4914      	ldr	r1, [pc, #80]	; (8001fc8 <main+0x124>)
 8001f76:	4813      	ldr	r0, [pc, #76]	; (8001fc4 <main+0x120>)
 8001f78:	f000 fefa 	bl	8002d70 <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 8001f7c:	4913      	ldr	r1, [pc, #76]	; (8001fcc <main+0x128>)
 8001f7e:	4811      	ldr	r0, [pc, #68]	; (8001fc4 <main+0x120>)
 8001f80:	f000 fef6 	bl	8002d70 <ReadFlashData>

	  sprintf(UartTXbuff0,"Flash Data OK \n\r" );
 8001f84:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <main+0x12c>)
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <main+0x130>)
 8001f88:	4615      	mov	r5, r2
 8001f8a:	461c      	mov	r4, r3
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	6028      	str	r0, [r5, #0]
 8001f90:	6069      	str	r1, [r5, #4]
 8001f92:	60aa      	str	r2, [r5, #8]
 8001f94:	60eb      	str	r3, [r5, #12]
 8001f96:	7823      	ldrb	r3, [r4, #0]
 8001f98:	742b      	strb	r3, [r5, #16]
	  WriteString(UartTXbuff0);
 8001f9a:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <main+0x12c>)
 8001f9c:	f000 ffce 	bl	8002f3c <WriteString>
 8001fa0:	e039      	b.n	8002016 <main+0x172>
 8001fa2:	bf00      	nop
 8001fa4:	2000025c 	.word	0x2000025c
 8001fa8:	200003b4 	.word	0x200003b4
 8001fac:	40400000 	.word	0x40400000
 8001fb0:	43c80000 	.word	0x43c80000
 8001fb4:	41a00000 	.word	0x41a00000
 8001fb8:	41f00000 	.word	0x41f00000
 8001fbc:	42a00000 	.word	0x42a00000
 8001fc0:	44480000 	.word	0x44480000
 8001fc4:	08020000 	.word	0x08020000
 8001fc8:	200004b8 	.word	0x200004b8
 8001fcc:	20000510 	.word	0x20000510
 8001fd0:	20000418 	.word	0x20000418
 8001fd4:	0800cca0 	.word	0x0800cca0

  }
  else
  {
	  //Write default values into Flash, Read back data into Active Structure
	  WriteFlashData(FLASHCONSTADDR,FLASHCONSTSECTOR, &FlashDataDefault);
 8001fd8:	4ac0      	ldr	r2, [pc, #768]	; (80022dc <main+0x438>)
 8001fda:	2105      	movs	r1, #5
 8001fdc:	48c0      	ldr	r0, [pc, #768]	; (80022e0 <main+0x43c>)
 8001fde:	f000 fd23 	bl	8002a28 <WriteFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 8001fe2:	49c0      	ldr	r1, [pc, #768]	; (80022e4 <main+0x440>)
 8001fe4:	48be      	ldr	r0, [pc, #760]	; (80022e0 <main+0x43c>)
 8001fe6:	f000 fec3 	bl	8002d70 <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 8001fea:	49bf      	ldr	r1, [pc, #764]	; (80022e8 <main+0x444>)
 8001fec:	48bc      	ldr	r0, [pc, #752]	; (80022e0 <main+0x43c>)
 8001fee:	f000 febf 	bl	8002d70 <ReadFlashData>

	  sprintf(UartTXbuff0,"Flash Default Data Written \n\r" );
 8001ff2:	4abe      	ldr	r2, [pc, #760]	; (80022ec <main+0x448>)
 8001ff4:	4bbe      	ldr	r3, [pc, #760]	; (80022f0 <main+0x44c>)
 8001ff6:	4615      	mov	r5, r2
 8001ff8:	461c      	mov	r4, r3
 8001ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffc:	6028      	str	r0, [r5, #0]
 8001ffe:	6069      	str	r1, [r5, #4]
 8002000:	60aa      	str	r2, [r5, #8]
 8002002:	60eb      	str	r3, [r5, #12]
 8002004:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002006:	6128      	str	r0, [r5, #16]
 8002008:	6169      	str	r1, [r5, #20]
 800200a:	61aa      	str	r2, [r5, #24]
 800200c:	8823      	ldrh	r3, [r4, #0]
 800200e:	83ab      	strh	r3, [r5, #28]
	  WriteString(UartTXbuff0);
 8002010:	48b6      	ldr	r0, [pc, #728]	; (80022ec <main+0x448>)
 8002012:	f000 ff93 	bl	8002f3c <WriteString>
  }//------------------------------------------------------------------------------------------------------

  //Gyro Init
  MPU9250_Init();
 8002016:	f7ff f8bf 	bl	8001198 <MPU9250_Init>

  HAL_Delay(400);//wait for stable power
 800201a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800201e:	f003 fa87 	bl	8005530 <HAL_Delay>

  //NRF24 INIT-----------------------------------
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 8002022:	4bb4      	ldr	r3, [pc, #720]	; (80022f4 <main+0x450>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4ab3      	ldr	r2, [pc, #716]	; (80022f4 <main+0x450>)
 8002028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202c:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002034:	48b0      	ldr	r0, [pc, #704]	; (80022f8 <main+0x454>)
 8002036:	f004 fad7 	bl	80065e8 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 800203a:	f001 f941 	bl	80032c0 <nRF24_Check>
 800203e:	4603      	mov	r3, r0
 8002040:	461a      	mov	r2, r3
 8002042:	4bae      	ldr	r3, [pc, #696]	; (80022fc <main+0x458>)
 8002044:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 8002046:	f001 f8e9 	bl	800321c <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 800204a:	20ff      	movs	r0, #255	; 0xff
 800204c:	f001 faca 	bl	80035e4 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 8002050:	200f      	movs	r0, #15
 8002052:	f001 f9c4 	bl	80033de <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 8002056:	2020      	movs	r0, #32
 8002058:	f001 fa55 	bl	8003506 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 800205c:	2008      	movs	r0, #8
 800205e:	f001 f99d 	bl	800339c <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 8002062:	2003      	movs	r0, #3
 8002064:	f001 f9c9 	bl	80033fa <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 8002068:	49a5      	ldr	r1, [pc, #660]	; (8002300 <main+0x45c>)
 800206a:	2001      	movs	r0, #1
 800206c:	f001 f9d6 	bl	800341c <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 8); // Auto-ACK: disabled
 8002070:	2208      	movs	r2, #8
 8002072:	2100      	movs	r1, #0
 8002074:	2001      	movs	r0, #1
 8002076:	f001 fa61 	bl	800353c <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 800207a:	49a1      	ldr	r1, [pc, #644]	; (8002300 <main+0x45c>)
 800207c:	2006      	movs	r0, #6
 800207e:	f001 f9cd 	bl	800341c <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_18dBm);
 8002082:	2000      	movs	r0, #0
 8002084:	f001 fa24 	bl	80034d0 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 8002088:	2001      	movs	r0, #1
 800208a:	f001 f966 	bl	800335a <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 800208e:	f001 faf3 	bl	8003678 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 8002092:	2002      	movs	r0, #2
 8002094:	f001 f942 	bl	800331c <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209e:	4896      	ldr	r0, [pc, #600]	; (80022f8 <main+0x454>)
 80020a0:	f004 faa2 	bl	80065e8 <HAL_GPIO_WritePin>


  HAL_Delay(5000);//wait to connect battery
 80020a4:	f241 3088 	movw	r0, #5000	; 0x1388
 80020a8:	f003 fa42 	bl	8005530 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80020ac:	2100      	movs	r1, #0
 80020ae:	4895      	ldr	r0, [pc, #596]	; (8002304 <main+0x460>)
 80020b0:	f005 fe1a 	bl	8007ce8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80020b4:	2104      	movs	r1, #4
 80020b6:	4893      	ldr	r0, [pc, #588]	; (8002304 <main+0x460>)
 80020b8:	f005 fe16 	bl	8007ce8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80020bc:	2108      	movs	r1, #8
 80020be:	4891      	ldr	r0, [pc, #580]	; (8002304 <main+0x460>)
 80020c0:	f005 fe12 	bl	8007ce8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80020c4:	210c      	movs	r1, #12
 80020c6:	488f      	ldr	r0, [pc, #572]	; (8002304 <main+0x460>)
 80020c8:	f005 fe0e 	bl	8007ce8 <HAL_TIM_PWM_Start>

  //Get Gyro offset--------------------------------------
  GyroCalibStatus=1;
 80020cc:	4b8e      	ldr	r3, [pc, #568]	; (8002308 <main+0x464>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]
  //GetGyroOffset(&hi2c2, &mpu6050DataStr, GYROCALIBVALUES, 1);
  GyroCalibStatus=0;
 80020d2:	4b8d      	ldr	r3, [pc, #564]	; (8002308 <main+0x464>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

  MotorStatus=MOTOROFF;
 80020d8:	4b8c      	ldr	r3, [pc, #560]	; (800230c <main+0x468>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 80020de:	488c      	ldr	r0, [pc, #560]	; (8002310 <main+0x46c>)
 80020e0:	f005 fda9 	bl	8007c36 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	  //own function is used for UART TX, very basic function for direct Register write one char at the time
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 ); //removed ->missing bytes on occasion

	  HAL_Delay(100);
 80020e4:	2064      	movs	r0, #100	; 0x64
 80020e6:	f003 fa23 	bl	8005530 <HAL_Delay>

	  sprintf(UartTXbuff0,T_HIDE_CUR);
 80020ea:	4b80      	ldr	r3, [pc, #512]	; (80022ec <main+0x448>)
 80020ec:	4a89      	ldr	r2, [pc, #548]	; (8002314 <main+0x470>)
 80020ee:	6810      	ldr	r0, [r2, #0]
 80020f0:	6018      	str	r0, [r3, #0]
 80020f2:	8891      	ldrh	r1, [r2, #4]
 80020f4:	7992      	ldrb	r2, [r2, #6]
 80020f6:	8099      	strh	r1, [r3, #4]
 80020f8:	719a      	strb	r2, [r3, #6]
	  WriteString(UartTXbuff0);
 80020fa:	487c      	ldr	r0, [pc, #496]	; (80022ec <main+0x448>)
 80020fc:	f000 ff1e 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0,T_GO_TO,1,1); //Go to start Screen
 8002100:	2301      	movs	r3, #1
 8002102:	2201      	movs	r2, #1
 8002104:	4984      	ldr	r1, [pc, #528]	; (8002318 <main+0x474>)
 8002106:	4879      	ldr	r0, [pc, #484]	; (80022ec <main+0x448>)
 8002108:	f007 fcdc 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 800210c:	4877      	ldr	r0, [pc, #476]	; (80022ec <main+0x448>)
 800210e:	f000 ff15 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <main+0x448>)
 8002114:	4a81      	ldr	r2, [pc, #516]	; (800231c <main+0x478>)
 8002116:	6810      	ldr	r0, [r2, #0]
 8002118:	6018      	str	r0, [r3, #0]
 800211a:	7912      	ldrb	r2, [r2, #4]
 800211c:	711a      	strb	r2, [r3, #4]
	  WriteString(UartTXbuff0);
 800211e:	4873      	ldr	r0, [pc, #460]	; (80022ec <main+0x448>)
 8002120:	f000 ff0c 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Motor Status %u \n\r",MotorStatus);
 8002124:	4b79      	ldr	r3, [pc, #484]	; (800230c <main+0x468>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	497d      	ldr	r1, [pc, #500]	; (8002320 <main+0x47c>)
 800212c:	486f      	ldr	r0, [pc, #444]	; (80022ec <main+0x448>)
 800212e:	f007 fcc9 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002132:	486e      	ldr	r0, [pc, #440]	; (80022ec <main+0x448>)
 8002134:	f000 ff02 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 8002138:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <main+0x480>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fa0b 	bl	8000558 <__aeabi_f2d>
 8002142:	4603      	mov	r3, r0
 8002144:	460c      	mov	r4, r1
 8002146:	461a      	mov	r2, r3
 8002148:	4623      	mov	r3, r4
 800214a:	4977      	ldr	r1, [pc, #476]	; (8002328 <main+0x484>)
 800214c:	4867      	ldr	r0, [pc, #412]	; (80022ec <main+0x448>)
 800214e:	f007 fcb9 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002152:	4866      	ldr	r0, [pc, #408]	; (80022ec <main+0x448>)
 8002154:	f000 fef2 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "PitchIN %.2f \n\r",PitchINscaled);
 8002158:	4b74      	ldr	r3, [pc, #464]	; (800232c <main+0x488>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe f9fb 	bl	8000558 <__aeabi_f2d>
 8002162:	4603      	mov	r3, r0
 8002164:	460c      	mov	r4, r1
 8002166:	461a      	mov	r2, r3
 8002168:	4623      	mov	r3, r4
 800216a:	4971      	ldr	r1, [pc, #452]	; (8002330 <main+0x48c>)
 800216c:	485f      	ldr	r0, [pc, #380]	; (80022ec <main+0x448>)
 800216e:	f007 fca9 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002172:	485e      	ldr	r0, [pc, #376]	; (80022ec <main+0x448>)
 8002174:	f000 fee2 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "RollIN %.2f \n\r",RollINscaled);
 8002178:	4b6e      	ldr	r3, [pc, #440]	; (8002334 <main+0x490>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f9eb 	bl	8000558 <__aeabi_f2d>
 8002182:	4603      	mov	r3, r0
 8002184:	460c      	mov	r4, r1
 8002186:	461a      	mov	r2, r3
 8002188:	4623      	mov	r3, r4
 800218a:	496b      	ldr	r1, [pc, #428]	; (8002338 <main+0x494>)
 800218c:	4857      	ldr	r0, [pc, #348]	; (80022ec <main+0x448>)
 800218e:	f007 fc99 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002192:	4856      	ldr	r0, [pc, #344]	; (80022ec <main+0x448>)
 8002194:	f000 fed2 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "YawIN %.2f \n\r",YawINscaled);
 8002198:	4b68      	ldr	r3, [pc, #416]	; (800233c <main+0x498>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe f9db 	bl	8000558 <__aeabi_f2d>
 80021a2:	4603      	mov	r3, r0
 80021a4:	460c      	mov	r4, r1
 80021a6:	461a      	mov	r2, r3
 80021a8:	4623      	mov	r3, r4
 80021aa:	4965      	ldr	r1, [pc, #404]	; (8002340 <main+0x49c>)
 80021ac:	484f      	ldr	r0, [pc, #316]	; (80022ec <main+0x448>)
 80021ae:	f007 fc89 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80021b2:	484e      	ldr	r0, [pc, #312]	; (80022ec <main+0x448>)
 80021b4:	f000 fec2 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 80021b8:	4b4c      	ldr	r3, [pc, #304]	; (80022ec <main+0x448>)
 80021ba:	4a62      	ldr	r2, [pc, #392]	; (8002344 <main+0x4a0>)
 80021bc:	8811      	ldrh	r1, [r2, #0]
 80021be:	7892      	ldrb	r2, [r2, #2]
 80021c0:	8019      	strh	r1, [r3, #0]
 80021c2:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 80021c4:	4849      	ldr	r0, [pc, #292]	; (80022ec <main+0x448>)
 80021c6:	f000 feb9 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Pitch=%.2f deg\n\r",mpuDataStr.Pitch);
 80021ca:	4b5f      	ldr	r3, [pc, #380]	; (8002348 <main+0x4a4>)
 80021cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9c2 	bl	8000558 <__aeabi_f2d>
 80021d4:	4603      	mov	r3, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	461a      	mov	r2, r3
 80021da:	4623      	mov	r3, r4
 80021dc:	495b      	ldr	r1, [pc, #364]	; (800234c <main+0x4a8>)
 80021de:	4843      	ldr	r0, [pc, #268]	; (80022ec <main+0x448>)
 80021e0:	f007 fc70 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80021e4:	4841      	ldr	r0, [pc, #260]	; (80022ec <main+0x448>)
 80021e6:	f000 fea9 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Roll=%.2f deg\n\r",mpuDataStr.Roll);
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <main+0x4a4>)
 80021ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe f9b2 	bl	8000558 <__aeabi_f2d>
 80021f4:	4603      	mov	r3, r0
 80021f6:	460c      	mov	r4, r1
 80021f8:	461a      	mov	r2, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	4954      	ldr	r1, [pc, #336]	; (8002350 <main+0x4ac>)
 80021fe:	483b      	ldr	r0, [pc, #236]	; (80022ec <main+0x448>)
 8002200:	f007 fc60 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002204:	4839      	ldr	r0, [pc, #228]	; (80022ec <main+0x448>)
 8002206:	f000 fe99 	bl	8002f3c <WriteString>
	  //WriteString(UartTXbuff0);

	  //sprintf(UartTXbuff0, "Gyro Roll=%.2f deg\n\r",mpuDataStr.Angle_Gyro_Roll);
	  //WriteString(UartTXbuff0);

	  sprintf(UartTXbuff0, "Yaw-Gyro=%.2f deg\n\r",mpuDataStr.Angle_Gyro_Yaw);
 800220a:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <main+0x4a4>)
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f9a2 	bl	8000558 <__aeabi_f2d>
 8002214:	4603      	mov	r3, r0
 8002216:	460c      	mov	r4, r1
 8002218:	461a      	mov	r2, r3
 800221a:	4623      	mov	r3, r4
 800221c:	494d      	ldr	r1, [pc, #308]	; (8002354 <main+0x4b0>)
 800221e:	4833      	ldr	r0, [pc, #204]	; (80022ec <main+0x448>)
 8002220:	f007 fc50 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002224:	4831      	ldr	r0, [pc, #196]	; (80022ec <main+0x448>)
 8002226:	f000 fe89 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 800222a:	4b30      	ldr	r3, [pc, #192]	; (80022ec <main+0x448>)
 800222c:	4a45      	ldr	r2, [pc, #276]	; (8002344 <main+0x4a0>)
 800222e:	8811      	ldrh	r1, [r2, #0]
 8002230:	7892      	ldrb	r2, [r2, #2]
 8002232:	8019      	strh	r1, [r3, #0]
 8002234:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8002236:	482d      	ldr	r0, [pc, #180]	; (80022ec <main+0x448>)
 8002238:	f000 fe80 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Accel Pitch=%.2f deg\n\r",mpuDataStr.Angle_Accel_Pitch);
 800223c:	4b42      	ldr	r3, [pc, #264]	; (8002348 <main+0x4a4>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f989 	bl	8000558 <__aeabi_f2d>
 8002246:	4603      	mov	r3, r0
 8002248:	460c      	mov	r4, r1
 800224a:	461a      	mov	r2, r3
 800224c:	4623      	mov	r3, r4
 800224e:	4942      	ldr	r1, [pc, #264]	; (8002358 <main+0x4b4>)
 8002250:	4826      	ldr	r0, [pc, #152]	; (80022ec <main+0x448>)
 8002252:	f007 fc37 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002256:	4825      	ldr	r0, [pc, #148]	; (80022ec <main+0x448>)
 8002258:	f000 fe70 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Accel Roll=%.2f deg\n\r",mpuDataStr.Angle_Accel_Roll);
 800225c:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <main+0x4a4>)
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f979 	bl	8000558 <__aeabi_f2d>
 8002266:	4603      	mov	r3, r0
 8002268:	460c      	mov	r4, r1
 800226a:	461a      	mov	r2, r3
 800226c:	4623      	mov	r3, r4
 800226e:	493b      	ldr	r1, [pc, #236]	; (800235c <main+0x4b8>)
 8002270:	481e      	ldr	r0, [pc, #120]	; (80022ec <main+0x448>)
 8002272:	f007 fc27 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002276:	481d      	ldr	r0, [pc, #116]	; (80022ec <main+0x448>)
 8002278:	f000 fe60 	bl	8002f3c <WriteString>
	  //WriteString(UartTXbuff0);

	  //sprintf(UartTXbuff0, "Gyro Z speed=%.2f deg/s\n\r",mpuDataStr.AngleSpeed_Gyro_Z);
	  //WriteString(UartTXbuff0);

	  sprintf(UartTXbuff0, "\n\r" );
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <main+0x448>)
 800227e:	4a31      	ldr	r2, [pc, #196]	; (8002344 <main+0x4a0>)
 8002280:	8811      	ldrh	r1, [r2, #0]
 8002282:	7892      	ldrb	r2, [r2, #2]
 8002284:	8019      	strh	r1, [r3, #0]
 8002286:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8002288:	4818      	ldr	r0, [pc, #96]	; (80022ec <main+0x448>)
 800228a:	f000 fe57 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Acc Raw %d %d %d \n\r",mpuDataStr.Accelerometer_X_RAW,mpuDataStr.Accelerometer_Y_RAW,mpuDataStr.Accelerometer_Z_RAW);
 800228e:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <main+0x4a4>)
 8002290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002294:	461a      	mov	r2, r3
 8002296:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <main+0x4a4>)
 8002298:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800229c:	4619      	mov	r1, r3
 800229e:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <main+0x4a4>)
 80022a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	460b      	mov	r3, r1
 80022a8:	492d      	ldr	r1, [pc, #180]	; (8002360 <main+0x4bc>)
 80022aa:	4810      	ldr	r0, [pc, #64]	; (80022ec <main+0x448>)
 80022ac:	f007 fc0a 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80022b0:	480e      	ldr	r0, [pc, #56]	; (80022ec <main+0x448>)
 80022b2:	f000 fe43 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Gyro Raw %d %d %d \n\r",mpuDataStr.Gyroscope_X_RAW,mpuDataStr.Gyroscope_Y_RAW,mpuDataStr.Gyroscope_Z_RAW);
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <main+0x4a4>)
 80022b8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b22      	ldr	r3, [pc, #136]	; (8002348 <main+0x4a4>)
 80022c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80022c4:	4619      	mov	r1, r3
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <main+0x4a4>)
 80022c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	460b      	mov	r3, r1
 80022d0:	4924      	ldr	r1, [pc, #144]	; (8002364 <main+0x4c0>)
 80022d2:	4806      	ldr	r0, [pc, #24]	; (80022ec <main+0x448>)
 80022d4:	f007 fbf6 	bl	8009ac4 <siprintf>
 80022d8:	e046      	b.n	8002368 <main+0x4c4>
 80022da:	bf00      	nop
 80022dc:	200003b4 	.word	0x200003b4
 80022e0:	08020000 	.word	0x08020000
 80022e4:	200004b8 	.word	0x200004b8
 80022e8:	20000510 	.word	0x20000510
 80022ec:	20000418 	.word	0x20000418
 80022f0:	0800ccb4 	.word	0x0800ccb4
 80022f4:	40003800 	.word	0x40003800
 80022f8:	40020400 	.word	0x40020400
 80022fc:	20000410 	.word	0x20000410
 8002300:	0800d000 	.word	0x0800d000
 8002304:	20000840 	.word	0x20000840
 8002308:	20000220 	.word	0x20000220
 800230c:	2000021c 	.word	0x2000021c
 8002310:	20000880 	.word	0x20000880
 8002314:	0800ccd4 	.word	0x0800ccd4
 8002318:	0800ccdc 	.word	0x0800ccdc
 800231c:	0800cce8 	.word	0x0800cce8
 8002320:	0800ccf0 	.word	0x0800ccf0
 8002324:	20000688 	.word	0x20000688
 8002328:	0800cd04 	.word	0x0800cd04
 800232c:	200007a0 	.word	0x200007a0
 8002330:	0800cd18 	.word	0x0800cd18
 8002334:	2000079c 	.word	0x2000079c
 8002338:	0800cd28 	.word	0x0800cd28
 800233c:	200006a0 	.word	0x200006a0
 8002340:	0800cd38 	.word	0x0800cd38
 8002344:	0800cd48 	.word	0x0800cd48
 8002348:	20000324 	.word	0x20000324
 800234c:	0800cd4c 	.word	0x0800cd4c
 8002350:	0800cd60 	.word	0x0800cd60
 8002354:	0800cd70 	.word	0x0800cd70
 8002358:	0800cd84 	.word	0x0800cd84
 800235c:	0800cd9c 	.word	0x0800cd9c
 8002360:	0800cdb4 	.word	0x0800cdb4
 8002364:	0800cdc8 	.word	0x0800cdc8
	  WriteString(UartTXbuff0);
 8002368:	48a7      	ldr	r0, [pc, #668]	; (8002608 <main+0x764>)
 800236a:	f000 fde7 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Gyro Offset %.1f %.1f %.1f \n\r",mpuDataStr.Offset_Gyro_X,mpuDataStr.Offset_Gyro_Y,mpuDataStr.Offset_Gyro_Z);
 800236e:	4ba7      	ldr	r3, [pc, #668]	; (800260c <main+0x768>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8f0 	bl	8000558 <__aeabi_f2d>
 8002378:	4680      	mov	r8, r0
 800237a:	4689      	mov	r9, r1
 800237c:	4ba3      	ldr	r3, [pc, #652]	; (800260c <main+0x768>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8e9 	bl	8000558 <__aeabi_f2d>
 8002386:	4604      	mov	r4, r0
 8002388:	460d      	mov	r5, r1
 800238a:	4ba0      	ldr	r3, [pc, #640]	; (800260c <main+0x768>)
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8e2 	bl	8000558 <__aeabi_f2d>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800239c:	e9cd 4500 	strd	r4, r5, [sp]
 80023a0:	4642      	mov	r2, r8
 80023a2:	464b      	mov	r3, r9
 80023a4:	499a      	ldr	r1, [pc, #616]	; (8002610 <main+0x76c>)
 80023a6:	4898      	ldr	r0, [pc, #608]	; (8002608 <main+0x764>)
 80023a8:	f007 fb8c 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80023ac:	4896      	ldr	r0, [pc, #600]	; (8002608 <main+0x764>)
 80023ae:	f000 fdc5 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Gyro Cal %.1f %.1f %.1f \n\r",mpuDataStr.Gyroscope_X_Cal,mpuDataStr.Gyroscope_Y_Cal,mpuDataStr.Gyroscope_Z_Cal);
 80023b2:	4b96      	ldr	r3, [pc, #600]	; (800260c <main+0x768>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8ce 	bl	8000558 <__aeabi_f2d>
 80023bc:	4680      	mov	r8, r0
 80023be:	4689      	mov	r9, r1
 80023c0:	4b92      	ldr	r3, [pc, #584]	; (800260c <main+0x768>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe f8c7 	bl	8000558 <__aeabi_f2d>
 80023ca:	4604      	mov	r4, r0
 80023cc:	460d      	mov	r5, r1
 80023ce:	4b8f      	ldr	r3, [pc, #572]	; (800260c <main+0x768>)
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f8c0 	bl	8000558 <__aeabi_f2d>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023e0:	e9cd 4500 	strd	r4, r5, [sp]
 80023e4:	4642      	mov	r2, r8
 80023e6:	464b      	mov	r3, r9
 80023e8:	498a      	ldr	r1, [pc, #552]	; (8002614 <main+0x770>)
 80023ea:	4887      	ldr	r0, [pc, #540]	; (8002608 <main+0x764>)
 80023ec:	f007 fb6a 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80023f0:	4885      	ldr	r0, [pc, #532]	; (8002608 <main+0x764>)
 80023f2:	f000 fda3 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 80023f6:	4b84      	ldr	r3, [pc, #528]	; (8002608 <main+0x764>)
 80023f8:	4a87      	ldr	r2, [pc, #540]	; (8002618 <main+0x774>)
 80023fa:	8811      	ldrh	r1, [r2, #0]
 80023fc:	7892      	ldrb	r2, [r2, #2]
 80023fe:	8019      	strh	r1, [r3, #0]
 8002400:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8002402:	4881      	ldr	r0, [pc, #516]	; (8002608 <main+0x764>)
 8002404:	f000 fd9a 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "PWM 1:%u  2:%u  3:%u  4:%u   \n\r",PWM_Mot1,PWM_Mot2,PWM_Mot3,PWM_Mot4);
 8002408:	4b84      	ldr	r3, [pc, #528]	; (800261c <main+0x778>)
 800240a:	6819      	ldr	r1, [r3, #0]
 800240c:	4b84      	ldr	r3, [pc, #528]	; (8002620 <main+0x77c>)
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	4b84      	ldr	r3, [pc, #528]	; (8002624 <main+0x780>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a84      	ldr	r2, [pc, #528]	; (8002628 <main+0x784>)
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	9201      	str	r2, [sp, #4]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	4603      	mov	r3, r0
 800241e:	460a      	mov	r2, r1
 8002420:	4982      	ldr	r1, [pc, #520]	; (800262c <main+0x788>)
 8002422:	4879      	ldr	r0, [pc, #484]	; (8002608 <main+0x764>)
 8002424:	f007 fb4e 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002428:	4877      	ldr	r0, [pc, #476]	; (8002608 <main+0x764>)
 800242a:	f000 fd87 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Toggle %d %d %d %d %d %d  ",togg1,togg2,togg3,togg4,togg5,togg6);
 800242e:	4b80      	ldr	r3, [pc, #512]	; (8002630 <main+0x78c>)
 8002430:	681c      	ldr	r4, [r3, #0]
 8002432:	4b80      	ldr	r3, [pc, #512]	; (8002634 <main+0x790>)
 8002434:	681d      	ldr	r5, [r3, #0]
 8002436:	4b80      	ldr	r3, [pc, #512]	; (8002638 <main+0x794>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a80      	ldr	r2, [pc, #512]	; (800263c <main+0x798>)
 800243c:	6812      	ldr	r2, [r2, #0]
 800243e:	4980      	ldr	r1, [pc, #512]	; (8002640 <main+0x79c>)
 8002440:	6809      	ldr	r1, [r1, #0]
 8002442:	4880      	ldr	r0, [pc, #512]	; (8002644 <main+0x7a0>)
 8002444:	6800      	ldr	r0, [r0, #0]
 8002446:	9003      	str	r0, [sp, #12]
 8002448:	9102      	str	r1, [sp, #8]
 800244a:	9201      	str	r2, [sp, #4]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	462b      	mov	r3, r5
 8002450:	4622      	mov	r2, r4
 8002452:	497d      	ldr	r1, [pc, #500]	; (8002648 <main+0x7a4>)
 8002454:	486c      	ldr	r0, [pc, #432]	; (8002608 <main+0x764>)
 8002456:	f007 fb35 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 800245a:	486b      	ldr	r0, [pc, #428]	; (8002608 <main+0x764>)
 800245c:	f000 fd6e 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Potenc %d %d  ",potenc1,potenc2);
 8002460:	4b7a      	ldr	r3, [pc, #488]	; (800264c <main+0x7a8>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b7a      	ldr	r3, [pc, #488]	; (8002650 <main+0x7ac>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	497a      	ldr	r1, [pc, #488]	; (8002654 <main+0x7b0>)
 800246a:	4867      	ldr	r0, [pc, #412]	; (8002608 <main+0x764>)
 800246c:	f007 fb2a 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002470:	4865      	ldr	r0, [pc, #404]	; (8002608 <main+0x764>)
 8002472:	f000 fd63 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "YL %d %d  YD %d %d \n\r",Ljoyupdown, Ljoyleftright, Djoyupdown, Djoyleftright);
 8002476:	4b78      	ldr	r3, [pc, #480]	; (8002658 <main+0x7b4>)
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	4b78      	ldr	r3, [pc, #480]	; (800265c <main+0x7b8>)
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	4b78      	ldr	r3, [pc, #480]	; (8002660 <main+0x7bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a78      	ldr	r2, [pc, #480]	; (8002664 <main+0x7c0>)
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	9201      	str	r2, [sp, #4]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4603      	mov	r3, r0
 800248c:	460a      	mov	r2, r1
 800248e:	4976      	ldr	r1, [pc, #472]	; (8002668 <main+0x7c4>)
 8002490:	485d      	ldr	r0, [pc, #372]	; (8002608 <main+0x764>)
 8002492:	f007 fb17 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002496:	485c      	ldr	r0, [pc, #368]	; (8002608 <main+0x764>)
 8002498:	f000 fd50 	bl	8002f3c <WriteString>

	  //ACTIVE PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Active  \n\r" );
 800249c:	4a5a      	ldr	r2, [pc, #360]	; (8002608 <main+0x764>)
 800249e:	4b73      	ldr	r3, [pc, #460]	; (800266c <main+0x7c8>)
 80024a0:	4615      	mov	r5, r2
 80024a2:	461c      	mov	r4, r3
 80024a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a6:	6028      	str	r0, [r5, #0]
 80024a8:	6069      	str	r1, [r5, #4]
 80024aa:	60aa      	str	r2, [r5, #8]
 80024ac:	60eb      	str	r3, [r5, #12]
 80024ae:	cc03      	ldmia	r4!, {r0, r1}
 80024b0:	6128      	str	r0, [r5, #16]
 80024b2:	6169      	str	r1, [r5, #20]
 80024b4:	8823      	ldrh	r3, [r4, #0]
 80024b6:	78a2      	ldrb	r2, [r4, #2]
 80024b8:	832b      	strh	r3, [r5, #24]
 80024ba:	4613      	mov	r3, r2
 80024bc:	76ab      	strb	r3, [r5, #26]
	  WriteString(UartTXbuff0);
 80024be:	4852      	ldr	r0, [pc, #328]	; (8002608 <main+0x764>)
 80024c0:	f000 fd3c 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch);
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <main+0x7cc>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f845 	bl	8000558 <__aeabi_f2d>
 80024ce:	4680      	mov	r8, r0
 80024d0:	4689      	mov	r9, r1
 80024d2:	4b67      	ldr	r3, [pc, #412]	; (8002670 <main+0x7cc>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f83e 	bl	8000558 <__aeabi_f2d>
 80024dc:	4604      	mov	r4, r0
 80024de:	460d      	mov	r5, r1
 80024e0:	4b63      	ldr	r3, [pc, #396]	; (8002670 <main+0x7cc>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f837 	bl	8000558 <__aeabi_f2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80024f2:	e9cd 4500 	strd	r4, r5, [sp]
 80024f6:	4642      	mov	r2, r8
 80024f8:	464b      	mov	r3, r9
 80024fa:	495e      	ldr	r1, [pc, #376]	; (8002674 <main+0x7d0>)
 80024fc:	4842      	ldr	r0, [pc, #264]	; (8002608 <main+0x764>)
 80024fe:	f007 fae1 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002502:	4841      	ldr	r0, [pc, #260]	; (8002608 <main+0x764>)
 8002504:	f000 fd1a 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll);
 8002508:	4b59      	ldr	r3, [pc, #356]	; (8002670 <main+0x7cc>)
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f823 	bl	8000558 <__aeabi_f2d>
 8002512:	4680      	mov	r8, r0
 8002514:	4689      	mov	r9, r1
 8002516:	4b56      	ldr	r3, [pc, #344]	; (8002670 <main+0x7cc>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f81c 	bl	8000558 <__aeabi_f2d>
 8002520:	4604      	mov	r4, r0
 8002522:	460d      	mov	r5, r1
 8002524:	4b52      	ldr	r3, [pc, #328]	; (8002670 <main+0x7cc>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe f815 	bl	8000558 <__aeabi_f2d>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002536:	e9cd 4500 	strd	r4, r5, [sp]
 800253a:	4642      	mov	r2, r8
 800253c:	464b      	mov	r3, r9
 800253e:	494e      	ldr	r1, [pc, #312]	; (8002678 <main+0x7d4>)
 8002540:	4831      	ldr	r0, [pc, #196]	; (8002608 <main+0x764>)
 8002542:	f007 fabf 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002546:	4830      	ldr	r0, [pc, #192]	; (8002608 <main+0x764>)
 8002548:	f000 fcf8 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw);
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <main+0x7cc>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe f801 	bl	8000558 <__aeabi_f2d>
 8002556:	4680      	mov	r8, r0
 8002558:	4689      	mov	r9, r1
 800255a:	4b45      	ldr	r3, [pc, #276]	; (8002670 <main+0x7cc>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd fffa 	bl	8000558 <__aeabi_f2d>
 8002564:	4604      	mov	r4, r0
 8002566:	460d      	mov	r5, r1
 8002568:	4b41      	ldr	r3, [pc, #260]	; (8002670 <main+0x7cc>)
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd fff3 	bl	8000558 <__aeabi_f2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800257a:	e9cd 4500 	strd	r4, r5, [sp]
 800257e:	4642      	mov	r2, r8
 8002580:	464b      	mov	r3, r9
 8002582:	493e      	ldr	r1, [pc, #248]	; (800267c <main+0x7d8>)
 8002584:	4820      	ldr	r0, [pc, #128]	; (8002608 <main+0x764>)
 8002586:	f007 fa9d 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 800258a:	481f      	ldr	r0, [pc, #124]	; (8002608 <main+0x764>)
 800258c:	f000 fcd6 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataActive.pid_max_pitch, FlashDataActive.pid_i_max_pitch);
 8002590:	4b37      	ldr	r3, [pc, #220]	; (8002670 <main+0x7cc>)
 8002592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <main+0x7cc>)
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	4939      	ldr	r1, [pc, #228]	; (8002680 <main+0x7dc>)
 800259a:	481b      	ldr	r0, [pc, #108]	; (8002608 <main+0x764>)
 800259c:	f007 fa92 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80025a0:	4819      	ldr	r0, [pc, #100]	; (8002608 <main+0x764>)
 80025a2:	f000 fccb 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataActive.pid_max_roll, FlashDataActive.pid_i_max_roll);
 80025a6:	4b32      	ldr	r3, [pc, #200]	; (8002670 <main+0x7cc>)
 80025a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025aa:	4b31      	ldr	r3, [pc, #196]	; (8002670 <main+0x7cc>)
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ae:	4935      	ldr	r1, [pc, #212]	; (8002684 <main+0x7e0>)
 80025b0:	4815      	ldr	r0, [pc, #84]	; (8002608 <main+0x764>)
 80025b2:	f007 fa87 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80025b6:	4814      	ldr	r0, [pc, #80]	; (8002608 <main+0x764>)
 80025b8:	f000 fcc0 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataActive.pid_max_yaw, FlashDataActive.pid_i_max_yaw);
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <main+0x7cc>)
 80025be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <main+0x7cc>)
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	4930      	ldr	r1, [pc, #192]	; (8002688 <main+0x7e4>)
 80025c6:	4810      	ldr	r0, [pc, #64]	; (8002608 <main+0x764>)
 80025c8:	f007 fa7c 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80025cc:	480e      	ldr	r0, [pc, #56]	; (8002608 <main+0x764>)
 80025ce:	f000 fcb5 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataActive.maxpitchdegree);
 80025d2:	4b27      	ldr	r3, [pc, #156]	; (8002670 <main+0x7cc>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffbe 	bl	8000558 <__aeabi_f2d>
 80025dc:	4603      	mov	r3, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	461a      	mov	r2, r3
 80025e2:	4623      	mov	r3, r4
 80025e4:	4929      	ldr	r1, [pc, #164]	; (800268c <main+0x7e8>)
 80025e6:	4808      	ldr	r0, [pc, #32]	; (8002608 <main+0x764>)
 80025e8:	f007 fa6c 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80025ec:	4806      	ldr	r0, [pc, #24]	; (8002608 <main+0x764>)
 80025ee:	f000 fca5 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataActive.maxrolldegree);
 80025f2:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <main+0x7cc>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ffae 	bl	8000558 <__aeabi_f2d>
 80025fc:	4603      	mov	r3, r0
 80025fe:	460c      	mov	r4, r1
 8002600:	461a      	mov	r2, r3
 8002602:	4623      	mov	r3, r4
 8002604:	e044      	b.n	8002690 <main+0x7ec>
 8002606:	bf00      	nop
 8002608:	20000418 	.word	0x20000418
 800260c:	20000324 	.word	0x20000324
 8002610:	0800cde0 	.word	0x0800cde0
 8002614:	0800ce00 	.word	0x0800ce00
 8002618:	0800cd48 	.word	0x0800cd48
 800261c:	200007b0 	.word	0x200007b0
 8002620:	2000068c 	.word	0x2000068c
 8002624:	20000680 	.word	0x20000680
 8002628:	2000077c 	.word	0x2000077c
 800262c:	0800ce1c 	.word	0x0800ce1c
 8002630:	200004a8 	.word	0x200004a8
 8002634:	2000056c 	.word	0x2000056c
 8002638:	200002fc 	.word	0x200002fc
 800263c:	200004b4 	.word	0x200004b4
 8002640:	2000047c 	.word	0x2000047c
 8002644:	20000300 	.word	0x20000300
 8002648:	0800ce3c 	.word	0x0800ce3c
 800264c:	2000050c 	.word	0x2000050c
 8002650:	20000568 	.word	0x20000568
 8002654:	0800ce58 	.word	0x0800ce58
 8002658:	200004ac 	.word	0x200004ac
 800265c:	200004a0 	.word	0x200004a0
 8002660:	20000564 	.word	0x20000564
 8002664:	200002f8 	.word	0x200002f8
 8002668:	0800ce68 	.word	0x0800ce68
 800266c:	0800ce80 	.word	0x0800ce80
 8002670:	200004b8 	.word	0x200004b8
 8002674:	0800ce9c 	.word	0x0800ce9c
 8002678:	0800cebc 	.word	0x0800cebc
 800267c:	0800cedc 	.word	0x0800cedc
 8002680:	0800cef8 	.word	0x0800cef8
 8002684:	0800cf14 	.word	0x0800cf14
 8002688:	0800cf2c 	.word	0x0800cf2c
 800268c:	0800cf44 	.word	0x0800cf44
 8002690:	499a      	ldr	r1, [pc, #616]	; (80028fc <main+0xa58>)
 8002692:	489b      	ldr	r0, [pc, #620]	; (8002900 <main+0xa5c>)
 8002694:	f007 fa16 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002698:	4899      	ldr	r0, [pc, #612]	; (8002900 <main+0xa5c>)
 800269a:	f000 fc4f 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataActive.maxyawdegree);
 800269e:	4b99      	ldr	r3, [pc, #612]	; (8002904 <main+0xa60>)
 80026a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff58 	bl	8000558 <__aeabi_f2d>
 80026a8:	4603      	mov	r3, r0
 80026aa:	460c      	mov	r4, r1
 80026ac:	461a      	mov	r2, r3
 80026ae:	4623      	mov	r3, r4
 80026b0:	4995      	ldr	r1, [pc, #596]	; (8002908 <main+0xa64>)
 80026b2:	4893      	ldr	r0, [pc, #588]	; (8002900 <main+0xa5c>)
 80026b4:	f007 fa06 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80026b8:	4891      	ldr	r0, [pc, #580]	; (8002900 <main+0xa5c>)
 80026ba:	f000 fc3f 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataActive.maxthrottle, FlashDataActive.minthrottle);
 80026be:	4b91      	ldr	r3, [pc, #580]	; (8002904 <main+0xa60>)
 80026c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fd ff48 	bl	8000558 <__aeabi_f2d>
 80026c8:	4605      	mov	r5, r0
 80026ca:	460e      	mov	r6, r1
 80026cc:	4b8d      	ldr	r3, [pc, #564]	; (8002904 <main+0xa60>)
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff41 	bl	8000558 <__aeabi_f2d>
 80026d6:	4603      	mov	r3, r0
 80026d8:	460c      	mov	r4, r1
 80026da:	e9cd 3400 	strd	r3, r4, [sp]
 80026de:	462a      	mov	r2, r5
 80026e0:	4633      	mov	r3, r6
 80026e2:	498a      	ldr	r1, [pc, #552]	; (800290c <main+0xa68>)
 80026e4:	4886      	ldr	r0, [pc, #536]	; (8002900 <main+0xa5c>)
 80026e6:	f007 f9ed 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80026ea:	4885      	ldr	r0, [pc, #532]	; (8002900 <main+0xa5c>)
 80026ec:	f000 fc26 	bl	8002f3c <WriteString>


	  //FLASH PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Flash  \n\r" );
 80026f0:	4a83      	ldr	r2, [pc, #524]	; (8002900 <main+0xa5c>)
 80026f2:	4b87      	ldr	r3, [pc, #540]	; (8002910 <main+0xa6c>)
 80026f4:	4615      	mov	r5, r2
 80026f6:	461c      	mov	r4, r3
 80026f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026fa:	6028      	str	r0, [r5, #0]
 80026fc:	6069      	str	r1, [r5, #4]
 80026fe:	60aa      	str	r2, [r5, #8]
 8002700:	60eb      	str	r3, [r5, #12]
 8002702:	cc03      	ldmia	r4!, {r0, r1}
 8002704:	6128      	str	r0, [r5, #16]
 8002706:	6169      	str	r1, [r5, #20]
 8002708:	8823      	ldrh	r3, [r4, #0]
 800270a:	832b      	strh	r3, [r5, #24]
	  WriteString(UartTXbuff0);
 800270c:	487c      	ldr	r0, [pc, #496]	; (8002900 <main+0xa5c>)
 800270e:	f000 fc15 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_pitch, FlashDataFlash.pid_i_gain_pitch, FlashDataFlash.pid_d_gain_pitch);
 8002712:	4b80      	ldr	r3, [pc, #512]	; (8002914 <main+0xa70>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff1e 	bl	8000558 <__aeabi_f2d>
 800271c:	4680      	mov	r8, r0
 800271e:	4689      	mov	r9, r1
 8002720:	4b7c      	ldr	r3, [pc, #496]	; (8002914 <main+0xa70>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd ff17 	bl	8000558 <__aeabi_f2d>
 800272a:	4604      	mov	r4, r0
 800272c:	460d      	mov	r5, r1
 800272e:	4b79      	ldr	r3, [pc, #484]	; (8002914 <main+0xa70>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff10 	bl	8000558 <__aeabi_f2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002740:	e9cd 4500 	strd	r4, r5, [sp]
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	4973      	ldr	r1, [pc, #460]	; (8002918 <main+0xa74>)
 800274a:	486d      	ldr	r0, [pc, #436]	; (8002900 <main+0xa5c>)
 800274c:	f007 f9ba 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002750:	486b      	ldr	r0, [pc, #428]	; (8002900 <main+0xa5c>)
 8002752:	f000 fbf3 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_roll, FlashDataFlash.pid_i_gain_roll, FlashDataFlash.pid_d_gain_roll);
 8002756:	4b6f      	ldr	r3, [pc, #444]	; (8002914 <main+0xa70>)
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	4618      	mov	r0, r3
 800275c:	f7fd fefc 	bl	8000558 <__aeabi_f2d>
 8002760:	4680      	mov	r8, r0
 8002762:	4689      	mov	r9, r1
 8002764:	4b6b      	ldr	r3, [pc, #428]	; (8002914 <main+0xa70>)
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fef5 	bl	8000558 <__aeabi_f2d>
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	4b68      	ldr	r3, [pc, #416]	; (8002914 <main+0xa70>)
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd feee 	bl	8000558 <__aeabi_f2d>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002784:	e9cd 4500 	strd	r4, r5, [sp]
 8002788:	4642      	mov	r2, r8
 800278a:	464b      	mov	r3, r9
 800278c:	4963      	ldr	r1, [pc, #396]	; (800291c <main+0xa78>)
 800278e:	485c      	ldr	r0, [pc, #368]	; (8002900 <main+0xa5c>)
 8002790:	f007 f998 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002794:	485a      	ldr	r0, [pc, #360]	; (8002900 <main+0xa5c>)
 8002796:	f000 fbd1 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_yaw, FlashDataFlash.pid_i_gain_yaw, FlashDataFlash.pid_d_gain_yaw);
 800279a:	4b5e      	ldr	r3, [pc, #376]	; (8002914 <main+0xa70>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd feda 	bl	8000558 <__aeabi_f2d>
 80027a4:	4680      	mov	r8, r0
 80027a6:	4689      	mov	r9, r1
 80027a8:	4b5a      	ldr	r3, [pc, #360]	; (8002914 <main+0xa70>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fd fed3 	bl	8000558 <__aeabi_f2d>
 80027b2:	4604      	mov	r4, r0
 80027b4:	460d      	mov	r5, r1
 80027b6:	4b57      	ldr	r3, [pc, #348]	; (8002914 <main+0xa70>)
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fecc 	bl	8000558 <__aeabi_f2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80027c8:	e9cd 4500 	strd	r4, r5, [sp]
 80027cc:	4642      	mov	r2, r8
 80027ce:	464b      	mov	r3, r9
 80027d0:	4953      	ldr	r1, [pc, #332]	; (8002920 <main+0xa7c>)
 80027d2:	484b      	ldr	r0, [pc, #300]	; (8002900 <main+0xa5c>)
 80027d4:	f007 f976 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80027d8:	4849      	ldr	r0, [pc, #292]	; (8002900 <main+0xa5c>)
 80027da:	f000 fbaf 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataFlash.pid_max_pitch, FlashDataFlash.pid_i_max_pitch);
 80027de:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <main+0xa70>)
 80027e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e2:	4b4c      	ldr	r3, [pc, #304]	; (8002914 <main+0xa70>)
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	494f      	ldr	r1, [pc, #316]	; (8002924 <main+0xa80>)
 80027e8:	4845      	ldr	r0, [pc, #276]	; (8002900 <main+0xa5c>)
 80027ea:	f007 f96b 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80027ee:	4844      	ldr	r0, [pc, #272]	; (8002900 <main+0xa5c>)
 80027f0:	f000 fba4 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataFlash.pid_max_roll, FlashDataFlash.pid_i_max_roll);
 80027f4:	4b47      	ldr	r3, [pc, #284]	; (8002914 <main+0xa70>)
 80027f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027f8:	4b46      	ldr	r3, [pc, #280]	; (8002914 <main+0xa70>)
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	494a      	ldr	r1, [pc, #296]	; (8002928 <main+0xa84>)
 80027fe:	4840      	ldr	r0, [pc, #256]	; (8002900 <main+0xa5c>)
 8002800:	f007 f960 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 8002804:	483e      	ldr	r0, [pc, #248]	; (8002900 <main+0xa5c>)
 8002806:	f000 fb99 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataFlash.pid_max_yaw, FlashDataFlash.pid_i_max_yaw);
 800280a:	4b42      	ldr	r3, [pc, #264]	; (8002914 <main+0xa70>)
 800280c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <main+0xa70>)
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	4946      	ldr	r1, [pc, #280]	; (800292c <main+0xa88>)
 8002814:	483a      	ldr	r0, [pc, #232]	; (8002900 <main+0xa5c>)
 8002816:	f007 f955 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 800281a:	4839      	ldr	r0, [pc, #228]	; (8002900 <main+0xa5c>)
 800281c:	f000 fb8e 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataFlash.maxpitchdegree);
 8002820:	4b3c      	ldr	r3, [pc, #240]	; (8002914 <main+0xa70>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd fe97 	bl	8000558 <__aeabi_f2d>
 800282a:	4603      	mov	r3, r0
 800282c:	460c      	mov	r4, r1
 800282e:	461a      	mov	r2, r3
 8002830:	4623      	mov	r3, r4
 8002832:	493f      	ldr	r1, [pc, #252]	; (8002930 <main+0xa8c>)
 8002834:	4832      	ldr	r0, [pc, #200]	; (8002900 <main+0xa5c>)
 8002836:	f007 f945 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 800283a:	4831      	ldr	r0, [pc, #196]	; (8002900 <main+0xa5c>)
 800283c:	f000 fb7e 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataFlash.maxrolldegree);
 8002840:	4b34      	ldr	r3, [pc, #208]	; (8002914 <main+0xa70>)
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fe87 	bl	8000558 <__aeabi_f2d>
 800284a:	4603      	mov	r3, r0
 800284c:	460c      	mov	r4, r1
 800284e:	461a      	mov	r2, r3
 8002850:	4623      	mov	r3, r4
 8002852:	492a      	ldr	r1, [pc, #168]	; (80028fc <main+0xa58>)
 8002854:	482a      	ldr	r0, [pc, #168]	; (8002900 <main+0xa5c>)
 8002856:	f007 f935 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 800285a:	4829      	ldr	r0, [pc, #164]	; (8002900 <main+0xa5c>)
 800285c:	f000 fb6e 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataFlash.maxyawdegree);
 8002860:	4b2c      	ldr	r3, [pc, #176]	; (8002914 <main+0xa70>)
 8002862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002864:	4618      	mov	r0, r3
 8002866:	f7fd fe77 	bl	8000558 <__aeabi_f2d>
 800286a:	4603      	mov	r3, r0
 800286c:	460c      	mov	r4, r1
 800286e:	461a      	mov	r2, r3
 8002870:	4623      	mov	r3, r4
 8002872:	4925      	ldr	r1, [pc, #148]	; (8002908 <main+0xa64>)
 8002874:	4822      	ldr	r0, [pc, #136]	; (8002900 <main+0xa5c>)
 8002876:	f007 f925 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 800287a:	4821      	ldr	r0, [pc, #132]	; (8002900 <main+0xa5c>)
 800287c:	f000 fb5e 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataFlash.maxthrottle, FlashDataFlash.minthrottle);
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <main+0xa70>)
 8002882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fe67 	bl	8000558 <__aeabi_f2d>
 800288a:	4605      	mov	r5, r0
 800288c:	460e      	mov	r6, r1
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <main+0xa70>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe60 	bl	8000558 <__aeabi_f2d>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	e9cd 3400 	strd	r3, r4, [sp]
 80028a0:	462a      	mov	r2, r5
 80028a2:	4633      	mov	r3, r6
 80028a4:	4919      	ldr	r1, [pc, #100]	; (800290c <main+0xa68>)
 80028a6:	4816      	ldr	r0, [pc, #88]	; (8002900 <main+0xa5c>)
 80028a8:	f007 f90c 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80028ac:	4814      	ldr	r0, [pc, #80]	; (8002900 <main+0xa5c>)
 80028ae:	f000 fb45 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 80028b2:	4b13      	ldr	r3, [pc, #76]	; (8002900 <main+0xa5c>)
 80028b4:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <main+0xa90>)
 80028b6:	8811      	ldrh	r1, [r2, #0]
 80028b8:	7892      	ldrb	r2, [r2, #2]
 80028ba:	8019      	strh	r1, [r3, #0]
 80028bc:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 80028be:	4810      	ldr	r0, [pc, #64]	; (8002900 <main+0xa5c>)
 80028c0:	f000 fb3c 	bl	8002f3c <WriteString>

	  sprintf(UartTXbuff0, "watch %d %d %d %d %d %d\n\r",watch1,watch2,watch3,watch4,watch5,watch6);
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <main+0xa94>)
 80028c6:	681c      	ldr	r4, [r3, #0]
 80028c8:	4b1c      	ldr	r3, [pc, #112]	; (800293c <main+0xa98>)
 80028ca:	681d      	ldr	r5, [r3, #0]
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <main+0xa9c>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <main+0xaa0>)
 80028d2:	6812      	ldr	r2, [r2, #0]
 80028d4:	491c      	ldr	r1, [pc, #112]	; (8002948 <main+0xaa4>)
 80028d6:	6809      	ldr	r1, [r1, #0]
 80028d8:	481c      	ldr	r0, [pc, #112]	; (800294c <main+0xaa8>)
 80028da:	6800      	ldr	r0, [r0, #0]
 80028dc:	9003      	str	r0, [sp, #12]
 80028de:	9102      	str	r1, [sp, #8]
 80028e0:	9201      	str	r2, [sp, #4]
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	462b      	mov	r3, r5
 80028e6:	4622      	mov	r2, r4
 80028e8:	4919      	ldr	r1, [pc, #100]	; (8002950 <main+0xaac>)
 80028ea:	4805      	ldr	r0, [pc, #20]	; (8002900 <main+0xa5c>)
 80028ec:	f007 f8ea 	bl	8009ac4 <siprintf>
	  WriteString(UartTXbuff0);
 80028f0:	4803      	ldr	r0, [pc, #12]	; (8002900 <main+0xa5c>)
 80028f2:	f000 fb23 	bl	8002f3c <WriteString>
	  HAL_Delay(100);
 80028f6:	f7ff bbf5 	b.w	80020e4 <main+0x240>
 80028fa:	bf00      	nop
 80028fc:	0800cf60 	.word	0x0800cf60
 8002900:	20000418 	.word	0x20000418
 8002904:	200004b8 	.word	0x200004b8
 8002908:	0800cf78 	.word	0x0800cf78
 800290c:	0800cf90 	.word	0x0800cf90
 8002910:	0800cfb0 	.word	0x0800cfb0
 8002914:	20000510 	.word	0x20000510
 8002918:	0800ce9c 	.word	0x0800ce9c
 800291c:	0800cebc 	.word	0x0800cebc
 8002920:	0800cedc 	.word	0x0800cedc
 8002924:	0800cef8 	.word	0x0800cef8
 8002928:	0800cf14 	.word	0x0800cf14
 800292c:	0800cf2c 	.word	0x0800cf2c
 8002930:	0800cf44 	.word	0x0800cf44
 8002934:	0800cd48 	.word	0x0800cd48
 8002938:	20000414 	.word	0x20000414
 800293c:	20000408 	.word	0x20000408
 8002940:	200004b0 	.word	0x200004b0
 8002944:	2000040c 	.word	0x2000040c
 8002948:	20000570 	.word	0x20000570
 800294c:	200004a4 	.word	0x200004a4
 8002950:	0800cfcc 	.word	0x0800cfcc

08002954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b094      	sub	sp, #80	; 0x50
 8002958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800295a:	f107 0320 	add.w	r3, r7, #32
 800295e:	2230      	movs	r2, #48	; 0x30
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f006 fc49 	bl	80091fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002968:	f107 030c 	add.w	r3, r7, #12
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <SystemClock_Config+0xcc>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	4a27      	ldr	r2, [pc, #156]	; (8002a20 <SystemClock_Config+0xcc>)
 8002982:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002986:	6413      	str	r3, [r2, #64]	; 0x40
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <SystemClock_Config+0xcc>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	60bb      	str	r3, [r7, #8]
 8002992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002994:	2300      	movs	r3, #0
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <SystemClock_Config+0xd0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029a0:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <SystemClock_Config+0xd0>)
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <SystemClock_Config+0xd0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029b0:	607b      	str	r3, [r7, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029b4:	2301      	movs	r3, #1
 80029b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029be:	2302      	movs	r3, #2
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80029c8:	2319      	movs	r3, #25
 80029ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80029cc:	23a8      	movs	r3, #168	; 0xa8
 80029ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029d0:	2302      	movs	r3, #2
 80029d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029d4:	2304      	movs	r3, #4
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029d8:	f107 0320 	add.w	r3, r7, #32
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 ff6f 	bl	80068c0 <HAL_RCC_OscConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80029e8:	f000 fadc 	bl	8002fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ec:	230f      	movs	r3, #15
 80029ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029f0:	2302      	movs	r3, #2
 80029f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f004 f9c9 	bl	8006da0 <HAL_RCC_ClockConfig>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002a14:	f000 fac6 	bl	8002fa4 <Error_Handler>
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3750      	adds	r7, #80	; 0x50
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40007000 	.word	0x40007000

08002a28 <WriteFlashData>:

/* USER CODE BEGIN 4 */

//Write Data into Flash starting from given address------------------------------------------------------------------
void WriteFlashData(uint32_t StartAddr, uint32_t Sectornumb, struct FlashDatastruct *p)
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
	HAL_FLASH_Unlock();
 8002a34:	f003 fa9e 	bl	8005f74 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(Sectornumb, FLASH_VOLTAGE_RANGE_3);
 8002a38:	2102      	movs	r1, #2
 8002a3a:	68b8      	ldr	r0, [r7, #8]
 8002a3c:	f003 fc0a 	bl	8006254 <FLASH_Erase_Sector>

	sprintf(UartTXbuff0,"Flash Erased \n\r");
 8002a40:	4aba      	ldr	r2, [pc, #744]	; (8002d2c <WriteFlashData+0x304>)
 8002a42:	4bbb      	ldr	r3, [pc, #748]	; (8002d30 <WriteFlashData+0x308>)
 8002a44:	4614      	mov	r4, r2
 8002a46:	461d      	mov	r5, r3
 8002a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a4a:	6020      	str	r0, [r4, #0]
 8002a4c:	6061      	str	r1, [r4, #4]
 8002a4e:	60a2      	str	r2, [r4, #8]
 8002a50:	60e3      	str	r3, [r4, #12]
	WriteString(UartTXbuff0);
 8002a52:	48b6      	ldr	r0, [pc, #728]	; (8002d2c <WriteFlashData+0x304>)
 8002a54:	f000 fa72 	bl	8002f3c <WriteString>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr, p->controlData);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f04f 0400 	mov.w	r4, #0
 8002a60:	461a      	mov	r2, r3
 8002a62:	4623      	mov	r3, r4
 8002a64:	68f9      	ldr	r1, [r7, #12]
 8002a66:	2002      	movs	r0, #2
 8002a68:	f003 fa30 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+4, (uint32_t) ( p->pid_p_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1d19      	adds	r1, r3, #4
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a76:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8002d34 <WriteFlashData+0x30c>
 8002a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a82:	ee17 3a90 	vmov	r3, s15
 8002a86:	f04f 0400 	mov.w	r4, #0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4623      	mov	r3, r4
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f003 fa1c 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+8, (uint32_t) ( p->pid_i_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f103 0108 	add.w	r1, r3, #8
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002aa0:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002d34 <WriteFlashData+0x30c>
 8002aa4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aac:	ee17 3a90 	vmov	r3, s15
 8002ab0:	f04f 0400 	mov.w	r4, #0
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4623      	mov	r3, r4
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f003 fa07 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+12,(uint32_t) ( p->pid_d_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f103 010c 	add.w	r1, r3, #12
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002aca:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8002d34 <WriteFlashData+0x30c>
 8002ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ad6:	ee17 3a90 	vmov	r3, s15
 8002ada:	f04f 0400 	mov.w	r4, #0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4623      	mov	r3, r4
 8002ae2:	2002      	movs	r0, #2
 8002ae4:	f003 f9f2 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+16,(uint32_t) ( p->pid_p_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f103 0110 	add.w	r1, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002af4:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8002d34 <WriteFlashData+0x30c>
 8002af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b00:	ee17 3a90 	vmov	r3, s15
 8002b04:	f04f 0400 	mov.w	r4, #0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	2002      	movs	r0, #2
 8002b0e:	f003 f9dd 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+20,(uint32_t) ( p->pid_i_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f103 0114 	add.w	r1, r3, #20
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b1e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8002d34 <WriteFlashData+0x30c>
 8002b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b2a:	ee17 3a90 	vmov	r3, s15
 8002b2e:	f04f 0400 	mov.w	r4, #0
 8002b32:	461a      	mov	r2, r3
 8002b34:	4623      	mov	r3, r4
 8002b36:	2002      	movs	r0, #2
 8002b38:	f003 f9c8 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+24,(uint32_t) ( p->pid_d_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f103 0118 	add.w	r1, r3, #24
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b48:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002d34 <WriteFlashData+0x30c>
 8002b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b54:	ee17 3a90 	vmov	r3, s15
 8002b58:	f04f 0400 	mov.w	r4, #0
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4623      	mov	r3, r4
 8002b60:	2002      	movs	r0, #2
 8002b62:	f003 f9b3 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+28,(uint32_t) ( p->pid_p_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f103 011c 	add.w	r1, r3, #28
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b72:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8002d34 <WriteFlashData+0x30c>
 8002b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b7e:	ee17 3a90 	vmov	r3, s15
 8002b82:	f04f 0400 	mov.w	r4, #0
 8002b86:	461a      	mov	r2, r3
 8002b88:	4623      	mov	r3, r4
 8002b8a:	2002      	movs	r0, #2
 8002b8c:	f003 f99e 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+32,(uint32_t) ( p->pid_i_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f103 0120 	add.w	r1, r3, #32
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	edd3 7a08 	vldr	s15, [r3, #32]
 8002b9c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002d34 <WriteFlashData+0x30c>
 8002ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ba8:	ee17 3a90 	vmov	r3, s15
 8002bac:	f04f 0400 	mov.w	r4, #0
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4623      	mov	r3, r4
 8002bb4:	2002      	movs	r0, #2
 8002bb6:	f003 f989 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+36,(uint32_t) ( p->pid_d_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002bc6:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8002d34 <WriteFlashData+0x30c>
 8002bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd2:	ee17 3a90 	vmov	r3, s15
 8002bd6:	f04f 0400 	mov.w	r4, #0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4623      	mov	r3, r4
 8002bde:	2002      	movs	r0, #2
 8002be0:	f003 f974 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+40, p->pid_max_pitch);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f003 f968 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+44, p->pid_i_max_pitch);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4623      	mov	r3, r4
 8002c0e:	2002      	movs	r0, #2
 8002c10:	f003 f95c 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+48, p->pid_max_roll);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002c22:	461a      	mov	r2, r3
 8002c24:	4623      	mov	r3, r4
 8002c26:	2002      	movs	r0, #2
 8002c28:	f003 f950 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+52, p->pid_i_max_roll);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	2002      	movs	r0, #2
 8002c40:	f003 f944 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+56, p->pid_max_yaw);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002c52:	461a      	mov	r2, r3
 8002c54:	4623      	mov	r3, r4
 8002c56:	2002      	movs	r0, #2
 8002c58:	f003 f938 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+60, p->pid_i_max_yaw);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c66:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4623      	mov	r3, r4
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f003 f92c 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+64,(uint32_t)(p->maxpitchdegree) );
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c84:	ee17 3a90 	vmov	r3, s15
 8002c88:	f04f 0400 	mov.w	r4, #0
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4623      	mov	r3, r4
 8002c90:	2002      	movs	r0, #2
 8002c92:	f003 f91b 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+68,(uint32_t)(p->maxrolldegree) );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca6:	ee17 3a90 	vmov	r3, s15
 8002caa:	f04f 0400 	mov.w	r4, #0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4623      	mov	r3, r4
 8002cb2:	2002      	movs	r0, #2
 8002cb4:	f003 f90a 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+72,(uint32_t)(p->maxyawdegree) );
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc8:	ee17 3a90 	vmov	r3, s15
 8002ccc:	f04f 0400 	mov.w	r4, #0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f003 f8f9 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+76,(uint32_t)(p->minthrottle) );
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002ce6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cea:	ee17 3a90 	vmov	r3, s15
 8002cee:	f04f 0400 	mov.w	r4, #0
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4623      	mov	r3, r4
 8002cf6:	2002      	movs	r0, #2
 8002cf8:	f003 f8e8 	bl	8005ecc <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+80,(uint32_t)(p->maxthrottle) );
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0c:	ee17 3a90 	vmov	r3, s15
 8002d10:	f04f 0400 	mov.w	r4, #0
 8002d14:	461a      	mov	r2, r3
 8002d16:	4623      	mov	r3, r4
 8002d18:	2002      	movs	r0, #2
 8002d1a:	f003 f8d7 	bl	8005ecc <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8002d1e:	f003 f94b 	bl	8005fb8 <HAL_FLASH_Lock>
}
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000418 	.word	0x20000418
 8002d30:	0800cfe8 	.word	0x0800cfe8
 8002d34:	47c35000 	.word	0x47c35000

08002d38 <EraseFlashData>:

void EraseFlashData(uint32_t Sectornumb)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8002d40:	f003 f918 	bl	8005f74 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(Sectornumb, FLASH_VOLTAGE_RANGE_3);
 8002d44:	2102      	movs	r1, #2
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f003 fa84 	bl	8006254 <FLASH_Erase_Sector>

	HAL_FLASH_Lock();
 8002d4c:	f003 f934 	bl	8005fb8 <HAL_FLASH_Lock>
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <CheckFlashData>:


//Check if Data on given address matches control word
uint32_t CheckFlashData(uint32_t StartAddr)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
	return *(( uint32_t *) (StartAddr) );
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <ReadFlashData>:

//Read Data from Flash
void ReadFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
	p->controlData= *(( uint32_t *) (StartAddr) );
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	601a      	str	r2, [r3, #0]
	p->pid_p_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+4) )) )/FLASHCONSTANTMULTIPLIER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3304      	adds	r3, #4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d90:	eddf 6a69 	vldr	s13, [pc, #420]	; 8002f38 <ReadFlashData+0x1c8>
 8002d94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	edc3 7a01 	vstr	s15, [r3, #4]
	p->pid_i_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+8) )) )/FLASHCONSTANTMULTIPLIER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3308      	adds	r3, #8
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dac:	eddf 6a62 	vldr	s13, [pc, #392]	; 8002f38 <ReadFlashData+0x1c8>
 8002db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	edc3 7a02 	vstr	s15, [r3, #8]
	p->pid_d_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+12) )) )/FLASHCONSTANTMULTIPLIER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	330c      	adds	r3, #12
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dc8:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8002f38 <ReadFlashData+0x1c8>
 8002dcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	edc3 7a03 	vstr	s15, [r3, #12]
	p->pid_p_gain_roll=(float)( (*(( uint32_t *) (StartAddr+16) ))  )/FLASHCONSTANTMULTIPLIER;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3310      	adds	r3, #16
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	ee07 3a90 	vmov	s15, r3
 8002de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002de4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8002f38 <ReadFlashData+0x1c8>
 8002de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	edc3 7a04 	vstr	s15, [r3, #16]
	p->pid_i_gain_roll=(float)( (*(( uint32_t *) (StartAddr+20) )) )/FLASHCONSTANTMULTIPLIER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3314      	adds	r3, #20
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e00:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8002f38 <ReadFlashData+0x1c8>
 8002e04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	edc3 7a05 	vstr	s15, [r3, #20]
	p->pid_d_gain_roll=(float)( (*(( uint32_t *) (StartAddr+24) )) )/FLASHCONSTANTMULTIPLIER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3318      	adds	r3, #24
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	ee07 3a90 	vmov	s15, r3
 8002e18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e1c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002f38 <ReadFlashData+0x1c8>
 8002e20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	edc3 7a06 	vstr	s15, [r3, #24]
	p->pid_p_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+28) )) )/FLASHCONSTANTMULTIPLIER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	331c      	adds	r3, #28
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	ee07 3a90 	vmov	s15, r3
 8002e34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e38:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8002f38 <ReadFlashData+0x1c8>
 8002e3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	edc3 7a07 	vstr	s15, [r3, #28]
	p->pid_i_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+32) )) )/FLASHCONSTANTMULTIPLIER;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3320      	adds	r3, #32
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e54:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f38 <ReadFlashData+0x1c8>
 8002e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	edc3 7a08 	vstr	s15, [r3, #32]
	p->pid_d_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+36) )) )/FLASHCONSTANTMULTIPLIER;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3324      	adds	r3, #36	; 0x24
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	ee07 3a90 	vmov	s15, r3
 8002e6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e70:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002f38 <ReadFlashData+0x1c8>
 8002e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	p->pid_max_pitch=*(( uint32_t *) (StartAddr+40) );
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3328      	adds	r3, #40	; 0x28
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
	p->pid_i_max_pitch=*(( uint32_t *) (StartAddr+44) );
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	332c      	adds	r3, #44	; 0x2c
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c
	p->pid_max_roll=*(( uint32_t *) (StartAddr+48) );
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3330      	adds	r3, #48	; 0x30
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
	p->pid_i_max_roll=*(( uint32_t *) (StartAddr+52) );
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3334      	adds	r3, #52	; 0x34
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
	p->pid_max_yaw=*(( uint32_t *) (StartAddr+56) );
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3338      	adds	r3, #56	; 0x38
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	639a      	str	r2, [r3, #56]	; 0x38
	p->pid_i_max_yaw=*(( uint32_t *) (StartAddr+60) );
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	333c      	adds	r3, #60	; 0x3c
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c
	p->maxpitchdegree=(float)( (*(( uint32_t *) (StartAddr+64) )) );
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3340      	adds	r3, #64	; 0x40
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	p->maxrolldegree=(float)( (*(( uint32_t *) (StartAddr+68) )) );
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3344      	adds	r3, #68	; 0x44
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	p->maxyawdegree=(float)( (*(( uint32_t *) (StartAddr+72) )) );
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3348      	adds	r3, #72	; 0x48
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	p->minthrottle=(float)( (*(( uint32_t *) (StartAddr+76) )) );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	334c      	adds	r3, #76	; 0x4c
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	ee07 3a90 	vmov	s15, r3
 8002f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	p->maxthrottle=(float)( (*(( uint32_t *) (StartAddr+80) )) );
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3350      	adds	r3, #80	; 0x50
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	47c35000 	.word	0x47c35000

08002f3c <WriteString>:

/* Print character to array */
void WriteString(char string[])
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  unsigned int i=0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  while (string[i])
 8002f48:	e009      	b.n	8002f5e <WriteString+0x22>
  {
	PrintCharUart (string[i]);
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 f80e 	bl	8002f74 <PrintCharUart>
	i++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
  while (string[i])
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1ef      	bne.n	8002f4a <WriteString+0xe>
  }
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
	...

08002f74 <PrintCharUart>:

/* Write character to Serial Port    */
void PrintCharUart (int ch)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));
 8002f7c:	bf00      	nop
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <PrintCharUart+0x2c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f9      	beq.n	8002f7e <PrintCharUart+0xa>
	USART1->DR = (USART_DR_DR & ch);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a04      	ldr	r2, [pc, #16]	; (8002fa0 <PrintCharUart+0x2c>)
 8002f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f92:	6053      	str	r3, [r2, #4]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40011000 	.word	0x40011000

08002fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <nRF24_TransmitPacket+0x98>)
 8002fc2:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fca:	4821      	ldr	r0, [pc, #132]	; (8003050 <nRF24_TransmitPacket+0x9c>)
 8002fcc:	f003 fb0c 	bl	80065e8 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 fb64 	bl	80036a2 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fe0:	481b      	ldr	r0, [pc, #108]	; (8003050 <nRF24_TransmitPacket+0x9c>)
 8002fe2:	f003 fb01 	bl	80065e8 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8002fe6:	f000 fb24 	bl	8003632 <nRF24_GetStatus>
 8002fea:	4603      	mov	r3, r0
 8002fec:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8002fee:	7bfb      	ldrb	r3, [r7, #15]
 8002ff0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	1e5a      	subs	r2, r3, #1
 8002ffc:	60ba      	str	r2, [r7, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f1      	bne.n	8002fe6 <nRF24_TransmitPacket+0x32>
 8003002:	e000      	b.n	8003006 <nRF24_TransmitPacket+0x52>
			break;
 8003004:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8003006:	2200      	movs	r2, #0
 8003008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800300c:	4810      	ldr	r0, [pc, #64]	; (8003050 <nRF24_TransmitPacket+0x9c>)
 800300e:	f003 faeb 	bl	80065e8 <HAL_GPIO_WritePin>

	if (!wait) {
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8003018:	2302      	movs	r3, #2
 800301a:	e012      	b.n	8003042 <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 800301c:	f000 fb2c 	bl	8003678 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	f003 0310 	and.w	r3, r3, #16
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 800302a:	2303      	movs	r3, #3
 800302c:	e009      	b.n	8003042 <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8003038:	2301      	movs	r3, #1
 800303a:	e002      	b.n	8003042 <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 800303c:	f000 fb0c 	bl	8003658 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	000fffff 	.word	0x000fffff
 8003050:	40020400 	.word	0x40020400

08003054 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 800305e:	bf00      	nop
 8003060:	2102      	movs	r1, #2
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <nRF24_LL_RW+0x48>)
 8003064:	f7fe fd5c 	bl	8001b20 <SPI_I2S_GetFlagStatus>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f8      	beq.n	8003060 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	b29b      	uxth	r3, r3
 8003072:	4619      	mov	r1, r3
 8003074:	4809      	ldr	r0, [pc, #36]	; (800309c <nRF24_LL_RW+0x48>)
 8003076:	f7fe fd37 	bl	8001ae8 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 800307a:	bf00      	nop
 800307c:	2101      	movs	r1, #1
 800307e:	4807      	ldr	r0, [pc, #28]	; (800309c <nRF24_LL_RW+0x48>)
 8003080:	f7fe fd4e 	bl	8001b20 <SPI_I2S_GetFlagStatus>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f8      	beq.n	800307c <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 800308a:	4804      	ldr	r0, [pc, #16]	; (800309c <nRF24_LL_RW+0x48>)
 800308c:	f7fe fd3b 	bl	8001b06 <SPI_I2S_ReceiveData>
 8003090:	4603      	mov	r3, r0
 8003092:	b2db      	uxtb	r3, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40003800 	.word	0x40003800

080030a0 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80030aa:	2200      	movs	r2, #0
 80030ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030b0:	480c      	ldr	r0, [pc, #48]	; (80030e4 <nRF24_ReadReg+0x44>)
 80030b2:	f003 fa99 	bl	80065e8 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff ffc8 	bl	8003054 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 80030c4:	20ff      	movs	r0, #255	; 0xff
 80030c6:	f7ff ffc5 	bl	8003054 <nRF24_LL_RW>
 80030ca:	4603      	mov	r3, r0
 80030cc:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 80030ce:	2201      	movs	r2, #1
 80030d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030d4:	4803      	ldr	r0, [pc, #12]	; (80030e4 <nRF24_ReadReg+0x44>)
 80030d6:	f003 fa87 	bl	80065e8 <HAL_GPIO_WritePin>

	return value;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40020000 	.word	0x40020000

080030e8 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	460a      	mov	r2, r1
 80030f2:	71fb      	strb	r3, [r7, #7]
 80030f4:	4613      	mov	r3, r2
 80030f6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80030f8:	2200      	movs	r2, #0
 80030fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030fe:	481a      	ldr	r0, [pc, #104]	; (8003168 <nRF24_WriteReg+0x80>)
 8003100:	f003 fa72 	bl	80065e8 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	2b1f      	cmp	r3, #31
 8003108:	d810      	bhi.n	800312c <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	f003 031f 	and.w	r3, r3, #31
 8003112:	b25b      	sxtb	r3, r3
 8003114:	f043 0320 	orr.w	r3, r3, #32
 8003118:	b25b      	sxtb	r3, r3
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff99 	bl	8003054 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8003122:	79bb      	ldrb	r3, [r7, #6]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff95 	bl	8003054 <nRF24_LL_RW>
 800312a:	e013      	b.n	8003154 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ff90 	bl	8003054 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	2be1      	cmp	r3, #225	; 0xe1
 8003138:	d00c      	beq.n	8003154 <nRF24_WriteReg+0x6c>
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	2be2      	cmp	r3, #226	; 0xe2
 800313e:	d009      	beq.n	8003154 <nRF24_WriteReg+0x6c>
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	2be3      	cmp	r3, #227	; 0xe3
 8003144:	d006      	beq.n	8003154 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	2bff      	cmp	r3, #255	; 0xff
 800314a:	d003      	beq.n	8003154 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 800314c:	79bb      	ldrb	r3, [r7, #6]
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff ff80 	bl	8003054 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8003154:	2201      	movs	r2, #1
 8003156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800315a:	4803      	ldr	r0, [pc, #12]	; (8003168 <nRF24_WriteReg+0x80>)
 800315c:	f003 fa44 	bl	80065e8 <HAL_GPIO_WritePin>
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40020000 	.word	0x40020000

0800316c <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	71fb      	strb	r3, [r7, #7]
 8003178:	4613      	mov	r3, r2
 800317a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 800317c:	2200      	movs	r2, #0
 800317e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003182:	480f      	ldr	r0, [pc, #60]	; (80031c0 <nRF24_ReadMBReg+0x54>)
 8003184:	f003 fa30 	bl	80065e8 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff ff62 	bl	8003054 <nRF24_LL_RW>
	while (count--) {
 8003190:	e007      	b.n	80031a2 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8003192:	683c      	ldr	r4, [r7, #0]
 8003194:	1c63      	adds	r3, r4, #1
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	20ff      	movs	r0, #255	; 0xff
 800319a:	f7ff ff5b 	bl	8003054 <nRF24_LL_RW>
 800319e:	4603      	mov	r3, r0
 80031a0:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80031a2:	79bb      	ldrb	r3, [r7, #6]
 80031a4:	1e5a      	subs	r2, r3, #1
 80031a6:	71ba      	strb	r2, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f2      	bne.n	8003192 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 80031ac:	2201      	movs	r2, #1
 80031ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031b2:	4803      	ldr	r0, [pc, #12]	; (80031c0 <nRF24_ReadMBReg+0x54>)
 80031b4:	f003 fa18 	bl	80065e8 <HAL_GPIO_WritePin>
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd90      	pop	{r4, r7, pc}
 80031c0:	40020000 	.word	0x40020000

080031c4 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
 80031d0:	4613      	mov	r3, r2
 80031d2:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80031d4:	2200      	movs	r2, #0
 80031d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031da:	480f      	ldr	r0, [pc, #60]	; (8003218 <nRF24_WriteMBReg+0x54>)
 80031dc:	f003 fa04 	bl	80065e8 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff36 	bl	8003054 <nRF24_LL_RW>
	while (count--) {
 80031e8:	e006      	b.n	80031f8 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	603a      	str	r2, [r7, #0]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff2e 	bl	8003054 <nRF24_LL_RW>
	while (count--) {
 80031f8:	79bb      	ldrb	r3, [r7, #6]
 80031fa:	1e5a      	subs	r2, r3, #1
 80031fc:	71ba      	strb	r2, [r7, #6]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f3      	bne.n	80031ea <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 8003202:	2201      	movs	r2, #1
 8003204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003208:	4803      	ldr	r0, [pc, #12]	; (8003218 <nRF24_WriteMBReg+0x54>)
 800320a:	f003 f9ed 	bl	80065e8 <HAL_GPIO_WritePin>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40020000 	.word	0x40020000

0800321c <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8003220:	2108      	movs	r1, #8
 8003222:	2000      	movs	r0, #0
 8003224:	f7ff ff60 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8003228:	213f      	movs	r1, #63	; 0x3f
 800322a:	2001      	movs	r0, #1
 800322c:	f7ff ff5c 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8003230:	2103      	movs	r1, #3
 8003232:	2002      	movs	r0, #2
 8003234:	f7ff ff58 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8003238:	2103      	movs	r1, #3
 800323a:	2003      	movs	r0, #3
 800323c:	f7ff ff54 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8003240:	2103      	movs	r1, #3
 8003242:	2004      	movs	r0, #4
 8003244:	f7ff ff50 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8003248:	2102      	movs	r1, #2
 800324a:	2005      	movs	r0, #5
 800324c:	f7ff ff4c 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8003250:	210e      	movs	r1, #14
 8003252:	2006      	movs	r0, #6
 8003254:	f7ff ff48 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8003258:	2100      	movs	r1, #0
 800325a:	2007      	movs	r0, #7
 800325c:	f7ff ff44 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8003260:	2100      	movs	r1, #0
 8003262:	2011      	movs	r0, #17
 8003264:	f7ff ff40 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8003268:	2100      	movs	r1, #0
 800326a:	2012      	movs	r0, #18
 800326c:	f7ff ff3c 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8003270:	2100      	movs	r1, #0
 8003272:	2013      	movs	r0, #19
 8003274:	f7ff ff38 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8003278:	2100      	movs	r1, #0
 800327a:	2014      	movs	r0, #20
 800327c:	f7ff ff34 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8003280:	2100      	movs	r1, #0
 8003282:	2015      	movs	r0, #21
 8003284:	f7ff ff30 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8003288:	2100      	movs	r1, #0
 800328a:	2016      	movs	r0, #22
 800328c:	f7ff ff2c 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8003290:	2100      	movs	r1, #0
 8003292:	201c      	movs	r0, #28
 8003294:	f7ff ff28 	bl	80030e8 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8003298:	2100      	movs	r1, #0
 800329a:	201d      	movs	r0, #29
 800329c:	f7ff ff24 	bl	80030e8 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80032a0:	f000 f9e2 	bl	8003668 <nRF24_FlushRX>
	nRF24_FlushTX();
 80032a4:	f000 f9d8 	bl	8003658 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80032a8:	f000 f9e6 	bl	8003678 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80032ac:	2201      	movs	r2, #1
 80032ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032b2:	4802      	ldr	r0, [pc, #8]	; (80032bc <nRF24_Init+0xa0>)
 80032b4:	f003 f998 	bl	80065e8 <HAL_GPIO_WritePin>
}
 80032b8:	bf00      	nop
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40020000 	.word	0x40020000

080032c0 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 80032c6:	4b14      	ldr	r3, [pc, #80]	; (8003318 <nRF24_Check+0x58>)
 80032c8:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 80032ca:	2205      	movs	r2, #5
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	2030      	movs	r0, #48	; 0x30
 80032d0:	f7ff ff78 	bl	80031c4 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 80032d4:	463b      	mov	r3, r7
 80032d6:	2205      	movs	r2, #5
 80032d8:	4619      	mov	r1, r3
 80032da:	2010      	movs	r0, #16
 80032dc:	f7ff ff46 	bl	800316c <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e010      	b.n	8003308 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	f107 0210 	add.w	r2, r7, #16
 80032ec:	4413      	add	r3, r2
 80032ee:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1c59      	adds	r1, r3, #1
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d001      	beq.n	8003302 <nRF24_Check+0x42>
 80032fe:	2300      	movs	r3, #0
 8003300:	e006      	b.n	8003310 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8003302:	7bfb      	ldrb	r3, [r7, #15]
 8003304:	3301      	adds	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b04      	cmp	r3, #4
 800330c:	d9eb      	bls.n	80032e6 <nRF24_Check+0x26>
	}

	return 1;
 800330e:	2301      	movs	r3, #1
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	0800cff8 	.word	0x0800cff8

0800331c <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003326:	2000      	movs	r0, #0
 8003328:	f7ff feba 	bl	80030a0 <nRF24_ReadReg>
 800332c:	4603      	mov	r3, r0
 800332e:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d104      	bne.n	8003340 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	f043 0302 	orr.w	r3, r3, #2
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e003      	b.n	8003348 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	f023 0302 	bic.w	r3, r3, #2
 8003346:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	4619      	mov	r1, r3
 800334c:	2000      	movs	r0, #0
 800334e:	f7ff fecb 	bl	80030e8 <nRF24_WriteReg>
}
 8003352:	bf00      	nop
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003364:	2000      	movs	r0, #0
 8003366:	f7ff fe9b 	bl	80030a0 <nRF24_ReadReg>
 800336a:	4603      	mov	r3, r0
 800336c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	b25a      	sxtb	r2, r3
 8003380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003384:	4313      	orrs	r3, r2
 8003386:	b25b      	sxtb	r3, r3
 8003388:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	4619      	mov	r1, r3
 800338e:	2000      	movs	r0, #0
 8003390:	f7ff feaa 	bl	80030e8 <nRF24_WriteReg>
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7ff fe7a 	bl	80030a0 <nRF24_ReadReg>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	f023 030c 	bic.w	r3, r3, #12
 80033b6:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	b25a      	sxtb	r2, r3
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	b25b      	sxtb	r3, r3
 80033ca:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	4619      	mov	r1, r3
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7ff fe89 	bl	80030e8 <nRF24_WriteReg>
}
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	4603      	mov	r3, r0
 80033e6:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	4619      	mov	r1, r3
 80033ec:	2005      	movs	r0, #5
 80033ee:	f7ff fe7b 	bl	80030e8 <nRF24_WriteReg>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	3b02      	subs	r3, #2
 8003408:	b2db      	uxtb	r3, r3
 800340a:	4619      	mov	r1, r3
 800340c:	2003      	movs	r0, #3
 800340e:	f7ff fe6b 	bl	80030e8 <nRF24_WriteReg>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	6039      	str	r1, [r7, #0]
 8003426:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	2b06      	cmp	r3, #6
 800342c:	d846      	bhi.n	80034bc <nRF24_SetAddr+0xa0>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <nRF24_SetAddr+0x18>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003451 	.word	0x08003451
 8003438:	08003451 	.word	0x08003451
 800343c:	080034a9 	.word	0x080034a9
 8003440:	080034a9 	.word	0x080034a9
 8003444:	080034a9 	.word	0x080034a9
 8003448:	080034a9 	.word	0x080034a9
 800344c:	08003451 	.word	0x08003451
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8003450:	2003      	movs	r0, #3
 8003452:	f7ff fe25 	bl	80030a0 <nRF24_ReadReg>
 8003456:	4603      	mov	r3, r0
 8003458:	3301      	adds	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4413      	add	r3, r2
 8003462:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8003464:	2200      	movs	r2, #0
 8003466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800346a:	4817      	ldr	r0, [pc, #92]	; (80034c8 <nRF24_SetAddr+0xac>)
 800346c:	f003 f8bc 	bl	80065e8 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	4a16      	ldr	r2, [pc, #88]	; (80034cc <nRF24_SetAddr+0xb0>)
 8003474:	5cd3      	ldrb	r3, [r2, r3]
 8003476:	f043 0320 	orr.w	r3, r3, #32
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff fde9 	bl	8003054 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	1e5a      	subs	r2, r3, #1
 8003486:	603a      	str	r2, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fde2 	bl	8003054 <nRF24_LL_RW>
			} while (addr_width--);
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	1e5a      	subs	r2, r3, #1
 8003494:	73fa      	strb	r2, [r7, #15]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f3      	bne.n	8003482 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 800349a:	2201      	movs	r2, #1
 800349c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034a0:	4809      	ldr	r0, [pc, #36]	; (80034c8 <nRF24_SetAddr+0xac>)
 80034a2:	f003 f8a1 	bl	80065e8 <HAL_GPIO_WritePin>
			break;
 80034a6:	e00a      	b.n	80034be <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80034a8:	79fb      	ldrb	r3, [r7, #7]
 80034aa:	4a08      	ldr	r2, [pc, #32]	; (80034cc <nRF24_SetAddr+0xb0>)
 80034ac:	5cd2      	ldrb	r2, [r2, r3]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	4619      	mov	r1, r3
 80034b4:	4610      	mov	r0, r2
 80034b6:	f7ff fe17 	bl	80030e8 <nRF24_WriteReg>
			break;
 80034ba:	e000      	b.n	80034be <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 80034bc:	bf00      	nop
	}
}
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40020000 	.word	0x40020000
 80034cc:	0800d00c 	.word	0x0800d00c

080034d0 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80034da:	2006      	movs	r0, #6
 80034dc:	f7ff fde0 	bl	80030a0 <nRF24_ReadReg>
 80034e0:	4603      	mov	r3, r0
 80034e2:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	f023 0306 	bic.w	r3, r3, #6
 80034ea:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 80034ec:	7bfa      	ldrb	r2, [r7, #15]
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	4619      	mov	r1, r3
 80034f8:	2006      	movs	r0, #6
 80034fa:	f7ff fdf5 	bl	80030e8 <nRF24_WriteReg>
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	4603      	mov	r3, r0
 800350e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003510:	2006      	movs	r0, #6
 8003512:	f7ff fdc5 	bl	80030a0 <nRF24_ReadReg>
 8003516:	4603      	mov	r3, r0
 8003518:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003520:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	79fb      	ldrb	r3, [r7, #7]
 8003526:	4313      	orrs	r3, r2
 8003528:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800352a:	7bfb      	ldrb	r3, [r7, #15]
 800352c:	4619      	mov	r1, r3
 800352e:	2006      	movs	r0, #6
 8003530:	f7ff fdda 	bl	80030e8 <nRF24_WriteReg>
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	71fb      	strb	r3, [r7, #7]
 8003546:	460b      	mov	r3, r1
 8003548:	71bb      	strb	r3, [r7, #6]
 800354a:	4613      	mov	r3, r2
 800354c:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800354e:	2002      	movs	r0, #2
 8003550:	f7ff fda6 	bl	80030a0 <nRF24_ReadReg>
 8003554:	4603      	mov	r3, r0
 8003556:	b25a      	sxtb	r2, r3
 8003558:	79fb      	ldrb	r3, [r7, #7]
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	b25b      	sxtb	r3, r3
 8003562:	4313      	orrs	r3, r2
 8003564:	b25b      	sxtb	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800356c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	4619      	mov	r1, r3
 8003572:	2002      	movs	r0, #2
 8003574:	f7ff fdb8 	bl	80030e8 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	4a19      	ldr	r2, [pc, #100]	; (80035e0 <nRF24_SetRXPipe+0xa4>)
 800357c:	5cd2      	ldrb	r2, [r2, r3]
 800357e:	797b      	ldrb	r3, [r7, #5]
 8003580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4619      	mov	r1, r3
 8003588:	4610      	mov	r0, r2
 800358a:	f7ff fdad 	bl	80030e8 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800358e:	2001      	movs	r0, #1
 8003590:	f7ff fd86 	bl	80030a0 <nRF24_ReadReg>
 8003594:	4603      	mov	r3, r0
 8003596:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8003598:	79bb      	ldrb	r3, [r7, #6]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d10a      	bne.n	80035b4 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2201      	movs	r2, #1
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	b25a      	sxtb	r2, r3
 80035a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	b25b      	sxtb	r3, r3
 80035b0:	73fb      	strb	r3, [r7, #15]
 80035b2:	e00b      	b.n	80035cc <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	2201      	movs	r2, #1
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	b25a      	sxtb	r2, r3
 80035c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c6:	4013      	ands	r3, r2
 80035c8:	b25b      	sxtb	r3, r3
 80035ca:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	4619      	mov	r1, r3
 80035d0:	2001      	movs	r0, #1
 80035d2:	f7ff fd89 	bl	80030e8 <nRF24_WriteReg>
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	0800d004 	.word	0x0800d004

080035e4 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d904      	bls.n	80035fe <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 80035f4:	2100      	movs	r1, #0
 80035f6:	2001      	movs	r0, #1
 80035f8:	f7ff fd76 	bl	80030e8 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 80035fc:	e015      	b.n	800362a <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 80035fe:	2001      	movs	r0, #1
 8003600:	f7ff fd4e 	bl	80030a0 <nRF24_ReadReg>
 8003604:	4603      	mov	r3, r0
 8003606:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2201      	movs	r2, #1
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	b25b      	sxtb	r3, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	b25a      	sxtb	r2, r3
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	4013      	ands	r3, r2
 800361c:	b25b      	sxtb	r3, r3
 800361e:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	4619      	mov	r1, r3
 8003624:	2001      	movs	r0, #1
 8003626:	f7ff fd5f 	bl	80030e8 <nRF24_WriteReg>
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8003632:	b580      	push	{r7, lr}
 8003634:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8003636:	2007      	movs	r0, #7
 8003638:	f7ff fd32 	bl	80030a0 <nRF24_ReadReg>
 800363c:	4603      	mov	r3, r0
}
 800363e:	4618      	mov	r0, r3
 8003640:	bd80      	pop	{r7, pc}

08003642 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8003642:	b580      	push	{r7, lr}
 8003644:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8003646:	2017      	movs	r0, #23
 8003648:	f7ff fd2a 	bl	80030a0 <nRF24_ReadReg>
 800364c:	4603      	mov	r3, r0
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	b2db      	uxtb	r3, r3
}
 8003654:	4618      	mov	r0, r3
 8003656:	bd80      	pop	{r7, pc}

08003658 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800365c:	21ff      	movs	r1, #255	; 0xff
 800365e:	20e1      	movs	r0, #225	; 0xe1
 8003660:	f7ff fd42 	bl	80030e8 <nRF24_WriteReg>
}
 8003664:	bf00      	nop
 8003666:	bd80      	pop	{r7, pc}

08003668 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800366c:	21ff      	movs	r1, #255	; 0xff
 800366e:	20e2      	movs	r0, #226	; 0xe2
 8003670:	f7ff fd3a 	bl	80030e8 <nRF24_WriteReg>
}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}

08003678 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800367e:	2007      	movs	r0, #7
 8003680:	f7ff fd0e 	bl	80030a0 <nRF24_ReadReg>
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800368e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8003690:	79fb      	ldrb	r3, [r7, #7]
 8003692:	4619      	mov	r1, r3
 8003694:	2007      	movs	r0, #7
 8003696:	f7ff fd27 	bl	80030e8 <nRF24_WriteReg>
}
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b082      	sub	sp, #8
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	461a      	mov	r2, r3
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	20a0      	movs	r0, #160	; 0xa0
 80036b6:	f7ff fd85 	bl	80031c4 <nRF24_WriteMBReg>
}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80036ce:	2007      	movs	r0, #7
 80036d0:	f7ff fce6 	bl	80030a0 <nRF24_ReadReg>
 80036d4:	4603      	mov	r3, r0
 80036d6:	105b      	asrs	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d816      	bhi.n	8003714 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <nRF24_ReadPayload+0x60>)
 80036ea:	5cd3      	ldrb	r3, [r2, r3]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fcd7 	bl	80030a0 <nRF24_ReadReg>
 80036f2:	4603      	mov	r3, r0
 80036f4:	461a      	mov	r2, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d006      	beq.n	8003710 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	2061      	movs	r0, #97	; 0x61
 800370c:	f7ff fd2e 	bl	800316c <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	e003      	b.n	800371c <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800371a:	23ff      	movs	r3, #255	; 0xff
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0800d004 	.word	0x0800d004

08003728 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800372c:	4b17      	ldr	r3, [pc, #92]	; (800378c <MX_SPI1_Init+0x64>)
 800372e:	4a18      	ldr	r2, [pc, #96]	; (8003790 <MX_SPI1_Init+0x68>)
 8003730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003732:	4b16      	ldr	r3, [pc, #88]	; (800378c <MX_SPI1_Init+0x64>)
 8003734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800373a:	4b14      	ldr	r3, [pc, #80]	; (800378c <MX_SPI1_Init+0x64>)
 800373c:	2200      	movs	r2, #0
 800373e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003740:	4b12      	ldr	r3, [pc, #72]	; (800378c <MX_SPI1_Init+0x64>)
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <MX_SPI1_Init+0x64>)
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800374c:	4b0f      	ldr	r3, [pc, #60]	; (800378c <MX_SPI1_Init+0x64>)
 800374e:	2200      	movs	r2, #0
 8003750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003752:	4b0e      	ldr	r3, [pc, #56]	; (800378c <MX_SPI1_Init+0x64>)
 8003754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800375a:	4b0c      	ldr	r3, [pc, #48]	; (800378c <MX_SPI1_Init+0x64>)
 800375c:	2210      	movs	r2, #16
 800375e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003760:	4b0a      	ldr	r3, [pc, #40]	; (800378c <MX_SPI1_Init+0x64>)
 8003762:	2200      	movs	r2, #0
 8003764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <MX_SPI1_Init+0x64>)
 8003768:	2200      	movs	r2, #0
 800376a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800376c:	4b07      	ldr	r3, [pc, #28]	; (800378c <MX_SPI1_Init+0x64>)
 800376e:	2200      	movs	r2, #0
 8003770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <MX_SPI1_Init+0x64>)
 8003774:	220a      	movs	r2, #10
 8003776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003778:	4804      	ldr	r0, [pc, #16]	; (800378c <MX_SPI1_Init+0x64>)
 800377a:	f003 fcdd 	bl	8007138 <HAL_SPI_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003784:	f7ff fc0e 	bl	8002fa4 <Error_Handler>
  }

}
 8003788:	bf00      	nop
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20000624 	.word	0x20000624
 8003790:	40013000 	.word	0x40013000

08003794 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003798:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <MX_SPI2_Init+0x64>)
 800379a:	4a18      	ldr	r2, [pc, #96]	; (80037fc <MX_SPI2_Init+0x68>)
 800379c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80037a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80037a6:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80037be:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037c8:	2208      	movs	r2, #8
 80037ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037d8:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037da:	2200      	movs	r2, #0
 80037dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80037de:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037e0:	220a      	movs	r2, #10
 80037e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80037e4:	4804      	ldr	r0, [pc, #16]	; (80037f8 <MX_SPI2_Init+0x64>)
 80037e6:	f003 fca7 	bl	8007138 <HAL_SPI_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80037f0:	f7ff fbd8 	bl	8002fa4 <Error_Handler>
  }

}
 80037f4:	bf00      	nop
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	20000574 	.word	0x20000574
 80037fc:	40003800 	.word	0x40003800

08003800 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8003804:	4b17      	ldr	r3, [pc, #92]	; (8003864 <MX_SPI3_Init+0x64>)
 8003806:	4a18      	ldr	r2, [pc, #96]	; (8003868 <MX_SPI3_Init+0x68>)
 8003808:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800380a:	4b16      	ldr	r3, [pc, #88]	; (8003864 <MX_SPI3_Init+0x64>)
 800380c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003810:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003812:	4b14      	ldr	r3, [pc, #80]	; (8003864 <MX_SPI3_Init+0x64>)
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <MX_SPI3_Init+0x64>)
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <MX_SPI3_Init+0x64>)
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <MX_SPI3_Init+0x64>)
 8003826:	2200      	movs	r2, #0
 8003828:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <MX_SPI3_Init+0x64>)
 800382c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003830:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003832:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <MX_SPI3_Init+0x64>)
 8003834:	2200      	movs	r2, #0
 8003836:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <MX_SPI3_Init+0x64>)
 800383a:	2200      	movs	r2, #0
 800383c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800383e:	4b09      	ldr	r3, [pc, #36]	; (8003864 <MX_SPI3_Init+0x64>)
 8003840:	2200      	movs	r2, #0
 8003842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <MX_SPI3_Init+0x64>)
 8003846:	2200      	movs	r2, #0
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <MX_SPI3_Init+0x64>)
 800384c:	220a      	movs	r2, #10
 800384e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003850:	4804      	ldr	r0, [pc, #16]	; (8003864 <MX_SPI3_Init+0x64>)
 8003852:	f003 fc71 	bl	8007138 <HAL_SPI_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800385c:	f7ff fba2 	bl	8002fa4 <Error_Handler>
  }

}
 8003860:	bf00      	nop
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200005cc 	.word	0x200005cc
 8003868:	40003c00 	.word	0x40003c00

0800386c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08e      	sub	sp, #56	; 0x38
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a4b      	ldr	r2, [pc, #300]	; (80039b8 <HAL_SPI_MspInit+0x14c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d12c      	bne.n	80038e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	623b      	str	r3, [r7, #32]
 8003892:	4b4a      	ldr	r3, [pc, #296]	; (80039bc <HAL_SPI_MspInit+0x150>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	4a49      	ldr	r2, [pc, #292]	; (80039bc <HAL_SPI_MspInit+0x150>)
 8003898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800389c:	6453      	str	r3, [r2, #68]	; 0x44
 800389e:	4b47      	ldr	r3, [pc, #284]	; (80039bc <HAL_SPI_MspInit+0x150>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a6:	623b      	str	r3, [r7, #32]
 80038a8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	4b43      	ldr	r3, [pc, #268]	; (80039bc <HAL_SPI_MspInit+0x150>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a42      	ldr	r2, [pc, #264]	; (80039bc <HAL_SPI_MspInit+0x150>)
 80038b4:	f043 0301 	orr.w	r3, r3, #1
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b40      	ldr	r3, [pc, #256]	; (80039bc <HAL_SPI_MspInit+0x150>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80038c6:	23e0      	movs	r3, #224	; 0xe0
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ca:	2302      	movs	r3, #2
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d2:	2303      	movs	r3, #3
 80038d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80038d6:	2305      	movs	r3, #5
 80038d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038de:	4619      	mov	r1, r3
 80038e0:	4837      	ldr	r0, [pc, #220]	; (80039c0 <HAL_SPI_MspInit+0x154>)
 80038e2:	f002 fcff 	bl	80062e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80038e6:	e063      	b.n	80039b0 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a35      	ldr	r2, [pc, #212]	; (80039c4 <HAL_SPI_MspInit+0x158>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d12d      	bne.n	800394e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	4b31      	ldr	r3, [pc, #196]	; (80039bc <HAL_SPI_MspInit+0x150>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a30      	ldr	r2, [pc, #192]	; (80039bc <HAL_SPI_MspInit+0x150>)
 80038fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
 8003902:	4b2e      	ldr	r3, [pc, #184]	; (80039bc <HAL_SPI_MspInit+0x150>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
 8003912:	4b2a      	ldr	r3, [pc, #168]	; (80039bc <HAL_SPI_MspInit+0x150>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a29      	ldr	r2, [pc, #164]	; (80039bc <HAL_SPI_MspInit+0x150>)
 8003918:	f043 0302 	orr.w	r3, r3, #2
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b27      	ldr	r3, [pc, #156]	; (80039bc <HAL_SPI_MspInit+0x150>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0302 	and.w	r3, r3, #2
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800392a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003938:	2303      	movs	r3, #3
 800393a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800393c:	2305      	movs	r3, #5
 800393e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003944:	4619      	mov	r1, r3
 8003946:	4820      	ldr	r0, [pc, #128]	; (80039c8 <HAL_SPI_MspInit+0x15c>)
 8003948:	f002 fccc 	bl	80062e4 <HAL_GPIO_Init>
}
 800394c:	e030      	b.n	80039b0 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI3)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <HAL_SPI_MspInit+0x160>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d12b      	bne.n	80039b0 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003958:	2300      	movs	r3, #0
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	4b17      	ldr	r3, [pc, #92]	; (80039bc <HAL_SPI_MspInit+0x150>)
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	4a16      	ldr	r2, [pc, #88]	; (80039bc <HAL_SPI_MspInit+0x150>)
 8003962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003966:	6413      	str	r3, [r2, #64]	; 0x40
 8003968:	4b14      	ldr	r3, [pc, #80]	; (80039bc <HAL_SPI_MspInit+0x150>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_SPI_MspInit+0x150>)
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	4a0f      	ldr	r2, [pc, #60]	; (80039bc <HAL_SPI_MspInit+0x150>)
 800397e:	f043 0302 	orr.w	r3, r3, #2
 8003982:	6313      	str	r3, [r2, #48]	; 0x30
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <HAL_SPI_MspInit+0x150>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003990:	2338      	movs	r3, #56	; 0x38
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003994:	2302      	movs	r3, #2
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800399c:	2303      	movs	r3, #3
 800399e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80039a0:	2306      	movs	r3, #6
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a8:	4619      	mov	r1, r3
 80039aa:	4807      	ldr	r0, [pc, #28]	; (80039c8 <HAL_SPI_MspInit+0x15c>)
 80039ac:	f002 fc9a 	bl	80062e4 <HAL_GPIO_Init>
}
 80039b0:	bf00      	nop
 80039b2:	3738      	adds	r7, #56	; 0x38
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40013000 	.word	0x40013000
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40020000 	.word	0x40020000
 80039c4:	40003800 	.word	0x40003800
 80039c8:	40020400 	.word	0x40020400
 80039cc:	40003c00 	.word	0x40003c00

080039d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_MspInit+0x4c>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <HAL_MspInit+0x4c>)
 80039e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e4:	6453      	str	r3, [r2, #68]	; 0x44
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <HAL_MspInit+0x4c>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_MspInit+0x4c>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <HAL_MspInit+0x4c>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40
 8003a02:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_MspInit+0x4c>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800

08003a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a32:	e7fe      	b.n	8003a32 <HardFault_Handler+0x4>

08003a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a38:	e7fe      	b.n	8003a38 <MemManage_Handler+0x4>

08003a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3e:	e7fe      	b.n	8003a3e <BusFault_Handler+0x4>

08003a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a44:	e7fe      	b.n	8003a44 <UsageFault_Handler+0x4>

08003a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a74:	f001 fd3c 	bl	80054f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	0000      	movs	r0, r0
	...

08003a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a80:	b5b0      	push	{r4, r5, r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a86:	4890      	ldr	r0, [pc, #576]	; (8003cc8 <TIM2_IRQHandler+0x248>)
 8003a88:	f004 f960 	bl	8007d4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky--------------------------------------------------------------
  LEDcount++;
 8003a8c:	4b8f      	ldr	r3, [pc, #572]	; (8003ccc <TIM2_IRQHandler+0x24c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	4a8e      	ldr	r2, [pc, #568]	; (8003ccc <TIM2_IRQHandler+0x24c>)
 8003a94:	6013      	str	r3, [r2, #0]
  if(LEDcount>=50)
 8003a96:	4b8d      	ldr	r3, [pc, #564]	; (8003ccc <TIM2_IRQHandler+0x24c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b31      	cmp	r3, #49	; 0x31
 8003a9c:	d907      	bls.n	8003aae <TIM2_IRQHandler+0x2e>
  {
	  LEDcount=0;
 8003a9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ccc <TIM2_IRQHandler+0x24c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8003aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aa8:	4889      	ldr	r0, [pc, #548]	; (8003cd0 <TIM2_IRQHandler+0x250>)
 8003aaa:	f002 fdb6 	bl	800661a <HAL_GPIO_TogglePin>
  }//-------------------------------------------------------------------


  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,1);
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4888      	ldr	r0, [pc, #544]	; (8003cd4 <TIM2_IRQHandler+0x254>)
 8003ab2:	f001 fe49 	bl	8005748 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 8003ab6:	4887      	ldr	r0, [pc, #540]	; (8003cd4 <TIM2_IRQHandler+0x254>)
 8003ab8:	f001 feca 	bl	8005850 <HAL_ADC_GetValue>
 8003abc:	ee07 0a90 	vmov	s15, r0
 8003ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac4:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003cd8 <TIM2_IRQHandler+0x258>
 8003ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad0:	ee17 2a90 	vmov	r2, s15
 8003ad4:	4b81      	ldr	r3, [pc, #516]	; (8003cdc <TIM2_IRQHandler+0x25c>)
 8003ad6:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8003ad8:	4b81      	ldr	r3, [pc, #516]	; (8003ce0 <TIM2_IRQHandler+0x260>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a7f      	ldr	r2, [pc, #508]	; (8003cdc <TIM2_IRQHandler+0x25c>)
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	4980      	ldr	r1, [pc, #512]	; (8003ce4 <TIM2_IRQHandler+0x264>)
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8003ae6:	4b7e      	ldr	r3, [pc, #504]	; (8003ce0 <TIM2_IRQHandler+0x260>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3301      	adds	r3, #1
 8003aec:	4a7c      	ldr	r2, [pc, #496]	; (8003ce0 <TIM2_IRQHandler+0x260>)
 8003aee:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 8003af0:	4b7b      	ldr	r3, [pc, #492]	; (8003ce0 <TIM2_IRQHandler+0x260>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b31      	cmp	r3, #49	; 0x31
 8003af6:	d902      	bls.n	8003afe <TIM2_IRQHandler+0x7e>
 8003af8:	4b79      	ldr	r3, [pc, #484]	; (8003ce0 <TIM2_IRQHandler+0x260>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8003afe:	4b7a      	ldr	r3, [pc, #488]	; (8003ce8 <TIM2_IRQHandler+0x268>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 8003b04:	4b79      	ldr	r3, [pc, #484]	; (8003cec <TIM2_IRQHandler+0x26c>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e00e      	b.n	8003b2a <TIM2_IRQHandler+0xaa>
  {
	  BattmVSUM+=BAttmVhist[i];
 8003b0c:	4b77      	ldr	r3, [pc, #476]	; (8003cec <TIM2_IRQHandler+0x26c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a74      	ldr	r2, [pc, #464]	; (8003ce4 <TIM2_IRQHandler+0x264>)
 8003b12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b16:	4b74      	ldr	r3, [pc, #464]	; (8003ce8 <TIM2_IRQHandler+0x268>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4a72      	ldr	r2, [pc, #456]	; (8003ce8 <TIM2_IRQHandler+0x268>)
 8003b1e:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 8003b20:	4b72      	ldr	r3, [pc, #456]	; (8003cec <TIM2_IRQHandler+0x26c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3301      	adds	r3, #1
 8003b26:	4a71      	ldr	r2, [pc, #452]	; (8003cec <TIM2_IRQHandler+0x26c>)
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b70      	ldr	r3, [pc, #448]	; (8003cec <TIM2_IRQHandler+0x26c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b31      	cmp	r3, #49	; 0x31
 8003b30:	d9ec      	bls.n	8003b0c <TIM2_IRQHandler+0x8c>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 8003b32:	4b6d      	ldr	r3, [pc, #436]	; (8003ce8 <TIM2_IRQHandler+0x268>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6e      	ldr	r2, [pc, #440]	; (8003cf0 <TIM2_IRQHandler+0x270>)
 8003b38:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	4a6d      	ldr	r2, [pc, #436]	; (8003cf4 <TIM2_IRQHandler+0x274>)
 8003b40:	6013      	str	r3, [r2, #0]
  //--------------------------------------------------------------------

  //save OLD toggle values
  togg1hist=togg1;
 8003b42:	4b6d      	ldr	r3, [pc, #436]	; (8003cf8 <TIM2_IRQHandler+0x278>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6d      	ldr	r2, [pc, #436]	; (8003cfc <TIM2_IRQHandler+0x27c>)
 8003b48:	6013      	str	r3, [r2, #0]
  togg2hist=togg2;
 8003b4a:	4b6d      	ldr	r3, [pc, #436]	; (8003d00 <TIM2_IRQHandler+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6d      	ldr	r2, [pc, #436]	; (8003d04 <TIM2_IRQHandler+0x284>)
 8003b50:	6013      	str	r3, [r2, #0]
  togg3hist=togg3;
 8003b52:	4b6d      	ldr	r3, [pc, #436]	; (8003d08 <TIM2_IRQHandler+0x288>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6d      	ldr	r2, [pc, #436]	; (8003d0c <TIM2_IRQHandler+0x28c>)
 8003b58:	6013      	str	r3, [r2, #0]
  togg4hist=togg4;
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	; (8003d10 <TIM2_IRQHandler+0x290>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6d      	ldr	r2, [pc, #436]	; (8003d14 <TIM2_IRQHandler+0x294>)
 8003b60:	6013      	str	r3, [r2, #0]
  togg5hist=togg5;
 8003b62:	4b6d      	ldr	r3, [pc, #436]	; (8003d18 <TIM2_IRQHandler+0x298>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6d      	ldr	r2, [pc, #436]	; (8003d1c <TIM2_IRQHandler+0x29c>)
 8003b68:	6013      	str	r3, [r2, #0]
  togg6hist=togg6;
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <TIM2_IRQHandler+0x2a0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a6d      	ldr	r2, [pc, #436]	; (8003d24 <TIM2_IRQHandler+0x2a4>)
 8003b70:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 8003b72:	4b6d      	ldr	r3, [pc, #436]	; (8003d28 <TIM2_IRQHandler+0x2a8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 823b 	beq.w	8003ff2 <TIM2_IRQHandler+0x572>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8003b7c:	f7ff fd61 	bl	8003642 <nRF24_GetStatus_RXFIFO>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	f000 8235 	beq.w	8003ff2 <TIM2_IRQHandler+0x572>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8003b88:	4968      	ldr	r1, [pc, #416]	; (8003d2c <TIM2_IRQHandler+0x2ac>)
 8003b8a:	4869      	ldr	r0, [pc, #420]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003b8c:	f7ff fd9a 	bl	80036c4 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 8003b90:	f7ff fd72 	bl	8003678 <nRF24_ClearIRQFlags>

  			MSGSelector=(nRF24_payloadRX[0]);
 8003b94:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b66      	ldr	r3, [pc, #408]	; (8003d34 <TIM2_IRQHandler+0x2b4>)
 8003b9c:	601a      	str	r2, [r3, #0]

  			switch(MSGSelector)
 8003b9e:	4b65      	ldr	r3, [pc, #404]	; (8003d34 <TIM2_IRQHandler+0x2b4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	f200 80dd 	bhi.w	8003d62 <TIM2_IRQHandler+0x2e2>
 8003ba8:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <TIM2_IRQHandler+0x130>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bc5 	.word	0x08003bc5
 8003bb4:	08003c8f 	.word	0x08003c8f
 8003bb8:	08003cbd 	.word	0x08003cbd
 8003bbc:	08003c7f 	.word	0x08003c7f
 8003bc0:	08003c87 	.word	0x08003c87
  			{
  				case COMMCONTROLDATA:
  									{
  										if(nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100 && nRF24_payloadRX[4]<=100)//Check if Data is in correct ranges
 8003bc4:	4b5a      	ldr	r3, [pc, #360]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	2b64      	cmp	r3, #100	; 0x64
 8003bca:	f200 80c9 	bhi.w	8003d60 <TIM2_IRQHandler+0x2e0>
 8003bce:	4b58      	ldr	r3, [pc, #352]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003bd0:	789b      	ldrb	r3, [r3, #2]
 8003bd2:	2b64      	cmp	r3, #100	; 0x64
 8003bd4:	f200 80c4 	bhi.w	8003d60 <TIM2_IRQHandler+0x2e0>
 8003bd8:	4b55      	ldr	r3, [pc, #340]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003bda:	78db      	ldrb	r3, [r3, #3]
 8003bdc:	2b64      	cmp	r3, #100	; 0x64
 8003bde:	f200 80bf 	bhi.w	8003d60 <TIM2_IRQHandler+0x2e0>
 8003be2:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003be4:	791b      	ldrb	r3, [r3, #4]
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	f200 80ba 	bhi.w	8003d60 <TIM2_IRQHandler+0x2e0>
  										{
  							  				Ljoyupdown=nRF24_payloadRX[1];
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003bee:	785b      	ldrb	r3, [r3, #1]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4b51      	ldr	r3, [pc, #324]	; (8003d38 <TIM2_IRQHandler+0x2b8>)
 8003bf4:	601a      	str	r2, [r3, #0]
  							  				Ljoyleftright=nRF24_payloadRX[2];
 8003bf6:	4b4e      	ldr	r3, [pc, #312]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003bf8:	789b      	ldrb	r3, [r3, #2]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b4f      	ldr	r3, [pc, #316]	; (8003d3c <TIM2_IRQHandler+0x2bc>)
 8003bfe:	601a      	str	r2, [r3, #0]
  							  				Djoyupdown=nRF24_payloadRX[3];
 8003c00:	4b4b      	ldr	r3, [pc, #300]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c02:	78db      	ldrb	r3, [r3, #3]
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b4e      	ldr	r3, [pc, #312]	; (8003d40 <TIM2_IRQHandler+0x2c0>)
 8003c08:	601a      	str	r2, [r3, #0]
  							  				Djoyleftright=nRF24_payloadRX[4];
 8003c0a:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c0c:	791b      	ldrb	r3, [r3, #4]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4b4c      	ldr	r3, [pc, #304]	; (8003d44 <TIM2_IRQHandler+0x2c4>)
 8003c12:	601a      	str	r2, [r3, #0]
  							  				potenc1=nRF24_payloadRX[5];
 8003c14:	4b46      	ldr	r3, [pc, #280]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c16:	795b      	ldrb	r3, [r3, #5]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <TIM2_IRQHandler+0x2c8>)
 8003c1c:	601a      	str	r2, [r3, #0]
  							  				potenc2=nRF24_payloadRX[6];
 8003c1e:	4b44      	ldr	r3, [pc, #272]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c20:	799b      	ldrb	r3, [r3, #6]
 8003c22:	461a      	mov	r2, r3
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <TIM2_IRQHandler+0x2cc>)
 8003c26:	601a      	str	r2, [r3, #0]

  							  				togg1=nRF24_payloadRX[7]>>7;
 8003c28:	4b41      	ldr	r3, [pc, #260]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c2a:	79db      	ldrb	r3, [r3, #7]
 8003c2c:	09db      	lsrs	r3, r3, #7
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	4b31      	ldr	r3, [pc, #196]	; (8003cf8 <TIM2_IRQHandler+0x278>)
 8003c34:	601a      	str	r2, [r3, #0]
  							  				togg2=(nRF24_payloadRX[7] & 64 )>>6;
 8003c36:	4b3e      	ldr	r3, [pc, #248]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c38:	79db      	ldrb	r3, [r3, #7]
 8003c3a:	119b      	asrs	r3, r3, #6
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	4a2f      	ldr	r2, [pc, #188]	; (8003d00 <TIM2_IRQHandler+0x280>)
 8003c42:	6013      	str	r3, [r2, #0]
  							  				togg3=(nRF24_payloadRX[7] & 32 )>>5;
 8003c44:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c46:	79db      	ldrb	r3, [r3, #7]
 8003c48:	115b      	asrs	r3, r3, #5
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	4a2e      	ldr	r2, [pc, #184]	; (8003d08 <TIM2_IRQHandler+0x288>)
 8003c50:	6013      	str	r3, [r2, #0]
  							  				togg4=(nRF24_payloadRX[7] & 16 )>>4;
 8003c52:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c54:	79db      	ldrb	r3, [r3, #7]
 8003c56:	111b      	asrs	r3, r3, #4
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <TIM2_IRQHandler+0x290>)
 8003c5e:	6013      	str	r3, [r2, #0]
  							  				togg5=(nRF24_payloadRX[7] & 8 )>>3;
 8003c60:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c62:	79db      	ldrb	r3, [r3, #7]
 8003c64:	10db      	asrs	r3, r3, #3
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	4a2b      	ldr	r2, [pc, #172]	; (8003d18 <TIM2_IRQHandler+0x298>)
 8003c6c:	6013      	str	r3, [r2, #0]
  							  				togg6=(nRF24_payloadRX[7] & 4 )>>2;
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c70:	79db      	ldrb	r3, [r3, #7]
 8003c72:	109b      	asrs	r3, r3, #2
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	4a29      	ldr	r2, [pc, #164]	; (8003d20 <TIM2_IRQHandler+0x2a0>)
 8003c7a:	6013      	str	r3, [r2, #0]
  										}
  									}break;
 8003c7c:	e070      	b.n	8003d60 <TIM2_IRQHandler+0x2e0>

  				case COMMERASEFLASHDR:
  									{
  										FlashEraseFlag=1;
 8003c7e:	4b34      	ldr	r3, [pc, #208]	; (8003d50 <TIM2_IRQHandler+0x2d0>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

  									}break;
 8003c84:	e06d      	b.n	8003d62 <TIM2_IRQHandler+0x2e2>

  				case COMMWRITEFLASHDR:
  									{
  										FlashWriteFlag=1;
 8003c86:	4b33      	ldr	r3, [pc, #204]	; (8003d54 <TIM2_IRQHandler+0x2d4>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  									}break;
 8003c8c:	e069      	b.n	8003d62 <TIM2_IRQHandler+0x2e2>

  				case COMMPARAMACTIVE:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 8003c8e:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c90:	785b      	ldrb	r3, [r3, #1]
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b30      	ldr	r3, [pc, #192]	; (8003d58 <TIM2_IRQHandler+0x2d8>)
 8003c96:	601a      	str	r2, [r3, #0]
  				  						ParamDataRX=(nRF24_payloadRX[2]<<24) + (nRF24_payloadRX[3]<<16) + (nRF24_payloadRX[4]<<8) + (nRF24_payloadRX[5]);
 8003c98:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003c9a:	789b      	ldrb	r3, [r3, #2]
 8003c9c:	061a      	lsls	r2, r3, #24
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003ca0:	78db      	ldrb	r3, [r3, #3]
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	441a      	add	r2, r3
 8003ca6:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003ca8:	791b      	ldrb	r3, [r3, #4]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	4413      	add	r3, r2
 8003cae:	4a20      	ldr	r2, [pc, #128]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003cb0:	7952      	ldrb	r2, [r2, #5]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <TIM2_IRQHandler+0x2dc>)
 8003cb8:	601a      	str	r2, [r3, #0]

  				  					}break;
 8003cba:	e052      	b.n	8003d62 <TIM2_IRQHandler+0x2e2>

  				case COMMPARAMFLASH:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	; (8003d30 <TIM2_IRQHandler+0x2b0>)
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <TIM2_IRQHandler+0x2d8>)
 8003cc4:	601a      	str	r2, [r3, #0]

  				  					}break;
 8003cc6:	e04c      	b.n	8003d62 <TIM2_IRQHandler+0x2e2>
 8003cc8:	20000880 	.word	0x20000880
 8003ccc:	20000818 	.word	0x20000818
 8003cd0:	40020800 	.word	0x40020800
 8003cd4:	2000025c 	.word	0x2000025c
 8003cd8:	4090ac29 	.word	0x4090ac29
 8003cdc:	20000828 	.word	0x20000828
 8003ce0:	2000022c 	.word	0x2000022c
 8003ce4:	200006a4 	.word	0x200006a4
 8003ce8:	20000224 	.word	0x20000224
 8003cec:	20000784 	.word	0x20000784
 8003cf0:	51eb851f 	.word	0x51eb851f
 8003cf4:	20000228 	.word	0x20000228
 8003cf8:	200004a8 	.word	0x200004a8
 8003cfc:	2000083c 	.word	0x2000083c
 8003d00:	2000056c 	.word	0x2000056c
 8003d04:	200007a8 	.word	0x200007a8
 8003d08:	200002fc 	.word	0x200002fc
 8003d0c:	20000838 	.word	0x20000838
 8003d10:	200004b4 	.word	0x200004b4
 8003d14:	2000076c 	.word	0x2000076c
 8003d18:	2000047c 	.word	0x2000047c
 8003d1c:	20000698 	.word	0x20000698
 8003d20:	20000300 	.word	0x20000300
 8003d24:	20000820 	.word	0x20000820
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	2000021b 	.word	0x2000021b
 8003d30:	20000304 	.word	0x20000304
 8003d34:	2000069c 	.word	0x2000069c
 8003d38:	200004ac 	.word	0x200004ac
 8003d3c:	200004a0 	.word	0x200004a0
 8003d40:	20000564 	.word	0x20000564
 8003d44:	200002f8 	.word	0x200002f8
 8003d48:	2000050c 	.word	0x2000050c
 8003d4c:	20000568 	.word	0x20000568
 8003d50:	20000684 	.word	0x20000684
 8003d54:	20000824 	.word	0x20000824
 8003d58:	2000078c 	.word	0x2000078c
 8003d5c:	20000770 	.word	0x20000770
  									}break;
 8003d60:	bf00      	nop


  			}


  			if(MSGSelector==COMMPARAMACTIVE)//save values in active structure
 8003d62:	4bb4      	ldr	r3, [pc, #720]	; (8004034 <TIM2_IRQHandler+0x5b4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	f040 8138 	bne.w	8003fdc <TIM2_IRQHandler+0x55c>
  			{
  				switch(ParamSelector)
 8003d6c:	4bb2      	ldr	r3, [pc, #712]	; (8004038 <TIM2_IRQHandler+0x5b8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	2b13      	cmp	r3, #19
 8003d74:	f200 8132 	bhi.w	8003fdc <TIM2_IRQHandler+0x55c>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <TIM2_IRQHandler+0x300>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003dd1 	.word	0x08003dd1
 8003d84:	08003ded 	.word	0x08003ded
 8003d88:	08003e09 	.word	0x08003e09
 8003d8c:	08003e25 	.word	0x08003e25
 8003d90:	08003e41 	.word	0x08003e41
 8003d94:	08003e5d 	.word	0x08003e5d
 8003d98:	08003e79 	.word	0x08003e79
 8003d9c:	08003e95 	.word	0x08003e95
 8003da0:	08003eb1 	.word	0x08003eb1
 8003da4:	08003ecd 	.word	0x08003ecd
 8003da8:	08003ee3 	.word	0x08003ee3
 8003dac:	08003ef9 	.word	0x08003ef9
 8003db0:	08003f0f 	.word	0x08003f0f
 8003db4:	08003f25 	.word	0x08003f25
 8003db8:	08003f3b 	.word	0x08003f3b
 8003dbc:	08003f51 	.word	0x08003f51
 8003dc0:	08003f6d 	.word	0x08003f6d
 8003dc4:	08003f89 	.word	0x08003f89
 8003dc8:	08003fa5 	.word	0x08003fa5
 8003dcc:	08003fc1 	.word	0x08003fc1
  				{
					case  PARAM1 :{FlashDataActive.pid_p_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003dd0:	4b9a      	ldr	r3, [pc, #616]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ddc:	eddf 6a98 	vldr	s13, [pc, #608]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003de4:	4b97      	ldr	r3, [pc, #604]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003de6:	edc3 7a01 	vstr	s15, [r3, #4]
 8003dea:	e0f7      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM2 :{FlashDataActive.pid_i_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003dec:	4b93      	ldr	r3, [pc, #588]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003df8:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e00:	4b90      	ldr	r3, [pc, #576]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003e02:	edc3 7a02 	vstr	s15, [r3, #8]
 8003e06:	e0e9      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM3 :{FlashDataActive.pid_d_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003e08:	4b8c      	ldr	r3, [pc, #560]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e14:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e1c:	4b89      	ldr	r3, [pc, #548]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003e1e:	edc3 7a03 	vstr	s15, [r3, #12]
 8003e22:	e0db      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM4 :{FlashDataActive.pid_p_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003e24:	4b85      	ldr	r3, [pc, #532]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	ee07 3a90 	vmov	s15, r3
 8003e2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e30:	eddf 6a83 	vldr	s13, [pc, #524]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003e34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e38:	4b82      	ldr	r3, [pc, #520]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003e3a:	edc3 7a04 	vstr	s15, [r3, #16]
 8003e3e:	e0cd      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM5 :{FlashDataActive.pid_i_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003e40:	4b7e      	ldr	r3, [pc, #504]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e4c:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003e50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e54:	4b7b      	ldr	r3, [pc, #492]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003e56:	edc3 7a05 	vstr	s15, [r3, #20]
 8003e5a:	e0bf      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM6 :{FlashDataActive.pid_d_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003e5c:	4b77      	ldr	r3, [pc, #476]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e68:	eddf 6a75 	vldr	s13, [pc, #468]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003e6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e70:	4b74      	ldr	r3, [pc, #464]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003e72:	edc3 7a06 	vstr	s15, [r3, #24]
 8003e76:	e0b1      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM7 :{FlashDataActive.pid_p_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003e78:	4b70      	ldr	r3, [pc, #448]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	ee07 3a90 	vmov	s15, r3
 8003e80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e84:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003e88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e8c:	4b6d      	ldr	r3, [pc, #436]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003e8e:	edc3 7a07 	vstr	s15, [r3, #28]
 8003e92:	e0a3      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM8 :{FlashDataActive.pid_i_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003e94:	4b69      	ldr	r3, [pc, #420]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ea0:	eddf 6a67 	vldr	s13, [pc, #412]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003ea4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ea8:	4b66      	ldr	r3, [pc, #408]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003eaa:	edc3 7a08 	vstr	s15, [r3, #32]
 8003eae:	e095      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM9 :{FlashDataActive.pid_d_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003eb0:	4b62      	ldr	r3, [pc, #392]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ebc:	eddf 6a60 	vldr	s13, [pc, #384]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003ec0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ec4:	4b5f      	ldr	r3, [pc, #380]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003ec6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8003eca:	e087      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM10 :{FlashDataActive.pid_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8003ecc:	4b5b      	ldr	r3, [pc, #364]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	4a5d      	ldr	r2, [pc, #372]	; (8004048 <TIM2_IRQHandler+0x5c8>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	09db      	lsrs	r3, r3, #7
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b59      	ldr	r3, [pc, #356]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003ede:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee0:	e07c      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM11 :{FlashDataActive.pid_i_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8003ee2:	4b56      	ldr	r3, [pc, #344]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <TIM2_IRQHandler+0x5c8>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	09db      	lsrs	r3, r3, #7
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4b54      	ldr	r3, [pc, #336]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003ef4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ef6:	e071      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM12 :{FlashDataActive.pid_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8003ef8:	4b50      	ldr	r3, [pc, #320]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	4a52      	ldr	r2, [pc, #328]	; (8004048 <TIM2_IRQHandler+0x5c8>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	09db      	lsrs	r3, r3, #7
 8003f06:	461a      	mov	r2, r3
 8003f08:	4b4e      	ldr	r3, [pc, #312]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f0c:	e066      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM13 :{FlashDataActive.pid_i_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8003f0e:	4b4b      	ldr	r3, [pc, #300]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	4a4c      	ldr	r2, [pc, #304]	; (8004048 <TIM2_IRQHandler+0x5c8>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	09db      	lsrs	r3, r3, #7
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4b49      	ldr	r3, [pc, #292]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003f20:	635a      	str	r2, [r3, #52]	; 0x34
 8003f22:	e05b      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM14 :{FlashDataActive.pid_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8003f24:	4b45      	ldr	r3, [pc, #276]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	4a47      	ldr	r2, [pc, #284]	; (8004048 <TIM2_IRQHandler+0x5c8>)
 8003f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f30:	09db      	lsrs	r3, r3, #7
 8003f32:	461a      	mov	r2, r3
 8003f34:	4b43      	ldr	r3, [pc, #268]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
 8003f38:	e050      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM15 :{FlashDataActive.pid_i_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8003f3a:	4b40      	ldr	r3, [pc, #256]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	4a41      	ldr	r2, [pc, #260]	; (8004048 <TIM2_IRQHandler+0x5c8>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	09db      	lsrs	r3, r3, #7
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003f4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f4e:	e045      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM16 :{FlashDataActive.maxpitchdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003f50:	4b3a      	ldr	r3, [pc, #232]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	ee07 3a90 	vmov	s15, r3
 8003f58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f5c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003f60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f64:	4b37      	ldr	r3, [pc, #220]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003f66:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8003f6a:	e037      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM17 :{FlashDataActive.maxrolldegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003f6c:	4b33      	ldr	r3, [pc, #204]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	ee07 3a90 	vmov	s15, r3
 8003f74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f78:	eddf 6a31 	vldr	s13, [pc, #196]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003f7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f80:	4b30      	ldr	r3, [pc, #192]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003f82:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8003f86:	e029      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM18 :{FlashDataActive.maxyawdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003f88:	4b2c      	ldr	r3, [pc, #176]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	ee07 3a90 	vmov	s15, r3
 8003f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f94:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f9c:	4b29      	ldr	r3, [pc, #164]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003f9e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8003fa2:	e01b      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM19 :{FlashDataActive.minthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	ee07 3a90 	vmov	s15, r3
 8003fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fb0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003fba:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8003fbe:	e00d      	b.n	8003fdc <TIM2_IRQHandler+0x55c>
					case  PARAM20 :{FlashDataActive.maxthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003fc0:	4b1e      	ldr	r3, [pc, #120]	; (800403c <TIM2_IRQHandler+0x5bc>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	ee07 3a90 	vmov	s15, r3
 8003fc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fcc:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004040 <TIM2_IRQHandler+0x5c0>
 8003fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8003fd6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8003fda:	bf00      	nop
  				}
  			}



  			SendBackFlag=1;
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <TIM2_IRQHandler+0x5cc>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8003fe2:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <TIM2_IRQHandler+0x5d0>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <TIM2_IRQHandler+0x5d4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	4a19      	ldr	r2, [pc, #100]	; (8004054 <TIM2_IRQHandler+0x5d4>)
 8003ff0:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8003ff2:	4b16      	ldr	r3, [pc, #88]	; (800404c <TIM2_IRQHandler+0x5cc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 82aa 	beq.w	8004550 <TIM2_IRQHandler+0xad0>
  {
    	BackTimer++;
 8003ffc:	4b16      	ldr	r3, [pc, #88]	; (8004058 <TIM2_IRQHandler+0x5d8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	4a15      	ldr	r2, [pc, #84]	; (8004058 <TIM2_IRQHandler+0x5d8>)
 8004004:	6013      	str	r3, [r2, #0]

    	//Calculate param for transfer
    	 if(MSGSelector==COMMPARAMACTIVE || MSGSelector==COMMPARAMFLASH)
 8004006:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <TIM2_IRQHandler+0x5b4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d004      	beq.n	8004018 <TIM2_IRQHandler+0x598>
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <TIM2_IRQHandler+0x5b4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b02      	cmp	r3, #2
 8004014:	f040 8158 	bne.w	80042c8 <TIM2_IRQHandler+0x848>
    	 {
    		 if(MSGSelector==COMMPARAMACTIVE)FlashDataTemp=FlashDataActive;
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <TIM2_IRQHandler+0x5b4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d11f      	bne.n	8004060 <TIM2_IRQHandler+0x5e0>
 8004020:	4a0e      	ldr	r2, [pc, #56]	; (800405c <TIM2_IRQHandler+0x5dc>)
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <TIM2_IRQHandler+0x5c4>)
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	2354      	movs	r3, #84	; 0x54
 800402a:	461a      	mov	r2, r3
 800402c:	f005 f8da 	bl	80091e4 <memcpy>
 8004030:	e01e      	b.n	8004070 <TIM2_IRQHandler+0x5f0>
 8004032:	bf00      	nop
 8004034:	2000069c 	.word	0x2000069c
 8004038:	2000078c 	.word	0x2000078c
 800403c:	20000770 	.word	0x20000770
 8004040:	47c35000 	.word	0x47c35000
 8004044:	200004b8 	.word	0x200004b8
 8004048:	0a7c5ac5 	.word	0x0a7c5ac5
 800404c:	20000230 	.word	0x20000230
 8004050:	20000000 	.word	0x20000000
 8004054:	20000694 	.word	0x20000694
 8004058:	20000234 	.word	0x20000234
 800405c:	200007b8 	.word	0x200007b8
    		 else FlashDataTemp=FlashDataFlash;
 8004060:	4ab5      	ldr	r2, [pc, #724]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 8004062:	4bb6      	ldr	r3, [pc, #728]	; (800433c <TIM2_IRQHandler+0x8bc>)
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	2354      	movs	r3, #84	; 0x54
 800406a:	461a      	mov	r2, r3
 800406c:	f005 f8ba 	bl	80091e4 <memcpy>

    		 switch(ParamSelector)
 8004070:	4bb3      	ldr	r3, [pc, #716]	; (8004340 <TIM2_IRQHandler+0x8c0>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3b01      	subs	r3, #1
 8004076:	2b13      	cmp	r3, #19
 8004078:	f200 8126 	bhi.w	80042c8 <TIM2_IRQHandler+0x848>
 800407c:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <TIM2_IRQHandler+0x604>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	080040d5 	.word	0x080040d5
 8004088:	080040f1 	.word	0x080040f1
 800408c:	0800410d 	.word	0x0800410d
 8004090:	08004129 	.word	0x08004129
 8004094:	08004145 	.word	0x08004145
 8004098:	08004161 	.word	0x08004161
 800409c:	0800417d 	.word	0x0800417d
 80040a0:	08004199 	.word	0x08004199
 80040a4:	080041b5 	.word	0x080041b5
 80040a8:	080041d1 	.word	0x080041d1
 80040ac:	080041e3 	.word	0x080041e3
 80040b0:	080041f5 	.word	0x080041f5
 80040b4:	08004207 	.word	0x08004207
 80040b8:	08004219 	.word	0x08004219
 80040bc:	0800422b 	.word	0x0800422b
 80040c0:	0800423d 	.word	0x0800423d
 80040c4:	08004259 	.word	0x08004259
 80040c8:	08004275 	.word	0x08004275
 80040cc:	08004291 	.word	0x08004291
 80040d0:	080042ad 	.word	0x080042ad
    		 {
    	 	 	 case PARAM1: {ParamDataTX=FlashDataTemp.pid_p_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 80040d4:	4b98      	ldr	r3, [pc, #608]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 80040d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80040da:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8004344 <TIM2_IRQHandler+0x8c4>
 80040de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e6:	ee17 2a90 	vmov	r2, s15
 80040ea:	4b97      	ldr	r3, [pc, #604]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e0eb      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM2: {ParamDataTX=FlashDataTemp.pid_i_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 80040f0:	4b91      	ldr	r3, [pc, #580]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 80040f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80040f6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8004344 <TIM2_IRQHandler+0x8c4>
 80040fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80040fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004102:	ee17 2a90 	vmov	r2, s15
 8004106:	4b90      	ldr	r3, [pc, #576]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004108:	601a      	str	r2, [r3, #0]
 800410a:	e0dd      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM3: {ParamDataTX=FlashDataTemp.pid_d_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 800410c:	4b8a      	ldr	r3, [pc, #552]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 800410e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004112:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004344 <TIM2_IRQHandler+0x8c4>
 8004116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800411a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411e:	ee17 2a90 	vmov	r2, s15
 8004122:	4b89      	ldr	r3, [pc, #548]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	e0cf      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM4: {ParamDataTX=FlashDataTemp.pid_p_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004128:	4b83      	ldr	r3, [pc, #524]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 800412a:	edd3 7a04 	vldr	s15, [r3, #16]
 800412e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8004344 <TIM2_IRQHandler+0x8c4>
 8004132:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800413a:	ee17 2a90 	vmov	r2, s15
 800413e:	4b82      	ldr	r3, [pc, #520]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e0c1      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM5: {ParamDataTX=FlashDataTemp.pid_i_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004144:	4b7c      	ldr	r3, [pc, #496]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 8004146:	edd3 7a05 	vldr	s15, [r3, #20]
 800414a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004344 <TIM2_IRQHandler+0x8c4>
 800414e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004156:	ee17 2a90 	vmov	r2, s15
 800415a:	4b7b      	ldr	r3, [pc, #492]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e0b3      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM6: {ParamDataTX=FlashDataTemp.pid_d_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004160:	4b75      	ldr	r3, [pc, #468]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 8004162:	edd3 7a06 	vldr	s15, [r3, #24]
 8004166:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8004344 <TIM2_IRQHandler+0x8c4>
 800416a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800416e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004172:	ee17 2a90 	vmov	r2, s15
 8004176:	4b74      	ldr	r3, [pc, #464]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	e0a5      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM7: {ParamDataTX=FlashDataTemp.pid_p_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 800417c:	4b6e      	ldr	r3, [pc, #440]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 800417e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004182:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004344 <TIM2_IRQHandler+0x8c4>
 8004186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800418a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418e:	ee17 2a90 	vmov	r2, s15
 8004192:	4b6d      	ldr	r3, [pc, #436]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e097      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM8: {ParamDataTX=FlashDataTemp.pid_i_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004198:	4b67      	ldr	r3, [pc, #412]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 800419a:	edd3 7a08 	vldr	s15, [r3, #32]
 800419e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004344 <TIM2_IRQHandler+0x8c4>
 80041a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041aa:	ee17 2a90 	vmov	r2, s15
 80041ae:	4b66      	ldr	r3, [pc, #408]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e089      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM9: {ParamDataTX=FlashDataTemp.pid_d_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 80041b4:	4b60      	ldr	r3, [pc, #384]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 80041b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80041ba:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8004344 <TIM2_IRQHandler+0x8c4>
 80041be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041c6:	ee17 2a90 	vmov	r2, s15
 80041ca:	4b5f      	ldr	r3, [pc, #380]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e07b      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM10: {ParamDataTX=FlashDataTemp.pid_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 80041d0:	4b59      	ldr	r3, [pc, #356]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	4a5d      	ldr	r2, [pc, #372]	; (800434c <TIM2_IRQHandler+0x8cc>)
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	4b5a      	ldr	r3, [pc, #360]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e072      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM11: {ParamDataTX=FlashDataTemp.pid_i_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 80041e2:	4b55      	ldr	r3, [pc, #340]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	4a59      	ldr	r2, [pc, #356]	; (800434c <TIM2_IRQHandler+0x8cc>)
 80041e8:	fb02 f303 	mul.w	r3, r2, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	4b56      	ldr	r3, [pc, #344]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e069      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM12: {ParamDataTX=FlashDataTemp.pid_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 80041f4:	4b50      	ldr	r3, [pc, #320]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	4a54      	ldr	r2, [pc, #336]	; (800434c <TIM2_IRQHandler+0x8cc>)
 80041fa:	fb02 f303 	mul.w	r3, r2, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	4b51      	ldr	r3, [pc, #324]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	e060      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM13: {ParamDataTX=FlashDataTemp.pid_i_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004206:	4b4c      	ldr	r3, [pc, #304]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420a:	4a50      	ldr	r2, [pc, #320]	; (800434c <TIM2_IRQHandler+0x8cc>)
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	461a      	mov	r2, r3
 8004212:	4b4d      	ldr	r3, [pc, #308]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e057      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM14: {ParamDataTX=FlashDataTemp.pid_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004218:	4b47      	ldr	r3, [pc, #284]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	4a4b      	ldr	r2, [pc, #300]	; (800434c <TIM2_IRQHandler+0x8cc>)
 800421e:	fb02 f303 	mul.w	r3, r2, r3
 8004222:	461a      	mov	r2, r3
 8004224:	4b48      	ldr	r3, [pc, #288]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	e04e      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM15: {ParamDataTX=FlashDataTemp.pid_i_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 800422a:	4b43      	ldr	r3, [pc, #268]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	4a47      	ldr	r2, [pc, #284]	; (800434c <TIM2_IRQHandler+0x8cc>)
 8004230:	fb02 f303 	mul.w	r3, r2, r3
 8004234:	461a      	mov	r2, r3
 8004236:	4b44      	ldr	r3, [pc, #272]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e045      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM16: {ParamDataTX=FlashDataTemp.maxpitchdegree*FLASHCONSTANTMULTIPLIER;}break;
 800423c:	4b3e      	ldr	r3, [pc, #248]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 800423e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004242:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004344 <TIM2_IRQHandler+0x8c4>
 8004246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424e:	ee17 2a90 	vmov	r2, s15
 8004252:	4b3d      	ldr	r3, [pc, #244]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	e037      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM17: {ParamDataTX=FlashDataTemp.maxrolldegree*FLASHCONSTANTMULTIPLIER;}break;
 8004258:	4b37      	ldr	r3, [pc, #220]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 800425a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800425e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004344 <TIM2_IRQHandler+0x8c4>
 8004262:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800426a:	ee17 2a90 	vmov	r2, s15
 800426e:	4b36      	ldr	r3, [pc, #216]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	e029      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM18: {ParamDataTX=FlashDataTemp.maxyawdegree*FLASHCONSTANTMULTIPLIER;}break;
 8004274:	4b30      	ldr	r3, [pc, #192]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 8004276:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800427a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004344 <TIM2_IRQHandler+0x8c4>
 800427e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004286:	ee17 2a90 	vmov	r2, s15
 800428a:	4b2f      	ldr	r3, [pc, #188]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e01b      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM19: {ParamDataTX=FlashDataTemp.minthrottle*FLASHCONSTANTMULTIPLIER;}break;
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 8004292:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004296:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004344 <TIM2_IRQHandler+0x8c4>
 800429a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800429e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042a2:	ee17 2a90 	vmov	r2, s15
 80042a6:	4b28      	ldr	r3, [pc, #160]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e00d      	b.n	80042c8 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM20: {ParamDataTX=FlashDataTemp.maxthrottle*FLASHCONSTANTMULTIPLIER;}break;
 80042ac:	4b22      	ldr	r3, [pc, #136]	; (8004338 <TIM2_IRQHandler+0x8b8>)
 80042ae:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80042b2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004344 <TIM2_IRQHandler+0x8c4>
 80042b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042be:	ee17 2a90 	vmov	r2, s15
 80042c2:	4b21      	ldr	r3, [pc, #132]	; (8004348 <TIM2_IRQHandler+0x8c8>)
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	bf00      	nop
    		 }
    	 }

      	switch(BackTimer)
 80042c8:	4b21      	ldr	r3, [pc, #132]	; (8004350 <TIM2_IRQHandler+0x8d0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	f200 813e 	bhi.w	8004550 <TIM2_IRQHandler+0xad0>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <TIM2_IRQHandler+0x85c>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	080042f5 	.word	0x080042f5
 80042e0:	08004551 	.word	0x08004551
 80042e4:	08004551 	.word	0x08004551
 80042e8:	08004309 	.word	0x08004309
 80042ec:	08004529 	.word	0x08004529
 80042f0:	0800453d 	.word	0x0800453d
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042fa:	4816      	ldr	r0, [pc, #88]	; (8004354 <TIM2_IRQHandler+0x8d4>)
 80042fc:	f002 f974 	bl	80065e8 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8004300:	2000      	movs	r0, #0
 8004302:	f7ff f82a 	bl	800335a <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8004306:	e123      	b.n	8004550 <TIM2_IRQHandler+0xad0>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 	 		 nRF24_payloadTX[0] = MSGSelector;
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <TIM2_IRQHandler+0x8d8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4b13      	ldr	r3, [pc, #76]	; (800435c <TIM2_IRQHandler+0x8dc>)
 8004310:	701a      	strb	r2, [r3, #0]

  	 	 	 		switch(MSGSelector)
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <TIM2_IRQHandler+0x8d8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b04      	cmp	r3, #4
 8004318:	f200 8101 	bhi.w	800451e <TIM2_IRQHandler+0xa9e>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <TIM2_IRQHandler+0x8a4>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004361 	.word	0x08004361
 8004328:	080044ab 	.word	0x080044ab
 800432c:	080044e5 	.word	0x080044e5
 8004330:	0800445b 	.word	0x0800445b
 8004334:	08004483 	.word	0x08004483
 8004338:	200007b8 	.word	0x200007b8
 800433c:	20000510 	.word	0x20000510
 8004340:	2000078c 	.word	0x2000078c
 8004344:	47c35000 	.word	0x47c35000
 8004348:	20000794 	.word	0x20000794
 800434c:	000186a0 	.word	0x000186a0
 8004350:	20000234 	.word	0x20000234
 8004354:	40020400 	.word	0x40020400
 8004358:	2000069c 	.word	0x2000069c
 800435c:	20000480 	.word	0x20000480
  	 	 	 		{
  	 	 	 			case COMMCONTROLDATA:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = (uint8_t)(BattmVAVG & 0xFF);
 8004360:	4b89      	ldr	r3, [pc, #548]	; (8004588 <TIM2_IRQHandler+0xb08>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4b89      	ldr	r3, [pc, #548]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004368:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 800436a:	4b87      	ldr	r3, [pc, #540]	; (8004588 <TIM2_IRQHandler+0xb08>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4b86      	ldr	r3, [pc, #536]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004374:	709a      	strb	r2, [r3, #2]

  	 	 	 								  	//save Angle for NRF24 transfer
  	 	 	 								  	if(mpuDataStr.Pitch<0)
 8004376:	4b86      	ldr	r3, [pc, #536]	; (8004590 <TIM2_IRQHandler+0xb10>)
 8004378:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800437c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004384:	d510      	bpl.n	80043a8 <TIM2_IRQHandler+0x928>
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=1;
 8004386:	4b83      	ldr	r3, [pc, #524]	; (8004594 <TIM2_IRQHandler+0xb14>)
 8004388:	2201      	movs	r2, #1
 800438a:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=mpuDataStr.Pitch*(-1);
 800438c:	4b80      	ldr	r3, [pc, #512]	; (8004590 <TIM2_IRQHandler+0xb10>)
 800438e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8004392:	eef1 7a67 	vneg.f32	s15, s15
 8004396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439a:	edc7 7a01 	vstr	s15, [r7, #4]
 800439e:	793b      	ldrb	r3, [r7, #4]
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4b7d      	ldr	r3, [pc, #500]	; (8004598 <TIM2_IRQHandler+0xb18>)
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e00d      	b.n	80043c4 <TIM2_IRQHandler+0x944>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=0;
 80043a8:	4b7a      	ldr	r3, [pc, #488]	; (8004594 <TIM2_IRQHandler+0xb14>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=mpuDataStr.Pitch;
 80043ae:	4b78      	ldr	r3, [pc, #480]	; (8004590 <TIM2_IRQHandler+0xb10>)
 80043b0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80043b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80043bc:	793b      	ldrb	r3, [r7, #4]
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	4b75      	ldr	r3, [pc, #468]	; (8004598 <TIM2_IRQHandler+0xb18>)
 80043c2:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	if(mpuDataStr.Roll<0)
 80043c4:	4b72      	ldr	r3, [pc, #456]	; (8004590 <TIM2_IRQHandler+0xb10>)
 80043c6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80043ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d2:	d510      	bpl.n	80043f6 <TIM2_IRQHandler+0x976>
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=1;
 80043d4:	4b71      	ldr	r3, [pc, #452]	; (800459c <TIM2_IRQHandler+0xb1c>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=mpuDataStr.Roll*(-1);
 80043da:	4b6d      	ldr	r3, [pc, #436]	; (8004590 <TIM2_IRQHandler+0xb10>)
 80043dc:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80043e0:	eef1 7a67 	vneg.f32	s15, s15
 80043e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80043ec:	793b      	ldrb	r3, [r7, #4]
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	4b6b      	ldr	r3, [pc, #428]	; (80045a0 <TIM2_IRQHandler+0xb20>)
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e00d      	b.n	8004412 <TIM2_IRQHandler+0x992>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=0;
 80043f6:	4b69      	ldr	r3, [pc, #420]	; (800459c <TIM2_IRQHandler+0xb1c>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=mpuDataStr.Roll;
 80043fc:	4b64      	ldr	r3, [pc, #400]	; (8004590 <TIM2_IRQHandler+0xb10>)
 80043fe:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8004402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004406:	edc7 7a01 	vstr	s15, [r7, #4]
 800440a:	793b      	ldrb	r3, [r7, #4]
 800440c:	b2da      	uxtb	r2, r3
 800440e:	4b64      	ldr	r3, [pc, #400]	; (80045a0 <TIM2_IRQHandler+0xb20>)
 8004410:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	nRF24_payloadTX[3] = (uint8_t)(AnglePitchNRF24);
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <TIM2_IRQHandler+0xb18>)
 8004414:	781a      	ldrb	r2, [r3, #0]
 8004416:	4b5d      	ldr	r3, [pc, #372]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004418:	70da      	strb	r2, [r3, #3]
  	 	 	 								  	nRF24_payloadTX[4] = (uint8_t)(AngleRollNRF24);
 800441a:	4b61      	ldr	r3, [pc, #388]	; (80045a0 <TIM2_IRQHandler+0xb20>)
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	4b5b      	ldr	r3, [pc, #364]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004420:	711a      	strb	r2, [r3, #4]
  	 	 	 								  	nRF24_payloadTX[5] = (uint8_t)(AnglePitchDIR + (AngleRollDIR<<1) + (GyroCalibStatus<<2) + ((MotorStatus & 0x7)<<3) ); //1bit Pitch DIR, 1bit Roll DIR, 1 bit GyroCalinFlag, 3 bit MotorStatus
 8004422:	4b5e      	ldr	r3, [pc, #376]	; (800459c <TIM2_IRQHandler+0xb1c>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	b2da      	uxtb	r2, r3
 800442a:	4b5a      	ldr	r3, [pc, #360]	; (8004594 <TIM2_IRQHandler+0xb14>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	4413      	add	r3, r2
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4b5c      	ldr	r3, [pc, #368]	; (80045a4 <TIM2_IRQHandler+0xb24>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	b2db      	uxtb	r3, r3
 800443c:	4413      	add	r3, r2
 800443e:	b2da      	uxtb	r2, r3
 8004440:	4b59      	ldr	r3, [pc, #356]	; (80045a8 <TIM2_IRQHandler+0xb28>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800444e:	b2db      	uxtb	r3, r3
 8004450:	4413      	add	r3, r2
 8004452:	b2da      	uxtb	r2, r3
 8004454:	4b4d      	ldr	r3, [pc, #308]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004456:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 8004458:	e061      	b.n	800451e <TIM2_IRQHandler+0xa9e>
  	 	 	 			case COMMERASEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 800445a:	4b4c      	ldr	r3, [pc, #304]	; (800458c <TIM2_IRQHandler+0xb0c>)
 800445c:	2200      	movs	r2, #0
 800445e:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2]=0;
 8004460:	4b4a      	ldr	r3, [pc, #296]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004462:	2200      	movs	r2, #0
 8004464:	709a      	strb	r2, [r3, #2]
  	 	 	 							  	 	nRF24_payloadTX[3]=0;
 8004466:	4b49      	ldr	r3, [pc, #292]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004468:	2200      	movs	r2, #0
 800446a:	70da      	strb	r2, [r3, #3]
  	 	 	 							  	 	nRF24_payloadTX[4]=0;
 800446c:	4b47      	ldr	r3, [pc, #284]	; (800458c <TIM2_IRQHandler+0xb0c>)
 800446e:	2200      	movs	r2, #0
 8004470:	711a      	strb	r2, [r3, #4]
  	 	 	 							  	 	nRF24_payloadTX[5]=0;
 8004472:	4b46      	ldr	r3, [pc, #280]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004474:	2200      	movs	r2, #0
 8004476:	715a      	strb	r2, [r3, #5]
  	 	 	 							  	 	FlashEraseTimeoutCount=FLASHOPERATIONTIMEOUT;//set timeout to prevent multiple calls
 8004478:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <TIM2_IRQHandler+0xb2c>)
 800447a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800447e:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 8004480:	e04d      	b.n	800451e <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMWRITEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 8004482:	4b42      	ldr	r3, [pc, #264]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004484:	2200      	movs	r2, #0
 8004486:	705a      	strb	r2, [r3, #1]
  	 	 	 						  	 	  	nRF24_payloadTX[2]=0;
 8004488:	4b40      	ldr	r3, [pc, #256]	; (800458c <TIM2_IRQHandler+0xb0c>)
 800448a:	2200      	movs	r2, #0
 800448c:	709a      	strb	r2, [r3, #2]
  	 	 	 						  	 	  	nRF24_payloadTX[3]=0;
 800448e:	4b3f      	ldr	r3, [pc, #252]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004490:	2200      	movs	r2, #0
 8004492:	70da      	strb	r2, [r3, #3]
  	 	 	 						  	 	  	nRF24_payloadTX[4]=0;
 8004494:	4b3d      	ldr	r3, [pc, #244]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004496:	2200      	movs	r2, #0
 8004498:	711a      	strb	r2, [r3, #4]
  	 	 	 						  	 	  	nRF24_payloadTX[5]=0;
 800449a:	4b3c      	ldr	r3, [pc, #240]	; (800458c <TIM2_IRQHandler+0xb0c>)
 800449c:	2200      	movs	r2, #0
 800449e:	715a      	strb	r2, [r3, #5]
  	 	 	 						  	 	  	FlashWriteTimeoutCount=FLASHOPERATIONTIMEOUT; //set timeout to prevent multiple calls
 80044a0:	4b43      	ldr	r3, [pc, #268]	; (80045b0 <TIM2_IRQHandler+0xb30>)
 80044a2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80044a6:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 80044a8:	e039      	b.n	800451e <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMPARAMACTIVE:
											{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 80044aa:	4b42      	ldr	r3, [pc, #264]	; (80045b4 <TIM2_IRQHandler+0xb34>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	4b36      	ldr	r3, [pc, #216]	; (800458c <TIM2_IRQHandler+0xb0c>)
 80044b2:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 80044b4:	4b40      	ldr	r3, [pc, #256]	; (80045b8 <TIM2_IRQHandler+0xb38>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	0e1b      	lsrs	r3, r3, #24
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	4b33      	ldr	r3, [pc, #204]	; (800458c <TIM2_IRQHandler+0xb0c>)
 80044be:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 80044c0:	4b3d      	ldr	r3, [pc, #244]	; (80045b8 <TIM2_IRQHandler+0xb38>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	4b30      	ldr	r3, [pc, #192]	; (800458c <TIM2_IRQHandler+0xb0c>)
 80044ca:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 80044cc:	4b3a      	ldr	r3, [pc, #232]	; (80045b8 <TIM2_IRQHandler+0xb38>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	0a1b      	lsrs	r3, r3, #8
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	4b2d      	ldr	r3, [pc, #180]	; (800458c <TIM2_IRQHandler+0xb0c>)
 80044d6:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 80044d8:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <TIM2_IRQHandler+0xb38>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	4b2b      	ldr	r3, [pc, #172]	; (800458c <TIM2_IRQHandler+0xb0c>)
 80044e0:	715a      	strb	r2, [r3, #5]
											}break;
 80044e2:	e01c      	b.n	800451e <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMPARAMFLASH:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 80044e4:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <TIM2_IRQHandler+0xb34>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	4b28      	ldr	r3, [pc, #160]	; (800458c <TIM2_IRQHandler+0xb0c>)
 80044ec:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 80044ee:	4b32      	ldr	r3, [pc, #200]	; (80045b8 <TIM2_IRQHandler+0xb38>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	0e1b      	lsrs	r3, r3, #24
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	4b25      	ldr	r3, [pc, #148]	; (800458c <TIM2_IRQHandler+0xb0c>)
 80044f8:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 80044fa:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <TIM2_IRQHandler+0xb38>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	0c1b      	lsrs	r3, r3, #16
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4b22      	ldr	r3, [pc, #136]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004504:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 8004506:	4b2c      	ldr	r3, [pc, #176]	; (80045b8 <TIM2_IRQHandler+0xb38>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b1f      	ldr	r3, [pc, #124]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004510:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8004512:	4b29      	ldr	r3, [pc, #164]	; (80045b8 <TIM2_IRQHandler+0xb38>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	4b1c      	ldr	r3, [pc, #112]	; (800458c <TIM2_IRQHandler+0xb0c>)
 800451a:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 800451c:	bf00      	nop
  	 	 	 		}

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 6);
 800451e:	2106      	movs	r1, #6
 8004520:	481a      	ldr	r0, [pc, #104]	; (800458c <TIM2_IRQHandler+0xb0c>)
 8004522:	f7fe fd47 	bl	8002fb4 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 8004526:	e013      	b.n	8004550 <TIM2_IRQHandler+0xad0>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8004528:	2001      	movs	r0, #1
 800452a:	f7fe ff16 	bl	800335a <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 800452e:	2201      	movs	r2, #1
 8004530:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004534:	4821      	ldr	r0, [pc, #132]	; (80045bc <TIM2_IRQHandler+0xb3c>)
 8004536:	f002 f857 	bl	80065e8 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 800453a:	e009      	b.n	8004550 <TIM2_IRQHandler+0xad0>

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 800453c:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <TIM2_IRQHandler+0xb40>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8004542:	4b20      	ldr	r3, [pc, #128]	; (80045c4 <TIM2_IRQHandler+0xb44>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8004548:	4b1f      	ldr	r3, [pc, #124]	; (80045c8 <TIM2_IRQHandler+0xb48>)
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]

  				}break;
 800454e:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8004550:	4b1e      	ldr	r3, [pc, #120]	; (80045cc <TIM2_IRQHandler+0xb4c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <TIM2_IRQHandler+0xb4c>)
 8004558:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 800455a:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <TIM2_IRQHandler+0xb4c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004562:	d146      	bne.n	80045f2 <TIM2_IRQHandler+0xb72>
  {
    		MSGprerSecond=MSGcount;
 8004564:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <TIM2_IRQHandler+0xb50>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a1a      	ldr	r2, [pc, #104]	; (80045d4 <TIM2_IRQHandler+0xb54>)
 800456a:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 800456c:	4b18      	ldr	r3, [pc, #96]	; (80045d0 <TIM2_IRQHandler+0xb50>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b09      	cmp	r3, #9
 8004572:	d835      	bhi.n	80045e0 <TIM2_IRQHandler+0xb60>
    		{
    			MSGLowCount++;
 8004574:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <TIM2_IRQHandler+0xb58>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3301      	adds	r3, #1
 800457a:	4a17      	ldr	r2, [pc, #92]	; (80045d8 <TIM2_IRQHandler+0xb58>)
 800457c:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 800457e:	4b17      	ldr	r3, [pc, #92]	; (80045dc <TIM2_IRQHandler+0xb5c>)
 8004580:	2201      	movs	r2, #1
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	e02f      	b.n	80045e6 <TIM2_IRQHandler+0xb66>
 8004586:	bf00      	nop
 8004588:	20000228 	.word	0x20000228
 800458c:	20000480 	.word	0x20000480
 8004590:	20000324 	.word	0x20000324
 8004594:	20000780 	.word	0x20000780
 8004598:	20000814 	.word	0x20000814
 800459c:	200007ac 	.word	0x200007ac
 80045a0:	2000081c 	.word	0x2000081c
 80045a4:	20000220 	.word	0x20000220
 80045a8:	2000021c 	.word	0x2000021c
 80045ac:	20000690 	.word	0x20000690
 80045b0:	2000082c 	.word	0x2000082c
 80045b4:	2000078c 	.word	0x2000078c
 80045b8:	20000794 	.word	0x20000794
 80045bc:	40020400 	.word	0x40020400
 80045c0:	20000000 	.word	0x20000000
 80045c4:	20000230 	.word	0x20000230
 80045c8:	20000234 	.word	0x20000234
 80045cc:	2000067c 	.word	0x2000067c
 80045d0:	20000694 	.word	0x20000694
 80045d4:	20000778 	.word	0x20000778
 80045d8:	20000774 	.word	0x20000774
 80045dc:	200007b4 	.word	0x200007b4
    		}
    		 else  ConnectWeakFlag=0;
 80045e0:	4bc5      	ldr	r3, [pc, #788]	; (80048f8 <TIM2_IRQHandler+0xe78>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 80045e6:	4bc5      	ldr	r3, [pc, #788]	; (80048fc <TIM2_IRQHandler+0xe7c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 80045ec:	4bc4      	ldr	r3, [pc, #784]	; (8004900 <TIM2_IRQHandler+0xe80>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  //MPU 9250
  watch1=TIM2->CNT;
 80045f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	4ac2      	ldr	r2, [pc, #776]	; (8004904 <TIM2_IRQHandler+0xe84>)
 80045fa:	6013      	str	r3, [r2, #0]
  MPU9250_GetData(&mpuDataStr);
 80045fc:	48c2      	ldr	r0, [pc, #776]	; (8004908 <TIM2_IRQHandler+0xe88>)
 80045fe:	f7fc fe7d 	bl	80012fc <MPU9250_GetData>
  watch2=TIM2->CNT;
 8004602:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	4ac0      	ldr	r2, [pc, #768]	; (800490c <TIM2_IRQHandler+0xe8c>)
 800460a:	6013      	str	r3, [r2, #0]
  MPU_CalculateFromRAWData(&mpuDataStr,0.002);
 800460c:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8004910 <TIM2_IRQHandler+0xe90>
 8004610:	48bd      	ldr	r0, [pc, #756]	; (8004908 <TIM2_IRQHandler+0xe88>)
 8004612:	f7fc ff41 	bl	8001498 <MPU_CalculateFromRAWData>
  watch3=TIM2->CNT;
 8004616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	4abd      	ldr	r2, [pc, #756]	; (8004914 <TIM2_IRQHandler+0xe94>)
 800461e:	6013      	str	r3, [r2, #0]

  //PID input Filtered
  PitchPIDin =  /*(PitchPIDin * 0.99) */+ (mpuDataStr.Pitch  );
 8004620:	4bb9      	ldr	r3, [pc, #740]	; (8004908 <TIM2_IRQHandler+0xe88>)
 8004622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004624:	4abc      	ldr	r2, [pc, #752]	; (8004918 <TIM2_IRQHandler+0xe98>)
 8004626:	6013      	str	r3, [r2, #0]
  RollPIDin = /*(RollPIDin * 0.99) */+ (mpuDataStr.Roll );
 8004628:	4bb7      	ldr	r3, [pc, #732]	; (8004908 <TIM2_IRQHandler+0xe88>)
 800462a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800462c:	4abb      	ldr	r2, [pc, #748]	; (800491c <TIM2_IRQHandler+0xe9c>)
 800462e:	6013      	str	r3, [r2, #0]
  YawPIDin = (YawPIDin * 0.99) + (mpuDataStr.AngleSpeed_Gyro_Z * 0.01);
 8004630:	4bbb      	ldr	r3, [pc, #748]	; (8004920 <TIM2_IRQHandler+0xea0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb ff8f 	bl	8000558 <__aeabi_f2d>
 800463a:	a3ab      	add	r3, pc, #684	; (adr r3, 80048e8 <TIM2_IRQHandler+0xe68>)
 800463c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004640:	f7fb ffe2 	bl	8000608 <__aeabi_dmul>
 8004644:	4603      	mov	r3, r0
 8004646:	460c      	mov	r4, r1
 8004648:	4625      	mov	r5, r4
 800464a:	461c      	mov	r4, r3
 800464c:	4bae      	ldr	r3, [pc, #696]	; (8004908 <TIM2_IRQHandler+0xe88>)
 800464e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004650:	4618      	mov	r0, r3
 8004652:	f7fb ff81 	bl	8000558 <__aeabi_f2d>
 8004656:	a3a6      	add	r3, pc, #664	; (adr r3, 80048f0 <TIM2_IRQHandler+0xe70>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f7fb ffd4 	bl	8000608 <__aeabi_dmul>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4620      	mov	r0, r4
 8004666:	4629      	mov	r1, r5
 8004668:	f7fb fe18 	bl	800029c <__adddf3>
 800466c:	4603      	mov	r3, r0
 800466e:	460c      	mov	r4, r1
 8004670:	4618      	mov	r0, r3
 8004672:	4621      	mov	r1, r4
 8004674:	f7fc faa0 	bl	8000bb8 <__aeabi_d2f>
 8004678:	4602      	mov	r2, r0
 800467a:	4ba9      	ldr	r3, [pc, #676]	; (8004920 <TIM2_IRQHandler+0xea0>)
 800467c:	601a      	str	r2, [r3, #0]
  //-------------------------------------------------------------------

  //SCALE DATA
  //Throttle UP->DOWN 0-100 ->scaling
  ThrottleINscaled=ScaleDataFl(Ljoyupdown,0,100,FlashDataActive.minthrottle,FlashDataActive.maxthrottle);
 800467e:	4ba9      	ldr	r3, [pc, #676]	; (8004924 <TIM2_IRQHandler+0xea4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468a:	4ba7      	ldr	r3, [pc, #668]	; (8004928 <TIM2_IRQHandler+0xea8>)
 800468c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8004690:	4ba5      	ldr	r3, [pc, #660]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004692:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8004696:	eeb0 2a66 	vmov.f32	s4, s13
 800469a:	eef0 1a47 	vmov.f32	s3, s14
 800469e:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 800492c <TIM2_IRQHandler+0xeac>
 80046a2:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8004930 <TIM2_IRQHandler+0xeb0>
 80046a6:	eeb0 0a67 	vmov.f32	s0, s15
 80046aa:	f000 fb99 	bl	8004de0 <ScaleDataFl>
 80046ae:	eef0 7a40 	vmov.f32	s15, s0
 80046b2:	4ba0      	ldr	r3, [pc, #640]	; (8004934 <TIM2_IRQHandler+0xeb4>)
 80046b4:	edc3 7a00 	vstr	s15, [r3]

  //Pitch UP->DOWN 0-100 ->scaling
  PitchINscaled=ScaleDataFl(Djoyupdown,0,100,-FlashDataActive.maxpitchdegree,FlashDataActive.maxpitchdegree);
 80046b8:	4b9f      	ldr	r3, [pc, #636]	; (8004938 <TIM2_IRQHandler+0xeb8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	ee07 3a90 	vmov	s15, r3
 80046c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046c4:	4b98      	ldr	r3, [pc, #608]	; (8004928 <TIM2_IRQHandler+0xea8>)
 80046c6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80046ca:	eef1 7a67 	vneg.f32	s15, s15
 80046ce:	4b96      	ldr	r3, [pc, #600]	; (8004928 <TIM2_IRQHandler+0xea8>)
 80046d0:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80046d4:	eeb0 2a66 	vmov.f32	s4, s13
 80046d8:	eef0 1a67 	vmov.f32	s3, s15
 80046dc:	ed9f 1a93 	vldr	s2, [pc, #588]	; 800492c <TIM2_IRQHandler+0xeac>
 80046e0:	eddf 0a93 	vldr	s1, [pc, #588]	; 8004930 <TIM2_IRQHandler+0xeb0>
 80046e4:	eeb0 0a47 	vmov.f32	s0, s14
 80046e8:	f000 fb7a 	bl	8004de0 <ScaleDataFl>
 80046ec:	eef0 7a40 	vmov.f32	s15, s0
 80046f0:	4b92      	ldr	r3, [pc, #584]	; (800493c <TIM2_IRQHandler+0xebc>)
 80046f2:	edc3 7a00 	vstr	s15, [r3]
  //Invert
  PitchINscaled*=(-1);
 80046f6:	4b91      	ldr	r3, [pc, #580]	; (800493c <TIM2_IRQHandler+0xebc>)
 80046f8:	edd3 7a00 	vldr	s15, [r3]
 80046fc:	eef1 7a67 	vneg.f32	s15, s15
 8004700:	4b8e      	ldr	r3, [pc, #568]	; (800493c <TIM2_IRQHandler+0xebc>)
 8004702:	edc3 7a00 	vstr	s15, [r3]

  //Roll LEFT->RIGHT 0 -> 100 -> scaling
  RollINscaled=ScaleDataFl(Djoyleftright,0,100,-FlashDataActive.maxrolldegree,FlashDataActive.maxrolldegree);
 8004706:	4b8e      	ldr	r3, [pc, #568]	; (8004940 <TIM2_IRQHandler+0xec0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004712:	4b85      	ldr	r3, [pc, #532]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004714:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004718:	eef1 7a67 	vneg.f32	s15, s15
 800471c:	4b82      	ldr	r3, [pc, #520]	; (8004928 <TIM2_IRQHandler+0xea8>)
 800471e:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8004722:	eeb0 2a66 	vmov.f32	s4, s13
 8004726:	eef0 1a67 	vmov.f32	s3, s15
 800472a:	ed9f 1a80 	vldr	s2, [pc, #512]	; 800492c <TIM2_IRQHandler+0xeac>
 800472e:	eddf 0a80 	vldr	s1, [pc, #512]	; 8004930 <TIM2_IRQHandler+0xeb0>
 8004732:	eeb0 0a47 	vmov.f32	s0, s14
 8004736:	f000 fb53 	bl	8004de0 <ScaleDataFl>
 800473a:	eef0 7a40 	vmov.f32	s15, s0
 800473e:	4b81      	ldr	r3, [pc, #516]	; (8004944 <TIM2_IRQHandler+0xec4>)
 8004740:	edc3 7a00 	vstr	s15, [r3]

  //YAW angular speed of rotation degrees/second
  YawINscaled=ScaleDataFl(Ljoyleftright,0,100,-FlashDataActive.maxyawdegree,FlashDataActive.maxyawdegree);
 8004744:	4b80      	ldr	r3, [pc, #512]	; (8004948 <TIM2_IRQHandler+0xec8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	ee07 3a90 	vmov	s15, r3
 800474c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004750:	4b75      	ldr	r3, [pc, #468]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004752:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004756:	eef1 7a67 	vneg.f32	s15, s15
 800475a:	4b73      	ldr	r3, [pc, #460]	; (8004928 <TIM2_IRQHandler+0xea8>)
 800475c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8004760:	eeb0 2a66 	vmov.f32	s4, s13
 8004764:	eef0 1a67 	vmov.f32	s3, s15
 8004768:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800492c <TIM2_IRQHandler+0xeac>
 800476c:	eddf 0a70 	vldr	s1, [pc, #448]	; 8004930 <TIM2_IRQHandler+0xeb0>
 8004770:	eeb0 0a47 	vmov.f32	s0, s14
 8004774:	f000 fb34 	bl	8004de0 <ScaleDataFl>
 8004778:	eef0 7a40 	vmov.f32	s15, s0
 800477c:	4b73      	ldr	r3, [pc, #460]	; (800494c <TIM2_IRQHandler+0xecc>)
 800477e:	edc3 7a00 	vstr	s15, [r3]

  //MOTOR CONTROL

  //PID
  PitchPIDout = pid(PitchINscaled, PitchPIDin, FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch, &pitch_integral, &pitch_diffErrHist, FlashDataActive.pid_i_max_pitch, FlashDataActive.pid_max_pitch);
 8004782:	4b6e      	ldr	r3, [pc, #440]	; (800493c <TIM2_IRQHandler+0xebc>)
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	4b63      	ldr	r3, [pc, #396]	; (8004918 <TIM2_IRQHandler+0xe98>)
 800478a:	ed93 7a00 	vldr	s14, [r3]
 800478e:	4b66      	ldr	r3, [pc, #408]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004790:	edd3 6a01 	vldr	s13, [r3, #4]
 8004794:	4b64      	ldr	r3, [pc, #400]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004796:	ed93 6a02 	vldr	s12, [r3, #8]
 800479a:	4b63      	ldr	r3, [pc, #396]	; (8004928 <TIM2_IRQHandler+0xea8>)
 800479c:	edd3 5a03 	vldr	s11, [r3, #12]
 80047a0:	4b61      	ldr	r3, [pc, #388]	; (8004928 <TIM2_IRQHandler+0xea8>)
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	ee05 3a10 	vmov	s10, r3
 80047a8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80047ac:	4b5e      	ldr	r3, [pc, #376]	; (8004928 <TIM2_IRQHandler+0xea8>)
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	ee04 3a90 	vmov	s9, r3
 80047b4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80047b8:	eeb0 3a64 	vmov.f32	s6, s9
 80047bc:	eef0 2a45 	vmov.f32	s5, s10
 80047c0:	4963      	ldr	r1, [pc, #396]	; (8004950 <TIM2_IRQHandler+0xed0>)
 80047c2:	4864      	ldr	r0, [pc, #400]	; (8004954 <TIM2_IRQHandler+0xed4>)
 80047c4:	eeb0 2a65 	vmov.f32	s4, s11
 80047c8:	eef0 1a46 	vmov.f32	s3, s12
 80047cc:	eeb0 1a66 	vmov.f32	s2, s13
 80047d0:	eef0 0a47 	vmov.f32	s1, s14
 80047d4:	eeb0 0a67 	vmov.f32	s0, s15
 80047d8:	f000 fb44 	bl	8004e64 <pid>
 80047dc:	eef0 7a40 	vmov.f32	s15, s0
 80047e0:	4b5d      	ldr	r3, [pc, #372]	; (8004958 <TIM2_IRQHandler+0xed8>)
 80047e2:	edc3 7a00 	vstr	s15, [r3]
  RollPIDout = pid(RollINscaled, RollPIDin, FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll,&roll_integral,&roll_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_roll );
 80047e6:	4b57      	ldr	r3, [pc, #348]	; (8004944 <TIM2_IRQHandler+0xec4>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	4b4b      	ldr	r3, [pc, #300]	; (800491c <TIM2_IRQHandler+0xe9c>)
 80047ee:	ed93 7a00 	vldr	s14, [r3]
 80047f2:	4b4d      	ldr	r3, [pc, #308]	; (8004928 <TIM2_IRQHandler+0xea8>)
 80047f4:	edd3 6a04 	vldr	s13, [r3, #16]
 80047f8:	4b4b      	ldr	r3, [pc, #300]	; (8004928 <TIM2_IRQHandler+0xea8>)
 80047fa:	ed93 6a05 	vldr	s12, [r3, #20]
 80047fe:	4b4a      	ldr	r3, [pc, #296]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004800:	edd3 5a06 	vldr	s11, [r3, #24]
 8004804:	4b48      	ldr	r3, [pc, #288]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	ee05 3a10 	vmov	s10, r3
 800480c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8004810:	4b45      	ldr	r3, [pc, #276]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004814:	ee04 3a90 	vmov	s9, r3
 8004818:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800481c:	eeb0 3a64 	vmov.f32	s6, s9
 8004820:	eef0 2a45 	vmov.f32	s5, s10
 8004824:	494d      	ldr	r1, [pc, #308]	; (800495c <TIM2_IRQHandler+0xedc>)
 8004826:	484e      	ldr	r0, [pc, #312]	; (8004960 <TIM2_IRQHandler+0xee0>)
 8004828:	eeb0 2a65 	vmov.f32	s4, s11
 800482c:	eef0 1a46 	vmov.f32	s3, s12
 8004830:	eeb0 1a66 	vmov.f32	s2, s13
 8004834:	eef0 0a47 	vmov.f32	s1, s14
 8004838:	eeb0 0a67 	vmov.f32	s0, s15
 800483c:	f000 fb12 	bl	8004e64 <pid>
 8004840:	eef0 7a40 	vmov.f32	s15, s0
 8004844:	4b47      	ldr	r3, [pc, #284]	; (8004964 <TIM2_IRQHandler+0xee4>)
 8004846:	edc3 7a00 	vstr	s15, [r3]
  YawPIDout = pid(YawINscaled, YawPIDin, FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw, &yaw_integral,&yaw_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_yaw );
 800484a:	4b40      	ldr	r3, [pc, #256]	; (800494c <TIM2_IRQHandler+0xecc>)
 800484c:	edd3 7a00 	vldr	s15, [r3]
 8004850:	4b33      	ldr	r3, [pc, #204]	; (8004920 <TIM2_IRQHandler+0xea0>)
 8004852:	ed93 7a00 	vldr	s14, [r3]
 8004856:	4b34      	ldr	r3, [pc, #208]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004858:	edd3 6a07 	vldr	s13, [r3, #28]
 800485c:	4b32      	ldr	r3, [pc, #200]	; (8004928 <TIM2_IRQHandler+0xea8>)
 800485e:	ed93 6a08 	vldr	s12, [r3, #32]
 8004862:	4b31      	ldr	r3, [pc, #196]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004864:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 8004868:	4b2f      	ldr	r3, [pc, #188]	; (8004928 <TIM2_IRQHandler+0xea8>)
 800486a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486c:	ee05 3a10 	vmov	s10, r3
 8004870:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8004874:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <TIM2_IRQHandler+0xea8>)
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	ee04 3a90 	vmov	s9, r3
 800487c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8004880:	eeb0 3a64 	vmov.f32	s6, s9
 8004884:	eef0 2a45 	vmov.f32	s5, s10
 8004888:	4937      	ldr	r1, [pc, #220]	; (8004968 <TIM2_IRQHandler+0xee8>)
 800488a:	4838      	ldr	r0, [pc, #224]	; (800496c <TIM2_IRQHandler+0xeec>)
 800488c:	eeb0 2a65 	vmov.f32	s4, s11
 8004890:	eef0 1a46 	vmov.f32	s3, s12
 8004894:	eeb0 1a66 	vmov.f32	s2, s13
 8004898:	eef0 0a47 	vmov.f32	s1, s14
 800489c:	eeb0 0a67 	vmov.f32	s0, s15
 80048a0:	f000 fae0 	bl	8004e64 <pid>
 80048a4:	eef0 7a40 	vmov.f32	s15, s0
 80048a8:	4b31      	ldr	r3, [pc, #196]	; (8004970 <TIM2_IRQHandler+0xef0>)
 80048aa:	edc3 7a00 	vstr	s15, [r3]

  //TESTING
  if(ConnectWeakFlag==1)MotorStatus=MOTOROFF;//if connection is lost!
 80048ae:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <TIM2_IRQHandler+0xe78>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d102      	bne.n	80048bc <TIM2_IRQHandler+0xe3c>
 80048b6:	4b2f      	ldr	r3, [pc, #188]	; (8004974 <TIM2_IRQHandler+0xef4>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	601a      	str	r2, [r3, #0]

  //Motor STATUS (TOGGLE 1)
  //ON toggle 0->1 front start motor ON sequence
  if(togg1hist!=togg1 && togg1==1 && ThrottleINscaled<MOTORSTARTBLOCKTHRESHOLD)MotorStatus=MOTORSTARTING;
 80048bc:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <TIM2_IRQHandler+0xef8>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b2e      	ldr	r3, [pc, #184]	; (800497c <TIM2_IRQHandler+0xefc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d060      	beq.n	800498a <TIM2_IRQHandler+0xf0a>
 80048c8:	4b2c      	ldr	r3, [pc, #176]	; (800497c <TIM2_IRQHandler+0xefc>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d15c      	bne.n	800498a <TIM2_IRQHandler+0xf0a>
 80048d0:	4b18      	ldr	r3, [pc, #96]	; (8004934 <TIM2_IRQHandler+0xeb4>)
 80048d2:	edd3 7a00 	vldr	s15, [r3]
 80048d6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004980 <TIM2_IRQHandler+0xf00>
 80048da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048e2:	d552      	bpl.n	800498a <TIM2_IRQHandler+0xf0a>
 80048e4:	e04e      	b.n	8004984 <TIM2_IRQHandler+0xf04>
 80048e6:	bf00      	nop
 80048e8:	7ae147ae 	.word	0x7ae147ae
 80048ec:	3fefae14 	.word	0x3fefae14
 80048f0:	47ae147b 	.word	0x47ae147b
 80048f4:	3f847ae1 	.word	0x3f847ae1
 80048f8:	200007b4 	.word	0x200007b4
 80048fc:	20000694 	.word	0x20000694
 8004900:	2000067c 	.word	0x2000067c
 8004904:	20000414 	.word	0x20000414
 8004908:	20000324 	.word	0x20000324
 800490c:	20000408 	.word	0x20000408
 8004910:	3b03126f 	.word	0x3b03126f
 8004914:	200004b0 	.word	0x200004b0
 8004918:	2000080c 	.word	0x2000080c
 800491c:	20000790 	.word	0x20000790
 8004920:	20000788 	.word	0x20000788
 8004924:	200004ac 	.word	0x200004ac
 8004928:	200004b8 	.word	0x200004b8
 800492c:	42c80000 	.word	0x42c80000
 8004930:	00000000 	.word	0x00000000
 8004934:	20000688 	.word	0x20000688
 8004938:	20000564 	.word	0x20000564
 800493c:	200007a0 	.word	0x200007a0
 8004940:	200002f8 	.word	0x200002f8
 8004944:	2000079c 	.word	0x2000079c
 8004948:	200004a0 	.word	0x200004a0
 800494c:	200006a0 	.word	0x200006a0
 8004950:	2000023c 	.word	0x2000023c
 8004954:	20000238 	.word	0x20000238
 8004958:	20000830 	.word	0x20000830
 800495c:	20000244 	.word	0x20000244
 8004960:	20000240 	.word	0x20000240
 8004964:	20000798 	.word	0x20000798
 8004968:	2000024c 	.word	0x2000024c
 800496c:	20000248 	.word	0x20000248
 8004970:	20000834 	.word	0x20000834
 8004974:	2000021c 	.word	0x2000021c
 8004978:	2000083c 	.word	0x2000083c
 800497c:	200004a8 	.word	0x200004a8
 8004980:	43480000 	.word	0x43480000
 8004984:	4bb1      	ldr	r3, [pc, #708]	; (8004c4c <TIM2_IRQHandler+0x11cc>)
 8004986:	2202      	movs	r2, #2
 8004988:	601a      	str	r2, [r3, #0]

  //ON toggle 0-> motor always OFF
  if(togg1==0)MotorStatus=MOTOROFF;
 800498a:	4bb1      	ldr	r3, [pc, #708]	; (8004c50 <TIM2_IRQHandler+0x11d0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d102      	bne.n	8004998 <TIM2_IRQHandler+0xf18>
 8004992:	4bae      	ldr	r3, [pc, #696]	; (8004c4c <TIM2_IRQHandler+0x11cc>)
 8004994:	2201      	movs	r2, #1
 8004996:	601a      	str	r2, [r3, #0]

  //GYROCALIB-----------------------------------------------------------------------------------------
  if(togg2hist==0 && togg2==1 && GyroCalibStatus==0 && MotorStatus==MOTOROFF) //button 2 pressed Motor OFF Calib not in progress
 8004998:	4bae      	ldr	r3, [pc, #696]	; (8004c54 <TIM2_IRQHandler+0x11d4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10e      	bne.n	80049be <TIM2_IRQHandler+0xf3e>
 80049a0:	4bad      	ldr	r3, [pc, #692]	; (8004c58 <TIM2_IRQHandler+0x11d8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10a      	bne.n	80049be <TIM2_IRQHandler+0xf3e>
 80049a8:	4bac      	ldr	r3, [pc, #688]	; (8004c5c <TIM2_IRQHandler+0x11dc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d106      	bne.n	80049be <TIM2_IRQHandler+0xf3e>
 80049b0:	4ba6      	ldr	r3, [pc, #664]	; (8004c4c <TIM2_IRQHandler+0x11cc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d102      	bne.n	80049be <TIM2_IRQHandler+0xf3e>
  {
	  GyroCalibStatus=1;
 80049b8:	4ba8      	ldr	r3, [pc, #672]	; (8004c5c <TIM2_IRQHandler+0x11dc>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	601a      	str	r2, [r3, #0]
  }

  //Write and Erase Flash operation timeout to prevent multiple calls in sequence
  if(FlashWriteTimeoutCount>0)FlashWriteTimeoutCount--;
 80049be:	4ba8      	ldr	r3, [pc, #672]	; (8004c60 <TIM2_IRQHandler+0x11e0>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d004      	beq.n	80049d0 <TIM2_IRQHandler+0xf50>
 80049c6:	4ba6      	ldr	r3, [pc, #664]	; (8004c60 <TIM2_IRQHandler+0x11e0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	4aa4      	ldr	r2, [pc, #656]	; (8004c60 <TIM2_IRQHandler+0x11e0>)
 80049ce:	6013      	str	r3, [r2, #0]
  if(FlashEraseTimeoutCount>0)FlashEraseTimeoutCount--;
 80049d0:	4ba4      	ldr	r3, [pc, #656]	; (8004c64 <TIM2_IRQHandler+0x11e4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <TIM2_IRQHandler+0xf62>
 80049d8:	4ba2      	ldr	r3, [pc, #648]	; (8004c64 <TIM2_IRQHandler+0x11e4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3b01      	subs	r3, #1
 80049de:	4aa1      	ldr	r2, [pc, #644]	; (8004c64 <TIM2_IRQHandler+0x11e4>)
 80049e0:	6013      	str	r3, [r2, #0]

  //Write active parameters in flash
  if(FlashWriteFlag && MotorStatus==MOTOROFF && FlashWriteTimeoutCount==0)
 80049e2:	4ba1      	ldr	r3, [pc, #644]	; (8004c68 <TIM2_IRQHandler+0x11e8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d013      	beq.n	8004a12 <TIM2_IRQHandler+0xf92>
 80049ea:	4b98      	ldr	r3, [pc, #608]	; (8004c4c <TIM2_IRQHandler+0x11cc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d10f      	bne.n	8004a12 <TIM2_IRQHandler+0xf92>
 80049f2:	4b9b      	ldr	r3, [pc, #620]	; (8004c60 <TIM2_IRQHandler+0x11e0>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <TIM2_IRQHandler+0xf92>
  {
  	  WriteFlashData(FLASHCONSTADDR,FLASHCONSTSECTOR, &FlashDataActive);
 80049fa:	4a9c      	ldr	r2, [pc, #624]	; (8004c6c <TIM2_IRQHandler+0x11ec>)
 80049fc:	2105      	movs	r1, #5
 80049fe:	489c      	ldr	r0, [pc, #624]	; (8004c70 <TIM2_IRQHandler+0x11f0>)
 8004a00:	f7fe f812 	bl	8002a28 <WriteFlashData>
  	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);//Read back values to Flash structure
 8004a04:	499b      	ldr	r1, [pc, #620]	; (8004c74 <TIM2_IRQHandler+0x11f4>)
 8004a06:	489a      	ldr	r0, [pc, #616]	; (8004c70 <TIM2_IRQHandler+0x11f0>)
 8004a08:	f7fe f9b2 	bl	8002d70 <ReadFlashData>
  	  FlashWriteFlag=0;//reset
 8004a0c:	4b96      	ldr	r3, [pc, #600]	; (8004c68 <TIM2_IRQHandler+0x11e8>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
  }

  //Erase Flash Data
  if(FlashEraseFlag && MotorStatus==MOTOROFF && FlashEraseTimeoutCount==0)
 8004a12:	4b99      	ldr	r3, [pc, #612]	; (8004c78 <TIM2_IRQHandler+0x11f8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00d      	beq.n	8004a36 <TIM2_IRQHandler+0xfb6>
 8004a1a:	4b8c      	ldr	r3, [pc, #560]	; (8004c4c <TIM2_IRQHandler+0x11cc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d109      	bne.n	8004a36 <TIM2_IRQHandler+0xfb6>
 8004a22:	4b90      	ldr	r3, [pc, #576]	; (8004c64 <TIM2_IRQHandler+0x11e4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <TIM2_IRQHandler+0xfb6>
  {
  	  EraseFlashData(FLASHCONSTSECTOR);
 8004a2a:	2005      	movs	r0, #5
 8004a2c:	f7fe f984 	bl	8002d38 <EraseFlashData>
  	  FlashEraseFlag=0;//reset
 8004a30:	4b91      	ldr	r3, [pc, #580]	; (8004c78 <TIM2_IRQHandler+0x11f8>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
  }

  if(GyroCalibStatus==1)
 8004a36:	4b89      	ldr	r3, [pc, #548]	; (8004c5c <TIM2_IRQHandler+0x11dc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d11a      	bne.n	8004a74 <TIM2_IRQHandler+0xff4>
  {
  		//Transfer accelerometer angles to Gyro
  	  	mpuDataStr.Pitch = mpuDataStr.Angle_Accel_Pitch;
 8004a3e:	4b8f      	ldr	r3, [pc, #572]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4a8e      	ldr	r2, [pc, #568]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a44:	6793      	str	r3, [r2, #120]	; 0x78
  	  	mpuDataStr.Roll =  mpuDataStr.Angle_Accel_Roll;
 8004a46:	4b8d      	ldr	r3, [pc, #564]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	4a8c      	ldr	r2, [pc, #560]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a4c:	67d3      	str	r3, [r2, #124]	; 0x7c

  	  	mpuDataStr.Angle_Gyro_Pitch_Rad = mpuDataStr.Angle_Accel_Pitch_Rad;
 8004a4e:	4b8b      	ldr	r3, [pc, #556]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	4a8a      	ldr	r2, [pc, #552]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a54:	6613      	str	r3, [r2, #96]	; 0x60
  	  	mpuDataStr.Angle_Gyro_Roll_Rad = mpuDataStr.Angle_Accel_Roll_Rad;
 8004a56:	4b89      	ldr	r3, [pc, #548]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5a:	4a88      	ldr	r2, [pc, #544]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a5c:	6653      	str	r3, [r2, #100]	; 0x64

  	  	mpuDataStr.Angle_Gyro_Yaw = 0;
 8004a5e:	4b87      	ldr	r3, [pc, #540]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	65da      	str	r2, [r3, #92]	; 0x5c
  	  	mpuDataStr.Angle_Gyro_Yaw_Rad = 0;
 8004a66:	4b85      	ldr	r3, [pc, #532]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	669a      	str	r2, [r3, #104]	; 0x68

  		GyroCalibStatus=0;
 8004a6e:	4b7b      	ldr	r3, [pc, #492]	; (8004c5c <TIM2_IRQHandler+0x11dc>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]

  }//--------------------------------------------------------------------------------------------------

  if(MotorStatus==MOTORSTARTING)
 8004a74:	4b75      	ldr	r3, [pc, #468]	; (8004c4c <TIM2_IRQHandler+0x11cc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d10e      	bne.n	8004a9a <TIM2_IRQHandler+0x101a>
  {

	  if(GyroCalibStatus==0)//only if calib is finished allow transition
 8004a7c:	4b77      	ldr	r3, [pc, #476]	; (8004c5c <TIM2_IRQHandler+0x11dc>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10a      	bne.n	8004a9a <TIM2_IRQHandler+0x101a>
  	  {
  		  //Before Start trasfer Accel Angles to Gyro Angles
  		  mpuDataStr.Angle_Gyro_Pitch = mpuDataStr.Angle_Accel_Pitch;
 8004a84:	4b7d      	ldr	r3, [pc, #500]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	4a7c      	ldr	r2, [pc, #496]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a8a:	6553      	str	r3, [r2, #84]	; 0x54
  		  mpuDataStr.Angle_Gyro_Roll = mpuDataStr.Angle_Accel_Roll;
 8004a8c:	4b7b      	ldr	r3, [pc, #492]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	4a7a      	ldr	r2, [pc, #488]	; (8004c7c <TIM2_IRQHandler+0x11fc>)
 8004a92:	6593      	str	r3, [r2, #88]	; 0x58

  		  MotorStatus=MOTORRUNNING;
 8004a94:	4b6d      	ldr	r3, [pc, #436]	; (8004c4c <TIM2_IRQHandler+0x11cc>)
 8004a96:	2203      	movs	r2, #3
 8004a98:	601a      	str	r2, [r3, #0]

   //MOT 1 FRONT LEFT  CW
   //MOT 2 FRONT RIGHT CCW
   //MOT 3 BACK  RIGHT CW
   //MOT 4 BACK  LEFT  CCW
   switch(MotorStatus)
 8004a9a:	4b6c      	ldr	r3, [pc, #432]	; (8004c4c <TIM2_IRQHandler+0x11cc>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	f040 8142 	bne.w	8004d28 <TIM2_IRQHandler+0x12a8>
   {
    	  case MOTORRUNNING:
    	  	  	  {
    	  	  		  PWM_Mot1=1000 + ThrottleINscaled  - PitchPIDout - RollPIDout + YawPIDout;
 8004aa4:	4b76      	ldr	r3, [pc, #472]	; (8004c80 <TIM2_IRQHandler+0x1200>)
 8004aa6:	edd3 7a00 	vldr	s15, [r3]
 8004aaa:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004aae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ab2:	4b75      	ldr	r3, [pc, #468]	; (8004c88 <TIM2_IRQHandler+0x1208>)
 8004ab4:	edd3 7a00 	vldr	s15, [r3]
 8004ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004abc:	4b73      	ldr	r3, [pc, #460]	; (8004c8c <TIM2_IRQHandler+0x120c>)
 8004abe:	edd3 7a00 	vldr	s15, [r3]
 8004ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ac6:	4b72      	ldr	r3, [pc, #456]	; (8004c90 <TIM2_IRQHandler+0x1210>)
 8004ac8:	edd3 7a00 	vldr	s15, [r3]
 8004acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ad4:	ee17 2a90 	vmov	r2, s15
 8004ad8:	4b6e      	ldr	r3, [pc, #440]	; (8004c94 <TIM2_IRQHandler+0x1214>)
 8004ada:	601a      	str	r2, [r3, #0]
    	  		  	  PWM_Mot2=1000 + ThrottleINscaled  - PitchPIDout + RollPIDout - YawPIDout;
 8004adc:	4b68      	ldr	r3, [pc, #416]	; (8004c80 <TIM2_IRQHandler+0x1200>)
 8004ade:	edd3 7a00 	vldr	s15, [r3]
 8004ae2:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aea:	4b67      	ldr	r3, [pc, #412]	; (8004c88 <TIM2_IRQHandler+0x1208>)
 8004aec:	edd3 7a00 	vldr	s15, [r3]
 8004af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004af4:	4b65      	ldr	r3, [pc, #404]	; (8004c8c <TIM2_IRQHandler+0x120c>)
 8004af6:	edd3 7a00 	vldr	s15, [r3]
 8004afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004afe:	4b64      	ldr	r3, [pc, #400]	; (8004c90 <TIM2_IRQHandler+0x1210>)
 8004b00:	edd3 7a00 	vldr	s15, [r3]
 8004b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0c:	ee17 2a90 	vmov	r2, s15
 8004b10:	4b61      	ldr	r3, [pc, #388]	; (8004c98 <TIM2_IRQHandler+0x1218>)
 8004b12:	601a      	str	r2, [r3, #0]
    	  		  	  PWM_Mot3=1000 + ThrottleINscaled  + PitchPIDout + RollPIDout + YawPIDout;
 8004b14:	4b5a      	ldr	r3, [pc, #360]	; (8004c80 <TIM2_IRQHandler+0x1200>)
 8004b16:	edd3 7a00 	vldr	s15, [r3]
 8004b1a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b22:	4b59      	ldr	r3, [pc, #356]	; (8004c88 <TIM2_IRQHandler+0x1208>)
 8004b24:	edd3 7a00 	vldr	s15, [r3]
 8004b28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b2c:	4b57      	ldr	r3, [pc, #348]	; (8004c8c <TIM2_IRQHandler+0x120c>)
 8004b2e:	edd3 7a00 	vldr	s15, [r3]
 8004b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b36:	4b56      	ldr	r3, [pc, #344]	; (8004c90 <TIM2_IRQHandler+0x1210>)
 8004b38:	edd3 7a00 	vldr	s15, [r3]
 8004b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b44:	ee17 2a90 	vmov	r2, s15
 8004b48:	4b54      	ldr	r3, [pc, #336]	; (8004c9c <TIM2_IRQHandler+0x121c>)
 8004b4a:	601a      	str	r2, [r3, #0]
    	  		  	  PWM_Mot4=1000 + ThrottleINscaled  + PitchPIDout - RollPIDout - YawPIDout;
 8004b4c:	4b4c      	ldr	r3, [pc, #304]	; (8004c80 <TIM2_IRQHandler+0x1200>)
 8004b4e:	edd3 7a00 	vldr	s15, [r3]
 8004b52:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b5a:	4b4b      	ldr	r3, [pc, #300]	; (8004c88 <TIM2_IRQHandler+0x1208>)
 8004b5c:	edd3 7a00 	vldr	s15, [r3]
 8004b60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b64:	4b49      	ldr	r3, [pc, #292]	; (8004c8c <TIM2_IRQHandler+0x120c>)
 8004b66:	edd3 7a00 	vldr	s15, [r3]
 8004b6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b6e:	4b48      	ldr	r3, [pc, #288]	; (8004c90 <TIM2_IRQHandler+0x1210>)
 8004b70:	edd3 7a00 	vldr	s15, [r3]
 8004b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b7c:	ee17 2a90 	vmov	r2, s15
 8004b80:	4b47      	ldr	r3, [pc, #284]	; (8004ca0 <TIM2_IRQHandler+0x1220>)
 8004b82:	601a      	str	r2, [r3, #0]

    	  		  	  //MIN OBRATI
    	  		  	  if(PWM_Mot1 < (1000+ FlashDataActive.minthrottle))PWM_Mot1=(1000+ FlashDataActive.minthrottle);
 8004b84:	4b43      	ldr	r3, [pc, #268]	; (8004c94 <TIM2_IRQHandler+0x1214>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b90:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <TIM2_IRQHandler+0x11ec>)
 8004b92:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004b96:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba6:	d50c      	bpl.n	8004bc2 <TIM2_IRQHandler+0x1142>
 8004ba8:	4b30      	ldr	r3, [pc, #192]	; (8004c6c <TIM2_IRQHandler+0x11ec>)
 8004baa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004bae:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004bb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bba:	ee17 2a90 	vmov	r2, s15
 8004bbe:	4b35      	ldr	r3, [pc, #212]	; (8004c94 <TIM2_IRQHandler+0x1214>)
 8004bc0:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot2 < (1000+ FlashDataActive.minthrottle))PWM_Mot2=(1000+ FlashDataActive.minthrottle);
 8004bc2:	4b35      	ldr	r3, [pc, #212]	; (8004c98 <TIM2_IRQHandler+0x1218>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bce:	4b27      	ldr	r3, [pc, #156]	; (8004c6c <TIM2_IRQHandler+0x11ec>)
 8004bd0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004bd4:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be4:	d50c      	bpl.n	8004c00 <TIM2_IRQHandler+0x1180>
 8004be6:	4b21      	ldr	r3, [pc, #132]	; (8004c6c <TIM2_IRQHandler+0x11ec>)
 8004be8:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004bec:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004bf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf8:	ee17 2a90 	vmov	r2, s15
 8004bfc:	4b26      	ldr	r3, [pc, #152]	; (8004c98 <TIM2_IRQHandler+0x1218>)
 8004bfe:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot3 < (1000+ FlashDataActive.minthrottle))PWM_Mot3=(1000+ FlashDataActive.minthrottle);
 8004c00:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <TIM2_IRQHandler+0x121c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c0c:	4b17      	ldr	r3, [pc, #92]	; (8004c6c <TIM2_IRQHandler+0x11ec>)
 8004c0e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004c12:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c22:	d50c      	bpl.n	8004c3e <TIM2_IRQHandler+0x11be>
 8004c24:	4b11      	ldr	r3, [pc, #68]	; (8004c6c <TIM2_IRQHandler+0x11ec>)
 8004c26:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004c2a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004c84 <TIM2_IRQHandler+0x1204>
 8004c2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c36:	ee17 2a90 	vmov	r2, s15
 8004c3a:	4b18      	ldr	r3, [pc, #96]	; (8004c9c <TIM2_IRQHandler+0x121c>)
 8004c3c:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot4 < (1000+ FlashDataActive.minthrottle))PWM_Mot4=(1000+ FlashDataActive.minthrottle);
 8004c3e:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <TIM2_IRQHandler+0x1220>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c4a:	e02b      	b.n	8004ca4 <TIM2_IRQHandler+0x1224>
 8004c4c:	2000021c 	.word	0x2000021c
 8004c50:	200004a8 	.word	0x200004a8
 8004c54:	200007a8 	.word	0x200007a8
 8004c58:	2000056c 	.word	0x2000056c
 8004c5c:	20000220 	.word	0x20000220
 8004c60:	2000082c 	.word	0x2000082c
 8004c64:	20000690 	.word	0x20000690
 8004c68:	20000824 	.word	0x20000824
 8004c6c:	200004b8 	.word	0x200004b8
 8004c70:	08020000 	.word	0x08020000
 8004c74:	20000510 	.word	0x20000510
 8004c78:	20000684 	.word	0x20000684
 8004c7c:	20000324 	.word	0x20000324
 8004c80:	20000688 	.word	0x20000688
 8004c84:	447a0000 	.word	0x447a0000
 8004c88:	20000830 	.word	0x20000830
 8004c8c:	20000798 	.word	0x20000798
 8004c90:	20000834 	.word	0x20000834
 8004c94:	200007b0 	.word	0x200007b0
 8004c98:	2000068c 	.word	0x2000068c
 8004c9c:	20000680 	.word	0x20000680
 8004ca0:	2000077c 	.word	0x2000077c
 8004ca4:	4b41      	ldr	r3, [pc, #260]	; (8004dac <TIM2_IRQHandler+0x132c>)
 8004ca6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004caa:	eddf 6a41 	vldr	s13, [pc, #260]	; 8004db0 <TIM2_IRQHandler+0x1330>
 8004cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cba:	d50c      	bpl.n	8004cd6 <TIM2_IRQHandler+0x1256>
 8004cbc:	4b3b      	ldr	r3, [pc, #236]	; (8004dac <TIM2_IRQHandler+0x132c>)
 8004cbe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004cc2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004db0 <TIM2_IRQHandler+0x1330>
 8004cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cce:	ee17 2a90 	vmov	r2, s15
 8004cd2:	4b38      	ldr	r3, [pc, #224]	; (8004db4 <TIM2_IRQHandler+0x1334>)
 8004cd4:	601a      	str	r2, [r3, #0]

    	  		  	  //MAX OBRATI
    	  		  	  if(PWM_Mot1 > 1950)PWM_Mot1=1950;
 8004cd6:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <TIM2_IRQHandler+0x1338>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f240 729e 	movw	r2, #1950	; 0x79e
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d903      	bls.n	8004cea <TIM2_IRQHandler+0x126a>
 8004ce2:	4b35      	ldr	r3, [pc, #212]	; (8004db8 <TIM2_IRQHandler+0x1338>)
 8004ce4:	f240 729e 	movw	r2, #1950	; 0x79e
 8004ce8:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot2 > 1950)PWM_Mot2=1950;
 8004cea:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <TIM2_IRQHandler+0x133c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f240 729e 	movw	r2, #1950	; 0x79e
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d903      	bls.n	8004cfe <TIM2_IRQHandler+0x127e>
 8004cf6:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <TIM2_IRQHandler+0x133c>)
 8004cf8:	f240 729e 	movw	r2, #1950	; 0x79e
 8004cfc:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot3 > 1950)PWM_Mot3=1950;
 8004cfe:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <TIM2_IRQHandler+0x1340>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f240 729e 	movw	r2, #1950	; 0x79e
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d903      	bls.n	8004d12 <TIM2_IRQHandler+0x1292>
 8004d0a:	4b2d      	ldr	r3, [pc, #180]	; (8004dc0 <TIM2_IRQHandler+0x1340>)
 8004d0c:	f240 729e 	movw	r2, #1950	; 0x79e
 8004d10:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot4 > 1950)PWM_Mot4=1950;
 8004d12:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <TIM2_IRQHandler+0x1334>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f240 729e 	movw	r2, #1950	; 0x79e
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d92d      	bls.n	8004d7a <TIM2_IRQHandler+0x12fa>
 8004d1e:	4b25      	ldr	r3, [pc, #148]	; (8004db4 <TIM2_IRQHandler+0x1334>)
 8004d20:	f240 729e 	movw	r2, #1950	; 0x79e
 8004d24:	601a      	str	r2, [r3, #0]

    	  	  	  }break;
 8004d26:	e028      	b.n	8004d7a <TIM2_IRQHandler+0x12fa>

    	  default:
    	  	  	  {
    	  	  		  PWM_Mot1=900;
 8004d28:	4b23      	ldr	r3, [pc, #140]	; (8004db8 <TIM2_IRQHandler+0x1338>)
 8004d2a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004d2e:	601a      	str	r2, [r3, #0]
    		  	  	  PWM_Mot2=900;
 8004d30:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <TIM2_IRQHandler+0x133c>)
 8004d32:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004d36:	601a      	str	r2, [r3, #0]
    		  	  	  PWM_Mot3=900;
 8004d38:	4b21      	ldr	r3, [pc, #132]	; (8004dc0 <TIM2_IRQHandler+0x1340>)
 8004d3a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004d3e:	601a      	str	r2, [r3, #0]
    		  	  	  PWM_Mot4=900;
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <TIM2_IRQHandler+0x1334>)
 8004d42:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004d46:	601a      	str	r2, [r3, #0]

    		  	  	  //Reset PID
    		  	  	  pitch_integral=0;
 8004d48:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <TIM2_IRQHandler+0x1344>)
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
    		  	  	  pitch_diffErrHist=0;
 8004d50:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <TIM2_IRQHandler+0x1348>)
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
    		  	  	  roll_integral=0;
 8004d58:	4b1c      	ldr	r3, [pc, #112]	; (8004dcc <TIM2_IRQHandler+0x134c>)
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
    		  	  	  roll_diffErrHist=0;
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <TIM2_IRQHandler+0x1350>)
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
    		  	  	  yaw_integral=0;
 8004d68:	4b1a      	ldr	r3, [pc, #104]	; (8004dd4 <TIM2_IRQHandler+0x1354>)
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
    		  	  	  yaw_diffErrHist=0;
 8004d70:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <TIM2_IRQHandler+0x1358>)
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

    	  	  	  }break;
 8004d78:	e000      	b.n	8004d7c <TIM2_IRQHandler+0x12fc>
    	  	  	  }break;
 8004d7a:	bf00      	nop
   }

   //SET PWM CHANNELS-----------------------------------------------------
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 8004d7c:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <TIM2_IRQHandler+0x135c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a0d      	ldr	r2, [pc, #52]	; (8004db8 <TIM2_IRQHandler+0x1338>)
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <TIM2_IRQHandler+0x135c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <TIM2_IRQHandler+0x133c>)
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 8004d90:	4b12      	ldr	r3, [pc, #72]	; (8004ddc <TIM2_IRQHandler+0x135c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a0a      	ldr	r2, [pc, #40]	; (8004dc0 <TIM2_IRQHandler+0x1340>)
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 8004d9a:	4b10      	ldr	r3, [pc, #64]	; (8004ddc <TIM2_IRQHandler+0x135c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a05      	ldr	r2, [pc, #20]	; (8004db4 <TIM2_IRQHandler+0x1334>)
 8004da0:	6812      	ldr	r2, [r2, #0]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END TIM2_IRQn 1 */
}
 8004da4:	bf00      	nop
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bdb0      	pop	{r4, r5, r7, pc}
 8004dac:	200004b8 	.word	0x200004b8
 8004db0:	447a0000 	.word	0x447a0000
 8004db4:	2000077c 	.word	0x2000077c
 8004db8:	200007b0 	.word	0x200007b0
 8004dbc:	2000068c 	.word	0x2000068c
 8004dc0:	20000680 	.word	0x20000680
 8004dc4:	20000238 	.word	0x20000238
 8004dc8:	2000023c 	.word	0x2000023c
 8004dcc:	20000240 	.word	0x20000240
 8004dd0:	20000244 	.word	0x20000244
 8004dd4:	20000248 	.word	0x20000248
 8004dd8:	2000024c 	.word	0x2000024c
 8004ddc:	20000840 	.word	0x20000840

08004de0 <ScaleDataFl>:

/* USER CODE BEGIN 1 */

float ScaleDataFl(float in_value,float in_min,float in_max, float out_min, float out_max)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	ed87 0a05 	vstr	s0, [r7, #20]
 8004dea:	edc7 0a04 	vstr	s1, [r7, #16]
 8004dee:	ed87 1a03 	vstr	s2, [r7, #12]
 8004df2:	edc7 1a02 	vstr	s3, [r7, #8]
 8004df6:	ed87 2a01 	vstr	s4, [r7, #4]
	float factor;
	float out;

	factor=(out_max-out_min)/(in_max-in_min);
 8004dfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8004dfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e02:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004e06:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e16:	edc7 7a06 	vstr	s15, [r7, #24]
	out=(in_value-in_min)*factor+out_min;
 8004e1a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004e22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e26:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e36:	edc7 7a07 	vstr	s15, [r7, #28]
	if(out<out_min)out=out_min;
 8004e3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e4a:	d501      	bpl.n	8004e50 <ScaleDataFl+0x70>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	61fb      	str	r3, [r7, #28]

	return out;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	ee07 3a90 	vmov	s15, r3

}
 8004e56:	eeb0 0a67 	vmov.f32	s0, s15
 8004e5a:	3724      	adds	r7, #36	; 0x24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <pid>:

float pid(float pid_reference, float pid_input, float pid_p, float pid_i, float pid_d, float *integral, float *diffErrHist, float PIDimax, float PIDmax)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b08d      	sub	sp, #52	; 0x34
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004e6e:	edc7 0a08 	vstr	s1, [r7, #32]
 8004e72:	ed87 1a07 	vstr	s2, [r7, #28]
 8004e76:	edc7 1a06 	vstr	s3, [r7, #24]
 8004e7a:	ed87 2a05 	vstr	s4, [r7, #20]
 8004e7e:	6138      	str	r0, [r7, #16]
 8004e80:	60f9      	str	r1, [r7, #12]
 8004e82:	edc7 2a02 	vstr	s5, [r7, #8]
 8004e86:	ed87 3a01 	vstr	s6, [r7, #4]
	float out;
	float pid_error_temp;

	//Erro calculation
	pid_error_temp = pid_input - pid_reference;
 8004e8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8004e8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e96:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//Integral part + saturation
	*integral += pid_i * pid_error_temp;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	ed93 7a00 	vldr	s14, [r3]
 8004ea0:	edd7 6a06 	vldr	s13, [r7, #24]
 8004ea4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004ea8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	edc3 7a00 	vstr	s15, [r3]
	if(*integral > PIDimax)*integral = PIDimax;
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	edd3 7a00 	vldr	s15, [r3]
 8004ebc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec8:	d503      	bpl.n	8004ed2 <pid+0x6e>
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e012      	b.n	8004ef8 <pid+0x94>
	else if(*integral < PIDimax * -1)*integral = PIDimax * -1;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	ed93 7a00 	vldr	s14, [r3]
 8004ed8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004edc:	eef1 7a67 	vneg.f32	s15, s15
 8004ee0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee8:	d506      	bpl.n	8004ef8 <pid+0x94>
 8004eea:	edd7 7a02 	vldr	s15, [r7, #8]
 8004eee:	eef1 7a67 	vneg.f32	s15, s15
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	edc3 7a00 	vstr	s15, [r3]

	out = pid_p * pid_error_temp + *integral + pid_d * (pid_error_temp - *diffErrHist);
 8004ef8:	ed97 7a07 	vldr	s14, [r7, #28]
 8004efc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004f00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	edd3 7a00 	vldr	s15, [r3]
 8004f0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	edd3 7a00 	vldr	s15, [r3]
 8004f14:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8004f18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004f1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004f20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f28:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if(out > PIDmax)out = PIDmax;
 8004f2c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3c:	dd02      	ble.n	8004f44 <pid+0xe0>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f42:	e010      	b.n	8004f66 <pid+0x102>
	else if(out < PIDmax * -1)out = PIDmax * -1;
 8004f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f48:	eef1 7a67 	vneg.f32	s15, s15
 8004f4c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f58:	d505      	bpl.n	8004f66 <pid+0x102>
 8004f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f5e:	eef1 7a67 	vneg.f32	s15, s15
 8004f62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	//save Error for next cylce D calculation
	*diffErrHist = pid_error_temp;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6a:	601a      	str	r2, [r3, #0]


	return out;
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	ee07 3a90 	vmov	s15, r3
}
 8004f72:	eeb0 0a67 	vmov.f32	s0, s15
 8004f76:	3734      	adds	r7, #52	; 0x34
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004f88:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <_sbrk+0x50>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <_sbrk+0x16>
		heap_end = &end;
 8004f90:	4b0f      	ldr	r3, [pc, #60]	; (8004fd0 <_sbrk+0x50>)
 8004f92:	4a10      	ldr	r2, [pc, #64]	; (8004fd4 <_sbrk+0x54>)
 8004f94:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004f96:	4b0e      	ldr	r3, [pc, #56]	; (8004fd0 <_sbrk+0x50>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <_sbrk+0x50>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	466a      	mov	r2, sp
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d907      	bls.n	8004fba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004faa:	f004 f8f1 	bl	8009190 <__errno>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	230c      	movs	r3, #12
 8004fb2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fb8:	e006      	b.n	8004fc8 <_sbrk+0x48>
	}

	heap_end += incr;
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <_sbrk+0x50>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	4a03      	ldr	r2, [pc, #12]	; (8004fd0 <_sbrk+0x50>)
 8004fc4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20000250 	.word	0x20000250
 8004fd4:	20000928 	.word	0x20000928

08004fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fdc:	4b08      	ldr	r3, [pc, #32]	; (8005000 <SystemInit+0x28>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	4a07      	ldr	r2, [pc, #28]	; (8005000 <SystemInit+0x28>)
 8004fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004fec:	4b04      	ldr	r3, [pc, #16]	; (8005000 <SystemInit+0x28>)
 8004fee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ff2:	609a      	str	r2, [r3, #8]
#endif
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b096      	sub	sp, #88	; 0x58
 8005008:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800500a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	609a      	str	r2, [r3, #8]
 8005016:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005018:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	605a      	str	r2, [r3, #4]
 800502c:	609a      	str	r2, [r3, #8]
 800502e:	60da      	str	r2, [r3, #12]
 8005030:	611a      	str	r2, [r3, #16]
 8005032:	615a      	str	r2, [r3, #20]
 8005034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005036:	1d3b      	adds	r3, r7, #4
 8005038:	2220      	movs	r2, #32
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f004 f8dc 	bl	80091fa <memset>

  htim1.Instance = TIM1;
 8005042:	4b51      	ldr	r3, [pc, #324]	; (8005188 <MX_TIM1_Init+0x184>)
 8005044:	4a51      	ldr	r2, [pc, #324]	; (800518c <MX_TIM1_Init+0x188>)
 8005046:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005048:	4b4f      	ldr	r3, [pc, #316]	; (8005188 <MX_TIM1_Init+0x184>)
 800504a:	2253      	movs	r2, #83	; 0x53
 800504c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800504e:	4b4e      	ldr	r3, [pc, #312]	; (8005188 <MX_TIM1_Init+0x184>)
 8005050:	2200      	movs	r2, #0
 8005052:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8005054:	4b4c      	ldr	r3, [pc, #304]	; (8005188 <MX_TIM1_Init+0x184>)
 8005056:	f644 6220 	movw	r2, #20000	; 0x4e20
 800505a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800505c:	4b4a      	ldr	r3, [pc, #296]	; (8005188 <MX_TIM1_Init+0x184>)
 800505e:	2200      	movs	r2, #0
 8005060:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005062:	4b49      	ldr	r3, [pc, #292]	; (8005188 <MX_TIM1_Init+0x184>)
 8005064:	2200      	movs	r2, #0
 8005066:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005068:	4b47      	ldr	r3, [pc, #284]	; (8005188 <MX_TIM1_Init+0x184>)
 800506a:	2200      	movs	r2, #0
 800506c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800506e:	4846      	ldr	r0, [pc, #280]	; (8005188 <MX_TIM1_Init+0x184>)
 8005070:	f002 fdb6 	bl	8007be0 <HAL_TIM_Base_Init>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800507a:	f7fd ff93 	bl	8002fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800507e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005082:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005084:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005088:	4619      	mov	r1, r3
 800508a:	483f      	ldr	r0, [pc, #252]	; (8005188 <MX_TIM1_Init+0x184>)
 800508c:	f003 f82c 	bl	80080e8 <HAL_TIM_ConfigClockSource>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8005096:	f7fd ff85 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800509a:	483b      	ldr	r0, [pc, #236]	; (8005188 <MX_TIM1_Init+0x184>)
 800509c:	f002 fdef 	bl	8007c7e <HAL_TIM_PWM_Init>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80050a6:	f7fd ff7d 	bl	8002fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ae:	2300      	movs	r3, #0
 80050b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80050b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80050b6:	4619      	mov	r1, r3
 80050b8:	4833      	ldr	r0, [pc, #204]	; (8005188 <MX_TIM1_Init+0x184>)
 80050ba:	f003 fbcb 	bl	8008854 <HAL_TIMEx_MasterConfigSynchronization>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80050c4:	f7fd ff6e 	bl	8002fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050c8:	2360      	movs	r3, #96	; 0x60
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 80050cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050d2:	2300      	movs	r3, #0
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80050d6:	2300      	movs	r3, #0
 80050d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80050da:	2304      	movs	r3, #4
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80050de:	2300      	movs	r3, #0
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050ea:	2200      	movs	r2, #0
 80050ec:	4619      	mov	r1, r3
 80050ee:	4826      	ldr	r0, [pc, #152]	; (8005188 <MX_TIM1_Init+0x184>)
 80050f0:	f002 ff34 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80050fa:	f7fd ff53 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80050fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005102:	2204      	movs	r2, #4
 8005104:	4619      	mov	r1, r3
 8005106:	4820      	ldr	r0, [pc, #128]	; (8005188 <MX_TIM1_Init+0x184>)
 8005108:	f002 ff28 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8005112:	f7fd ff47 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800511a:	2208      	movs	r2, #8
 800511c:	4619      	mov	r1, r3
 800511e:	481a      	ldr	r0, [pc, #104]	; (8005188 <MX_TIM1_Init+0x184>)
 8005120:	f002 ff1c 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800512a:	f7fd ff3b 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800512e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005132:	220c      	movs	r2, #12
 8005134:	4619      	mov	r1, r3
 8005136:	4814      	ldr	r0, [pc, #80]	; (8005188 <MX_TIM1_Init+0x184>)
 8005138:	f002 ff10 	bl	8007f5c <HAL_TIM_PWM_ConfigChannel>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8005142:	f7fd ff2f 	bl	8002fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005146:	2300      	movs	r3, #0
 8005148:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005156:	2300      	movs	r3, #0
 8005158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800515a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800515e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005160:	2300      	movs	r3, #0
 8005162:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	4619      	mov	r1, r3
 8005168:	4807      	ldr	r0, [pc, #28]	; (8005188 <MX_TIM1_Init+0x184>)
 800516a:	f003 fbe1 	bl	8008930 <HAL_TIMEx_ConfigBreakDeadTime>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8005174:	f7fd ff16 	bl	8002fa4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8005178:	4803      	ldr	r0, [pc, #12]	; (8005188 <MX_TIM1_Init+0x184>)
 800517a:	f000 f891 	bl	80052a0 <HAL_TIM_MspPostInit>

}
 800517e:	bf00      	nop
 8005180:	3758      	adds	r7, #88	; 0x58
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000840 	.word	0x20000840
 800518c:	40010000 	.word	0x40010000

08005190 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005196:	f107 0308 	add.w	r3, r7, #8
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	609a      	str	r2, [r3, #8]
 80051a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051a4:	463b      	mov	r3, r7
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80051ac:	4b1d      	ldr	r3, [pc, #116]	; (8005224 <MX_TIM2_Init+0x94>)
 80051ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80051b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80051b4:	4b1b      	ldr	r3, [pc, #108]	; (8005224 <MX_TIM2_Init+0x94>)
 80051b6:	2253      	movs	r2, #83	; 0x53
 80051b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ba:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <MX_TIM2_Init+0x94>)
 80051bc:	2200      	movs	r2, #0
 80051be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80051c0:	4b18      	ldr	r3, [pc, #96]	; (8005224 <MX_TIM2_Init+0x94>)
 80051c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80051c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051c8:	4b16      	ldr	r3, [pc, #88]	; (8005224 <MX_TIM2_Init+0x94>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051ce:	4b15      	ldr	r3, [pc, #84]	; (8005224 <MX_TIM2_Init+0x94>)
 80051d0:	2280      	movs	r2, #128	; 0x80
 80051d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051d4:	4813      	ldr	r0, [pc, #76]	; (8005224 <MX_TIM2_Init+0x94>)
 80051d6:	f002 fd03 	bl	8007be0 <HAL_TIM_Base_Init>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80051e0:	f7fd fee0 	bl	8002fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	4619      	mov	r1, r3
 80051f0:	480c      	ldr	r0, [pc, #48]	; (8005224 <MX_TIM2_Init+0x94>)
 80051f2:	f002 ff79 	bl	80080e8 <HAL_TIM_ConfigClockSource>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80051fc:	f7fd fed2 	bl	8002fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005200:	2300      	movs	r3, #0
 8005202:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005204:	2300      	movs	r3, #0
 8005206:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005208:	463b      	mov	r3, r7
 800520a:	4619      	mov	r1, r3
 800520c:	4805      	ldr	r0, [pc, #20]	; (8005224 <MX_TIM2_Init+0x94>)
 800520e:	f003 fb21 	bl	8008854 <HAL_TIMEx_MasterConfigSynchronization>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005218:	f7fd fec4 	bl	8002fa4 <Error_Handler>
  }

}
 800521c:	bf00      	nop
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000880 	.word	0x20000880

08005228 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a18      	ldr	r2, [pc, #96]	; (8005298 <HAL_TIM_Base_MspInit+0x70>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d10e      	bne.n	8005258 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <HAL_TIM_Base_MspInit+0x74>)
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <HAL_TIM_Base_MspInit+0x74>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	6453      	str	r3, [r2, #68]	; 0x44
 800524a:	4b14      	ldr	r3, [pc, #80]	; (800529c <HAL_TIM_Base_MspInit+0x74>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005256:	e01a      	b.n	800528e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d115      	bne.n	800528e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
 8005266:	4b0d      	ldr	r3, [pc, #52]	; (800529c <HAL_TIM_Base_MspInit+0x74>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	4a0c      	ldr	r2, [pc, #48]	; (800529c <HAL_TIM_Base_MspInit+0x74>)
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	6413      	str	r3, [r2, #64]	; 0x40
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <HAL_TIM_Base_MspInit+0x74>)
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800527e:	2200      	movs	r2, #0
 8005280:	2101      	movs	r1, #1
 8005282:	201c      	movs	r0, #28
 8005284:	f000 fdeb 	bl	8005e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005288:	201c      	movs	r0, #28
 800528a:	f000 fe04 	bl	8005e96 <HAL_NVIC_EnableIRQ>
}
 800528e:	bf00      	nop
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40023800 	.word	0x40023800

080052a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052a8:	f107 030c 	add.w	r3, r7, #12
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	605a      	str	r2, [r3, #4]
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	60da      	str	r2, [r3, #12]
 80052b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a12      	ldr	r2, [pc, #72]	; (8005308 <HAL_TIM_MspPostInit+0x68>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d11e      	bne.n	8005300 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_TIM_MspPostInit+0x6c>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	4a10      	ldr	r2, [pc, #64]	; (800530c <HAL_TIM_MspPostInit+0x6c>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6313      	str	r3, [r2, #48]	; 0x30
 80052d2:	4b0e      	ldr	r3, [pc, #56]	; (800530c <HAL_TIM_MspPostInit+0x6c>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	60bb      	str	r3, [r7, #8]
 80052dc:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80052de:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80052e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e4:	2302      	movs	r3, #2
 80052e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f4:	f107 030c 	add.w	r3, r7, #12
 80052f8:	4619      	mov	r1, r3
 80052fa:	4805      	ldr	r0, [pc, #20]	; (8005310 <HAL_TIM_MspPostInit+0x70>)
 80052fc:	f000 fff2 	bl	80062e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005300:	bf00      	nop
 8005302:	3720      	adds	r7, #32
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40010000 	.word	0x40010000
 800530c:	40023800 	.word	0x40023800
 8005310:	40020000 	.word	0x40020000

08005314 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005318:	4b11      	ldr	r3, [pc, #68]	; (8005360 <MX_USART1_UART_Init+0x4c>)
 800531a:	4a12      	ldr	r2, [pc, #72]	; (8005364 <MX_USART1_UART_Init+0x50>)
 800531c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800531e:	4b10      	ldr	r3, [pc, #64]	; (8005360 <MX_USART1_UART_Init+0x4c>)
 8005320:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005324:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005326:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <MX_USART1_UART_Init+0x4c>)
 8005328:	2200      	movs	r2, #0
 800532a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <MX_USART1_UART_Init+0x4c>)
 800532e:	2200      	movs	r2, #0
 8005330:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005332:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <MX_USART1_UART_Init+0x4c>)
 8005334:	2200      	movs	r2, #0
 8005336:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005338:	4b09      	ldr	r3, [pc, #36]	; (8005360 <MX_USART1_UART_Init+0x4c>)
 800533a:	220c      	movs	r2, #12
 800533c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <MX_USART1_UART_Init+0x4c>)
 8005340:	2200      	movs	r2, #0
 8005342:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <MX_USART1_UART_Init+0x4c>)
 8005346:	2200      	movs	r2, #0
 8005348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800534a:	4805      	ldr	r0, [pc, #20]	; (8005360 <MX_USART1_UART_Init+0x4c>)
 800534c:	f003 fb56 	bl	80089fc <HAL_UART_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005356:	f7fd fe25 	bl	8002fa4 <Error_Handler>
  }

}
 800535a:	bf00      	nop
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	200008c0 	.word	0x200008c0
 8005364:	40011000 	.word	0x40011000

08005368 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005370:	f107 0314 	add.w	r3, r7, #20
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a19      	ldr	r2, [pc, #100]	; (80053ec <HAL_UART_MspInit+0x84>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d12b      	bne.n	80053e2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	4b18      	ldr	r3, [pc, #96]	; (80053f0 <HAL_UART_MspInit+0x88>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <HAL_UART_MspInit+0x88>)
 8005394:	f043 0310 	orr.w	r3, r3, #16
 8005398:	6453      	str	r3, [r2, #68]	; 0x44
 800539a:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <HAL_UART_MspInit+0x88>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f003 0310 	and.w	r3, r3, #16
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <HAL_UART_MspInit+0x88>)
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	4a10      	ldr	r2, [pc, #64]	; (80053f0 <HAL_UART_MspInit+0x88>)
 80053b0:	f043 0302 	orr.w	r3, r3, #2
 80053b4:	6313      	str	r3, [r2, #48]	; 0x30
 80053b6:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <HAL_UART_MspInit+0x88>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053c2:	23c0      	movs	r3, #192	; 0xc0
 80053c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c6:	2302      	movs	r3, #2
 80053c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ce:	2303      	movs	r3, #3
 80053d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053d2:	2307      	movs	r3, #7
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053d6:	f107 0314 	add.w	r3, r7, #20
 80053da:	4619      	mov	r1, r3
 80053dc:	4805      	ldr	r0, [pc, #20]	; (80053f4 <HAL_UART_MspInit+0x8c>)
 80053de:	f000 ff81 	bl	80062e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80053e2:	bf00      	nop
 80053e4:	3728      	adds	r7, #40	; 0x28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40011000 	.word	0x40011000
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40020400 	.word	0x40020400

080053f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80053f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005430 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80053fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80053fe:	e003      	b.n	8005408 <LoopCopyDataInit>

08005400 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005402:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005404:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005406:	3104      	adds	r1, #4

08005408 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005408:	480b      	ldr	r0, [pc, #44]	; (8005438 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800540a:	4b0c      	ldr	r3, [pc, #48]	; (800543c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800540c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800540e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005410:	d3f6      	bcc.n	8005400 <CopyDataInit>
  ldr  r2, =_sbss
 8005412:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005414:	e002      	b.n	800541c <LoopFillZerobss>

08005416 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005416:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005418:	f842 3b04 	str.w	r3, [r2], #4

0800541c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800541c:	4b09      	ldr	r3, [pc, #36]	; (8005444 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800541e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005420:	d3f9      	bcc.n	8005416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005422:	f7ff fdd9 	bl	8004fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005426:	f003 feb9 	bl	800919c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800542a:	f7fc fd3b 	bl	8001ea4 <main>
  bx  lr    
 800542e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005430:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8005434:	0800d4b8 	.word	0x0800d4b8
  ldr  r0, =_sdata
 8005438:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800543c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8005440:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8005444:	20000928 	.word	0x20000928

08005448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005448:	e7fe      	b.n	8005448 <ADC_IRQHandler>
	...

0800544c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005450:	4b0e      	ldr	r3, [pc, #56]	; (800548c <HAL_Init+0x40>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a0d      	ldr	r2, [pc, #52]	; (800548c <HAL_Init+0x40>)
 8005456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800545a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <HAL_Init+0x40>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <HAL_Init+0x40>)
 8005462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005468:	4b08      	ldr	r3, [pc, #32]	; (800548c <HAL_Init+0x40>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a07      	ldr	r2, [pc, #28]	; (800548c <HAL_Init+0x40>)
 800546e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005474:	2003      	movs	r0, #3
 8005476:	f000 fce7 	bl	8005e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800547a:	2002      	movs	r0, #2
 800547c:	f000 f808 	bl	8005490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005480:	f7fe faa6 	bl	80039d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	40023c00 	.word	0x40023c00

08005490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005498:	4b12      	ldr	r3, [pc, #72]	; (80054e4 <HAL_InitTick+0x54>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <HAL_InitTick+0x58>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	4619      	mov	r1, r3
 80054a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80054aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fcff 	bl	8005eb2 <HAL_SYSTICK_Config>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e00e      	b.n	80054dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b0f      	cmp	r3, #15
 80054c2:	d80a      	bhi.n	80054da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054c4:	2200      	movs	r2, #0
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054cc:	f000 fcc7 	bl	8005e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054d0:	4a06      	ldr	r2, [pc, #24]	; (80054ec <HAL_InitTick+0x5c>)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e000      	b.n	80054dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000004 	.word	0x20000004
 80054e8:	2000000c 	.word	0x2000000c
 80054ec:	20000008 	.word	0x20000008

080054f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054f4:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_IncTick+0x20>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b06      	ldr	r3, [pc, #24]	; (8005514 <HAL_IncTick+0x24>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4413      	add	r3, r2
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <HAL_IncTick+0x24>)
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	2000000c 	.word	0x2000000c
 8005514:	20000900 	.word	0x20000900

08005518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return uwTick;
 800551c:	4b03      	ldr	r3, [pc, #12]	; (800552c <HAL_GetTick+0x14>)
 800551e:	681b      	ldr	r3, [r3, #0]
}
 8005520:	4618      	mov	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20000900 	.word	0x20000900

08005530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005538:	f7ff ffee 	bl	8005518 <HAL_GetTick>
 800553c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005548:	d005      	beq.n	8005556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800554a:	4b09      	ldr	r3, [pc, #36]	; (8005570 <HAL_Delay+0x40>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005556:	bf00      	nop
 8005558:	f7ff ffde 	bl	8005518 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	429a      	cmp	r2, r3
 8005566:	d8f7      	bhi.n	8005558 <HAL_Delay+0x28>
  {
  }
}
 8005568:	bf00      	nop
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	2000000c 	.word	0x2000000c

08005574 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e033      	b.n	80055f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fc fb30 	bl	8001bf8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d118      	bne.n	80055e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80055ba:	f023 0302 	bic.w	r3, r3, #2
 80055be:	f043 0202 	orr.w	r2, r3, #2
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fa72 	bl	8005ab0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	f043 0201 	orr.w	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
 80055e2:	e001      	b.n	80055e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_ADC_Start+0x1a>
 8005612:	2302      	movs	r3, #2
 8005614:	e08a      	b.n	800572c <HAL_ADC_Start+0x130>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b01      	cmp	r3, #1
 800562a:	d018      	beq.n	800565e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0201 	orr.w	r2, r2, #1
 800563a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800563c:	4b3e      	ldr	r3, [pc, #248]	; (8005738 <HAL_ADC_Start+0x13c>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a3e      	ldr	r2, [pc, #248]	; (800573c <HAL_ADC_Start+0x140>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	0c9a      	lsrs	r2, r3, #18
 8005648:	4613      	mov	r3, r2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	4413      	add	r3, r2
 800564e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005650:	e002      	b.n	8005658 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	3b01      	subs	r3, #1
 8005656:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f9      	bne.n	8005652 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b01      	cmp	r3, #1
 800566a:	d15e      	bne.n	800572a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005674:	f023 0301 	bic.w	r3, r3, #1
 8005678:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005692:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005696:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056aa:	d106      	bne.n	80056ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b0:	f023 0206 	bic.w	r2, r3, #6
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	645a      	str	r2, [r3, #68]	; 0x44
 80056b8:	e002      	b.n	80056c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056c8:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <HAL_ADC_Start+0x144>)
 80056ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80056d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10f      	bne.n	8005702 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11c      	bne.n	800572a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	e013      	b.n	800572a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a0f      	ldr	r2, [pc, #60]	; (8005744 <HAL_ADC_Start+0x148>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d10e      	bne.n	800572a <HAL_ADC_Start+0x12e>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d107      	bne.n	800572a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005728:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	20000004 	.word	0x20000004
 800573c:	431bde83 	.word	0x431bde83
 8005740:	40012300 	.word	0x40012300
 8005744:	40012000 	.word	0x40012000

08005748 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d113      	bne.n	800578e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005774:	d10b      	bne.n	800578e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f043 0220 	orr.w	r2, r3, #32
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e05c      	b.n	8005848 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800578e:	f7ff fec3 	bl	8005518 <HAL_GetTick>
 8005792:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005794:	e01a      	b.n	80057cc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800579c:	d016      	beq.n	80057cc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d007      	beq.n	80057b4 <HAL_ADC_PollForConversion+0x6c>
 80057a4:	f7ff feb8 	bl	8005518 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d20b      	bcs.n	80057cc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f043 0204 	orr.w	r2, r3, #4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e03d      	b.n	8005848 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d1dd      	bne.n	8005796 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f06f 0212 	mvn.w	r2, #18
 80057e2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d123      	bne.n	8005846 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005802:	2b00      	cmp	r3, #0
 8005804:	d11f      	bne.n	8005846 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005810:	2b00      	cmp	r3, #0
 8005812:	d006      	beq.n	8005822 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800581e:	2b00      	cmp	r3, #0
 8005820:	d111      	bne.n	8005846 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f043 0201 	orr.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800585e:	4618      	mov	r0, r3
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_ADC_ConfigChannel+0x1c>
 8005884:	2302      	movs	r3, #2
 8005886:	e105      	b.n	8005a94 <HAL_ADC_ConfigChannel+0x228>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b09      	cmp	r3, #9
 8005896:	d925      	bls.n	80058e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68d9      	ldr	r1, [r3, #12]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	4613      	mov	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	4413      	add	r3, r2
 80058ac:	3b1e      	subs	r3, #30
 80058ae:	2207      	movs	r2, #7
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	43da      	mvns	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	400a      	ands	r2, r1
 80058bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68d9      	ldr	r1, [r3, #12]
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4618      	mov	r0, r3
 80058d0:	4603      	mov	r3, r0
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	4403      	add	r3, r0
 80058d6:	3b1e      	subs	r3, #30
 80058d8:	409a      	lsls	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	60da      	str	r2, [r3, #12]
 80058e2:	e022      	b.n	800592a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6919      	ldr	r1, [r3, #16]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	2207      	movs	r2, #7
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	43da      	mvns	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	400a      	ands	r2, r1
 8005906:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6919      	ldr	r1, [r3, #16]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	4618      	mov	r0, r3
 800591a:	4603      	mov	r3, r0
 800591c:	005b      	lsls	r3, r3, #1
 800591e:	4403      	add	r3, r0
 8005920:	409a      	lsls	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b06      	cmp	r3, #6
 8005930:	d824      	bhi.n	800597c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	4613      	mov	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	4413      	add	r3, r2
 8005942:	3b05      	subs	r3, #5
 8005944:	221f      	movs	r2, #31
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	43da      	mvns	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	400a      	ands	r2, r1
 8005952:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	4618      	mov	r0, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	3b05      	subs	r3, #5
 800596e:	fa00 f203 	lsl.w	r2, r0, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	635a      	str	r2, [r3, #52]	; 0x34
 800597a:	e04c      	b.n	8005a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b0c      	cmp	r3, #12
 8005982:	d824      	bhi.n	80059ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	3b23      	subs	r3, #35	; 0x23
 8005996:	221f      	movs	r2, #31
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	43da      	mvns	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	400a      	ands	r2, r1
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	4618      	mov	r0, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	3b23      	subs	r3, #35	; 0x23
 80059c0:	fa00 f203 	lsl.w	r2, r0, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
 80059cc:	e023      	b.n	8005a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	3b41      	subs	r3, #65	; 0x41
 80059e0:	221f      	movs	r2, #31
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	43da      	mvns	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	400a      	ands	r2, r1
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4618      	mov	r0, r3
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	3b41      	subs	r3, #65	; 0x41
 8005a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a16:	4b22      	ldr	r3, [pc, #136]	; (8005aa0 <HAL_ADC_ConfigChannel+0x234>)
 8005a18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a21      	ldr	r2, [pc, #132]	; (8005aa4 <HAL_ADC_ConfigChannel+0x238>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d109      	bne.n	8005a38 <HAL_ADC_ConfigChannel+0x1cc>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b12      	cmp	r3, #18
 8005a2a:	d105      	bne.n	8005a38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <HAL_ADC_ConfigChannel+0x238>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d123      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x21e>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b10      	cmp	r3, #16
 8005a48:	d003      	beq.n	8005a52 <HAL_ADC_ConfigChannel+0x1e6>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b11      	cmp	r3, #17
 8005a50:	d11b      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d111      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a66:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <HAL_ADC_ConfigChannel+0x23c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a10      	ldr	r2, [pc, #64]	; (8005aac <HAL_ADC_ConfigChannel+0x240>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	0c9a      	lsrs	r2, r3, #18
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a7c:	e002      	b.n	8005a84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f9      	bne.n	8005a7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40012300 	.word	0x40012300
 8005aa4:	40012000 	.word	0x40012000
 8005aa8:	20000004 	.word	0x20000004
 8005aac:	431bde83 	.word	0x431bde83

08005ab0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ab8:	4b79      	ldr	r3, [pc, #484]	; (8005ca0 <ADC_Init+0x1f0>)
 8005aba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ae4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6859      	ldr	r1, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	021a      	lsls	r2, r3, #8
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6859      	ldr	r1, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6899      	ldr	r1, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68da      	ldr	r2, [r3, #12]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b42:	4a58      	ldr	r2, [pc, #352]	; (8005ca4 <ADC_Init+0x1f4>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d022      	beq.n	8005b8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689a      	ldr	r2, [r3, #8]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6899      	ldr	r1, [r3, #8]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6899      	ldr	r1, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	609a      	str	r2, [r3, #8]
 8005b8c:	e00f      	b.n	8005bae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	689a      	ldr	r2, [r3, #8]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0202 	bic.w	r2, r2, #2
 8005bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6899      	ldr	r1, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7e1b      	ldrb	r3, [r3, #24]
 8005bc8:	005a      	lsls	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d01b      	beq.n	8005c14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005bfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6859      	ldr	r1, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	3b01      	subs	r3, #1
 8005c08:	035a      	lsls	r2, r3, #13
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
 8005c12:	e007      	b.n	8005c24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	051a      	lsls	r2, r3, #20
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6899      	ldr	r1, [r3, #8]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c66:	025a      	lsls	r2, r3, #9
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6899      	ldr	r1, [r3, #8]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	029a      	lsls	r2, r3, #10
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40012300 	.word	0x40012300
 8005ca4:	0f000001 	.word	0x0f000001

08005ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <__NVIC_SetPriorityGrouping+0x44>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cda:	4a04      	ldr	r2, [pc, #16]	; (8005cec <__NVIC_SetPriorityGrouping+0x44>)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	60d3      	str	r3, [r2, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	e000ed00 	.word	0xe000ed00

08005cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cf4:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <__NVIC_GetPriorityGrouping+0x18>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	0a1b      	lsrs	r3, r3, #8
 8005cfa:	f003 0307 	and.w	r3, r3, #7
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	e000ed00 	.word	0xe000ed00

08005d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	db0b      	blt.n	8005d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	f003 021f 	and.w	r2, r3, #31
 8005d24:	4907      	ldr	r1, [pc, #28]	; (8005d44 <__NVIC_EnableIRQ+0x38>)
 8005d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2a:	095b      	lsrs	r3, r3, #5
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	e000e100 	.word	0xe000e100

08005d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	db0a      	blt.n	8005d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	490c      	ldr	r1, [pc, #48]	; (8005d94 <__NVIC_SetPriority+0x4c>)
 8005d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d66:	0112      	lsls	r2, r2, #4
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d70:	e00a      	b.n	8005d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4908      	ldr	r1, [pc, #32]	; (8005d98 <__NVIC_SetPriority+0x50>)
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	3b04      	subs	r3, #4
 8005d80:	0112      	lsls	r2, r2, #4
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	440b      	add	r3, r1
 8005d86:	761a      	strb	r2, [r3, #24]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	e000e100 	.word	0xe000e100
 8005d98:	e000ed00 	.word	0xe000ed00

08005d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	f1c3 0307 	rsb	r3, r3, #7
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	bf28      	it	cs
 8005dba:	2304      	movcs	r3, #4
 8005dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	2b06      	cmp	r3, #6
 8005dc4:	d902      	bls.n	8005dcc <NVIC_EncodePriority+0x30>
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	3b03      	subs	r3, #3
 8005dca:	e000      	b.n	8005dce <NVIC_EncodePriority+0x32>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43da      	mvns	r2, r3
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	401a      	ands	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005de4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	fa01 f303 	lsl.w	r3, r1, r3
 8005dee:	43d9      	mvns	r1, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df4:	4313      	orrs	r3, r2
         );
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3724      	adds	r7, #36	; 0x24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
	...

08005e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e14:	d301      	bcc.n	8005e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e16:	2301      	movs	r3, #1
 8005e18:	e00f      	b.n	8005e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e1a:	4a0a      	ldr	r2, [pc, #40]	; (8005e44 <SysTick_Config+0x40>)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e22:	210f      	movs	r1, #15
 8005e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e28:	f7ff ff8e 	bl	8005d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <SysTick_Config+0x40>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e32:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <SysTick_Config+0x40>)
 8005e34:	2207      	movs	r2, #7
 8005e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	e000e010 	.word	0xe000e010

08005e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff ff29 	bl	8005ca8 <__NVIC_SetPriorityGrouping>
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	4603      	mov	r3, r0
 8005e66:	60b9      	str	r1, [r7, #8]
 8005e68:	607a      	str	r2, [r7, #4]
 8005e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e70:	f7ff ff3e 	bl	8005cf0 <__NVIC_GetPriorityGrouping>
 8005e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	f7ff ff8e 	bl	8005d9c <NVIC_EncodePriority>
 8005e80:	4602      	mov	r2, r0
 8005e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e86:	4611      	mov	r1, r2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff ff5d 	bl	8005d48 <__NVIC_SetPriority>
}
 8005e8e:	bf00      	nop
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff ff31 	bl	8005d0c <__NVIC_EnableIRQ>
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff ffa2 	bl	8005e04 <SysTick_Config>
 8005ec0:	4603      	mov	r3, r0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ede:	4b23      	ldr	r3, [pc, #140]	; (8005f6c <HAL_FLASH_Program+0xa0>)
 8005ee0:	7e1b      	ldrb	r3, [r3, #24]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_FLASH_Program+0x1e>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e03b      	b.n	8005f62 <HAL_FLASH_Program+0x96>
 8005eea:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <HAL_FLASH_Program+0xa0>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ef0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ef4:	f000 f870 	bl	8005fd8 <FLASH_WaitForLastOperation>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005efc:	7dfb      	ldrb	r3, [r7, #23]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d12b      	bne.n	8005f5a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d105      	bne.n	8005f14 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005f08:	783b      	ldrb	r3, [r7, #0]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	68b8      	ldr	r0, [r7, #8]
 8005f0e:	f000 f919 	bl	8006144 <FLASH_Program_Byte>
 8005f12:	e016      	b.n	8005f42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d105      	bne.n	8005f26 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005f1a:	883b      	ldrh	r3, [r7, #0]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	68b8      	ldr	r0, [r7, #8]
 8005f20:	f000 f8ec 	bl	80060fc <FLASH_Program_HalfWord>
 8005f24:	e00d      	b.n	8005f42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d105      	bne.n	8005f38 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	68b8      	ldr	r0, [r7, #8]
 8005f32:	f000 f8c1 	bl	80060b8 <FLASH_Program_Word>
 8005f36:	e004      	b.n	8005f42 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3c:	68b8      	ldr	r0, [r7, #8]
 8005f3e:	f000 f88b 	bl	8006058 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f46:	f000 f847 	bl	8005fd8 <FLASH_WaitForLastOperation>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005f4e:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <HAL_FLASH_Program+0xa4>)
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	4a07      	ldr	r2, [pc, #28]	; (8005f70 <HAL_FLASH_Program+0xa4>)
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <HAL_FLASH_Program+0xa0>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000904 	.word	0x20000904
 8005f70:	40023c00 	.word	0x40023c00

08005f74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f7e:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_FLASH_Unlock+0x38>)
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	da0b      	bge.n	8005f9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005f86:	4b09      	ldr	r3, [pc, #36]	; (8005fac <HAL_FLASH_Unlock+0x38>)
 8005f88:	4a09      	ldr	r2, [pc, #36]	; (8005fb0 <HAL_FLASH_Unlock+0x3c>)
 8005f8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005f8c:	4b07      	ldr	r3, [pc, #28]	; (8005fac <HAL_FLASH_Unlock+0x38>)
 8005f8e:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <HAL_FLASH_Unlock+0x40>)
 8005f90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f92:	4b06      	ldr	r3, [pc, #24]	; (8005fac <HAL_FLASH_Unlock+0x38>)
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	da01      	bge.n	8005f9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40023c00 	.word	0x40023c00
 8005fb0:	45670123 	.word	0x45670123
 8005fb4:	cdef89ab 	.word	0xcdef89ab

08005fb8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_FLASH_Lock+0x1c>)
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	4a04      	ldr	r2, [pc, #16]	; (8005fd4 <HAL_FLASH_Lock+0x1c>)
 8005fc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fc6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	40023c00 	.word	0x40023c00

08005fd8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005fe4:	4b1a      	ldr	r3, [pc, #104]	; (8006050 <FLASH_WaitForLastOperation+0x78>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005fea:	f7ff fa95 	bl	8005518 <HAL_GetTick>
 8005fee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005ff0:	e010      	b.n	8006014 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff8:	d00c      	beq.n	8006014 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <FLASH_WaitForLastOperation+0x38>
 8006000:	f7ff fa8a 	bl	8005518 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d201      	bcs.n	8006014 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e019      	b.n	8006048 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006014:	4b0f      	ldr	r3, [pc, #60]	; (8006054 <FLASH_WaitForLastOperation+0x7c>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e8      	bne.n	8005ff2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <FLASH_WaitForLastOperation+0x7c>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <FLASH_WaitForLastOperation+0x7c>)
 800602e:	2201      	movs	r2, #1
 8006030:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006032:	4b08      	ldr	r3, [pc, #32]	; (8006054 <FLASH_WaitForLastOperation+0x7c>)
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800603e:	f000 f8a3 	bl	8006188 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006046:	2300      	movs	r3, #0
  
}  
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	20000904 	.word	0x20000904
 8006054:	40023c00 	.word	0x40023c00

08006058 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006058:	b490      	push	{r4, r7}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006064:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <FLASH_Program_DoubleWord+0x5c>)
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	4a12      	ldr	r2, [pc, #72]	; (80060b4 <FLASH_Program_DoubleWord+0x5c>)
 800606a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006070:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <FLASH_Program_DoubleWord+0x5c>)
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	4a0f      	ldr	r2, [pc, #60]	; (80060b4 <FLASH_Program_DoubleWord+0x5c>)
 8006076:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800607a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <FLASH_Program_DoubleWord+0x5c>)
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	4a0c      	ldr	r2, [pc, #48]	; (80060b4 <FLASH_Program_DoubleWord+0x5c>)
 8006082:	f043 0301 	orr.w	r3, r3, #1
 8006086:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800608e:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006092:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	f04f 0400 	mov.w	r4, #0
 800609e:	0013      	movs	r3, r2
 80060a0:	2400      	movs	r4, #0
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	3204      	adds	r2, #4
 80060a6:	6013      	str	r3, [r2, #0]
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc90      	pop	{r4, r7}
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40023c00 	.word	0x40023c00

080060b8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060c2:	4b0d      	ldr	r3, [pc, #52]	; (80060f8 <FLASH_Program_Word+0x40>)
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	4a0c      	ldr	r2, [pc, #48]	; (80060f8 <FLASH_Program_Word+0x40>)
 80060c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <FLASH_Program_Word+0x40>)
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	4a09      	ldr	r2, [pc, #36]	; (80060f8 <FLASH_Program_Word+0x40>)
 80060d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80060da:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <FLASH_Program_Word+0x40>)
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	4a06      	ldr	r2, [pc, #24]	; (80060f8 <FLASH_Program_Word+0x40>)
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	601a      	str	r2, [r3, #0]
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	40023c00 	.word	0x40023c00

080060fc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006108:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <FLASH_Program_HalfWord+0x44>)
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	4a0c      	ldr	r2, [pc, #48]	; (8006140 <FLASH_Program_HalfWord+0x44>)
 800610e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006112:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006114:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <FLASH_Program_HalfWord+0x44>)
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	4a09      	ldr	r2, [pc, #36]	; (8006140 <FLASH_Program_HalfWord+0x44>)
 800611a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800611e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006120:	4b07      	ldr	r3, [pc, #28]	; (8006140 <FLASH_Program_HalfWord+0x44>)
 8006122:	691b      	ldr	r3, [r3, #16]
 8006124:	4a06      	ldr	r2, [pc, #24]	; (8006140 <FLASH_Program_HalfWord+0x44>)
 8006126:	f043 0301 	orr.w	r3, r3, #1
 800612a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	887a      	ldrh	r2, [r7, #2]
 8006130:	801a      	strh	r2, [r3, #0]
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40023c00 	.word	0x40023c00

08006144 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <FLASH_Program_Byte+0x40>)
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	4a0b      	ldr	r2, [pc, #44]	; (8006184 <FLASH_Program_Byte+0x40>)
 8006156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <FLASH_Program_Byte+0x40>)
 800615e:	4a09      	ldr	r2, [pc, #36]	; (8006184 <FLASH_Program_Byte+0x40>)
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <FLASH_Program_Byte+0x40>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	4a06      	ldr	r2, [pc, #24]	; (8006184 <FLASH_Program_Byte+0x40>)
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	78fa      	ldrb	r2, [r7, #3]
 8006174:	701a      	strb	r2, [r3, #0]
}
 8006176:	bf00      	nop
 8006178:	370c      	adds	r7, #12
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40023c00 	.word	0x40023c00

08006188 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800618c:	4b2f      	ldr	r3, [pc, #188]	; (800624c <FLASH_SetErrorCode+0xc4>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0310 	and.w	r3, r3, #16
 8006194:	2b00      	cmp	r3, #0
 8006196:	d008      	beq.n	80061aa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006198:	4b2d      	ldr	r3, [pc, #180]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	f043 0310 	orr.w	r3, r3, #16
 80061a0:	4a2b      	ldr	r2, [pc, #172]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 80061a2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80061a4:	4b29      	ldr	r3, [pc, #164]	; (800624c <FLASH_SetErrorCode+0xc4>)
 80061a6:	2210      	movs	r2, #16
 80061a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80061aa:	4b28      	ldr	r3, [pc, #160]	; (800624c <FLASH_SetErrorCode+0xc4>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d008      	beq.n	80061c8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80061b6:	4b26      	ldr	r3, [pc, #152]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f043 0308 	orr.w	r3, r3, #8
 80061be:	4a24      	ldr	r2, [pc, #144]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 80061c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80061c2:	4b22      	ldr	r3, [pc, #136]	; (800624c <FLASH_SetErrorCode+0xc4>)
 80061c4:	2220      	movs	r2, #32
 80061c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80061c8:	4b20      	ldr	r3, [pc, #128]	; (800624c <FLASH_SetErrorCode+0xc4>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80061d4:	4b1e      	ldr	r3, [pc, #120]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	f043 0304 	orr.w	r3, r3, #4
 80061dc:	4a1c      	ldr	r2, [pc, #112]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 80061de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80061e0:	4b1a      	ldr	r3, [pc, #104]	; (800624c <FLASH_SetErrorCode+0xc4>)
 80061e2:	2240      	movs	r2, #64	; 0x40
 80061e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80061e6:	4b19      	ldr	r3, [pc, #100]	; (800624c <FLASH_SetErrorCode+0xc4>)
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80061f2:	4b17      	ldr	r3, [pc, #92]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	f043 0302 	orr.w	r3, r3, #2
 80061fa:	4a15      	ldr	r2, [pc, #84]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 80061fc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80061fe:	4b13      	ldr	r3, [pc, #76]	; (800624c <FLASH_SetErrorCode+0xc4>)
 8006200:	2280      	movs	r2, #128	; 0x80
 8006202:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006204:	4b11      	ldr	r3, [pc, #68]	; (800624c <FLASH_SetErrorCode+0xc4>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006210:	4b0f      	ldr	r3, [pc, #60]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	4a0d      	ldr	r2, [pc, #52]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 800621a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <FLASH_SetErrorCode+0xc4>)
 800621e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006222:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006224:	4b09      	ldr	r3, [pc, #36]	; (800624c <FLASH_SetErrorCode+0xc4>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d008      	beq.n	8006242 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f043 0320 	orr.w	r3, r3, #32
 8006238:	4a05      	ldr	r2, [pc, #20]	; (8006250 <FLASH_SetErrorCode+0xc8>)
 800623a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800623c:	4b03      	ldr	r3, [pc, #12]	; (800624c <FLASH_SetErrorCode+0xc4>)
 800623e:	2202      	movs	r2, #2
 8006240:	60da      	str	r2, [r3, #12]
  }
}
 8006242:	bf00      	nop
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40023c00 	.word	0x40023c00
 8006250:	20000904 	.word	0x20000904

08006254 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d102      	bne.n	8006270 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e010      	b.n	8006292 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d103      	bne.n	800627e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	e009      	b.n	8006292 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	2b02      	cmp	r3, #2
 8006282:	d103      	bne.n	800628c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	e002      	b.n	8006292 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800628c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006290:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006292:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 8006298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	490f      	ldr	r1, [pc, #60]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80062aa:	4b0d      	ldr	r3, [pc, #52]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	4a0c      	ldr	r2, [pc, #48]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 80062b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80062b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80062b6:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 80062b8:	691a      	ldr	r2, [r3, #16]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	00db      	lsls	r3, r3, #3
 80062be:	4313      	orrs	r3, r2
 80062c0:	4a07      	ldr	r2, [pc, #28]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 80062c2:	f043 0302 	orr.w	r3, r3, #2
 80062c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	4a04      	ldr	r2, [pc, #16]	; (80062e0 <FLASH_Erase_Sector+0x8c>)
 80062ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062d2:	6113      	str	r3, [r2, #16]
}
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	40023c00 	.word	0x40023c00

080062e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e159      	b.n	80065b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006300:	2201      	movs	r2, #1
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4013      	ands	r3, r2
 8006312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	429a      	cmp	r2, r3
 800631a:	f040 8148 	bne.w	80065ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d00b      	beq.n	800633e <HAL_GPIO_Init+0x5a>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d007      	beq.n	800633e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006332:	2b11      	cmp	r3, #17
 8006334:	d003      	beq.n	800633e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b12      	cmp	r3, #18
 800633c:	d130      	bne.n	80063a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	2203      	movs	r2, #3
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	43db      	mvns	r3, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4013      	ands	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4313      	orrs	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006374:	2201      	movs	r2, #1
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43db      	mvns	r3, r3
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	4013      	ands	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 0201 	and.w	r2, r3, #1
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4313      	orrs	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	2203      	movs	r2, #3
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d003      	beq.n	80063e0 <HAL_GPIO_Init+0xfc>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b12      	cmp	r3, #18
 80063de:	d123      	bne.n	8006428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	08da      	lsrs	r2, r3, #3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3208      	adds	r2, #8
 80063e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	220f      	movs	r2, #15
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	43db      	mvns	r3, r3
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	4013      	ands	r3, r2
 8006402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	4313      	orrs	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	08da      	lsrs	r2, r3, #3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3208      	adds	r2, #8
 8006422:	69b9      	ldr	r1, [r7, #24]
 8006424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	2203      	movs	r2, #3
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	43db      	mvns	r3, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4013      	ands	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 0203 	and.w	r2, r3, #3
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4313      	orrs	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80a2 	beq.w	80065ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	4b56      	ldr	r3, [pc, #344]	; (80065c8 <HAL_GPIO_Init+0x2e4>)
 8006470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006472:	4a55      	ldr	r2, [pc, #340]	; (80065c8 <HAL_GPIO_Init+0x2e4>)
 8006474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006478:	6453      	str	r3, [r2, #68]	; 0x44
 800647a:	4b53      	ldr	r3, [pc, #332]	; (80065c8 <HAL_GPIO_Init+0x2e4>)
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006486:	4a51      	ldr	r2, [pc, #324]	; (80065cc <HAL_GPIO_Init+0x2e8>)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	089b      	lsrs	r3, r3, #2
 800648c:	3302      	adds	r3, #2
 800648e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	220f      	movs	r2, #15
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43db      	mvns	r3, r3
 80064a4:	69ba      	ldr	r2, [r7, #24]
 80064a6:	4013      	ands	r3, r2
 80064a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a48      	ldr	r2, [pc, #288]	; (80065d0 <HAL_GPIO_Init+0x2ec>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d019      	beq.n	80064e6 <HAL_GPIO_Init+0x202>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a47      	ldr	r2, [pc, #284]	; (80065d4 <HAL_GPIO_Init+0x2f0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d013      	beq.n	80064e2 <HAL_GPIO_Init+0x1fe>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a46      	ldr	r2, [pc, #280]	; (80065d8 <HAL_GPIO_Init+0x2f4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00d      	beq.n	80064de <HAL_GPIO_Init+0x1fa>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a45      	ldr	r2, [pc, #276]	; (80065dc <HAL_GPIO_Init+0x2f8>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d007      	beq.n	80064da <HAL_GPIO_Init+0x1f6>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a44      	ldr	r2, [pc, #272]	; (80065e0 <HAL_GPIO_Init+0x2fc>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d101      	bne.n	80064d6 <HAL_GPIO_Init+0x1f2>
 80064d2:	2304      	movs	r3, #4
 80064d4:	e008      	b.n	80064e8 <HAL_GPIO_Init+0x204>
 80064d6:	2307      	movs	r3, #7
 80064d8:	e006      	b.n	80064e8 <HAL_GPIO_Init+0x204>
 80064da:	2303      	movs	r3, #3
 80064dc:	e004      	b.n	80064e8 <HAL_GPIO_Init+0x204>
 80064de:	2302      	movs	r3, #2
 80064e0:	e002      	b.n	80064e8 <HAL_GPIO_Init+0x204>
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <HAL_GPIO_Init+0x204>
 80064e6:	2300      	movs	r3, #0
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	f002 0203 	and.w	r2, r2, #3
 80064ee:	0092      	lsls	r2, r2, #2
 80064f0:	4093      	lsls	r3, r2
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064f8:	4934      	ldr	r1, [pc, #208]	; (80065cc <HAL_GPIO_Init+0x2e8>)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	089b      	lsrs	r3, r3, #2
 80064fe:	3302      	adds	r3, #2
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006506:	4b37      	ldr	r3, [pc, #220]	; (80065e4 <HAL_GPIO_Init+0x300>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	43db      	mvns	r3, r3
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	4013      	ands	r3, r2
 8006514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006522:	69ba      	ldr	r2, [r7, #24]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800652a:	4a2e      	ldr	r2, [pc, #184]	; (80065e4 <HAL_GPIO_Init+0x300>)
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006530:	4b2c      	ldr	r3, [pc, #176]	; (80065e4 <HAL_GPIO_Init+0x300>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	43db      	mvns	r3, r3
 800653a:	69ba      	ldr	r2, [r7, #24]
 800653c:	4013      	ands	r3, r2
 800653e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800654c:	69ba      	ldr	r2, [r7, #24]
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	4313      	orrs	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006554:	4a23      	ldr	r2, [pc, #140]	; (80065e4 <HAL_GPIO_Init+0x300>)
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800655a:	4b22      	ldr	r3, [pc, #136]	; (80065e4 <HAL_GPIO_Init+0x300>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	43db      	mvns	r3, r3
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	4013      	ands	r3, r2
 8006568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800657e:	4a19      	ldr	r2, [pc, #100]	; (80065e4 <HAL_GPIO_Init+0x300>)
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006584:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <HAL_GPIO_Init+0x300>)
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	43db      	mvns	r3, r3
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	4013      	ands	r3, r2
 8006592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065a8:	4a0e      	ldr	r2, [pc, #56]	; (80065e4 <HAL_GPIO_Init+0x300>)
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	3301      	adds	r3, #1
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	f67f aea2 	bls.w	8006300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80065bc:	bf00      	nop
 80065be:	3724      	adds	r7, #36	; 0x24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	40023800 	.word	0x40023800
 80065cc:	40013800 	.word	0x40013800
 80065d0:	40020000 	.word	0x40020000
 80065d4:	40020400 	.word	0x40020400
 80065d8:	40020800 	.word	0x40020800
 80065dc:	40020c00 	.word	0x40020c00
 80065e0:	40021000 	.word	0x40021000
 80065e4:	40013c00 	.word	0x40013c00

080065e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	807b      	strh	r3, [r7, #2]
 80065f4:	4613      	mov	r3, r2
 80065f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065f8:	787b      	ldrb	r3, [r7, #1]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065fe:	887a      	ldrh	r2, [r7, #2]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006604:	e003      	b.n	800660e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006606:	887b      	ldrh	r3, [r7, #2]
 8006608:	041a      	lsls	r2, r3, #16
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	619a      	str	r2, [r3, #24]
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	695a      	ldr	r2, [r3, #20]
 800662a:	887b      	ldrh	r3, [r7, #2]
 800662c:	401a      	ands	r2, r3
 800662e:	887b      	ldrh	r3, [r7, #2]
 8006630:	429a      	cmp	r2, r3
 8006632:	d104      	bne.n	800663e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006634:	887b      	ldrh	r3, [r7, #2]
 8006636:	041a      	lsls	r2, r3, #16
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800663c:	e002      	b.n	8006644 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800663e:	887a      	ldrh	r2, [r7, #2]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	619a      	str	r2, [r3, #24]
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e11f      	b.n	80068a2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d106      	bne.n	800667c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f7fb fbcc 	bl	8001e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2224      	movs	r2, #36	; 0x24
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0201 	bic.w	r2, r2, #1
 8006692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80066b4:	f000 fd18 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 80066b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4a7b      	ldr	r2, [pc, #492]	; (80068ac <HAL_I2C_Init+0x25c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d807      	bhi.n	80066d4 <HAL_I2C_Init+0x84>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4a7a      	ldr	r2, [pc, #488]	; (80068b0 <HAL_I2C_Init+0x260>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	bf94      	ite	ls
 80066cc:	2301      	movls	r3, #1
 80066ce:	2300      	movhi	r3, #0
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	e006      	b.n	80066e2 <HAL_I2C_Init+0x92>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a77      	ldr	r2, [pc, #476]	; (80068b4 <HAL_I2C_Init+0x264>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	bf94      	ite	ls
 80066dc:	2301      	movls	r3, #1
 80066de:	2300      	movhi	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e0db      	b.n	80068a2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4a72      	ldr	r2, [pc, #456]	; (80068b8 <HAL_I2C_Init+0x268>)
 80066ee:	fba2 2303 	umull	r2, r3, r2, r3
 80066f2:	0c9b      	lsrs	r3, r3, #18
 80066f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	430a      	orrs	r2, r1
 8006708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4a64      	ldr	r2, [pc, #400]	; (80068ac <HAL_I2C_Init+0x25c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d802      	bhi.n	8006724 <HAL_I2C_Init+0xd4>
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	3301      	adds	r3, #1
 8006722:	e009      	b.n	8006738 <HAL_I2C_Init+0xe8>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800672a:	fb02 f303 	mul.w	r3, r2, r3
 800672e:	4a63      	ldr	r2, [pc, #396]	; (80068bc <HAL_I2C_Init+0x26c>)
 8006730:	fba2 2303 	umull	r2, r3, r2, r3
 8006734:	099b      	lsrs	r3, r3, #6
 8006736:	3301      	adds	r3, #1
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	430b      	orrs	r3, r1
 800673e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800674a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	4956      	ldr	r1, [pc, #344]	; (80068ac <HAL_I2C_Init+0x25c>)
 8006754:	428b      	cmp	r3, r1
 8006756:	d80d      	bhi.n	8006774 <HAL_I2C_Init+0x124>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	1e59      	subs	r1, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	005b      	lsls	r3, r3, #1
 8006762:	fbb1 f3f3 	udiv	r3, r1, r3
 8006766:	3301      	adds	r3, #1
 8006768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800676c:	2b04      	cmp	r3, #4
 800676e:	bf38      	it	cc
 8006770:	2304      	movcc	r3, #4
 8006772:	e04f      	b.n	8006814 <HAL_I2C_Init+0x1c4>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d111      	bne.n	80067a0 <HAL_I2C_Init+0x150>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	1e58      	subs	r0, r3, #1
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6859      	ldr	r1, [r3, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	440b      	add	r3, r1
 800678a:	fbb0 f3f3 	udiv	r3, r0, r3
 800678e:	3301      	adds	r3, #1
 8006790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006794:	2b00      	cmp	r3, #0
 8006796:	bf0c      	ite	eq
 8006798:	2301      	moveq	r3, #1
 800679a:	2300      	movne	r3, #0
 800679c:	b2db      	uxtb	r3, r3
 800679e:	e012      	b.n	80067c6 <HAL_I2C_Init+0x176>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	1e58      	subs	r0, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6859      	ldr	r1, [r3, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	0099      	lsls	r1, r3, #2
 80067b0:	440b      	add	r3, r1
 80067b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067b6:	3301      	adds	r3, #1
 80067b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067bc:	2b00      	cmp	r3, #0
 80067be:	bf0c      	ite	eq
 80067c0:	2301      	moveq	r3, #1
 80067c2:	2300      	movne	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d001      	beq.n	80067ce <HAL_I2C_Init+0x17e>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e022      	b.n	8006814 <HAL_I2C_Init+0x1c4>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10e      	bne.n	80067f4 <HAL_I2C_Init+0x1a4>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	1e58      	subs	r0, r3, #1
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	440b      	add	r3, r1
 80067e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80067e8:	3301      	adds	r3, #1
 80067ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f2:	e00f      	b.n	8006814 <HAL_I2C_Init+0x1c4>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	1e58      	subs	r0, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	460b      	mov	r3, r1
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	0099      	lsls	r1, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	fbb0 f3f3 	udiv	r3, r0, r3
 800680a:	3301      	adds	r3, #1
 800680c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	6809      	ldr	r1, [r1, #0]
 8006818:	4313      	orrs	r3, r2
 800681a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69da      	ldr	r2, [r3, #28]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	430a      	orrs	r2, r1
 8006836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	6911      	ldr	r1, [r2, #16]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	68d2      	ldr	r2, [r2, #12]
 800684e:	4311      	orrs	r1, r2
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	430b      	orrs	r3, r1
 8006856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	000186a0 	.word	0x000186a0
 80068b0:	001e847f 	.word	0x001e847f
 80068b4:	003d08ff 	.word	0x003d08ff
 80068b8:	431bde83 	.word	0x431bde83
 80068bc:	10624dd3 	.word	0x10624dd3

080068c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e25b      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d075      	beq.n	80069ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068de:	4ba3      	ldr	r3, [pc, #652]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d00c      	beq.n	8006904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ea:	4ba0      	ldr	r3, [pc, #640]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d112      	bne.n	800691c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068f6:	4b9d      	ldr	r3, [pc, #628]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006902:	d10b      	bne.n	800691c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006904:	4b99      	ldr	r3, [pc, #612]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d05b      	beq.n	80069c8 <HAL_RCC_OscConfig+0x108>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d157      	bne.n	80069c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e236      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006924:	d106      	bne.n	8006934 <HAL_RCC_OscConfig+0x74>
 8006926:	4b91      	ldr	r3, [pc, #580]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a90      	ldr	r2, [pc, #576]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800692c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e01d      	b.n	8006970 <HAL_RCC_OscConfig+0xb0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800693c:	d10c      	bne.n	8006958 <HAL_RCC_OscConfig+0x98>
 800693e:	4b8b      	ldr	r3, [pc, #556]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a8a      	ldr	r2, [pc, #552]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	4b88      	ldr	r3, [pc, #544]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a87      	ldr	r2, [pc, #540]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e00b      	b.n	8006970 <HAL_RCC_OscConfig+0xb0>
 8006958:	4b84      	ldr	r3, [pc, #528]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a83      	ldr	r2, [pc, #524]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800695e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4b81      	ldr	r3, [pc, #516]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a80      	ldr	r2, [pc, #512]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800696a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800696e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d013      	beq.n	80069a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006978:	f7fe fdce 	bl	8005518 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006980:	f7fe fdca 	bl	8005518 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b64      	cmp	r3, #100	; 0x64
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e1fb      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006992:	4b76      	ldr	r3, [pc, #472]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0xc0>
 800699e:	e014      	b.n	80069ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a0:	f7fe fdba 	bl	8005518 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a8:	f7fe fdb6 	bl	8005518 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b64      	cmp	r3, #100	; 0x64
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e1e7      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ba:	4b6c      	ldr	r3, [pc, #432]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0xe8>
 80069c6:	e000      	b.n	80069ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d063      	beq.n	8006a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069d6:	4b65      	ldr	r3, [pc, #404]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 030c 	and.w	r3, r3, #12
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069e2:	4b62      	ldr	r3, [pc, #392]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d11c      	bne.n	8006a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ee:	4b5f      	ldr	r3, [pc, #380]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d116      	bne.n	8006a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069fa:	4b5c      	ldr	r3, [pc, #368]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <HAL_RCC_OscConfig+0x152>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d001      	beq.n	8006a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e1bb      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a12:	4b56      	ldr	r3, [pc, #344]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4952      	ldr	r1, [pc, #328]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a26:	e03a      	b.n	8006a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d020      	beq.n	8006a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a30:	4b4f      	ldr	r3, [pc, #316]	; (8006b70 <HAL_RCC_OscConfig+0x2b0>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a36:	f7fe fd6f 	bl	8005518 <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a3c:	e008      	b.n	8006a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a3e:	f7fe fd6b 	bl	8005518 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e19c      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a50:	4b46      	ldr	r3, [pc, #280]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0f0      	beq.n	8006a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5c:	4b43      	ldr	r3, [pc, #268]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	4940      	ldr	r1, [pc, #256]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	600b      	str	r3, [r1, #0]
 8006a70:	e015      	b.n	8006a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a72:	4b3f      	ldr	r3, [pc, #252]	; (8006b70 <HAL_RCC_OscConfig+0x2b0>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fe fd4e 	bl	8005518 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a80:	f7fe fd4a 	bl	8005518 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e17b      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a92:	4b36      	ldr	r3, [pc, #216]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d030      	beq.n	8006b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ab2:	4b30      	ldr	r3, [pc, #192]	; (8006b74 <HAL_RCC_OscConfig+0x2b4>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab8:	f7fe fd2e 	bl	8005518 <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ac0:	f7fe fd2a 	bl	8005518 <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e15b      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ad2:	4b26      	ldr	r3, [pc, #152]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x200>
 8006ade:	e015      	b.n	8006b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ae0:	4b24      	ldr	r3, [pc, #144]	; (8006b74 <HAL_RCC_OscConfig+0x2b4>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ae6:	f7fe fd17 	bl	8005518 <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aec:	e008      	b.n	8006b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006aee:	f7fe fd13 	bl	8005518 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e144      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b00:	4b1a      	ldr	r3, [pc, #104]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f0      	bne.n	8006aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 80a0 	beq.w	8006c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10f      	bne.n	8006b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	4a0e      	ldr	r2, [pc, #56]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b38:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b42:	60bb      	str	r3, [r7, #8]
 8006b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b46:	2301      	movs	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <HAL_RCC_OscConfig+0x2b8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d121      	bne.n	8006b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <HAL_RCC_OscConfig+0x2b8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a07      	ldr	r2, [pc, #28]	; (8006b78 <HAL_RCC_OscConfig+0x2b8>)
 8006b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b62:	f7fe fcd9 	bl	8005518 <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b68:	e011      	b.n	8006b8e <HAL_RCC_OscConfig+0x2ce>
 8006b6a:	bf00      	nop
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	42470000 	.word	0x42470000
 8006b74:	42470e80 	.word	0x42470e80
 8006b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b7c:	f7fe fccc 	bl	8005518 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e0fd      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8e:	4b81      	ldr	r3, [pc, #516]	; (8006d94 <HAL_RCC_OscConfig+0x4d4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x2f0>
 8006ba2:	4b7d      	ldr	r3, [pc, #500]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	4a7c      	ldr	r2, [pc, #496]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	6713      	str	r3, [r2, #112]	; 0x70
 8006bae:	e01c      	b.n	8006bea <HAL_RCC_OscConfig+0x32a>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b05      	cmp	r3, #5
 8006bb6:	d10c      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x312>
 8006bb8:	4b77      	ldr	r3, [pc, #476]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbc:	4a76      	ldr	r2, [pc, #472]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006bbe:	f043 0304 	orr.w	r3, r3, #4
 8006bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc4:	4b74      	ldr	r3, [pc, #464]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	4a73      	ldr	r2, [pc, #460]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd0:	e00b      	b.n	8006bea <HAL_RCC_OscConfig+0x32a>
 8006bd2:	4b71      	ldr	r3, [pc, #452]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	4a70      	ldr	r2, [pc, #448]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bde:	4b6e      	ldr	r3, [pc, #440]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a6d      	ldr	r2, [pc, #436]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006be4:	f023 0304 	bic.w	r3, r3, #4
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d015      	beq.n	8006c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf2:	f7fe fc91 	bl	8005518 <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf8:	e00a      	b.n	8006c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bfa:	f7fe fc8d 	bl	8005518 <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e0bc      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c10:	4b61      	ldr	r3, [pc, #388]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0ee      	beq.n	8006bfa <HAL_RCC_OscConfig+0x33a>
 8006c1c:	e014      	b.n	8006c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c1e:	f7fe fc7b 	bl	8005518 <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c24:	e00a      	b.n	8006c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c26:	f7fe fc77 	bl	8005518 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e0a6      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c3c:	4b56      	ldr	r3, [pc, #344]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1ee      	bne.n	8006c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d105      	bne.n	8006c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c4e:	4b52      	ldr	r3, [pc, #328]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	4a51      	ldr	r2, [pc, #324]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 8092 	beq.w	8006d88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c64:	4b4c      	ldr	r3, [pc, #304]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 030c 	and.w	r3, r3, #12
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d05c      	beq.n	8006d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d141      	bne.n	8006cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c78:	4b48      	ldr	r3, [pc, #288]	; (8006d9c <HAL_RCC_OscConfig+0x4dc>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7e:	f7fe fc4b 	bl	8005518 <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c86:	f7fe fc47 	bl	8005518 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e078      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c98:	4b3f      	ldr	r3, [pc, #252]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1f0      	bne.n	8006c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	019b      	lsls	r3, r3, #6
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cba:	085b      	lsrs	r3, r3, #1
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	061b      	lsls	r3, r3, #24
 8006cc8:	4933      	ldr	r1, [pc, #204]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cce:	4b33      	ldr	r3, [pc, #204]	; (8006d9c <HAL_RCC_OscConfig+0x4dc>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd4:	f7fe fc20 	bl	8005518 <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cdc:	f7fe fc1c 	bl	8005518 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e04d      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cee:	4b2a      	ldr	r3, [pc, #168]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f0      	beq.n	8006cdc <HAL_RCC_OscConfig+0x41c>
 8006cfa:	e045      	b.n	8006d88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cfc:	4b27      	ldr	r3, [pc, #156]	; (8006d9c <HAL_RCC_OscConfig+0x4dc>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d02:	f7fe fc09 	bl	8005518 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d0a:	f7fe fc05 	bl	8005518 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e036      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1c:	4b1e      	ldr	r3, [pc, #120]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1f0      	bne.n	8006d0a <HAL_RCC_OscConfig+0x44a>
 8006d28:	e02e      	b.n	8006d88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e029      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d36:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <HAL_RCC_OscConfig+0x4d8>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d11c      	bne.n	8006d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d115      	bne.n	8006d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d5e:	4013      	ands	r3, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10d      	bne.n	8006d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d106      	bne.n	8006d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d001      	beq.n	8006d88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	40007000 	.word	0x40007000
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	42470060 	.word	0x42470060

08006da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0cc      	b.n	8006f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006db4:	4b68      	ldr	r3, [pc, #416]	; (8006f58 <HAL_RCC_ClockConfig+0x1b8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 030f 	and.w	r3, r3, #15
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d90c      	bls.n	8006ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc2:	4b65      	ldr	r3, [pc, #404]	; (8006f58 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dca:	4b63      	ldr	r3, [pc, #396]	; (8006f58 <HAL_RCC_ClockConfig+0x1b8>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d001      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e0b8      	b.n	8006f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d020      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006df4:	4b59      	ldr	r3, [pc, #356]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	4a58      	ldr	r2, [pc, #352]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d005      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e0c:	4b53      	ldr	r3, [pc, #332]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	4a52      	ldr	r2, [pc, #328]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e18:	4b50      	ldr	r3, [pc, #320]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	494d      	ldr	r1, [pc, #308]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d044      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d107      	bne.n	8006e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3e:	4b47      	ldr	r3, [pc, #284]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d119      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e07f      	b.n	8006f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d003      	beq.n	8006e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d107      	bne.n	8006e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e5e:	4b3f      	ldr	r3, [pc, #252]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d109      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e06f      	b.n	8006f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e6e:	4b3b      	ldr	r3, [pc, #236]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e067      	b.n	8006f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e7e:	4b37      	ldr	r3, [pc, #220]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f023 0203 	bic.w	r2, r3, #3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	4934      	ldr	r1, [pc, #208]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e90:	f7fe fb42 	bl	8005518 <HAL_GetTick>
 8006e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e98:	f7fe fb3e 	bl	8005518 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e04f      	b.n	8006f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eae:	4b2b      	ldr	r3, [pc, #172]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 020c 	and.w	r2, r3, #12
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d1eb      	bne.n	8006e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ec0:	4b25      	ldr	r3, [pc, #148]	; (8006f58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d20c      	bcs.n	8006ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ece:	4b22      	ldr	r3, [pc, #136]	; (8006f58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed6:	4b20      	ldr	r3, [pc, #128]	; (8006f58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d001      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e032      	b.n	8006f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d008      	beq.n	8006f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ef4:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	4916      	ldr	r1, [pc, #88]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d009      	beq.n	8006f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f12:	4b12      	ldr	r3, [pc, #72]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	490e      	ldr	r1, [pc, #56]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f26:	f000 f821 	bl	8006f6c <HAL_RCC_GetSysClockFreq>
 8006f2a:	4601      	mov	r1, r0
 8006f2c:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <HAL_RCC_ClockConfig+0x1bc>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	091b      	lsrs	r3, r3, #4
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	4a0a      	ldr	r2, [pc, #40]	; (8006f60 <HAL_RCC_ClockConfig+0x1c0>)
 8006f38:	5cd3      	ldrb	r3, [r2, r3]
 8006f3a:	fa21 f303 	lsr.w	r3, r1, r3
 8006f3e:	4a09      	ldr	r2, [pc, #36]	; (8006f64 <HAL_RCC_ClockConfig+0x1c4>)
 8006f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f42:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <HAL_RCC_ClockConfig+0x1c8>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe faa2 	bl	8005490 <HAL_InitTick>

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40023c00 	.word	0x40023c00
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	0800d014 	.word	0x0800d014
 8006f64:	20000004 	.word	0x20000004
 8006f68:	20000008 	.word	0x20000008

08006f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f72:	2300      	movs	r3, #0
 8006f74:	607b      	str	r3, [r7, #4]
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f82:	4b50      	ldr	r3, [pc, #320]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f003 030c 	and.w	r3, r3, #12
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d007      	beq.n	8006f9e <HAL_RCC_GetSysClockFreq+0x32>
 8006f8e:	2b08      	cmp	r3, #8
 8006f90:	d008      	beq.n	8006fa4 <HAL_RCC_GetSysClockFreq+0x38>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 808d 	bne.w	80070b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f98:	4b4b      	ldr	r3, [pc, #300]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006f9a:	60bb      	str	r3, [r7, #8]
       break;
 8006f9c:	e08c      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f9e:	4b4b      	ldr	r3, [pc, #300]	; (80070cc <HAL_RCC_GetSysClockFreq+0x160>)
 8006fa0:	60bb      	str	r3, [r7, #8]
      break;
 8006fa2:	e089      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fa4:	4b47      	ldr	r3, [pc, #284]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fae:	4b45      	ldr	r3, [pc, #276]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d023      	beq.n	8007002 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fba:	4b42      	ldr	r3, [pc, #264]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	099b      	lsrs	r3, r3, #6
 8006fc0:	f04f 0400 	mov.w	r4, #0
 8006fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	ea03 0501 	and.w	r5, r3, r1
 8006fd0:	ea04 0602 	and.w	r6, r4, r2
 8006fd4:	4a3d      	ldr	r2, [pc, #244]	; (80070cc <HAL_RCC_GetSysClockFreq+0x160>)
 8006fd6:	fb02 f106 	mul.w	r1, r2, r6
 8006fda:	2200      	movs	r2, #0
 8006fdc:	fb02 f205 	mul.w	r2, r2, r5
 8006fe0:	440a      	add	r2, r1
 8006fe2:	493a      	ldr	r1, [pc, #232]	; (80070cc <HAL_RCC_GetSysClockFreq+0x160>)
 8006fe4:	fba5 0101 	umull	r0, r1, r5, r1
 8006fe8:	1853      	adds	r3, r2, r1
 8006fea:	4619      	mov	r1, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f04f 0400 	mov.w	r4, #0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4623      	mov	r3, r4
 8006ff6:	f7f9 fe2f 	bl	8000c58 <__aeabi_uldivmod>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	460c      	mov	r4, r1
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	e049      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007002:	4b30      	ldr	r3, [pc, #192]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	099b      	lsrs	r3, r3, #6
 8007008:	f04f 0400 	mov.w	r4, #0
 800700c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	ea03 0501 	and.w	r5, r3, r1
 8007018:	ea04 0602 	and.w	r6, r4, r2
 800701c:	4629      	mov	r1, r5
 800701e:	4632      	mov	r2, r6
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	f04f 0400 	mov.w	r4, #0
 8007028:	0154      	lsls	r4, r2, #5
 800702a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800702e:	014b      	lsls	r3, r1, #5
 8007030:	4619      	mov	r1, r3
 8007032:	4622      	mov	r2, r4
 8007034:	1b49      	subs	r1, r1, r5
 8007036:	eb62 0206 	sbc.w	r2, r2, r6
 800703a:	f04f 0300 	mov.w	r3, #0
 800703e:	f04f 0400 	mov.w	r4, #0
 8007042:	0194      	lsls	r4, r2, #6
 8007044:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007048:	018b      	lsls	r3, r1, #6
 800704a:	1a5b      	subs	r3, r3, r1
 800704c:	eb64 0402 	sbc.w	r4, r4, r2
 8007050:	f04f 0100 	mov.w	r1, #0
 8007054:	f04f 0200 	mov.w	r2, #0
 8007058:	00e2      	lsls	r2, r4, #3
 800705a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800705e:	00d9      	lsls	r1, r3, #3
 8007060:	460b      	mov	r3, r1
 8007062:	4614      	mov	r4, r2
 8007064:	195b      	adds	r3, r3, r5
 8007066:	eb44 0406 	adc.w	r4, r4, r6
 800706a:	f04f 0100 	mov.w	r1, #0
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	02a2      	lsls	r2, r4, #10
 8007074:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007078:	0299      	lsls	r1, r3, #10
 800707a:	460b      	mov	r3, r1
 800707c:	4614      	mov	r4, r2
 800707e:	4618      	mov	r0, r3
 8007080:	4621      	mov	r1, r4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f04f 0400 	mov.w	r4, #0
 8007088:	461a      	mov	r2, r3
 800708a:	4623      	mov	r3, r4
 800708c:	f7f9 fde4 	bl	8000c58 <__aeabi_uldivmod>
 8007090:	4603      	mov	r3, r0
 8007092:	460c      	mov	r4, r1
 8007094:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007096:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	0c1b      	lsrs	r3, r3, #16
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	3301      	adds	r3, #1
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ae:	60bb      	str	r3, [r7, #8]
      break;
 80070b0:	e002      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80070b4:	60bb      	str	r3, [r7, #8]
      break;
 80070b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b8:	68bb      	ldr	r3, [r7, #8]
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	40023800 	.word	0x40023800
 80070c8:	00f42400 	.word	0x00f42400
 80070cc:	017d7840 	.word	0x017d7840

080070d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d4:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070d6:	681b      	ldr	r3, [r3, #0]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20000004 	.word	0x20000004

080070e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070ec:	f7ff fff0 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 80070f0:	4601      	mov	r1, r0
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	0a9b      	lsrs	r3, r3, #10
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	4a03      	ldr	r2, [pc, #12]	; (800710c <HAL_RCC_GetPCLK1Freq+0x24>)
 80070fe:	5cd3      	ldrb	r3, [r2, r3]
 8007100:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40023800 	.word	0x40023800
 800710c:	0800d024 	.word	0x0800d024

08007110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007114:	f7ff ffdc 	bl	80070d0 <HAL_RCC_GetHCLKFreq>
 8007118:	4601      	mov	r1, r0
 800711a:	4b05      	ldr	r3, [pc, #20]	; (8007130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	0b5b      	lsrs	r3, r3, #13
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	4a03      	ldr	r2, [pc, #12]	; (8007134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007126:	5cd3      	ldrb	r3, [r2, r3]
 8007128:	fa21 f303 	lsr.w	r3, r1, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40023800 	.word	0x40023800
 8007134:	0800d024 	.word	0x0800d024

08007138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e056      	b.n	80071f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d106      	bne.n	800716a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f7fc fb81 	bl	800386c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007180:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	431a      	orrs	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	431a      	orrs	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	69db      	ldr	r3, [r3, #28]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	ea42 0103 	orr.w	r1, r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	0c1b      	lsrs	r3, r3, #16
 80071c8:	f003 0104 	and.w	r1, r3, #4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	69da      	ldr	r2, [r3, #28]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	4613      	mov	r3, r2
 800720e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_SPI_Transmit+0x22>
 800721e:	2302      	movs	r3, #2
 8007220:	e11e      	b.n	8007460 <HAL_SPI_Transmit+0x260>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800722a:	f7fe f975 	bl	8005518 <HAL_GetTick>
 800722e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b01      	cmp	r3, #1
 800723e:	d002      	beq.n	8007246 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007240:	2302      	movs	r3, #2
 8007242:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007244:	e103      	b.n	800744e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_SPI_Transmit+0x52>
 800724c:	88fb      	ldrh	r3, [r7, #6]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007256:	e0fa      	b.n	800744e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2203      	movs	r2, #3
 800725c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	88fa      	ldrh	r2, [r7, #6]
 8007270:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	88fa      	ldrh	r2, [r7, #6]
 8007276:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800729e:	d107      	bne.n	80072b0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	d007      	beq.n	80072ce <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d6:	d14b      	bne.n	8007370 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <HAL_SPI_Transmit+0xe6>
 80072e0:	8afb      	ldrh	r3, [r7, #22]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d13e      	bne.n	8007364 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	881a      	ldrh	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	1c9a      	adds	r2, r3, #2
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b01      	subs	r3, #1
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800730a:	e02b      	b.n	8007364 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	2b02      	cmp	r3, #2
 8007318:	d112      	bne.n	8007340 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	881a      	ldrh	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	1c9a      	adds	r2, r3, #2
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	86da      	strh	r2, [r3, #54]	; 0x36
 800733e:	e011      	b.n	8007364 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007340:	f7fe f8ea 	bl	8005518 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d803      	bhi.n	8007358 <HAL_SPI_Transmit+0x158>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007356:	d102      	bne.n	800735e <HAL_SPI_Transmit+0x15e>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d102      	bne.n	8007364 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007362:	e074      	b.n	800744e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007368:	b29b      	uxth	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1ce      	bne.n	800730c <HAL_SPI_Transmit+0x10c>
 800736e:	e04c      	b.n	800740a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <HAL_SPI_Transmit+0x17e>
 8007378:	8afb      	ldrh	r3, [r7, #22]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d140      	bne.n	8007400 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	330c      	adds	r3, #12
 8007388:	7812      	ldrb	r2, [r2, #0]
 800738a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800739a:	b29b      	uxth	r3, r3
 800739c:	3b01      	subs	r3, #1
 800739e:	b29a      	uxth	r2, r3
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80073a4:	e02c      	b.n	8007400 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d113      	bne.n	80073dc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	330c      	adds	r3, #12
 80073be:	7812      	ldrb	r2, [r2, #0]
 80073c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80073da:	e011      	b.n	8007400 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073dc:	f7fe f89c 	bl	8005518 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d803      	bhi.n	80073f4 <HAL_SPI_Transmit+0x1f4>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f2:	d102      	bne.n	80073fa <HAL_SPI_Transmit+0x1fa>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073fe:	e026      	b.n	800744e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1cd      	bne.n	80073a6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f000 fba4 	bl	8007b5c <SPI_EndRxTxTransaction>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007428:	2300      	movs	r3, #0
 800742a:	613b      	str	r3, [r7, #16]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007442:	2b00      	cmp	r3, #0
 8007444:	d002      	beq.n	800744c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	77fb      	strb	r3, [r7, #31]
 800744a:	e000      	b.n	800744e <HAL_SPI_Transmit+0x24e>
  }

error:
 800744c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800745e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af02      	add	r7, sp, #8
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	603b      	str	r3, [r7, #0]
 8007474:	4613      	mov	r3, r2
 8007476:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007484:	d112      	bne.n	80074ac <HAL_SPI_Receive+0x44>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10e      	bne.n	80074ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2204      	movs	r2, #4
 8007492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007496:	88fa      	ldrh	r2, [r7, #6]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	4613      	mov	r3, r2
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 f8e9 	bl	800767a <HAL_SPI_TransmitReceive>
 80074a8:	4603      	mov	r3, r0
 80074aa:	e0e2      	b.n	8007672 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d101      	bne.n	80074ba <HAL_SPI_Receive+0x52>
 80074b6:	2302      	movs	r3, #2
 80074b8:	e0db      	b.n	8007672 <HAL_SPI_Receive+0x20a>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c2:	f7fe f829 	bl	8005518 <HAL_GetTick>
 80074c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d002      	beq.n	80074da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80074d4:	2302      	movs	r3, #2
 80074d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074d8:	e0c2      	b.n	8007660 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_SPI_Receive+0x7e>
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ea:	e0b9      	b.n	8007660 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2204      	movs	r2, #4
 80074f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	68ba      	ldr	r2, [r7, #8]
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	88fa      	ldrh	r2, [r7, #6]
 8007504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	88fa      	ldrh	r2, [r7, #6]
 800750a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007532:	d107      	bne.n	8007544 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007542:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	d007      	beq.n	8007562 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007560:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d162      	bne.n	8007630 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800756a:	e02e      	b.n	80075ca <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b01      	cmp	r3, #1
 8007578:	d115      	bne.n	80075a6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f103 020c 	add.w	r2, r3, #12
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	7812      	ldrb	r2, [r2, #0]
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759a:	b29b      	uxth	r3, r3
 800759c:	3b01      	subs	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075a4:	e011      	b.n	80075ca <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075a6:	f7fd ffb7 	bl	8005518 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d803      	bhi.n	80075be <HAL_SPI_Receive+0x156>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075bc:	d102      	bne.n	80075c4 <HAL_SPI_Receive+0x15c>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075c8:	e04a      	b.n	8007660 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1cb      	bne.n	800756c <HAL_SPI_Receive+0x104>
 80075d4:	e031      	b.n	800763a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d113      	bne.n	800760c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68da      	ldr	r2, [r3, #12]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	b292      	uxth	r2, r2
 80075f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f6:	1c9a      	adds	r2, r3, #2
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007600:	b29b      	uxth	r3, r3
 8007602:	3b01      	subs	r3, #1
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	87da      	strh	r2, [r3, #62]	; 0x3e
 800760a:	e011      	b.n	8007630 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800760c:	f7fd ff84 	bl	8005518 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d803      	bhi.n	8007624 <HAL_SPI_Receive+0x1bc>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007622:	d102      	bne.n	800762a <HAL_SPI_Receive+0x1c2>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d102      	bne.n	8007630 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800762e:	e017      	b.n	8007660 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1cd      	bne.n	80075d6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f000 fa27 	bl	8007a92 <SPI_EndRxTransaction>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2220      	movs	r2, #32
 800764e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]
 800765c:	e000      	b.n	8007660 <HAL_SPI_Receive+0x1f8>
  }

error :
 800765e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b08c      	sub	sp, #48	; 0x30
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007688:	2301      	movs	r3, #1
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_SPI_TransmitReceive+0x26>
 800769c:	2302      	movs	r3, #2
 800769e:	e18a      	b.n	80079b6 <HAL_SPI_TransmitReceive+0x33c>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076a8:	f7fd ff36 	bl	8005518 <HAL_GetTick>
 80076ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80076c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d00f      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x70>
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d0:	d107      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d103      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x68>
 80076da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076de:	2b04      	cmp	r3, #4
 80076e0:	d003      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076e2:	2302      	movs	r3, #2
 80076e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076e8:	e15b      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d005      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x82>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x82>
 80076f6:	887b      	ldrh	r3, [r7, #2]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d103      	bne.n	8007704 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007702:	e14e      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b04      	cmp	r3, #4
 800770e:	d003      	beq.n	8007718 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2205      	movs	r2, #5
 8007714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	887a      	ldrh	r2, [r7, #2]
 8007728:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	887a      	ldrh	r2, [r7, #2]
 800772e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	887a      	ldrh	r2, [r7, #2]
 800773a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	887a      	ldrh	r2, [r7, #2]
 8007740:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b40      	cmp	r3, #64	; 0x40
 800775a:	d007      	beq.n	800776c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800776a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007774:	d178      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_SPI_TransmitReceive+0x10a>
 800777e:	8b7b      	ldrh	r3, [r7, #26]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d166      	bne.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007788:	881a      	ldrh	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007794:	1c9a      	adds	r2, r3, #2
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077a8:	e053      	b.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d11b      	bne.n	80077f0 <HAL_SPI_TransmitReceive+0x176>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d016      	beq.n	80077f0 <HAL_SPI_TransmitReceive+0x176>
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d113      	bne.n	80077f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	881a      	ldrh	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	1c9a      	adds	r2, r3, #2
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	3b01      	subs	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d119      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x1b8>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007802:	b29b      	uxth	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d014      	beq.n	8007832 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	b292      	uxth	r2, r2
 8007814:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	1c9a      	adds	r2, r3, #2
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800782e:	2301      	movs	r3, #1
 8007830:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007832:	f7fd fe71 	bl	8005518 <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783e:	429a      	cmp	r2, r3
 8007840:	d807      	bhi.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007848:	d003      	beq.n	8007852 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007850:	e0a7      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1a6      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x130>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1a1      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x130>
 8007866:	e07c      	b.n	8007962 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_SPI_TransmitReceive+0x1fc>
 8007870:	8b7b      	ldrh	r3, [r7, #26]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d16b      	bne.n	800794e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	330c      	adds	r3, #12
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007892:	b29b      	uxth	r3, r3
 8007894:	3b01      	subs	r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800789c:	e057      	b.n	800794e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d11c      	bne.n	80078e6 <HAL_SPI_TransmitReceive+0x26c>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d017      	beq.n	80078e6 <HAL_SPI_TransmitReceive+0x26c>
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d114      	bne.n	80078e6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	7812      	ldrb	r2, [r2, #0]
 80078c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078d8:	b29b      	uxth	r3, r3
 80078da:	3b01      	subs	r3, #1
 80078dc:	b29a      	uxth	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d119      	bne.n	8007928 <HAL_SPI_TransmitReceive+0x2ae>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d014      	beq.n	8007928 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007908:	b2d2      	uxtb	r2, r2
 800790a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791a:	b29b      	uxth	r3, r3
 800791c:	3b01      	subs	r3, #1
 800791e:	b29a      	uxth	r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007924:	2301      	movs	r3, #1
 8007926:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007928:	f7fd fdf6 	bl	8005518 <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007934:	429a      	cmp	r2, r3
 8007936:	d803      	bhi.n	8007940 <HAL_SPI_TransmitReceive+0x2c6>
 8007938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800793e:	d102      	bne.n	8007946 <HAL_SPI_TransmitReceive+0x2cc>
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	2b00      	cmp	r3, #0
 8007944:	d103      	bne.n	800794e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800794c:	e029      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007952:	b29b      	uxth	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1a2      	bne.n	800789e <HAL_SPI_TransmitReceive+0x224>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d19d      	bne.n	800789e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007964:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f8f8 	bl	8007b5c <SPI_EndRxTxTransaction>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d006      	beq.n	8007980 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800797e:	e010      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007988:	2300      	movs	r3, #0
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	e000      	b.n	80079a2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80079a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3730      	adds	r7, #48	; 0x30
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	603b      	str	r3, [r7, #0]
 80079ca:	4613      	mov	r3, r2
 80079cc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079ce:	e04c      	b.n	8007a6a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d6:	d048      	beq.n	8007a6a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80079d8:	f7fd fd9e 	bl	8005518 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d902      	bls.n	80079ee <SPI_WaitFlagStateUntilTimeout+0x30>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d13d      	bne.n	8007a6a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a06:	d111      	bne.n	8007a2c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a10:	d004      	beq.n	8007a1c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1a:	d107      	bne.n	8007a2c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a34:	d10f      	bne.n	8007a56 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e00f      	b.n	8007a8a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689a      	ldr	r2, [r3, #8]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	4013      	ands	r3, r2
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	bf0c      	ite	eq
 8007a7a:	2301      	moveq	r3, #1
 8007a7c:	2300      	movne	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d1a3      	bne.n	80079d0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b086      	sub	sp, #24
 8007a96:	af02      	add	r7, sp, #8
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aa6:	d111      	bne.n	8007acc <SPI_EndRxTransaction+0x3a>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ab0:	d004      	beq.n	8007abc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aba:	d107      	bne.n	8007acc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aca:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ad4:	d12a      	bne.n	8007b2c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ade:	d012      	beq.n	8007b06 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2180      	movs	r1, #128	; 0x80
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff ff67 	bl	80079be <SPI_WaitFlagStateUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d02d      	beq.n	8007b52 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007afa:	f043 0220 	orr.w	r2, r3, #32
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e026      	b.n	8007b54 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	2101      	movs	r1, #1
 8007b10:	68f8      	ldr	r0, [r7, #12]
 8007b12:	f7ff ff54 	bl	80079be <SPI_WaitFlagStateUntilTimeout>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d01a      	beq.n	8007b52 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b20:	f043 0220 	orr.w	r2, r3, #32
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007b28:	2303      	movs	r3, #3
 8007b2a:	e013      	b.n	8007b54 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	9300      	str	r3, [sp, #0]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	2101      	movs	r1, #1
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f7ff ff41 	bl	80079be <SPI_WaitFlagStateUntilTimeout>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	f043 0220 	orr.w	r2, r3, #32
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e000      	b.n	8007b54 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b088      	sub	sp, #32
 8007b60:	af02      	add	r7, sp, #8
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b68:	4b1b      	ldr	r3, [pc, #108]	; (8007bd8 <SPI_EndRxTxTransaction+0x7c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <SPI_EndRxTxTransaction+0x80>)
 8007b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b72:	0d5b      	lsrs	r3, r3, #21
 8007b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b78:	fb02 f303 	mul.w	r3, r2, r3
 8007b7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b86:	d112      	bne.n	8007bae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2180      	movs	r1, #128	; 0x80
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f7ff ff13 	bl	80079be <SPI_WaitFlagStateUntilTimeout>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d016      	beq.n	8007bcc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba2:	f043 0220 	orr.w	r2, r3, #32
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e00f      	b.n	8007bce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00a      	beq.n	8007bca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc4:	2b80      	cmp	r3, #128	; 0x80
 8007bc6:	d0f2      	beq.n	8007bae <SPI_EndRxTxTransaction+0x52>
 8007bc8:	e000      	b.n	8007bcc <SPI_EndRxTxTransaction+0x70>
        break;
 8007bca:	bf00      	nop
  }

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	20000004 	.word	0x20000004
 8007bdc:	165e9f81 	.word	0x165e9f81

08007be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e01d      	b.n	8007c2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fd fb0e 	bl	8005228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f000 fb4c 	bl	80082bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0201 	orr.w	r2, r2, #1
 8007c4c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	689b      	ldr	r3, [r3, #8]
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b06      	cmp	r3, #6
 8007c5e:	d007      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f042 0201 	orr.w	r2, r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e01d      	b.n	8007ccc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d106      	bne.n	8007caa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f815 	bl	8007cd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4619      	mov	r1, r3
 8007cbc:	4610      	mov	r0, r2
 8007cbe:	f000 fafd 	bl	80082bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	6839      	ldr	r1, [r7, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fd84 	bl	8008808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a10      	ldr	r2, [pc, #64]	; (8007d48 <HAL_TIM_PWM_Start+0x60>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d107      	bne.n	8007d1a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b06      	cmp	r3, #6
 8007d2a:	d007      	beq.n	8007d3c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0201 	orr.w	r2, r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	40010000 	.word	0x40010000

08007d4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d122      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d11b      	bne.n	8007da8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0202 	mvn.w	r2, #2
 8007d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	f003 0303 	and.w	r3, r3, #3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa75 	bl	800827e <HAL_TIM_IC_CaptureCallback>
 8007d94:	e005      	b.n	8007da2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa67 	bl	800826a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fa78 	bl	8008292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	f003 0304 	and.w	r3, r3, #4
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d122      	bne.n	8007dfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b04      	cmp	r3, #4
 8007dc2:	d11b      	bne.n	8007dfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f06f 0204 	mvn.w	r2, #4
 8007dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa4b 	bl	800827e <HAL_TIM_IC_CaptureCallback>
 8007de8:	e005      	b.n	8007df6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa3d 	bl	800826a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fa4e 	bl	8008292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	f003 0308 	and.w	r3, r3, #8
 8007e06:	2b08      	cmp	r3, #8
 8007e08:	d122      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f003 0308 	and.w	r3, r3, #8
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d11b      	bne.n	8007e50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f06f 0208 	mvn.w	r2, #8
 8007e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2204      	movs	r2, #4
 8007e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	f003 0303 	and.w	r3, r3, #3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d003      	beq.n	8007e3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa21 	bl	800827e <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e005      	b.n	8007e4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa13 	bl	800826a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 fa24 	bl	8008292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f003 0310 	and.w	r3, r3, #16
 8007e5a:	2b10      	cmp	r3, #16
 8007e5c:	d122      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0310 	and.w	r3, r3, #16
 8007e68:	2b10      	cmp	r3, #16
 8007e6a:	d11b      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f06f 0210 	mvn.w	r2, #16
 8007e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2208      	movs	r2, #8
 8007e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f9f7 	bl	800827e <HAL_TIM_IC_CaptureCallback>
 8007e90:	e005      	b.n	8007e9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f9e9 	bl	800826a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f9fa 	bl	8008292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d10e      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d107      	bne.n	8007ed0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f06f 0201 	mvn.w	r2, #1
 8007ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f9c3 	bl	8008256 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eda:	2b80      	cmp	r3, #128	; 0x80
 8007edc:	d10e      	bne.n	8007efc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee8:	2b80      	cmp	r3, #128	; 0x80
 8007eea:	d107      	bne.n	8007efc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fd76 	bl	80089e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b40      	cmp	r3, #64	; 0x40
 8007f08:	d10e      	bne.n	8007f28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f14:	2b40      	cmp	r3, #64	; 0x40
 8007f16:	d107      	bne.n	8007f28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f9bf 	bl	80082a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f003 0320 	and.w	r3, r3, #32
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d10e      	bne.n	8007f54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f003 0320 	and.w	r3, r3, #32
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d107      	bne.n	8007f54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0220 	mvn.w	r2, #32
 8007f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fd40 	bl	80089d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d101      	bne.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007f72:	2302      	movs	r3, #2
 8007f74:	e0b4      	b.n	80080e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2202      	movs	r2, #2
 8007f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b0c      	cmp	r3, #12
 8007f8a:	f200 809f 	bhi.w	80080cc <HAL_TIM_PWM_ConfigChannel+0x170>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08007fc9 	.word	0x08007fc9
 8007f98:	080080cd 	.word	0x080080cd
 8007f9c:	080080cd 	.word	0x080080cd
 8007fa0:	080080cd 	.word	0x080080cd
 8007fa4:	08008009 	.word	0x08008009
 8007fa8:	080080cd 	.word	0x080080cd
 8007fac:	080080cd 	.word	0x080080cd
 8007fb0:	080080cd 	.word	0x080080cd
 8007fb4:	0800804b 	.word	0x0800804b
 8007fb8:	080080cd 	.word	0x080080cd
 8007fbc:	080080cd 	.word	0x080080cd
 8007fc0:	080080cd 	.word	0x080080cd
 8007fc4:	0800808b 	.word	0x0800808b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 f9f4 	bl	80083bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699a      	ldr	r2, [r3, #24]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f042 0208 	orr.w	r2, r2, #8
 8007fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f022 0204 	bic.w	r2, r2, #4
 8007ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6999      	ldr	r1, [r3, #24]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	691a      	ldr	r2, [r3, #16]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	619a      	str	r2, [r3, #24]
      break;
 8008006:	e062      	b.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 fa3a 	bl	8008488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	699a      	ldr	r2, [r3, #24]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699a      	ldr	r2, [r3, #24]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6999      	ldr	r1, [r3, #24]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	021a      	lsls	r2, r3, #8
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	619a      	str	r2, [r3, #24]
      break;
 8008048:	e041      	b.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fa85 	bl	8008560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69da      	ldr	r2, [r3, #28]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f042 0208 	orr.w	r2, r2, #8
 8008064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69da      	ldr	r2, [r3, #28]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0204 	bic.w	r2, r2, #4
 8008074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69d9      	ldr	r1, [r3, #28]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	691a      	ldr	r2, [r3, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	61da      	str	r2, [r3, #28]
      break;
 8008088:	e021      	b.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68b9      	ldr	r1, [r7, #8]
 8008090:	4618      	mov	r0, r3
 8008092:	f000 facf 	bl	8008634 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	69da      	ldr	r2, [r3, #28]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69da      	ldr	r2, [r3, #28]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69d9      	ldr	r1, [r3, #28]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	021a      	lsls	r2, r3, #8
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	61da      	str	r2, [r3, #28]
      break;
 80080ca:	e000      	b.n	80080ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80080cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_TIM_ConfigClockSource+0x18>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e0a6      	b.n	800824e <HAL_TIM_ConfigClockSource+0x166>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800811e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008126:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b40      	cmp	r3, #64	; 0x40
 8008136:	d067      	beq.n	8008208 <HAL_TIM_ConfigClockSource+0x120>
 8008138:	2b40      	cmp	r3, #64	; 0x40
 800813a:	d80b      	bhi.n	8008154 <HAL_TIM_ConfigClockSource+0x6c>
 800813c:	2b10      	cmp	r3, #16
 800813e:	d073      	beq.n	8008228 <HAL_TIM_ConfigClockSource+0x140>
 8008140:	2b10      	cmp	r3, #16
 8008142:	d802      	bhi.n	800814a <HAL_TIM_ConfigClockSource+0x62>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d06f      	beq.n	8008228 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008148:	e078      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800814a:	2b20      	cmp	r3, #32
 800814c:	d06c      	beq.n	8008228 <HAL_TIM_ConfigClockSource+0x140>
 800814e:	2b30      	cmp	r3, #48	; 0x30
 8008150:	d06a      	beq.n	8008228 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008152:	e073      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008154:	2b70      	cmp	r3, #112	; 0x70
 8008156:	d00d      	beq.n	8008174 <HAL_TIM_ConfigClockSource+0x8c>
 8008158:	2b70      	cmp	r3, #112	; 0x70
 800815a:	d804      	bhi.n	8008166 <HAL_TIM_ConfigClockSource+0x7e>
 800815c:	2b50      	cmp	r3, #80	; 0x50
 800815e:	d033      	beq.n	80081c8 <HAL_TIM_ConfigClockSource+0xe0>
 8008160:	2b60      	cmp	r3, #96	; 0x60
 8008162:	d041      	beq.n	80081e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008164:	e06a      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800816a:	d066      	beq.n	800823a <HAL_TIM_ConfigClockSource+0x152>
 800816c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008170:	d017      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008172:	e063      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6818      	ldr	r0, [r3, #0]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	6899      	ldr	r1, [r3, #8]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f000 fb20 	bl	80087c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008196:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	609a      	str	r2, [r3, #8]
      break;
 80081a0:	e04c      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6818      	ldr	r0, [r3, #0]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	6899      	ldr	r1, [r3, #8]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f000 fb09 	bl	80087c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689a      	ldr	r2, [r3, #8]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081c4:	609a      	str	r2, [r3, #8]
      break;
 80081c6:	e039      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	6859      	ldr	r1, [r3, #4]
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	461a      	mov	r2, r3
 80081d6:	f000 fa7d 	bl	80086d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2150      	movs	r1, #80	; 0x50
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fad6 	bl	8008792 <TIM_ITRx_SetConfig>
      break;
 80081e6:	e029      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	6859      	ldr	r1, [r3, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	461a      	mov	r2, r3
 80081f6:	f000 fa9c 	bl	8008732 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2160      	movs	r1, #96	; 0x60
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fac6 	bl	8008792 <TIM_ITRx_SetConfig>
      break;
 8008206:	e019      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6818      	ldr	r0, [r3, #0]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	6859      	ldr	r1, [r3, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	461a      	mov	r2, r3
 8008216:	f000 fa5d 	bl	80086d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2140      	movs	r1, #64	; 0x40
 8008220:	4618      	mov	r0, r3
 8008222:	f000 fab6 	bl	8008792 <TIM_ITRx_SetConfig>
      break;
 8008226:	e009      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681a      	ldr	r2, [r3, #0]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4619      	mov	r1, r3
 8008232:	4610      	mov	r0, r2
 8008234:	f000 faad 	bl	8008792 <TIM_ITRx_SetConfig>
      break;
 8008238:	e000      	b.n	800823c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800823a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082ae:	bf00      	nop
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
	...

080082bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a34      	ldr	r2, [pc, #208]	; (80083a0 <TIM_Base_SetConfig+0xe4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d00f      	beq.n	80082f4 <TIM_Base_SetConfig+0x38>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082da:	d00b      	beq.n	80082f4 <TIM_Base_SetConfig+0x38>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a31      	ldr	r2, [pc, #196]	; (80083a4 <TIM_Base_SetConfig+0xe8>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d007      	beq.n	80082f4 <TIM_Base_SetConfig+0x38>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a30      	ldr	r2, [pc, #192]	; (80083a8 <TIM_Base_SetConfig+0xec>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d003      	beq.n	80082f4 <TIM_Base_SetConfig+0x38>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a2f      	ldr	r2, [pc, #188]	; (80083ac <TIM_Base_SetConfig+0xf0>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d108      	bne.n	8008306 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a25      	ldr	r2, [pc, #148]	; (80083a0 <TIM_Base_SetConfig+0xe4>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d01b      	beq.n	8008346 <TIM_Base_SetConfig+0x8a>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008314:	d017      	beq.n	8008346 <TIM_Base_SetConfig+0x8a>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a22      	ldr	r2, [pc, #136]	; (80083a4 <TIM_Base_SetConfig+0xe8>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d013      	beq.n	8008346 <TIM_Base_SetConfig+0x8a>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a21      	ldr	r2, [pc, #132]	; (80083a8 <TIM_Base_SetConfig+0xec>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d00f      	beq.n	8008346 <TIM_Base_SetConfig+0x8a>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a20      	ldr	r2, [pc, #128]	; (80083ac <TIM_Base_SetConfig+0xf0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d00b      	beq.n	8008346 <TIM_Base_SetConfig+0x8a>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a1f      	ldr	r2, [pc, #124]	; (80083b0 <TIM_Base_SetConfig+0xf4>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d007      	beq.n	8008346 <TIM_Base_SetConfig+0x8a>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a1e      	ldr	r2, [pc, #120]	; (80083b4 <TIM_Base_SetConfig+0xf8>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d003      	beq.n	8008346 <TIM_Base_SetConfig+0x8a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a1d      	ldr	r2, [pc, #116]	; (80083b8 <TIM_Base_SetConfig+0xfc>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d108      	bne.n	8008358 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800834c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a08      	ldr	r2, [pc, #32]	; (80083a0 <TIM_Base_SetConfig+0xe4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d103      	bne.n	800838c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	691a      	ldr	r2, [r3, #16]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	615a      	str	r2, [r3, #20]
}
 8008392:	bf00      	nop
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	40010000 	.word	0x40010000
 80083a4:	40000400 	.word	0x40000400
 80083a8:	40000800 	.word	0x40000800
 80083ac:	40000c00 	.word	0x40000c00
 80083b0:	40014000 	.word	0x40014000
 80083b4:	40014400 	.word	0x40014400
 80083b8:	40014800 	.word	0x40014800

080083bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	f023 0201 	bic.w	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f023 0302 	bic.w	r3, r3, #2
 8008404:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	4313      	orrs	r3, r2
 800840e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a1c      	ldr	r2, [pc, #112]	; (8008484 <TIM_OC1_SetConfig+0xc8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d10c      	bne.n	8008432 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f023 0308 	bic.w	r3, r3, #8
 800841e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f023 0304 	bic.w	r3, r3, #4
 8008430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a13      	ldr	r2, [pc, #76]	; (8008484 <TIM_OC1_SetConfig+0xc8>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d111      	bne.n	800845e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	4313      	orrs	r3, r2
 8008452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	621a      	str	r2, [r3, #32]
}
 8008478:	bf00      	nop
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr
 8008484:	40010000 	.word	0x40010000

08008488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f023 0210 	bic.w	r2, r3, #16
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	f023 0320 	bic.w	r3, r3, #32
 80084d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	4313      	orrs	r3, r2
 80084de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a1e      	ldr	r2, [pc, #120]	; (800855c <TIM_OC2_SetConfig+0xd4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d10d      	bne.n	8008504 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	011b      	lsls	r3, r3, #4
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008502:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a15      	ldr	r2, [pc, #84]	; (800855c <TIM_OC2_SetConfig+0xd4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d113      	bne.n	8008534 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800851a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	4313      	orrs	r3, r2
 8008526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	4313      	orrs	r3, r2
 8008532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	621a      	str	r2, [r3, #32]
}
 800854e:	bf00      	nop
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	40010000 	.word	0x40010000

08008560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 0303 	bic.w	r3, r3, #3
 8008596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	4313      	orrs	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	021b      	lsls	r3, r3, #8
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a1d      	ldr	r2, [pc, #116]	; (8008630 <TIM_OC3_SetConfig+0xd0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d10d      	bne.n	80085da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80085c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	021b      	lsls	r3, r3, #8
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a14      	ldr	r2, [pc, #80]	; (8008630 <TIM_OC3_SetConfig+0xd0>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d113      	bne.n	800860a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	011b      	lsls	r3, r3, #4
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	4313      	orrs	r3, r2
 8008608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	621a      	str	r2, [r3, #32]
}
 8008624:	bf00      	nop
 8008626:	371c      	adds	r7, #28
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr
 8008630:	40010000 	.word	0x40010000

08008634 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800866a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	021b      	lsls	r3, r3, #8
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800867e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	031b      	lsls	r3, r3, #12
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a10      	ldr	r2, [pc, #64]	; (80086d0 <TIM_OC4_SetConfig+0x9c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d109      	bne.n	80086a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800869a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	019b      	lsls	r3, r3, #6
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	621a      	str	r2, [r3, #32]
}
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	40010000 	.word	0x40010000

080086d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a1b      	ldr	r3, [r3, #32]
 80086e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	f023 0201 	bic.w	r2, r3, #1
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	011b      	lsls	r3, r3, #4
 8008704:	693a      	ldr	r2, [r7, #16]
 8008706:	4313      	orrs	r3, r2
 8008708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f023 030a 	bic.w	r3, r3, #10
 8008710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	4313      	orrs	r3, r2
 8008718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	693a      	ldr	r2, [r7, #16]
 800871e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008732:	b480      	push	{r7}
 8008734:	b087      	sub	sp, #28
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a1b      	ldr	r3, [r3, #32]
 8008742:	f023 0210 	bic.w	r2, r3, #16
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6a1b      	ldr	r3, [r3, #32]
 8008754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800875c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	031b      	lsls	r3, r3, #12
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	4313      	orrs	r3, r2
 8008766:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800876e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	011b      	lsls	r3, r3, #4
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	697a      	ldr	r2, [r7, #20]
 800877e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	621a      	str	r2, [r3, #32]
}
 8008786:	bf00      	nop
 8008788:	371c      	adds	r7, #28
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008792:	b480      	push	{r7}
 8008794:	b085      	sub	sp, #20
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
 800879a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	f043 0307 	orr.w	r3, r3, #7
 80087b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	609a      	str	r2, [r3, #8]
}
 80087bc:	bf00      	nop
 80087be:	3714      	adds	r7, #20
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	021a      	lsls	r2, r3, #8
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	431a      	orrs	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	609a      	str	r2, [r3, #8]
}
 80087fc:	bf00      	nop
 80087fe:	371c      	adds	r7, #28
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	2201      	movs	r2, #1
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	6a1a      	ldr	r2, [r3, #32]
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	43db      	mvns	r3, r3
 800882a:	401a      	ands	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a1a      	ldr	r2, [r3, #32]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f003 031f 	and.w	r3, r3, #31
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	fa01 f303 	lsl.w	r3, r1, r3
 8008840:	431a      	orrs	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
}
 8008846:	bf00      	nop
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
	...

08008854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008864:	2b01      	cmp	r3, #1
 8008866:	d101      	bne.n	800886c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008868:	2302      	movs	r3, #2
 800886a:	e050      	b.n	800890e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a1c      	ldr	r2, [pc, #112]	; (800891c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d018      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b8:	d013      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a18      	ldr	r2, [pc, #96]	; (8008920 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00e      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a16      	ldr	r2, [pc, #88]	; (8008924 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d009      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a15      	ldr	r2, [pc, #84]	; (8008928 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d004      	beq.n	80088e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a13      	ldr	r2, [pc, #76]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d10c      	bne.n	80088fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40010000 	.word	0x40010000
 8008920:	40000400 	.word	0x40000400
 8008924:	40000800 	.word	0x40000800
 8008928:	40000c00 	.word	0x40000c00
 800892c:	40014000 	.word	0x40014000

08008930 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008944:	2b01      	cmp	r3, #1
 8008946:	d101      	bne.n	800894c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008948:	2302      	movs	r3, #2
 800894a:	e03d      	b.n	80089c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	4313      	orrs	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4313      	orrs	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d101      	bne.n	8008a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e03f      	b.n	8008a8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d106      	bne.n	8008a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7fc fca0 	bl	8005368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2224      	movs	r2, #36	; 0x24
 8008a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68da      	ldr	r2, [r3, #12]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f829 	bl	8008a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	691a      	ldr	r2, [r3, #16]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695a      	ldr	r2, [r3, #20]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2220      	movs	r2, #32
 8008a88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
	...

08008a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	691b      	ldr	r3, [r3, #16]
 8008aa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	431a      	orrs	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	69db      	ldr	r3, [r3, #28]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008ada:	f023 030c 	bic.w	r3, r3, #12
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	6812      	ldr	r2, [r2, #0]
 8008ae2:	68f9      	ldr	r1, [r7, #12]
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b06:	f040 818b 	bne.w	8008e20 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4ac1      	ldr	r2, [pc, #772]	; (8008e14 <UART_SetConfig+0x37c>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d005      	beq.n	8008b20 <UART_SetConfig+0x88>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4abf      	ldr	r2, [pc, #764]	; (8008e18 <UART_SetConfig+0x380>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	f040 80bd 	bne.w	8008c9a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b20:	f7fe faf6 	bl	8007110 <HAL_RCC_GetPCLK2Freq>
 8008b24:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	461d      	mov	r5, r3
 8008b2a:	f04f 0600 	mov.w	r6, #0
 8008b2e:	46a8      	mov	r8, r5
 8008b30:	46b1      	mov	r9, r6
 8008b32:	eb18 0308 	adds.w	r3, r8, r8
 8008b36:	eb49 0409 	adc.w	r4, r9, r9
 8008b3a:	4698      	mov	r8, r3
 8008b3c:	46a1      	mov	r9, r4
 8008b3e:	eb18 0805 	adds.w	r8, r8, r5
 8008b42:	eb49 0906 	adc.w	r9, r9, r6
 8008b46:	f04f 0100 	mov.w	r1, #0
 8008b4a:	f04f 0200 	mov.w	r2, #0
 8008b4e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b52:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b56:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b5a:	4688      	mov	r8, r1
 8008b5c:	4691      	mov	r9, r2
 8008b5e:	eb18 0005 	adds.w	r0, r8, r5
 8008b62:	eb49 0106 	adc.w	r1, r9, r6
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	461d      	mov	r5, r3
 8008b6c:	f04f 0600 	mov.w	r6, #0
 8008b70:	196b      	adds	r3, r5, r5
 8008b72:	eb46 0406 	adc.w	r4, r6, r6
 8008b76:	461a      	mov	r2, r3
 8008b78:	4623      	mov	r3, r4
 8008b7a:	f7f8 f86d 	bl	8000c58 <__aeabi_uldivmod>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	460c      	mov	r4, r1
 8008b82:	461a      	mov	r2, r3
 8008b84:	4ba5      	ldr	r3, [pc, #660]	; (8008e1c <UART_SetConfig+0x384>)
 8008b86:	fba3 2302 	umull	r2, r3, r3, r2
 8008b8a:	095b      	lsrs	r3, r3, #5
 8008b8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	461d      	mov	r5, r3
 8008b94:	f04f 0600 	mov.w	r6, #0
 8008b98:	46a9      	mov	r9, r5
 8008b9a:	46b2      	mov	sl, r6
 8008b9c:	eb19 0309 	adds.w	r3, r9, r9
 8008ba0:	eb4a 040a 	adc.w	r4, sl, sl
 8008ba4:	4699      	mov	r9, r3
 8008ba6:	46a2      	mov	sl, r4
 8008ba8:	eb19 0905 	adds.w	r9, r9, r5
 8008bac:	eb4a 0a06 	adc.w	sl, sl, r6
 8008bb0:	f04f 0100 	mov.w	r1, #0
 8008bb4:	f04f 0200 	mov.w	r2, #0
 8008bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008bbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bc4:	4689      	mov	r9, r1
 8008bc6:	4692      	mov	sl, r2
 8008bc8:	eb19 0005 	adds.w	r0, r9, r5
 8008bcc:	eb4a 0106 	adc.w	r1, sl, r6
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	461d      	mov	r5, r3
 8008bd6:	f04f 0600 	mov.w	r6, #0
 8008bda:	196b      	adds	r3, r5, r5
 8008bdc:	eb46 0406 	adc.w	r4, r6, r6
 8008be0:	461a      	mov	r2, r3
 8008be2:	4623      	mov	r3, r4
 8008be4:	f7f8 f838 	bl	8000c58 <__aeabi_uldivmod>
 8008be8:	4603      	mov	r3, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	461a      	mov	r2, r3
 8008bee:	4b8b      	ldr	r3, [pc, #556]	; (8008e1c <UART_SetConfig+0x384>)
 8008bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf4:	095b      	lsrs	r3, r3, #5
 8008bf6:	2164      	movs	r1, #100	; 0x64
 8008bf8:	fb01 f303 	mul.w	r3, r1, r3
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	3332      	adds	r3, #50	; 0x32
 8008c02:	4a86      	ldr	r2, [pc, #536]	; (8008e1c <UART_SetConfig+0x384>)
 8008c04:	fba2 2303 	umull	r2, r3, r2, r3
 8008c08:	095b      	lsrs	r3, r3, #5
 8008c0a:	005b      	lsls	r3, r3, #1
 8008c0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c10:	4498      	add	r8, r3
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	461d      	mov	r5, r3
 8008c16:	f04f 0600 	mov.w	r6, #0
 8008c1a:	46a9      	mov	r9, r5
 8008c1c:	46b2      	mov	sl, r6
 8008c1e:	eb19 0309 	adds.w	r3, r9, r9
 8008c22:	eb4a 040a 	adc.w	r4, sl, sl
 8008c26:	4699      	mov	r9, r3
 8008c28:	46a2      	mov	sl, r4
 8008c2a:	eb19 0905 	adds.w	r9, r9, r5
 8008c2e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008c32:	f04f 0100 	mov.w	r1, #0
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c46:	4689      	mov	r9, r1
 8008c48:	4692      	mov	sl, r2
 8008c4a:	eb19 0005 	adds.w	r0, r9, r5
 8008c4e:	eb4a 0106 	adc.w	r1, sl, r6
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	461d      	mov	r5, r3
 8008c58:	f04f 0600 	mov.w	r6, #0
 8008c5c:	196b      	adds	r3, r5, r5
 8008c5e:	eb46 0406 	adc.w	r4, r6, r6
 8008c62:	461a      	mov	r2, r3
 8008c64:	4623      	mov	r3, r4
 8008c66:	f7f7 fff7 	bl	8000c58 <__aeabi_uldivmod>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	460c      	mov	r4, r1
 8008c6e:	461a      	mov	r2, r3
 8008c70:	4b6a      	ldr	r3, [pc, #424]	; (8008e1c <UART_SetConfig+0x384>)
 8008c72:	fba3 1302 	umull	r1, r3, r3, r2
 8008c76:	095b      	lsrs	r3, r3, #5
 8008c78:	2164      	movs	r1, #100	; 0x64
 8008c7a:	fb01 f303 	mul.w	r3, r1, r3
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	00db      	lsls	r3, r3, #3
 8008c82:	3332      	adds	r3, #50	; 0x32
 8008c84:	4a65      	ldr	r2, [pc, #404]	; (8008e1c <UART_SetConfig+0x384>)
 8008c86:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8a:	095b      	lsrs	r3, r3, #5
 8008c8c:	f003 0207 	and.w	r2, r3, #7
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4442      	add	r2, r8
 8008c96:	609a      	str	r2, [r3, #8]
 8008c98:	e26f      	b.n	800917a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c9a:	f7fe fa25 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 8008c9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	461d      	mov	r5, r3
 8008ca4:	f04f 0600 	mov.w	r6, #0
 8008ca8:	46a8      	mov	r8, r5
 8008caa:	46b1      	mov	r9, r6
 8008cac:	eb18 0308 	adds.w	r3, r8, r8
 8008cb0:	eb49 0409 	adc.w	r4, r9, r9
 8008cb4:	4698      	mov	r8, r3
 8008cb6:	46a1      	mov	r9, r4
 8008cb8:	eb18 0805 	adds.w	r8, r8, r5
 8008cbc:	eb49 0906 	adc.w	r9, r9, r6
 8008cc0:	f04f 0100 	mov.w	r1, #0
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008ccc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008cd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008cd4:	4688      	mov	r8, r1
 8008cd6:	4691      	mov	r9, r2
 8008cd8:	eb18 0005 	adds.w	r0, r8, r5
 8008cdc:	eb49 0106 	adc.w	r1, r9, r6
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	461d      	mov	r5, r3
 8008ce6:	f04f 0600 	mov.w	r6, #0
 8008cea:	196b      	adds	r3, r5, r5
 8008cec:	eb46 0406 	adc.w	r4, r6, r6
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4623      	mov	r3, r4
 8008cf4:	f7f7 ffb0 	bl	8000c58 <__aeabi_uldivmod>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4b47      	ldr	r3, [pc, #284]	; (8008e1c <UART_SetConfig+0x384>)
 8008d00:	fba3 2302 	umull	r2, r3, r3, r2
 8008d04:	095b      	lsrs	r3, r3, #5
 8008d06:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	461d      	mov	r5, r3
 8008d0e:	f04f 0600 	mov.w	r6, #0
 8008d12:	46a9      	mov	r9, r5
 8008d14:	46b2      	mov	sl, r6
 8008d16:	eb19 0309 	adds.w	r3, r9, r9
 8008d1a:	eb4a 040a 	adc.w	r4, sl, sl
 8008d1e:	4699      	mov	r9, r3
 8008d20:	46a2      	mov	sl, r4
 8008d22:	eb19 0905 	adds.w	r9, r9, r5
 8008d26:	eb4a 0a06 	adc.w	sl, sl, r6
 8008d2a:	f04f 0100 	mov.w	r1, #0
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d3e:	4689      	mov	r9, r1
 8008d40:	4692      	mov	sl, r2
 8008d42:	eb19 0005 	adds.w	r0, r9, r5
 8008d46:	eb4a 0106 	adc.w	r1, sl, r6
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	461d      	mov	r5, r3
 8008d50:	f04f 0600 	mov.w	r6, #0
 8008d54:	196b      	adds	r3, r5, r5
 8008d56:	eb46 0406 	adc.w	r4, r6, r6
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	f7f7 ff7b 	bl	8000c58 <__aeabi_uldivmod>
 8008d62:	4603      	mov	r3, r0
 8008d64:	460c      	mov	r4, r1
 8008d66:	461a      	mov	r2, r3
 8008d68:	4b2c      	ldr	r3, [pc, #176]	; (8008e1c <UART_SetConfig+0x384>)
 8008d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8008d6e:	095b      	lsrs	r3, r3, #5
 8008d70:	2164      	movs	r1, #100	; 0x64
 8008d72:	fb01 f303 	mul.w	r3, r1, r3
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	3332      	adds	r3, #50	; 0x32
 8008d7c:	4a27      	ldr	r2, [pc, #156]	; (8008e1c <UART_SetConfig+0x384>)
 8008d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d82:	095b      	lsrs	r3, r3, #5
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d8a:	4498      	add	r8, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	461d      	mov	r5, r3
 8008d90:	f04f 0600 	mov.w	r6, #0
 8008d94:	46a9      	mov	r9, r5
 8008d96:	46b2      	mov	sl, r6
 8008d98:	eb19 0309 	adds.w	r3, r9, r9
 8008d9c:	eb4a 040a 	adc.w	r4, sl, sl
 8008da0:	4699      	mov	r9, r3
 8008da2:	46a2      	mov	sl, r4
 8008da4:	eb19 0905 	adds.w	r9, r9, r5
 8008da8:	eb4a 0a06 	adc.w	sl, sl, r6
 8008dac:	f04f 0100 	mov.w	r1, #0
 8008db0:	f04f 0200 	mov.w	r2, #0
 8008db4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008db8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008dbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008dc0:	4689      	mov	r9, r1
 8008dc2:	4692      	mov	sl, r2
 8008dc4:	eb19 0005 	adds.w	r0, r9, r5
 8008dc8:	eb4a 0106 	adc.w	r1, sl, r6
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	461d      	mov	r5, r3
 8008dd2:	f04f 0600 	mov.w	r6, #0
 8008dd6:	196b      	adds	r3, r5, r5
 8008dd8:	eb46 0406 	adc.w	r4, r6, r6
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4623      	mov	r3, r4
 8008de0:	f7f7 ff3a 	bl	8000c58 <__aeabi_uldivmod>
 8008de4:	4603      	mov	r3, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	461a      	mov	r2, r3
 8008dea:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <UART_SetConfig+0x384>)
 8008dec:	fba3 1302 	umull	r1, r3, r3, r2
 8008df0:	095b      	lsrs	r3, r3, #5
 8008df2:	2164      	movs	r1, #100	; 0x64
 8008df4:	fb01 f303 	mul.w	r3, r1, r3
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	3332      	adds	r3, #50	; 0x32
 8008dfe:	4a07      	ldr	r2, [pc, #28]	; (8008e1c <UART_SetConfig+0x384>)
 8008e00:	fba2 2303 	umull	r2, r3, r2, r3
 8008e04:	095b      	lsrs	r3, r3, #5
 8008e06:	f003 0207 	and.w	r2, r3, #7
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4442      	add	r2, r8
 8008e10:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008e12:	e1b2      	b.n	800917a <UART_SetConfig+0x6e2>
 8008e14:	40011000 	.word	0x40011000
 8008e18:	40011400 	.word	0x40011400
 8008e1c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4ad7      	ldr	r2, [pc, #860]	; (8009184 <UART_SetConfig+0x6ec>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d005      	beq.n	8008e36 <UART_SetConfig+0x39e>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4ad6      	ldr	r2, [pc, #856]	; (8009188 <UART_SetConfig+0x6f0>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	f040 80d1 	bne.w	8008fd8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e36:	f7fe f96b 	bl	8007110 <HAL_RCC_GetPCLK2Freq>
 8008e3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	469a      	mov	sl, r3
 8008e40:	f04f 0b00 	mov.w	fp, #0
 8008e44:	46d0      	mov	r8, sl
 8008e46:	46d9      	mov	r9, fp
 8008e48:	eb18 0308 	adds.w	r3, r8, r8
 8008e4c:	eb49 0409 	adc.w	r4, r9, r9
 8008e50:	4698      	mov	r8, r3
 8008e52:	46a1      	mov	r9, r4
 8008e54:	eb18 080a 	adds.w	r8, r8, sl
 8008e58:	eb49 090b 	adc.w	r9, r9, fp
 8008e5c:	f04f 0100 	mov.w	r1, #0
 8008e60:	f04f 0200 	mov.w	r2, #0
 8008e64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008e68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008e6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008e70:	4688      	mov	r8, r1
 8008e72:	4691      	mov	r9, r2
 8008e74:	eb1a 0508 	adds.w	r5, sl, r8
 8008e78:	eb4b 0609 	adc.w	r6, fp, r9
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	4619      	mov	r1, r3
 8008e82:	f04f 0200 	mov.w	r2, #0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	f04f 0400 	mov.w	r4, #0
 8008e8e:	0094      	lsls	r4, r2, #2
 8008e90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008e94:	008b      	lsls	r3, r1, #2
 8008e96:	461a      	mov	r2, r3
 8008e98:	4623      	mov	r3, r4
 8008e9a:	4628      	mov	r0, r5
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	f7f7 fedb 	bl	8000c58 <__aeabi_uldivmod>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	460c      	mov	r4, r1
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	4bb8      	ldr	r3, [pc, #736]	; (800918c <UART_SetConfig+0x6f4>)
 8008eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8008eae:	095b      	lsrs	r3, r3, #5
 8008eb0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	469b      	mov	fp, r3
 8008eb8:	f04f 0c00 	mov.w	ip, #0
 8008ebc:	46d9      	mov	r9, fp
 8008ebe:	46e2      	mov	sl, ip
 8008ec0:	eb19 0309 	adds.w	r3, r9, r9
 8008ec4:	eb4a 040a 	adc.w	r4, sl, sl
 8008ec8:	4699      	mov	r9, r3
 8008eca:	46a2      	mov	sl, r4
 8008ecc:	eb19 090b 	adds.w	r9, r9, fp
 8008ed0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008ed4:	f04f 0100 	mov.w	r1, #0
 8008ed8:	f04f 0200 	mov.w	r2, #0
 8008edc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ee0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008ee4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008ee8:	4689      	mov	r9, r1
 8008eea:	4692      	mov	sl, r2
 8008eec:	eb1b 0509 	adds.w	r5, fp, r9
 8008ef0:	eb4c 060a 	adc.w	r6, ip, sl
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f04f 0200 	mov.w	r2, #0
 8008efe:	f04f 0300 	mov.w	r3, #0
 8008f02:	f04f 0400 	mov.w	r4, #0
 8008f06:	0094      	lsls	r4, r2, #2
 8008f08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f0c:	008b      	lsls	r3, r1, #2
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4623      	mov	r3, r4
 8008f12:	4628      	mov	r0, r5
 8008f14:	4631      	mov	r1, r6
 8008f16:	f7f7 fe9f 	bl	8000c58 <__aeabi_uldivmod>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	461a      	mov	r2, r3
 8008f20:	4b9a      	ldr	r3, [pc, #616]	; (800918c <UART_SetConfig+0x6f4>)
 8008f22:	fba3 1302 	umull	r1, r3, r3, r2
 8008f26:	095b      	lsrs	r3, r3, #5
 8008f28:	2164      	movs	r1, #100	; 0x64
 8008f2a:	fb01 f303 	mul.w	r3, r1, r3
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	011b      	lsls	r3, r3, #4
 8008f32:	3332      	adds	r3, #50	; 0x32
 8008f34:	4a95      	ldr	r2, [pc, #596]	; (800918c <UART_SetConfig+0x6f4>)
 8008f36:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3a:	095b      	lsrs	r3, r3, #5
 8008f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f40:	4498      	add	r8, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	469b      	mov	fp, r3
 8008f46:	f04f 0c00 	mov.w	ip, #0
 8008f4a:	46d9      	mov	r9, fp
 8008f4c:	46e2      	mov	sl, ip
 8008f4e:	eb19 0309 	adds.w	r3, r9, r9
 8008f52:	eb4a 040a 	adc.w	r4, sl, sl
 8008f56:	4699      	mov	r9, r3
 8008f58:	46a2      	mov	sl, r4
 8008f5a:	eb19 090b 	adds.w	r9, r9, fp
 8008f5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008f62:	f04f 0100 	mov.w	r1, #0
 8008f66:	f04f 0200 	mov.w	r2, #0
 8008f6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f76:	4689      	mov	r9, r1
 8008f78:	4692      	mov	sl, r2
 8008f7a:	eb1b 0509 	adds.w	r5, fp, r9
 8008f7e:	eb4c 060a 	adc.w	r6, ip, sl
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	4619      	mov	r1, r3
 8008f88:	f04f 0200 	mov.w	r2, #0
 8008f8c:	f04f 0300 	mov.w	r3, #0
 8008f90:	f04f 0400 	mov.w	r4, #0
 8008f94:	0094      	lsls	r4, r2, #2
 8008f96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008f9a:	008b      	lsls	r3, r1, #2
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	4623      	mov	r3, r4
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	f7f7 fe58 	bl	8000c58 <__aeabi_uldivmod>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	461a      	mov	r2, r3
 8008fae:	4b77      	ldr	r3, [pc, #476]	; (800918c <UART_SetConfig+0x6f4>)
 8008fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	2164      	movs	r1, #100	; 0x64
 8008fb8:	fb01 f303 	mul.w	r3, r1, r3
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	3332      	adds	r3, #50	; 0x32
 8008fc2:	4a72      	ldr	r2, [pc, #456]	; (800918c <UART_SetConfig+0x6f4>)
 8008fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	f003 020f 	and.w	r2, r3, #15
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4442      	add	r2, r8
 8008fd4:	609a      	str	r2, [r3, #8]
 8008fd6:	e0d0      	b.n	800917a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fd8:	f7fe f886 	bl	80070e8 <HAL_RCC_GetPCLK1Freq>
 8008fdc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	469a      	mov	sl, r3
 8008fe2:	f04f 0b00 	mov.w	fp, #0
 8008fe6:	46d0      	mov	r8, sl
 8008fe8:	46d9      	mov	r9, fp
 8008fea:	eb18 0308 	adds.w	r3, r8, r8
 8008fee:	eb49 0409 	adc.w	r4, r9, r9
 8008ff2:	4698      	mov	r8, r3
 8008ff4:	46a1      	mov	r9, r4
 8008ff6:	eb18 080a 	adds.w	r8, r8, sl
 8008ffa:	eb49 090b 	adc.w	r9, r9, fp
 8008ffe:	f04f 0100 	mov.w	r1, #0
 8009002:	f04f 0200 	mov.w	r2, #0
 8009006:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800900a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800900e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009012:	4688      	mov	r8, r1
 8009014:	4691      	mov	r9, r2
 8009016:	eb1a 0508 	adds.w	r5, sl, r8
 800901a:	eb4b 0609 	adc.w	r6, fp, r9
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	4619      	mov	r1, r3
 8009024:	f04f 0200 	mov.w	r2, #0
 8009028:	f04f 0300 	mov.w	r3, #0
 800902c:	f04f 0400 	mov.w	r4, #0
 8009030:	0094      	lsls	r4, r2, #2
 8009032:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009036:	008b      	lsls	r3, r1, #2
 8009038:	461a      	mov	r2, r3
 800903a:	4623      	mov	r3, r4
 800903c:	4628      	mov	r0, r5
 800903e:	4631      	mov	r1, r6
 8009040:	f7f7 fe0a 	bl	8000c58 <__aeabi_uldivmod>
 8009044:	4603      	mov	r3, r0
 8009046:	460c      	mov	r4, r1
 8009048:	461a      	mov	r2, r3
 800904a:	4b50      	ldr	r3, [pc, #320]	; (800918c <UART_SetConfig+0x6f4>)
 800904c:	fba3 2302 	umull	r2, r3, r3, r2
 8009050:	095b      	lsrs	r3, r3, #5
 8009052:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	469b      	mov	fp, r3
 800905a:	f04f 0c00 	mov.w	ip, #0
 800905e:	46d9      	mov	r9, fp
 8009060:	46e2      	mov	sl, ip
 8009062:	eb19 0309 	adds.w	r3, r9, r9
 8009066:	eb4a 040a 	adc.w	r4, sl, sl
 800906a:	4699      	mov	r9, r3
 800906c:	46a2      	mov	sl, r4
 800906e:	eb19 090b 	adds.w	r9, r9, fp
 8009072:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009076:	f04f 0100 	mov.w	r1, #0
 800907a:	f04f 0200 	mov.w	r2, #0
 800907e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800908a:	4689      	mov	r9, r1
 800908c:	4692      	mov	sl, r2
 800908e:	eb1b 0509 	adds.w	r5, fp, r9
 8009092:	eb4c 060a 	adc.w	r6, ip, sl
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	4619      	mov	r1, r3
 800909c:	f04f 0200 	mov.w	r2, #0
 80090a0:	f04f 0300 	mov.w	r3, #0
 80090a4:	f04f 0400 	mov.w	r4, #0
 80090a8:	0094      	lsls	r4, r2, #2
 80090aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80090ae:	008b      	lsls	r3, r1, #2
 80090b0:	461a      	mov	r2, r3
 80090b2:	4623      	mov	r3, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	4631      	mov	r1, r6
 80090b8:	f7f7 fdce 	bl	8000c58 <__aeabi_uldivmod>
 80090bc:	4603      	mov	r3, r0
 80090be:	460c      	mov	r4, r1
 80090c0:	461a      	mov	r2, r3
 80090c2:	4b32      	ldr	r3, [pc, #200]	; (800918c <UART_SetConfig+0x6f4>)
 80090c4:	fba3 1302 	umull	r1, r3, r3, r2
 80090c8:	095b      	lsrs	r3, r3, #5
 80090ca:	2164      	movs	r1, #100	; 0x64
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	3332      	adds	r3, #50	; 0x32
 80090d6:	4a2d      	ldr	r2, [pc, #180]	; (800918c <UART_SetConfig+0x6f4>)
 80090d8:	fba2 2303 	umull	r2, r3, r2, r3
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090e2:	4498      	add	r8, r3
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	469b      	mov	fp, r3
 80090e8:	f04f 0c00 	mov.w	ip, #0
 80090ec:	46d9      	mov	r9, fp
 80090ee:	46e2      	mov	sl, ip
 80090f0:	eb19 0309 	adds.w	r3, r9, r9
 80090f4:	eb4a 040a 	adc.w	r4, sl, sl
 80090f8:	4699      	mov	r9, r3
 80090fa:	46a2      	mov	sl, r4
 80090fc:	eb19 090b 	adds.w	r9, r9, fp
 8009100:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009104:	f04f 0100 	mov.w	r1, #0
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009110:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009114:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009118:	4689      	mov	r9, r1
 800911a:	4692      	mov	sl, r2
 800911c:	eb1b 0509 	adds.w	r5, fp, r9
 8009120:	eb4c 060a 	adc.w	r6, ip, sl
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	4619      	mov	r1, r3
 800912a:	f04f 0200 	mov.w	r2, #0
 800912e:	f04f 0300 	mov.w	r3, #0
 8009132:	f04f 0400 	mov.w	r4, #0
 8009136:	0094      	lsls	r4, r2, #2
 8009138:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800913c:	008b      	lsls	r3, r1, #2
 800913e:	461a      	mov	r2, r3
 8009140:	4623      	mov	r3, r4
 8009142:	4628      	mov	r0, r5
 8009144:	4631      	mov	r1, r6
 8009146:	f7f7 fd87 	bl	8000c58 <__aeabi_uldivmod>
 800914a:	4603      	mov	r3, r0
 800914c:	460c      	mov	r4, r1
 800914e:	461a      	mov	r2, r3
 8009150:	4b0e      	ldr	r3, [pc, #56]	; (800918c <UART_SetConfig+0x6f4>)
 8009152:	fba3 1302 	umull	r1, r3, r3, r2
 8009156:	095b      	lsrs	r3, r3, #5
 8009158:	2164      	movs	r1, #100	; 0x64
 800915a:	fb01 f303 	mul.w	r3, r1, r3
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	3332      	adds	r3, #50	; 0x32
 8009164:	4a09      	ldr	r2, [pc, #36]	; (800918c <UART_SetConfig+0x6f4>)
 8009166:	fba2 2303 	umull	r2, r3, r2, r3
 800916a:	095b      	lsrs	r3, r3, #5
 800916c:	f003 020f 	and.w	r2, r3, #15
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4442      	add	r2, r8
 8009176:	609a      	str	r2, [r3, #8]
}
 8009178:	e7ff      	b.n	800917a <UART_SetConfig+0x6e2>
 800917a:	bf00      	nop
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009184:	40011000 	.word	0x40011000
 8009188:	40011400 	.word	0x40011400
 800918c:	51eb851f 	.word	0x51eb851f

08009190 <__errno>:
 8009190:	4b01      	ldr	r3, [pc, #4]	; (8009198 <__errno+0x8>)
 8009192:	6818      	ldr	r0, [r3, #0]
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	20000010 	.word	0x20000010

0800919c <__libc_init_array>:
 800919c:	b570      	push	{r4, r5, r6, lr}
 800919e:	4e0d      	ldr	r6, [pc, #52]	; (80091d4 <__libc_init_array+0x38>)
 80091a0:	4c0d      	ldr	r4, [pc, #52]	; (80091d8 <__libc_init_array+0x3c>)
 80091a2:	1ba4      	subs	r4, r4, r6
 80091a4:	10a4      	asrs	r4, r4, #2
 80091a6:	2500      	movs	r5, #0
 80091a8:	42a5      	cmp	r5, r4
 80091aa:	d109      	bne.n	80091c0 <__libc_init_array+0x24>
 80091ac:	4e0b      	ldr	r6, [pc, #44]	; (80091dc <__libc_init_array+0x40>)
 80091ae:	4c0c      	ldr	r4, [pc, #48]	; (80091e0 <__libc_init_array+0x44>)
 80091b0:	f003 fd68 	bl	800cc84 <_init>
 80091b4:	1ba4      	subs	r4, r4, r6
 80091b6:	10a4      	asrs	r4, r4, #2
 80091b8:	2500      	movs	r5, #0
 80091ba:	42a5      	cmp	r5, r4
 80091bc:	d105      	bne.n	80091ca <__libc_init_array+0x2e>
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091c4:	4798      	blx	r3
 80091c6:	3501      	adds	r5, #1
 80091c8:	e7ee      	b.n	80091a8 <__libc_init_array+0xc>
 80091ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80091ce:	4798      	blx	r3
 80091d0:	3501      	adds	r5, #1
 80091d2:	e7f2      	b.n	80091ba <__libc_init_array+0x1e>
 80091d4:	0800d4b0 	.word	0x0800d4b0
 80091d8:	0800d4b0 	.word	0x0800d4b0
 80091dc:	0800d4b0 	.word	0x0800d4b0
 80091e0:	0800d4b4 	.word	0x0800d4b4

080091e4 <memcpy>:
 80091e4:	b510      	push	{r4, lr}
 80091e6:	1e43      	subs	r3, r0, #1
 80091e8:	440a      	add	r2, r1
 80091ea:	4291      	cmp	r1, r2
 80091ec:	d100      	bne.n	80091f0 <memcpy+0xc>
 80091ee:	bd10      	pop	{r4, pc}
 80091f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f8:	e7f7      	b.n	80091ea <memcpy+0x6>

080091fa <memset>:
 80091fa:	4402      	add	r2, r0
 80091fc:	4603      	mov	r3, r0
 80091fe:	4293      	cmp	r3, r2
 8009200:	d100      	bne.n	8009204 <memset+0xa>
 8009202:	4770      	bx	lr
 8009204:	f803 1b01 	strb.w	r1, [r3], #1
 8009208:	e7f9      	b.n	80091fe <memset+0x4>

0800920a <__cvt>:
 800920a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800920e:	ec55 4b10 	vmov	r4, r5, d0
 8009212:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009214:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009218:	2d00      	cmp	r5, #0
 800921a:	460e      	mov	r6, r1
 800921c:	4691      	mov	r9, r2
 800921e:	4619      	mov	r1, r3
 8009220:	bfb8      	it	lt
 8009222:	4622      	movlt	r2, r4
 8009224:	462b      	mov	r3, r5
 8009226:	f027 0720 	bic.w	r7, r7, #32
 800922a:	bfbb      	ittet	lt
 800922c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009230:	461d      	movlt	r5, r3
 8009232:	2300      	movge	r3, #0
 8009234:	232d      	movlt	r3, #45	; 0x2d
 8009236:	bfb8      	it	lt
 8009238:	4614      	movlt	r4, r2
 800923a:	2f46      	cmp	r7, #70	; 0x46
 800923c:	700b      	strb	r3, [r1, #0]
 800923e:	d004      	beq.n	800924a <__cvt+0x40>
 8009240:	2f45      	cmp	r7, #69	; 0x45
 8009242:	d100      	bne.n	8009246 <__cvt+0x3c>
 8009244:	3601      	adds	r6, #1
 8009246:	2102      	movs	r1, #2
 8009248:	e000      	b.n	800924c <__cvt+0x42>
 800924a:	2103      	movs	r1, #3
 800924c:	ab03      	add	r3, sp, #12
 800924e:	9301      	str	r3, [sp, #4]
 8009250:	ab02      	add	r3, sp, #8
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	4632      	mov	r2, r6
 8009256:	4653      	mov	r3, sl
 8009258:	ec45 4b10 	vmov	d0, r4, r5
 800925c:	f000 fce0 	bl	8009c20 <_dtoa_r>
 8009260:	2f47      	cmp	r7, #71	; 0x47
 8009262:	4680      	mov	r8, r0
 8009264:	d102      	bne.n	800926c <__cvt+0x62>
 8009266:	f019 0f01 	tst.w	r9, #1
 800926a:	d026      	beq.n	80092ba <__cvt+0xb0>
 800926c:	2f46      	cmp	r7, #70	; 0x46
 800926e:	eb08 0906 	add.w	r9, r8, r6
 8009272:	d111      	bne.n	8009298 <__cvt+0x8e>
 8009274:	f898 3000 	ldrb.w	r3, [r8]
 8009278:	2b30      	cmp	r3, #48	; 0x30
 800927a:	d10a      	bne.n	8009292 <__cvt+0x88>
 800927c:	2200      	movs	r2, #0
 800927e:	2300      	movs	r3, #0
 8009280:	4620      	mov	r0, r4
 8009282:	4629      	mov	r1, r5
 8009284:	f7f7 fc28 	bl	8000ad8 <__aeabi_dcmpeq>
 8009288:	b918      	cbnz	r0, 8009292 <__cvt+0x88>
 800928a:	f1c6 0601 	rsb	r6, r6, #1
 800928e:	f8ca 6000 	str.w	r6, [sl]
 8009292:	f8da 3000 	ldr.w	r3, [sl]
 8009296:	4499      	add	r9, r3
 8009298:	2200      	movs	r2, #0
 800929a:	2300      	movs	r3, #0
 800929c:	4620      	mov	r0, r4
 800929e:	4629      	mov	r1, r5
 80092a0:	f7f7 fc1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80092a4:	b938      	cbnz	r0, 80092b6 <__cvt+0xac>
 80092a6:	2230      	movs	r2, #48	; 0x30
 80092a8:	9b03      	ldr	r3, [sp, #12]
 80092aa:	454b      	cmp	r3, r9
 80092ac:	d205      	bcs.n	80092ba <__cvt+0xb0>
 80092ae:	1c59      	adds	r1, r3, #1
 80092b0:	9103      	str	r1, [sp, #12]
 80092b2:	701a      	strb	r2, [r3, #0]
 80092b4:	e7f8      	b.n	80092a8 <__cvt+0x9e>
 80092b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80092ba:	9b03      	ldr	r3, [sp, #12]
 80092bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092be:	eba3 0308 	sub.w	r3, r3, r8
 80092c2:	4640      	mov	r0, r8
 80092c4:	6013      	str	r3, [r2, #0]
 80092c6:	b004      	add	sp, #16
 80092c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080092cc <__exponent>:
 80092cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092ce:	2900      	cmp	r1, #0
 80092d0:	4604      	mov	r4, r0
 80092d2:	bfba      	itte	lt
 80092d4:	4249      	neglt	r1, r1
 80092d6:	232d      	movlt	r3, #45	; 0x2d
 80092d8:	232b      	movge	r3, #43	; 0x2b
 80092da:	2909      	cmp	r1, #9
 80092dc:	f804 2b02 	strb.w	r2, [r4], #2
 80092e0:	7043      	strb	r3, [r0, #1]
 80092e2:	dd20      	ble.n	8009326 <__exponent+0x5a>
 80092e4:	f10d 0307 	add.w	r3, sp, #7
 80092e8:	461f      	mov	r7, r3
 80092ea:	260a      	movs	r6, #10
 80092ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80092f0:	fb06 1115 	mls	r1, r6, r5, r1
 80092f4:	3130      	adds	r1, #48	; 0x30
 80092f6:	2d09      	cmp	r5, #9
 80092f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092fc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009300:	4629      	mov	r1, r5
 8009302:	dc09      	bgt.n	8009318 <__exponent+0x4c>
 8009304:	3130      	adds	r1, #48	; 0x30
 8009306:	3b02      	subs	r3, #2
 8009308:	f802 1c01 	strb.w	r1, [r2, #-1]
 800930c:	42bb      	cmp	r3, r7
 800930e:	4622      	mov	r2, r4
 8009310:	d304      	bcc.n	800931c <__exponent+0x50>
 8009312:	1a10      	subs	r0, r2, r0
 8009314:	b003      	add	sp, #12
 8009316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009318:	4613      	mov	r3, r2
 800931a:	e7e7      	b.n	80092ec <__exponent+0x20>
 800931c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009320:	f804 2b01 	strb.w	r2, [r4], #1
 8009324:	e7f2      	b.n	800930c <__exponent+0x40>
 8009326:	2330      	movs	r3, #48	; 0x30
 8009328:	4419      	add	r1, r3
 800932a:	7083      	strb	r3, [r0, #2]
 800932c:	1d02      	adds	r2, r0, #4
 800932e:	70c1      	strb	r1, [r0, #3]
 8009330:	e7ef      	b.n	8009312 <__exponent+0x46>
	...

08009334 <_printf_float>:
 8009334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009338:	b08d      	sub	sp, #52	; 0x34
 800933a:	460c      	mov	r4, r1
 800933c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009340:	4616      	mov	r6, r2
 8009342:	461f      	mov	r7, r3
 8009344:	4605      	mov	r5, r0
 8009346:	f001 fa23 	bl	800a790 <_localeconv_r>
 800934a:	6803      	ldr	r3, [r0, #0]
 800934c:	9304      	str	r3, [sp, #16]
 800934e:	4618      	mov	r0, r3
 8009350:	f7f6 ff46 	bl	80001e0 <strlen>
 8009354:	2300      	movs	r3, #0
 8009356:	930a      	str	r3, [sp, #40]	; 0x28
 8009358:	f8d8 3000 	ldr.w	r3, [r8]
 800935c:	9005      	str	r0, [sp, #20]
 800935e:	3307      	adds	r3, #7
 8009360:	f023 0307 	bic.w	r3, r3, #7
 8009364:	f103 0208 	add.w	r2, r3, #8
 8009368:	f894 a018 	ldrb.w	sl, [r4, #24]
 800936c:	f8d4 b000 	ldr.w	fp, [r4]
 8009370:	f8c8 2000 	str.w	r2, [r8]
 8009374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009378:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800937c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009380:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009384:	9307      	str	r3, [sp, #28]
 8009386:	f8cd 8018 	str.w	r8, [sp, #24]
 800938a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800938e:	4ba7      	ldr	r3, [pc, #668]	; (800962c <_printf_float+0x2f8>)
 8009390:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009394:	f7f7 fbd2 	bl	8000b3c <__aeabi_dcmpun>
 8009398:	bb70      	cbnz	r0, 80093f8 <_printf_float+0xc4>
 800939a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800939e:	4ba3      	ldr	r3, [pc, #652]	; (800962c <_printf_float+0x2f8>)
 80093a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093a4:	f7f7 fbac 	bl	8000b00 <__aeabi_dcmple>
 80093a8:	bb30      	cbnz	r0, 80093f8 <_printf_float+0xc4>
 80093aa:	2200      	movs	r2, #0
 80093ac:	2300      	movs	r3, #0
 80093ae:	4640      	mov	r0, r8
 80093b0:	4649      	mov	r1, r9
 80093b2:	f7f7 fb9b 	bl	8000aec <__aeabi_dcmplt>
 80093b6:	b110      	cbz	r0, 80093be <_printf_float+0x8a>
 80093b8:	232d      	movs	r3, #45	; 0x2d
 80093ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093be:	4a9c      	ldr	r2, [pc, #624]	; (8009630 <_printf_float+0x2fc>)
 80093c0:	4b9c      	ldr	r3, [pc, #624]	; (8009634 <_printf_float+0x300>)
 80093c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80093c6:	bf8c      	ite	hi
 80093c8:	4690      	movhi	r8, r2
 80093ca:	4698      	movls	r8, r3
 80093cc:	2303      	movs	r3, #3
 80093ce:	f02b 0204 	bic.w	r2, fp, #4
 80093d2:	6123      	str	r3, [r4, #16]
 80093d4:	6022      	str	r2, [r4, #0]
 80093d6:	f04f 0900 	mov.w	r9, #0
 80093da:	9700      	str	r7, [sp, #0]
 80093dc:	4633      	mov	r3, r6
 80093de:	aa0b      	add	r2, sp, #44	; 0x2c
 80093e0:	4621      	mov	r1, r4
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 f9e6 	bl	80097b4 <_printf_common>
 80093e8:	3001      	adds	r0, #1
 80093ea:	f040 808d 	bne.w	8009508 <_printf_float+0x1d4>
 80093ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093f2:	b00d      	add	sp, #52	; 0x34
 80093f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f8:	4642      	mov	r2, r8
 80093fa:	464b      	mov	r3, r9
 80093fc:	4640      	mov	r0, r8
 80093fe:	4649      	mov	r1, r9
 8009400:	f7f7 fb9c 	bl	8000b3c <__aeabi_dcmpun>
 8009404:	b110      	cbz	r0, 800940c <_printf_float+0xd8>
 8009406:	4a8c      	ldr	r2, [pc, #560]	; (8009638 <_printf_float+0x304>)
 8009408:	4b8c      	ldr	r3, [pc, #560]	; (800963c <_printf_float+0x308>)
 800940a:	e7da      	b.n	80093c2 <_printf_float+0x8e>
 800940c:	6861      	ldr	r1, [r4, #4]
 800940e:	1c4b      	adds	r3, r1, #1
 8009410:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009414:	a80a      	add	r0, sp, #40	; 0x28
 8009416:	d13e      	bne.n	8009496 <_printf_float+0x162>
 8009418:	2306      	movs	r3, #6
 800941a:	6063      	str	r3, [r4, #4]
 800941c:	2300      	movs	r3, #0
 800941e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009422:	ab09      	add	r3, sp, #36	; 0x24
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	ec49 8b10 	vmov	d0, r8, r9
 800942a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800942e:	6022      	str	r2, [r4, #0]
 8009430:	f8cd a004 	str.w	sl, [sp, #4]
 8009434:	6861      	ldr	r1, [r4, #4]
 8009436:	4628      	mov	r0, r5
 8009438:	f7ff fee7 	bl	800920a <__cvt>
 800943c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009440:	2b47      	cmp	r3, #71	; 0x47
 8009442:	4680      	mov	r8, r0
 8009444:	d109      	bne.n	800945a <_printf_float+0x126>
 8009446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009448:	1cd8      	adds	r0, r3, #3
 800944a:	db02      	blt.n	8009452 <_printf_float+0x11e>
 800944c:	6862      	ldr	r2, [r4, #4]
 800944e:	4293      	cmp	r3, r2
 8009450:	dd47      	ble.n	80094e2 <_printf_float+0x1ae>
 8009452:	f1aa 0a02 	sub.w	sl, sl, #2
 8009456:	fa5f fa8a 	uxtb.w	sl, sl
 800945a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800945e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009460:	d824      	bhi.n	80094ac <_printf_float+0x178>
 8009462:	3901      	subs	r1, #1
 8009464:	4652      	mov	r2, sl
 8009466:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800946a:	9109      	str	r1, [sp, #36]	; 0x24
 800946c:	f7ff ff2e 	bl	80092cc <__exponent>
 8009470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009472:	1813      	adds	r3, r2, r0
 8009474:	2a01      	cmp	r2, #1
 8009476:	4681      	mov	r9, r0
 8009478:	6123      	str	r3, [r4, #16]
 800947a:	dc02      	bgt.n	8009482 <_printf_float+0x14e>
 800947c:	6822      	ldr	r2, [r4, #0]
 800947e:	07d1      	lsls	r1, r2, #31
 8009480:	d501      	bpl.n	8009486 <_printf_float+0x152>
 8009482:	3301      	adds	r3, #1
 8009484:	6123      	str	r3, [r4, #16]
 8009486:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800948a:	2b00      	cmp	r3, #0
 800948c:	d0a5      	beq.n	80093da <_printf_float+0xa6>
 800948e:	232d      	movs	r3, #45	; 0x2d
 8009490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009494:	e7a1      	b.n	80093da <_printf_float+0xa6>
 8009496:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800949a:	f000 8177 	beq.w	800978c <_printf_float+0x458>
 800949e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80094a2:	d1bb      	bne.n	800941c <_printf_float+0xe8>
 80094a4:	2900      	cmp	r1, #0
 80094a6:	d1b9      	bne.n	800941c <_printf_float+0xe8>
 80094a8:	2301      	movs	r3, #1
 80094aa:	e7b6      	b.n	800941a <_printf_float+0xe6>
 80094ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80094b0:	d119      	bne.n	80094e6 <_printf_float+0x1b2>
 80094b2:	2900      	cmp	r1, #0
 80094b4:	6863      	ldr	r3, [r4, #4]
 80094b6:	dd0c      	ble.n	80094d2 <_printf_float+0x19e>
 80094b8:	6121      	str	r1, [r4, #16]
 80094ba:	b913      	cbnz	r3, 80094c2 <_printf_float+0x18e>
 80094bc:	6822      	ldr	r2, [r4, #0]
 80094be:	07d2      	lsls	r2, r2, #31
 80094c0:	d502      	bpl.n	80094c8 <_printf_float+0x194>
 80094c2:	3301      	adds	r3, #1
 80094c4:	440b      	add	r3, r1
 80094c6:	6123      	str	r3, [r4, #16]
 80094c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80094cc:	f04f 0900 	mov.w	r9, #0
 80094d0:	e7d9      	b.n	8009486 <_printf_float+0x152>
 80094d2:	b913      	cbnz	r3, 80094da <_printf_float+0x1a6>
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	07d0      	lsls	r0, r2, #31
 80094d8:	d501      	bpl.n	80094de <_printf_float+0x1aa>
 80094da:	3302      	adds	r3, #2
 80094dc:	e7f3      	b.n	80094c6 <_printf_float+0x192>
 80094de:	2301      	movs	r3, #1
 80094e0:	e7f1      	b.n	80094c6 <_printf_float+0x192>
 80094e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80094e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094ea:	4293      	cmp	r3, r2
 80094ec:	db05      	blt.n	80094fa <_printf_float+0x1c6>
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	07d1      	lsls	r1, r2, #31
 80094f4:	d5e8      	bpl.n	80094c8 <_printf_float+0x194>
 80094f6:	3301      	adds	r3, #1
 80094f8:	e7e5      	b.n	80094c6 <_printf_float+0x192>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	bfd4      	ite	le
 80094fe:	f1c3 0302 	rsble	r3, r3, #2
 8009502:	2301      	movgt	r3, #1
 8009504:	4413      	add	r3, r2
 8009506:	e7de      	b.n	80094c6 <_printf_float+0x192>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	055a      	lsls	r2, r3, #21
 800950c:	d407      	bmi.n	800951e <_printf_float+0x1ea>
 800950e:	6923      	ldr	r3, [r4, #16]
 8009510:	4642      	mov	r2, r8
 8009512:	4631      	mov	r1, r6
 8009514:	4628      	mov	r0, r5
 8009516:	47b8      	blx	r7
 8009518:	3001      	adds	r0, #1
 800951a:	d12b      	bne.n	8009574 <_printf_float+0x240>
 800951c:	e767      	b.n	80093ee <_printf_float+0xba>
 800951e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009522:	f240 80dc 	bls.w	80096de <_printf_float+0x3aa>
 8009526:	2200      	movs	r2, #0
 8009528:	2300      	movs	r3, #0
 800952a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800952e:	f7f7 fad3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009532:	2800      	cmp	r0, #0
 8009534:	d033      	beq.n	800959e <_printf_float+0x26a>
 8009536:	2301      	movs	r3, #1
 8009538:	4a41      	ldr	r2, [pc, #260]	; (8009640 <_printf_float+0x30c>)
 800953a:	4631      	mov	r1, r6
 800953c:	4628      	mov	r0, r5
 800953e:	47b8      	blx	r7
 8009540:	3001      	adds	r0, #1
 8009542:	f43f af54 	beq.w	80093ee <_printf_float+0xba>
 8009546:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800954a:	429a      	cmp	r2, r3
 800954c:	db02      	blt.n	8009554 <_printf_float+0x220>
 800954e:	6823      	ldr	r3, [r4, #0]
 8009550:	07d8      	lsls	r0, r3, #31
 8009552:	d50f      	bpl.n	8009574 <_printf_float+0x240>
 8009554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009558:	4631      	mov	r1, r6
 800955a:	4628      	mov	r0, r5
 800955c:	47b8      	blx	r7
 800955e:	3001      	adds	r0, #1
 8009560:	f43f af45 	beq.w	80093ee <_printf_float+0xba>
 8009564:	f04f 0800 	mov.w	r8, #0
 8009568:	f104 091a 	add.w	r9, r4, #26
 800956c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956e:	3b01      	subs	r3, #1
 8009570:	4543      	cmp	r3, r8
 8009572:	dc09      	bgt.n	8009588 <_printf_float+0x254>
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	079b      	lsls	r3, r3, #30
 8009578:	f100 8103 	bmi.w	8009782 <_printf_float+0x44e>
 800957c:	68e0      	ldr	r0, [r4, #12]
 800957e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009580:	4298      	cmp	r0, r3
 8009582:	bfb8      	it	lt
 8009584:	4618      	movlt	r0, r3
 8009586:	e734      	b.n	80093f2 <_printf_float+0xbe>
 8009588:	2301      	movs	r3, #1
 800958a:	464a      	mov	r2, r9
 800958c:	4631      	mov	r1, r6
 800958e:	4628      	mov	r0, r5
 8009590:	47b8      	blx	r7
 8009592:	3001      	adds	r0, #1
 8009594:	f43f af2b 	beq.w	80093ee <_printf_float+0xba>
 8009598:	f108 0801 	add.w	r8, r8, #1
 800959c:	e7e6      	b.n	800956c <_printf_float+0x238>
 800959e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	dc2b      	bgt.n	80095fc <_printf_float+0x2c8>
 80095a4:	2301      	movs	r3, #1
 80095a6:	4a26      	ldr	r2, [pc, #152]	; (8009640 <_printf_float+0x30c>)
 80095a8:	4631      	mov	r1, r6
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b8      	blx	r7
 80095ae:	3001      	adds	r0, #1
 80095b0:	f43f af1d 	beq.w	80093ee <_printf_float+0xba>
 80095b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b6:	b923      	cbnz	r3, 80095c2 <_printf_float+0x28e>
 80095b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ba:	b913      	cbnz	r3, 80095c2 <_printf_float+0x28e>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	07d9      	lsls	r1, r3, #31
 80095c0:	d5d8      	bpl.n	8009574 <_printf_float+0x240>
 80095c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095c6:	4631      	mov	r1, r6
 80095c8:	4628      	mov	r0, r5
 80095ca:	47b8      	blx	r7
 80095cc:	3001      	adds	r0, #1
 80095ce:	f43f af0e 	beq.w	80093ee <_printf_float+0xba>
 80095d2:	f04f 0900 	mov.w	r9, #0
 80095d6:	f104 0a1a 	add.w	sl, r4, #26
 80095da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095dc:	425b      	negs	r3, r3
 80095de:	454b      	cmp	r3, r9
 80095e0:	dc01      	bgt.n	80095e6 <_printf_float+0x2b2>
 80095e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095e4:	e794      	b.n	8009510 <_printf_float+0x1dc>
 80095e6:	2301      	movs	r3, #1
 80095e8:	4652      	mov	r2, sl
 80095ea:	4631      	mov	r1, r6
 80095ec:	4628      	mov	r0, r5
 80095ee:	47b8      	blx	r7
 80095f0:	3001      	adds	r0, #1
 80095f2:	f43f aefc 	beq.w	80093ee <_printf_float+0xba>
 80095f6:	f109 0901 	add.w	r9, r9, #1
 80095fa:	e7ee      	b.n	80095da <_printf_float+0x2a6>
 80095fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009600:	429a      	cmp	r2, r3
 8009602:	bfa8      	it	ge
 8009604:	461a      	movge	r2, r3
 8009606:	2a00      	cmp	r2, #0
 8009608:	4691      	mov	r9, r2
 800960a:	dd07      	ble.n	800961c <_printf_float+0x2e8>
 800960c:	4613      	mov	r3, r2
 800960e:	4631      	mov	r1, r6
 8009610:	4642      	mov	r2, r8
 8009612:	4628      	mov	r0, r5
 8009614:	47b8      	blx	r7
 8009616:	3001      	adds	r0, #1
 8009618:	f43f aee9 	beq.w	80093ee <_printf_float+0xba>
 800961c:	f104 031a 	add.w	r3, r4, #26
 8009620:	f04f 0b00 	mov.w	fp, #0
 8009624:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009628:	9306      	str	r3, [sp, #24]
 800962a:	e015      	b.n	8009658 <_printf_float+0x324>
 800962c:	7fefffff 	.word	0x7fefffff
 8009630:	0800d030 	.word	0x0800d030
 8009634:	0800d02c 	.word	0x0800d02c
 8009638:	0800d038 	.word	0x0800d038
 800963c:	0800d034 	.word	0x0800d034
 8009640:	0800d03c 	.word	0x0800d03c
 8009644:	2301      	movs	r3, #1
 8009646:	9a06      	ldr	r2, [sp, #24]
 8009648:	4631      	mov	r1, r6
 800964a:	4628      	mov	r0, r5
 800964c:	47b8      	blx	r7
 800964e:	3001      	adds	r0, #1
 8009650:	f43f aecd 	beq.w	80093ee <_printf_float+0xba>
 8009654:	f10b 0b01 	add.w	fp, fp, #1
 8009658:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800965c:	ebaa 0309 	sub.w	r3, sl, r9
 8009660:	455b      	cmp	r3, fp
 8009662:	dcef      	bgt.n	8009644 <_printf_float+0x310>
 8009664:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009668:	429a      	cmp	r2, r3
 800966a:	44d0      	add	r8, sl
 800966c:	db15      	blt.n	800969a <_printf_float+0x366>
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	07da      	lsls	r2, r3, #31
 8009672:	d412      	bmi.n	800969a <_printf_float+0x366>
 8009674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009676:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009678:	eba3 020a 	sub.w	r2, r3, sl
 800967c:	eba3 0a01 	sub.w	sl, r3, r1
 8009680:	4592      	cmp	sl, r2
 8009682:	bfa8      	it	ge
 8009684:	4692      	movge	sl, r2
 8009686:	f1ba 0f00 	cmp.w	sl, #0
 800968a:	dc0e      	bgt.n	80096aa <_printf_float+0x376>
 800968c:	f04f 0800 	mov.w	r8, #0
 8009690:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009694:	f104 091a 	add.w	r9, r4, #26
 8009698:	e019      	b.n	80096ce <_printf_float+0x39a>
 800969a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800969e:	4631      	mov	r1, r6
 80096a0:	4628      	mov	r0, r5
 80096a2:	47b8      	blx	r7
 80096a4:	3001      	adds	r0, #1
 80096a6:	d1e5      	bne.n	8009674 <_printf_float+0x340>
 80096a8:	e6a1      	b.n	80093ee <_printf_float+0xba>
 80096aa:	4653      	mov	r3, sl
 80096ac:	4642      	mov	r2, r8
 80096ae:	4631      	mov	r1, r6
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	d1e9      	bne.n	800968c <_printf_float+0x358>
 80096b8:	e699      	b.n	80093ee <_printf_float+0xba>
 80096ba:	2301      	movs	r3, #1
 80096bc:	464a      	mov	r2, r9
 80096be:	4631      	mov	r1, r6
 80096c0:	4628      	mov	r0, r5
 80096c2:	47b8      	blx	r7
 80096c4:	3001      	adds	r0, #1
 80096c6:	f43f ae92 	beq.w	80093ee <_printf_float+0xba>
 80096ca:	f108 0801 	add.w	r8, r8, #1
 80096ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	eba3 030a 	sub.w	r3, r3, sl
 80096d8:	4543      	cmp	r3, r8
 80096da:	dcee      	bgt.n	80096ba <_printf_float+0x386>
 80096dc:	e74a      	b.n	8009574 <_printf_float+0x240>
 80096de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096e0:	2a01      	cmp	r2, #1
 80096e2:	dc01      	bgt.n	80096e8 <_printf_float+0x3b4>
 80096e4:	07db      	lsls	r3, r3, #31
 80096e6:	d53a      	bpl.n	800975e <_printf_float+0x42a>
 80096e8:	2301      	movs	r3, #1
 80096ea:	4642      	mov	r2, r8
 80096ec:	4631      	mov	r1, r6
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b8      	blx	r7
 80096f2:	3001      	adds	r0, #1
 80096f4:	f43f ae7b 	beq.w	80093ee <_printf_float+0xba>
 80096f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096fc:	4631      	mov	r1, r6
 80096fe:	4628      	mov	r0, r5
 8009700:	47b8      	blx	r7
 8009702:	3001      	adds	r0, #1
 8009704:	f108 0801 	add.w	r8, r8, #1
 8009708:	f43f ae71 	beq.w	80093ee <_printf_float+0xba>
 800970c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970e:	2200      	movs	r2, #0
 8009710:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8009714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009718:	2300      	movs	r3, #0
 800971a:	f7f7 f9dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800971e:	b9c8      	cbnz	r0, 8009754 <_printf_float+0x420>
 8009720:	4653      	mov	r3, sl
 8009722:	4642      	mov	r2, r8
 8009724:	4631      	mov	r1, r6
 8009726:	4628      	mov	r0, r5
 8009728:	47b8      	blx	r7
 800972a:	3001      	adds	r0, #1
 800972c:	d10e      	bne.n	800974c <_printf_float+0x418>
 800972e:	e65e      	b.n	80093ee <_printf_float+0xba>
 8009730:	2301      	movs	r3, #1
 8009732:	4652      	mov	r2, sl
 8009734:	4631      	mov	r1, r6
 8009736:	4628      	mov	r0, r5
 8009738:	47b8      	blx	r7
 800973a:	3001      	adds	r0, #1
 800973c:	f43f ae57 	beq.w	80093ee <_printf_float+0xba>
 8009740:	f108 0801 	add.w	r8, r8, #1
 8009744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009746:	3b01      	subs	r3, #1
 8009748:	4543      	cmp	r3, r8
 800974a:	dcf1      	bgt.n	8009730 <_printf_float+0x3fc>
 800974c:	464b      	mov	r3, r9
 800974e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009752:	e6de      	b.n	8009512 <_printf_float+0x1de>
 8009754:	f04f 0800 	mov.w	r8, #0
 8009758:	f104 0a1a 	add.w	sl, r4, #26
 800975c:	e7f2      	b.n	8009744 <_printf_float+0x410>
 800975e:	2301      	movs	r3, #1
 8009760:	e7df      	b.n	8009722 <_printf_float+0x3ee>
 8009762:	2301      	movs	r3, #1
 8009764:	464a      	mov	r2, r9
 8009766:	4631      	mov	r1, r6
 8009768:	4628      	mov	r0, r5
 800976a:	47b8      	blx	r7
 800976c:	3001      	adds	r0, #1
 800976e:	f43f ae3e 	beq.w	80093ee <_printf_float+0xba>
 8009772:	f108 0801 	add.w	r8, r8, #1
 8009776:	68e3      	ldr	r3, [r4, #12]
 8009778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	4543      	cmp	r3, r8
 800977e:	dcf0      	bgt.n	8009762 <_printf_float+0x42e>
 8009780:	e6fc      	b.n	800957c <_printf_float+0x248>
 8009782:	f04f 0800 	mov.w	r8, #0
 8009786:	f104 0919 	add.w	r9, r4, #25
 800978a:	e7f4      	b.n	8009776 <_printf_float+0x442>
 800978c:	2900      	cmp	r1, #0
 800978e:	f43f ae8b 	beq.w	80094a8 <_printf_float+0x174>
 8009792:	2300      	movs	r3, #0
 8009794:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009798:	ab09      	add	r3, sp, #36	; 0x24
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	ec49 8b10 	vmov	d0, r8, r9
 80097a0:	6022      	str	r2, [r4, #0]
 80097a2:	f8cd a004 	str.w	sl, [sp, #4]
 80097a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097aa:	4628      	mov	r0, r5
 80097ac:	f7ff fd2d 	bl	800920a <__cvt>
 80097b0:	4680      	mov	r8, r0
 80097b2:	e648      	b.n	8009446 <_printf_float+0x112>

080097b4 <_printf_common>:
 80097b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b8:	4691      	mov	r9, r2
 80097ba:	461f      	mov	r7, r3
 80097bc:	688a      	ldr	r2, [r1, #8]
 80097be:	690b      	ldr	r3, [r1, #16]
 80097c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097c4:	4293      	cmp	r3, r2
 80097c6:	bfb8      	it	lt
 80097c8:	4613      	movlt	r3, r2
 80097ca:	f8c9 3000 	str.w	r3, [r9]
 80097ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097d2:	4606      	mov	r6, r0
 80097d4:	460c      	mov	r4, r1
 80097d6:	b112      	cbz	r2, 80097de <_printf_common+0x2a>
 80097d8:	3301      	adds	r3, #1
 80097da:	f8c9 3000 	str.w	r3, [r9]
 80097de:	6823      	ldr	r3, [r4, #0]
 80097e0:	0699      	lsls	r1, r3, #26
 80097e2:	bf42      	ittt	mi
 80097e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80097e8:	3302      	addmi	r3, #2
 80097ea:	f8c9 3000 	strmi.w	r3, [r9]
 80097ee:	6825      	ldr	r5, [r4, #0]
 80097f0:	f015 0506 	ands.w	r5, r5, #6
 80097f4:	d107      	bne.n	8009806 <_printf_common+0x52>
 80097f6:	f104 0a19 	add.w	sl, r4, #25
 80097fa:	68e3      	ldr	r3, [r4, #12]
 80097fc:	f8d9 2000 	ldr.w	r2, [r9]
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	42ab      	cmp	r3, r5
 8009804:	dc28      	bgt.n	8009858 <_printf_common+0xa4>
 8009806:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800980a:	6822      	ldr	r2, [r4, #0]
 800980c:	3300      	adds	r3, #0
 800980e:	bf18      	it	ne
 8009810:	2301      	movne	r3, #1
 8009812:	0692      	lsls	r2, r2, #26
 8009814:	d42d      	bmi.n	8009872 <_printf_common+0xbe>
 8009816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800981a:	4639      	mov	r1, r7
 800981c:	4630      	mov	r0, r6
 800981e:	47c0      	blx	r8
 8009820:	3001      	adds	r0, #1
 8009822:	d020      	beq.n	8009866 <_printf_common+0xb2>
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	68e5      	ldr	r5, [r4, #12]
 8009828:	f8d9 2000 	ldr.w	r2, [r9]
 800982c:	f003 0306 	and.w	r3, r3, #6
 8009830:	2b04      	cmp	r3, #4
 8009832:	bf08      	it	eq
 8009834:	1aad      	subeq	r5, r5, r2
 8009836:	68a3      	ldr	r3, [r4, #8]
 8009838:	6922      	ldr	r2, [r4, #16]
 800983a:	bf0c      	ite	eq
 800983c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009840:	2500      	movne	r5, #0
 8009842:	4293      	cmp	r3, r2
 8009844:	bfc4      	itt	gt
 8009846:	1a9b      	subgt	r3, r3, r2
 8009848:	18ed      	addgt	r5, r5, r3
 800984a:	f04f 0900 	mov.w	r9, #0
 800984e:	341a      	adds	r4, #26
 8009850:	454d      	cmp	r5, r9
 8009852:	d11a      	bne.n	800988a <_printf_common+0xd6>
 8009854:	2000      	movs	r0, #0
 8009856:	e008      	b.n	800986a <_printf_common+0xb6>
 8009858:	2301      	movs	r3, #1
 800985a:	4652      	mov	r2, sl
 800985c:	4639      	mov	r1, r7
 800985e:	4630      	mov	r0, r6
 8009860:	47c0      	blx	r8
 8009862:	3001      	adds	r0, #1
 8009864:	d103      	bne.n	800986e <_printf_common+0xba>
 8009866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800986a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800986e:	3501      	adds	r5, #1
 8009870:	e7c3      	b.n	80097fa <_printf_common+0x46>
 8009872:	18e1      	adds	r1, r4, r3
 8009874:	1c5a      	adds	r2, r3, #1
 8009876:	2030      	movs	r0, #48	; 0x30
 8009878:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800987c:	4422      	add	r2, r4
 800987e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009882:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009886:	3302      	adds	r3, #2
 8009888:	e7c5      	b.n	8009816 <_printf_common+0x62>
 800988a:	2301      	movs	r3, #1
 800988c:	4622      	mov	r2, r4
 800988e:	4639      	mov	r1, r7
 8009890:	4630      	mov	r0, r6
 8009892:	47c0      	blx	r8
 8009894:	3001      	adds	r0, #1
 8009896:	d0e6      	beq.n	8009866 <_printf_common+0xb2>
 8009898:	f109 0901 	add.w	r9, r9, #1
 800989c:	e7d8      	b.n	8009850 <_printf_common+0x9c>
	...

080098a0 <_printf_i>:
 80098a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098a4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80098a8:	460c      	mov	r4, r1
 80098aa:	7e09      	ldrb	r1, [r1, #24]
 80098ac:	b085      	sub	sp, #20
 80098ae:	296e      	cmp	r1, #110	; 0x6e
 80098b0:	4617      	mov	r7, r2
 80098b2:	4606      	mov	r6, r0
 80098b4:	4698      	mov	r8, r3
 80098b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098b8:	f000 80b3 	beq.w	8009a22 <_printf_i+0x182>
 80098bc:	d822      	bhi.n	8009904 <_printf_i+0x64>
 80098be:	2963      	cmp	r1, #99	; 0x63
 80098c0:	d036      	beq.n	8009930 <_printf_i+0x90>
 80098c2:	d80a      	bhi.n	80098da <_printf_i+0x3a>
 80098c4:	2900      	cmp	r1, #0
 80098c6:	f000 80b9 	beq.w	8009a3c <_printf_i+0x19c>
 80098ca:	2958      	cmp	r1, #88	; 0x58
 80098cc:	f000 8083 	beq.w	80099d6 <_printf_i+0x136>
 80098d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098d4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80098d8:	e032      	b.n	8009940 <_printf_i+0xa0>
 80098da:	2964      	cmp	r1, #100	; 0x64
 80098dc:	d001      	beq.n	80098e2 <_printf_i+0x42>
 80098de:	2969      	cmp	r1, #105	; 0x69
 80098e0:	d1f6      	bne.n	80098d0 <_printf_i+0x30>
 80098e2:	6820      	ldr	r0, [r4, #0]
 80098e4:	6813      	ldr	r3, [r2, #0]
 80098e6:	0605      	lsls	r5, r0, #24
 80098e8:	f103 0104 	add.w	r1, r3, #4
 80098ec:	d52a      	bpl.n	8009944 <_printf_i+0xa4>
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6011      	str	r1, [r2, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	da03      	bge.n	80098fe <_printf_i+0x5e>
 80098f6:	222d      	movs	r2, #45	; 0x2d
 80098f8:	425b      	negs	r3, r3
 80098fa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80098fe:	486f      	ldr	r0, [pc, #444]	; (8009abc <_printf_i+0x21c>)
 8009900:	220a      	movs	r2, #10
 8009902:	e039      	b.n	8009978 <_printf_i+0xd8>
 8009904:	2973      	cmp	r1, #115	; 0x73
 8009906:	f000 809d 	beq.w	8009a44 <_printf_i+0x1a4>
 800990a:	d808      	bhi.n	800991e <_printf_i+0x7e>
 800990c:	296f      	cmp	r1, #111	; 0x6f
 800990e:	d020      	beq.n	8009952 <_printf_i+0xb2>
 8009910:	2970      	cmp	r1, #112	; 0x70
 8009912:	d1dd      	bne.n	80098d0 <_printf_i+0x30>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	f043 0320 	orr.w	r3, r3, #32
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	e003      	b.n	8009926 <_printf_i+0x86>
 800991e:	2975      	cmp	r1, #117	; 0x75
 8009920:	d017      	beq.n	8009952 <_printf_i+0xb2>
 8009922:	2978      	cmp	r1, #120	; 0x78
 8009924:	d1d4      	bne.n	80098d0 <_printf_i+0x30>
 8009926:	2378      	movs	r3, #120	; 0x78
 8009928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800992c:	4864      	ldr	r0, [pc, #400]	; (8009ac0 <_printf_i+0x220>)
 800992e:	e055      	b.n	80099dc <_printf_i+0x13c>
 8009930:	6813      	ldr	r3, [r2, #0]
 8009932:	1d19      	adds	r1, r3, #4
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6011      	str	r1, [r2, #0]
 8009938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800993c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009940:	2301      	movs	r3, #1
 8009942:	e08c      	b.n	8009a5e <_printf_i+0x1be>
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6011      	str	r1, [r2, #0]
 8009948:	f010 0f40 	tst.w	r0, #64	; 0x40
 800994c:	bf18      	it	ne
 800994e:	b21b      	sxthne	r3, r3
 8009950:	e7cf      	b.n	80098f2 <_printf_i+0x52>
 8009952:	6813      	ldr	r3, [r2, #0]
 8009954:	6825      	ldr	r5, [r4, #0]
 8009956:	1d18      	adds	r0, r3, #4
 8009958:	6010      	str	r0, [r2, #0]
 800995a:	0628      	lsls	r0, r5, #24
 800995c:	d501      	bpl.n	8009962 <_printf_i+0xc2>
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	e002      	b.n	8009968 <_printf_i+0xc8>
 8009962:	0668      	lsls	r0, r5, #25
 8009964:	d5fb      	bpl.n	800995e <_printf_i+0xbe>
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	4854      	ldr	r0, [pc, #336]	; (8009abc <_printf_i+0x21c>)
 800996a:	296f      	cmp	r1, #111	; 0x6f
 800996c:	bf14      	ite	ne
 800996e:	220a      	movne	r2, #10
 8009970:	2208      	moveq	r2, #8
 8009972:	2100      	movs	r1, #0
 8009974:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009978:	6865      	ldr	r5, [r4, #4]
 800997a:	60a5      	str	r5, [r4, #8]
 800997c:	2d00      	cmp	r5, #0
 800997e:	f2c0 8095 	blt.w	8009aac <_printf_i+0x20c>
 8009982:	6821      	ldr	r1, [r4, #0]
 8009984:	f021 0104 	bic.w	r1, r1, #4
 8009988:	6021      	str	r1, [r4, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d13d      	bne.n	8009a0a <_printf_i+0x16a>
 800998e:	2d00      	cmp	r5, #0
 8009990:	f040 808e 	bne.w	8009ab0 <_printf_i+0x210>
 8009994:	4665      	mov	r5, ip
 8009996:	2a08      	cmp	r2, #8
 8009998:	d10b      	bne.n	80099b2 <_printf_i+0x112>
 800999a:	6823      	ldr	r3, [r4, #0]
 800999c:	07db      	lsls	r3, r3, #31
 800999e:	d508      	bpl.n	80099b2 <_printf_i+0x112>
 80099a0:	6923      	ldr	r3, [r4, #16]
 80099a2:	6862      	ldr	r2, [r4, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	bfde      	ittt	le
 80099a8:	2330      	movle	r3, #48	; 0x30
 80099aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80099b2:	ebac 0305 	sub.w	r3, ip, r5
 80099b6:	6123      	str	r3, [r4, #16]
 80099b8:	f8cd 8000 	str.w	r8, [sp]
 80099bc:	463b      	mov	r3, r7
 80099be:	aa03      	add	r2, sp, #12
 80099c0:	4621      	mov	r1, r4
 80099c2:	4630      	mov	r0, r6
 80099c4:	f7ff fef6 	bl	80097b4 <_printf_common>
 80099c8:	3001      	adds	r0, #1
 80099ca:	d14d      	bne.n	8009a68 <_printf_i+0x1c8>
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099d0:	b005      	add	sp, #20
 80099d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099d6:	4839      	ldr	r0, [pc, #228]	; (8009abc <_printf_i+0x21c>)
 80099d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80099dc:	6813      	ldr	r3, [r2, #0]
 80099de:	6821      	ldr	r1, [r4, #0]
 80099e0:	1d1d      	adds	r5, r3, #4
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6015      	str	r5, [r2, #0]
 80099e6:	060a      	lsls	r2, r1, #24
 80099e8:	d50b      	bpl.n	8009a02 <_printf_i+0x162>
 80099ea:	07ca      	lsls	r2, r1, #31
 80099ec:	bf44      	itt	mi
 80099ee:	f041 0120 	orrmi.w	r1, r1, #32
 80099f2:	6021      	strmi	r1, [r4, #0]
 80099f4:	b91b      	cbnz	r3, 80099fe <_printf_i+0x15e>
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	f022 0220 	bic.w	r2, r2, #32
 80099fc:	6022      	str	r2, [r4, #0]
 80099fe:	2210      	movs	r2, #16
 8009a00:	e7b7      	b.n	8009972 <_printf_i+0xd2>
 8009a02:	064d      	lsls	r5, r1, #25
 8009a04:	bf48      	it	mi
 8009a06:	b29b      	uxthmi	r3, r3
 8009a08:	e7ef      	b.n	80099ea <_printf_i+0x14a>
 8009a0a:	4665      	mov	r5, ip
 8009a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a10:	fb02 3311 	mls	r3, r2, r1, r3
 8009a14:	5cc3      	ldrb	r3, [r0, r3]
 8009a16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	2900      	cmp	r1, #0
 8009a1e:	d1f5      	bne.n	8009a0c <_printf_i+0x16c>
 8009a20:	e7b9      	b.n	8009996 <_printf_i+0xf6>
 8009a22:	6813      	ldr	r3, [r2, #0]
 8009a24:	6825      	ldr	r5, [r4, #0]
 8009a26:	6961      	ldr	r1, [r4, #20]
 8009a28:	1d18      	adds	r0, r3, #4
 8009a2a:	6010      	str	r0, [r2, #0]
 8009a2c:	0628      	lsls	r0, r5, #24
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	d501      	bpl.n	8009a36 <_printf_i+0x196>
 8009a32:	6019      	str	r1, [r3, #0]
 8009a34:	e002      	b.n	8009a3c <_printf_i+0x19c>
 8009a36:	066a      	lsls	r2, r5, #25
 8009a38:	d5fb      	bpl.n	8009a32 <_printf_i+0x192>
 8009a3a:	8019      	strh	r1, [r3, #0]
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	6123      	str	r3, [r4, #16]
 8009a40:	4665      	mov	r5, ip
 8009a42:	e7b9      	b.n	80099b8 <_printf_i+0x118>
 8009a44:	6813      	ldr	r3, [r2, #0]
 8009a46:	1d19      	adds	r1, r3, #4
 8009a48:	6011      	str	r1, [r2, #0]
 8009a4a:	681d      	ldr	r5, [r3, #0]
 8009a4c:	6862      	ldr	r2, [r4, #4]
 8009a4e:	2100      	movs	r1, #0
 8009a50:	4628      	mov	r0, r5
 8009a52:	f7f6 fbcd 	bl	80001f0 <memchr>
 8009a56:	b108      	cbz	r0, 8009a5c <_printf_i+0x1bc>
 8009a58:	1b40      	subs	r0, r0, r5
 8009a5a:	6060      	str	r0, [r4, #4]
 8009a5c:	6863      	ldr	r3, [r4, #4]
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	2300      	movs	r3, #0
 8009a62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a66:	e7a7      	b.n	80099b8 <_printf_i+0x118>
 8009a68:	6923      	ldr	r3, [r4, #16]
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	4639      	mov	r1, r7
 8009a6e:	4630      	mov	r0, r6
 8009a70:	47c0      	blx	r8
 8009a72:	3001      	adds	r0, #1
 8009a74:	d0aa      	beq.n	80099cc <_printf_i+0x12c>
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	079b      	lsls	r3, r3, #30
 8009a7a:	d413      	bmi.n	8009aa4 <_printf_i+0x204>
 8009a7c:	68e0      	ldr	r0, [r4, #12]
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	4298      	cmp	r0, r3
 8009a82:	bfb8      	it	lt
 8009a84:	4618      	movlt	r0, r3
 8009a86:	e7a3      	b.n	80099d0 <_printf_i+0x130>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	464a      	mov	r2, r9
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	4630      	mov	r0, r6
 8009a90:	47c0      	blx	r8
 8009a92:	3001      	adds	r0, #1
 8009a94:	d09a      	beq.n	80099cc <_printf_i+0x12c>
 8009a96:	3501      	adds	r5, #1
 8009a98:	68e3      	ldr	r3, [r4, #12]
 8009a9a:	9a03      	ldr	r2, [sp, #12]
 8009a9c:	1a9b      	subs	r3, r3, r2
 8009a9e:	42ab      	cmp	r3, r5
 8009aa0:	dcf2      	bgt.n	8009a88 <_printf_i+0x1e8>
 8009aa2:	e7eb      	b.n	8009a7c <_printf_i+0x1dc>
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	f104 0919 	add.w	r9, r4, #25
 8009aaa:	e7f5      	b.n	8009a98 <_printf_i+0x1f8>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1ac      	bne.n	8009a0a <_printf_i+0x16a>
 8009ab0:	7803      	ldrb	r3, [r0, #0]
 8009ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ab6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aba:	e76c      	b.n	8009996 <_printf_i+0xf6>
 8009abc:	0800d03e 	.word	0x0800d03e
 8009ac0:	0800d04f 	.word	0x0800d04f

08009ac4 <siprintf>:
 8009ac4:	b40e      	push	{r1, r2, r3}
 8009ac6:	b500      	push	{lr}
 8009ac8:	b09c      	sub	sp, #112	; 0x70
 8009aca:	ab1d      	add	r3, sp, #116	; 0x74
 8009acc:	9002      	str	r0, [sp, #8]
 8009ace:	9006      	str	r0, [sp, #24]
 8009ad0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ad4:	4809      	ldr	r0, [pc, #36]	; (8009afc <siprintf+0x38>)
 8009ad6:	9107      	str	r1, [sp, #28]
 8009ad8:	9104      	str	r1, [sp, #16]
 8009ada:	4909      	ldr	r1, [pc, #36]	; (8009b00 <siprintf+0x3c>)
 8009adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae0:	9105      	str	r1, [sp, #20]
 8009ae2:	6800      	ldr	r0, [r0, #0]
 8009ae4:	9301      	str	r3, [sp, #4]
 8009ae6:	a902      	add	r1, sp, #8
 8009ae8:	f001 fa54 	bl	800af94 <_svfiprintf_r>
 8009aec:	9b02      	ldr	r3, [sp, #8]
 8009aee:	2200      	movs	r2, #0
 8009af0:	701a      	strb	r2, [r3, #0]
 8009af2:	b01c      	add	sp, #112	; 0x70
 8009af4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af8:	b003      	add	sp, #12
 8009afa:	4770      	bx	lr
 8009afc:	20000010 	.word	0x20000010
 8009b00:	ffff0208 	.word	0xffff0208

08009b04 <quorem>:
 8009b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b08:	6903      	ldr	r3, [r0, #16]
 8009b0a:	690c      	ldr	r4, [r1, #16]
 8009b0c:	42a3      	cmp	r3, r4
 8009b0e:	4680      	mov	r8, r0
 8009b10:	f2c0 8082 	blt.w	8009c18 <quorem+0x114>
 8009b14:	3c01      	subs	r4, #1
 8009b16:	f101 0714 	add.w	r7, r1, #20
 8009b1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009b1e:	f100 0614 	add.w	r6, r0, #20
 8009b22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009b26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009b2a:	eb06 030c 	add.w	r3, r6, ip
 8009b2e:	3501      	adds	r5, #1
 8009b30:	eb07 090c 	add.w	r9, r7, ip
 8009b34:	9301      	str	r3, [sp, #4]
 8009b36:	fbb0 f5f5 	udiv	r5, r0, r5
 8009b3a:	b395      	cbz	r5, 8009ba2 <quorem+0x9e>
 8009b3c:	f04f 0a00 	mov.w	sl, #0
 8009b40:	4638      	mov	r0, r7
 8009b42:	46b6      	mov	lr, r6
 8009b44:	46d3      	mov	fp, sl
 8009b46:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b4a:	b293      	uxth	r3, r2
 8009b4c:	fb05 a303 	mla	r3, r5, r3, sl
 8009b50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	ebab 0303 	sub.w	r3, fp, r3
 8009b5a:	0c12      	lsrs	r2, r2, #16
 8009b5c:	f8de b000 	ldr.w	fp, [lr]
 8009b60:	fb05 a202 	mla	r2, r5, r2, sl
 8009b64:	fa13 f38b 	uxtah	r3, r3, fp
 8009b68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009b6c:	fa1f fb82 	uxth.w	fp, r2
 8009b70:	f8de 2000 	ldr.w	r2, [lr]
 8009b74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009b78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b82:	4581      	cmp	r9, r0
 8009b84:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009b88:	f84e 3b04 	str.w	r3, [lr], #4
 8009b8c:	d2db      	bcs.n	8009b46 <quorem+0x42>
 8009b8e:	f856 300c 	ldr.w	r3, [r6, ip]
 8009b92:	b933      	cbnz	r3, 8009ba2 <quorem+0x9e>
 8009b94:	9b01      	ldr	r3, [sp, #4]
 8009b96:	3b04      	subs	r3, #4
 8009b98:	429e      	cmp	r6, r3
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	d330      	bcc.n	8009c00 <quorem+0xfc>
 8009b9e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	f001 f820 	bl	800abe8 <__mcmp>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	db25      	blt.n	8009bf8 <quorem+0xf4>
 8009bac:	3501      	adds	r5, #1
 8009bae:	4630      	mov	r0, r6
 8009bb0:	f04f 0c00 	mov.w	ip, #0
 8009bb4:	f857 2b04 	ldr.w	r2, [r7], #4
 8009bb8:	f8d0 e000 	ldr.w	lr, [r0]
 8009bbc:	b293      	uxth	r3, r2
 8009bbe:	ebac 0303 	sub.w	r3, ip, r3
 8009bc2:	0c12      	lsrs	r2, r2, #16
 8009bc4:	fa13 f38e 	uxtah	r3, r3, lr
 8009bc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd6:	45b9      	cmp	r9, r7
 8009bd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bdc:	f840 3b04 	str.w	r3, [r0], #4
 8009be0:	d2e8      	bcs.n	8009bb4 <quorem+0xb0>
 8009be2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009be6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009bea:	b92a      	cbnz	r2, 8009bf8 <quorem+0xf4>
 8009bec:	3b04      	subs	r3, #4
 8009bee:	429e      	cmp	r6, r3
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	d30b      	bcc.n	8009c0c <quorem+0x108>
 8009bf4:	f8c8 4010 	str.w	r4, [r8, #16]
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	b003      	add	sp, #12
 8009bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c00:	6812      	ldr	r2, [r2, #0]
 8009c02:	3b04      	subs	r3, #4
 8009c04:	2a00      	cmp	r2, #0
 8009c06:	d1ca      	bne.n	8009b9e <quorem+0x9a>
 8009c08:	3c01      	subs	r4, #1
 8009c0a:	e7c5      	b.n	8009b98 <quorem+0x94>
 8009c0c:	6812      	ldr	r2, [r2, #0]
 8009c0e:	3b04      	subs	r3, #4
 8009c10:	2a00      	cmp	r2, #0
 8009c12:	d1ef      	bne.n	8009bf4 <quorem+0xf0>
 8009c14:	3c01      	subs	r4, #1
 8009c16:	e7ea      	b.n	8009bee <quorem+0xea>
 8009c18:	2000      	movs	r0, #0
 8009c1a:	e7ee      	b.n	8009bfa <quorem+0xf6>
 8009c1c:	0000      	movs	r0, r0
	...

08009c20 <_dtoa_r>:
 8009c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	ec57 6b10 	vmov	r6, r7, d0
 8009c28:	b097      	sub	sp, #92	; 0x5c
 8009c2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c2c:	9106      	str	r1, [sp, #24]
 8009c2e:	4604      	mov	r4, r0
 8009c30:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c32:	9312      	str	r3, [sp, #72]	; 0x48
 8009c34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c38:	e9cd 6700 	strd	r6, r7, [sp]
 8009c3c:	b93d      	cbnz	r5, 8009c4e <_dtoa_r+0x2e>
 8009c3e:	2010      	movs	r0, #16
 8009c40:	f000 fdb4 	bl	800a7ac <malloc>
 8009c44:	6260      	str	r0, [r4, #36]	; 0x24
 8009c46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c4a:	6005      	str	r5, [r0, #0]
 8009c4c:	60c5      	str	r5, [r0, #12]
 8009c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c50:	6819      	ldr	r1, [r3, #0]
 8009c52:	b151      	cbz	r1, 8009c6a <_dtoa_r+0x4a>
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	604a      	str	r2, [r1, #4]
 8009c58:	2301      	movs	r3, #1
 8009c5a:	4093      	lsls	r3, r2
 8009c5c:	608b      	str	r3, [r1, #8]
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f000 fde0 	bl	800a824 <_Bfree>
 8009c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c66:	2200      	movs	r2, #0
 8009c68:	601a      	str	r2, [r3, #0]
 8009c6a:	1e3b      	subs	r3, r7, #0
 8009c6c:	bfbb      	ittet	lt
 8009c6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c72:	9301      	strlt	r3, [sp, #4]
 8009c74:	2300      	movge	r3, #0
 8009c76:	2201      	movlt	r2, #1
 8009c78:	bfac      	ite	ge
 8009c7a:	f8c8 3000 	strge.w	r3, [r8]
 8009c7e:	f8c8 2000 	strlt.w	r2, [r8]
 8009c82:	4baf      	ldr	r3, [pc, #700]	; (8009f40 <_dtoa_r+0x320>)
 8009c84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c88:	ea33 0308 	bics.w	r3, r3, r8
 8009c8c:	d114      	bne.n	8009cb8 <_dtoa_r+0x98>
 8009c8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c90:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	9b00      	ldr	r3, [sp, #0]
 8009c98:	b923      	cbnz	r3, 8009ca4 <_dtoa_r+0x84>
 8009c9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	f000 8542 	beq.w	800a728 <_dtoa_r+0xb08>
 8009ca4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ca6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009f54 <_dtoa_r+0x334>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	f000 8544 	beq.w	800a738 <_dtoa_r+0xb18>
 8009cb0:	f10b 0303 	add.w	r3, fp, #3
 8009cb4:	f000 bd3e 	b.w	800a734 <_dtoa_r+0xb14>
 8009cb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	4639      	mov	r1, r7
 8009cc4:	f7f6 ff08 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cc8:	4681      	mov	r9, r0
 8009cca:	b168      	cbz	r0, 8009ce8 <_dtoa_r+0xc8>
 8009ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cce:	2301      	movs	r3, #1
 8009cd0:	6013      	str	r3, [r2, #0]
 8009cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 8524 	beq.w	800a722 <_dtoa_r+0xb02>
 8009cda:	4b9a      	ldr	r3, [pc, #616]	; (8009f44 <_dtoa_r+0x324>)
 8009cdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cde:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009ce2:	6013      	str	r3, [r2, #0]
 8009ce4:	f000 bd28 	b.w	800a738 <_dtoa_r+0xb18>
 8009ce8:	aa14      	add	r2, sp, #80	; 0x50
 8009cea:	a915      	add	r1, sp, #84	; 0x54
 8009cec:	ec47 6b10 	vmov	d0, r6, r7
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 fff0 	bl	800acd6 <__d2b>
 8009cf6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009cfa:	9004      	str	r0, [sp, #16]
 8009cfc:	2d00      	cmp	r5, #0
 8009cfe:	d07c      	beq.n	8009dfa <_dtoa_r+0x1da>
 8009d00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009d04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009d08:	46b2      	mov	sl, r6
 8009d0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009d0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009d16:	2200      	movs	r2, #0
 8009d18:	4b8b      	ldr	r3, [pc, #556]	; (8009f48 <_dtoa_r+0x328>)
 8009d1a:	4650      	mov	r0, sl
 8009d1c:	4659      	mov	r1, fp
 8009d1e:	f7f6 fabb 	bl	8000298 <__aeabi_dsub>
 8009d22:	a381      	add	r3, pc, #516	; (adr r3, 8009f28 <_dtoa_r+0x308>)
 8009d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d28:	f7f6 fc6e 	bl	8000608 <__aeabi_dmul>
 8009d2c:	a380      	add	r3, pc, #512	; (adr r3, 8009f30 <_dtoa_r+0x310>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f7f6 fab3 	bl	800029c <__adddf3>
 8009d36:	4606      	mov	r6, r0
 8009d38:	4628      	mov	r0, r5
 8009d3a:	460f      	mov	r7, r1
 8009d3c:	f7f6 fbfa 	bl	8000534 <__aeabi_i2d>
 8009d40:	a37d      	add	r3, pc, #500	; (adr r3, 8009f38 <_dtoa_r+0x318>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fc5f 	bl	8000608 <__aeabi_dmul>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4630      	mov	r0, r6
 8009d50:	4639      	mov	r1, r7
 8009d52:	f7f6 faa3 	bl	800029c <__adddf3>
 8009d56:	4606      	mov	r6, r0
 8009d58:	460f      	mov	r7, r1
 8009d5a:	f7f6 ff05 	bl	8000b68 <__aeabi_d2iz>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	4682      	mov	sl, r0
 8009d62:	2300      	movs	r3, #0
 8009d64:	4630      	mov	r0, r6
 8009d66:	4639      	mov	r1, r7
 8009d68:	f7f6 fec0 	bl	8000aec <__aeabi_dcmplt>
 8009d6c:	b148      	cbz	r0, 8009d82 <_dtoa_r+0x162>
 8009d6e:	4650      	mov	r0, sl
 8009d70:	f7f6 fbe0 	bl	8000534 <__aeabi_i2d>
 8009d74:	4632      	mov	r2, r6
 8009d76:	463b      	mov	r3, r7
 8009d78:	f7f6 feae 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d7c:	b908      	cbnz	r0, 8009d82 <_dtoa_r+0x162>
 8009d7e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009d82:	f1ba 0f16 	cmp.w	sl, #22
 8009d86:	d859      	bhi.n	8009e3c <_dtoa_r+0x21c>
 8009d88:	4970      	ldr	r1, [pc, #448]	; (8009f4c <_dtoa_r+0x32c>)
 8009d8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009d8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d96:	f7f6 fec7 	bl	8000b28 <__aeabi_dcmpgt>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d050      	beq.n	8009e40 <_dtoa_r+0x220>
 8009d9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009da2:	2300      	movs	r3, #0
 8009da4:	930f      	str	r3, [sp, #60]	; 0x3c
 8009da6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009da8:	1b5d      	subs	r5, r3, r5
 8009daa:	f1b5 0801 	subs.w	r8, r5, #1
 8009dae:	bf49      	itett	mi
 8009db0:	f1c5 0301 	rsbmi	r3, r5, #1
 8009db4:	2300      	movpl	r3, #0
 8009db6:	9305      	strmi	r3, [sp, #20]
 8009db8:	f04f 0800 	movmi.w	r8, #0
 8009dbc:	bf58      	it	pl
 8009dbe:	9305      	strpl	r3, [sp, #20]
 8009dc0:	f1ba 0f00 	cmp.w	sl, #0
 8009dc4:	db3e      	blt.n	8009e44 <_dtoa_r+0x224>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	44d0      	add	r8, sl
 8009dca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009dce:	9307      	str	r3, [sp, #28]
 8009dd0:	9b06      	ldr	r3, [sp, #24]
 8009dd2:	2b09      	cmp	r3, #9
 8009dd4:	f200 8090 	bhi.w	8009ef8 <_dtoa_r+0x2d8>
 8009dd8:	2b05      	cmp	r3, #5
 8009dda:	bfc4      	itt	gt
 8009ddc:	3b04      	subgt	r3, #4
 8009dde:	9306      	strgt	r3, [sp, #24]
 8009de0:	9b06      	ldr	r3, [sp, #24]
 8009de2:	f1a3 0302 	sub.w	r3, r3, #2
 8009de6:	bfcc      	ite	gt
 8009de8:	2500      	movgt	r5, #0
 8009dea:	2501      	movle	r5, #1
 8009dec:	2b03      	cmp	r3, #3
 8009dee:	f200 808f 	bhi.w	8009f10 <_dtoa_r+0x2f0>
 8009df2:	e8df f003 	tbb	[pc, r3]
 8009df6:	7f7d      	.short	0x7f7d
 8009df8:	7131      	.short	0x7131
 8009dfa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009dfe:	441d      	add	r5, r3
 8009e00:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009e04:	2820      	cmp	r0, #32
 8009e06:	dd13      	ble.n	8009e30 <_dtoa_r+0x210>
 8009e08:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009e0c:	9b00      	ldr	r3, [sp, #0]
 8009e0e:	fa08 f800 	lsl.w	r8, r8, r0
 8009e12:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009e16:	fa23 f000 	lsr.w	r0, r3, r0
 8009e1a:	ea48 0000 	orr.w	r0, r8, r0
 8009e1e:	f7f6 fb79 	bl	8000514 <__aeabi_ui2d>
 8009e22:	2301      	movs	r3, #1
 8009e24:	4682      	mov	sl, r0
 8009e26:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009e2a:	3d01      	subs	r5, #1
 8009e2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e2e:	e772      	b.n	8009d16 <_dtoa_r+0xf6>
 8009e30:	9b00      	ldr	r3, [sp, #0]
 8009e32:	f1c0 0020 	rsb	r0, r0, #32
 8009e36:	fa03 f000 	lsl.w	r0, r3, r0
 8009e3a:	e7f0      	b.n	8009e1e <_dtoa_r+0x1fe>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e7b1      	b.n	8009da4 <_dtoa_r+0x184>
 8009e40:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e42:	e7b0      	b.n	8009da6 <_dtoa_r+0x186>
 8009e44:	9b05      	ldr	r3, [sp, #20]
 8009e46:	eba3 030a 	sub.w	r3, r3, sl
 8009e4a:	9305      	str	r3, [sp, #20]
 8009e4c:	f1ca 0300 	rsb	r3, sl, #0
 8009e50:	9307      	str	r3, [sp, #28]
 8009e52:	2300      	movs	r3, #0
 8009e54:	930e      	str	r3, [sp, #56]	; 0x38
 8009e56:	e7bb      	b.n	8009dd0 <_dtoa_r+0x1b0>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	dd59      	ble.n	8009f16 <_dtoa_r+0x2f6>
 8009e62:	9302      	str	r3, [sp, #8]
 8009e64:	4699      	mov	r9, r3
 8009e66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e68:	2200      	movs	r2, #0
 8009e6a:	6072      	str	r2, [r6, #4]
 8009e6c:	2204      	movs	r2, #4
 8009e6e:	f102 0014 	add.w	r0, r2, #20
 8009e72:	4298      	cmp	r0, r3
 8009e74:	6871      	ldr	r1, [r6, #4]
 8009e76:	d953      	bls.n	8009f20 <_dtoa_r+0x300>
 8009e78:	4620      	mov	r0, r4
 8009e7a:	f000 fc9f 	bl	800a7bc <_Balloc>
 8009e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e80:	6030      	str	r0, [r6, #0]
 8009e82:	f1b9 0f0e 	cmp.w	r9, #14
 8009e86:	f8d3 b000 	ldr.w	fp, [r3]
 8009e8a:	f200 80e6 	bhi.w	800a05a <_dtoa_r+0x43a>
 8009e8e:	2d00      	cmp	r5, #0
 8009e90:	f000 80e3 	beq.w	800a05a <_dtoa_r+0x43a>
 8009e94:	ed9d 7b00 	vldr	d7, [sp]
 8009e98:	f1ba 0f00 	cmp.w	sl, #0
 8009e9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009ea0:	dd74      	ble.n	8009f8c <_dtoa_r+0x36c>
 8009ea2:	4a2a      	ldr	r2, [pc, #168]	; (8009f4c <_dtoa_r+0x32c>)
 8009ea4:	f00a 030f 	and.w	r3, sl, #15
 8009ea8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009eac:	ed93 7b00 	vldr	d7, [r3]
 8009eb0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009eb4:	06f0      	lsls	r0, r6, #27
 8009eb6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009eba:	d565      	bpl.n	8009f88 <_dtoa_r+0x368>
 8009ebc:	4b24      	ldr	r3, [pc, #144]	; (8009f50 <_dtoa_r+0x330>)
 8009ebe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ec2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ec6:	f7f6 fcc9 	bl	800085c <__aeabi_ddiv>
 8009eca:	e9cd 0100 	strd	r0, r1, [sp]
 8009ece:	f006 060f 	and.w	r6, r6, #15
 8009ed2:	2503      	movs	r5, #3
 8009ed4:	4f1e      	ldr	r7, [pc, #120]	; (8009f50 <_dtoa_r+0x330>)
 8009ed6:	e04c      	b.n	8009f72 <_dtoa_r+0x352>
 8009ed8:	2301      	movs	r3, #1
 8009eda:	930a      	str	r3, [sp, #40]	; 0x28
 8009edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ede:	4453      	add	r3, sl
 8009ee0:	f103 0901 	add.w	r9, r3, #1
 8009ee4:	9302      	str	r3, [sp, #8]
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	bfb8      	it	lt
 8009eec:	2301      	movlt	r3, #1
 8009eee:	e7ba      	b.n	8009e66 <_dtoa_r+0x246>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	e7b2      	b.n	8009e5a <_dtoa_r+0x23a>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	e7f0      	b.n	8009eda <_dtoa_r+0x2ba>
 8009ef8:	2501      	movs	r5, #1
 8009efa:	2300      	movs	r3, #0
 8009efc:	9306      	str	r3, [sp, #24]
 8009efe:	950a      	str	r5, [sp, #40]	; 0x28
 8009f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f04:	9302      	str	r3, [sp, #8]
 8009f06:	4699      	mov	r9, r3
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2312      	movs	r3, #18
 8009f0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f0e:	e7aa      	b.n	8009e66 <_dtoa_r+0x246>
 8009f10:	2301      	movs	r3, #1
 8009f12:	930a      	str	r3, [sp, #40]	; 0x28
 8009f14:	e7f4      	b.n	8009f00 <_dtoa_r+0x2e0>
 8009f16:	2301      	movs	r3, #1
 8009f18:	9302      	str	r3, [sp, #8]
 8009f1a:	4699      	mov	r9, r3
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	e7f5      	b.n	8009f0c <_dtoa_r+0x2ec>
 8009f20:	3101      	adds	r1, #1
 8009f22:	6071      	str	r1, [r6, #4]
 8009f24:	0052      	lsls	r2, r2, #1
 8009f26:	e7a2      	b.n	8009e6e <_dtoa_r+0x24e>
 8009f28:	636f4361 	.word	0x636f4361
 8009f2c:	3fd287a7 	.word	0x3fd287a7
 8009f30:	8b60c8b3 	.word	0x8b60c8b3
 8009f34:	3fc68a28 	.word	0x3fc68a28
 8009f38:	509f79fb 	.word	0x509f79fb
 8009f3c:	3fd34413 	.word	0x3fd34413
 8009f40:	7ff00000 	.word	0x7ff00000
 8009f44:	0800d03d 	.word	0x0800d03d
 8009f48:	3ff80000 	.word	0x3ff80000
 8009f4c:	0800d098 	.word	0x0800d098
 8009f50:	0800d070 	.word	0x0800d070
 8009f54:	0800d069 	.word	0x0800d069
 8009f58:	07f1      	lsls	r1, r6, #31
 8009f5a:	d508      	bpl.n	8009f6e <_dtoa_r+0x34e>
 8009f5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f64:	f7f6 fb50 	bl	8000608 <__aeabi_dmul>
 8009f68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f6c:	3501      	adds	r5, #1
 8009f6e:	1076      	asrs	r6, r6, #1
 8009f70:	3708      	adds	r7, #8
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	d1f0      	bne.n	8009f58 <_dtoa_r+0x338>
 8009f76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009f7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f7e:	f7f6 fc6d 	bl	800085c <__aeabi_ddiv>
 8009f82:	e9cd 0100 	strd	r0, r1, [sp]
 8009f86:	e01a      	b.n	8009fbe <_dtoa_r+0x39e>
 8009f88:	2502      	movs	r5, #2
 8009f8a:	e7a3      	b.n	8009ed4 <_dtoa_r+0x2b4>
 8009f8c:	f000 80a0 	beq.w	800a0d0 <_dtoa_r+0x4b0>
 8009f90:	f1ca 0600 	rsb	r6, sl, #0
 8009f94:	4b9f      	ldr	r3, [pc, #636]	; (800a214 <_dtoa_r+0x5f4>)
 8009f96:	4fa0      	ldr	r7, [pc, #640]	; (800a218 <_dtoa_r+0x5f8>)
 8009f98:	f006 020f 	and.w	r2, r6, #15
 8009f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fa8:	f7f6 fb2e 	bl	8000608 <__aeabi_dmul>
 8009fac:	e9cd 0100 	strd	r0, r1, [sp]
 8009fb0:	1136      	asrs	r6, r6, #4
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	2502      	movs	r5, #2
 8009fb6:	2e00      	cmp	r6, #0
 8009fb8:	d17f      	bne.n	800a0ba <_dtoa_r+0x49a>
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e1      	bne.n	8009f82 <_dtoa_r+0x362>
 8009fbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 8087 	beq.w	800a0d4 <_dtoa_r+0x4b4>
 8009fc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	4b93      	ldr	r3, [pc, #588]	; (800a21c <_dtoa_r+0x5fc>)
 8009fce:	4630      	mov	r0, r6
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	f7f6 fd8b 	bl	8000aec <__aeabi_dcmplt>
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	d07c      	beq.n	800a0d4 <_dtoa_r+0x4b4>
 8009fda:	f1b9 0f00 	cmp.w	r9, #0
 8009fde:	d079      	beq.n	800a0d4 <_dtoa_r+0x4b4>
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	dd35      	ble.n	800a052 <_dtoa_r+0x432>
 8009fe6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009fea:	9308      	str	r3, [sp, #32]
 8009fec:	4639      	mov	r1, r7
 8009fee:	2200      	movs	r2, #0
 8009ff0:	4b8b      	ldr	r3, [pc, #556]	; (800a220 <_dtoa_r+0x600>)
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f7f6 fb08 	bl	8000608 <__aeabi_dmul>
 8009ff8:	e9cd 0100 	strd	r0, r1, [sp]
 8009ffc:	9f02      	ldr	r7, [sp, #8]
 8009ffe:	3501      	adds	r5, #1
 800a000:	4628      	mov	r0, r5
 800a002:	f7f6 fa97 	bl	8000534 <__aeabi_i2d>
 800a006:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a00a:	f7f6 fafd 	bl	8000608 <__aeabi_dmul>
 800a00e:	2200      	movs	r2, #0
 800a010:	4b84      	ldr	r3, [pc, #528]	; (800a224 <_dtoa_r+0x604>)
 800a012:	f7f6 f943 	bl	800029c <__adddf3>
 800a016:	4605      	mov	r5, r0
 800a018:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a01c:	2f00      	cmp	r7, #0
 800a01e:	d15d      	bne.n	800a0dc <_dtoa_r+0x4bc>
 800a020:	2200      	movs	r2, #0
 800a022:	4b81      	ldr	r3, [pc, #516]	; (800a228 <_dtoa_r+0x608>)
 800a024:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a028:	f7f6 f936 	bl	8000298 <__aeabi_dsub>
 800a02c:	462a      	mov	r2, r5
 800a02e:	4633      	mov	r3, r6
 800a030:	e9cd 0100 	strd	r0, r1, [sp]
 800a034:	f7f6 fd78 	bl	8000b28 <__aeabi_dcmpgt>
 800a038:	2800      	cmp	r0, #0
 800a03a:	f040 8288 	bne.w	800a54e <_dtoa_r+0x92e>
 800a03e:	462a      	mov	r2, r5
 800a040:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a044:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a048:	f7f6 fd50 	bl	8000aec <__aeabi_dcmplt>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	f040 827c 	bne.w	800a54a <_dtoa_r+0x92a>
 800a052:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a056:	e9cd 2300 	strd	r2, r3, [sp]
 800a05a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f2c0 8150 	blt.w	800a302 <_dtoa_r+0x6e2>
 800a062:	f1ba 0f0e 	cmp.w	sl, #14
 800a066:	f300 814c 	bgt.w	800a302 <_dtoa_r+0x6e2>
 800a06a:	4b6a      	ldr	r3, [pc, #424]	; (800a214 <_dtoa_r+0x5f4>)
 800a06c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a070:	ed93 7b00 	vldr	d7, [r3]
 800a074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a076:	2b00      	cmp	r3, #0
 800a078:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a07c:	f280 80d8 	bge.w	800a230 <_dtoa_r+0x610>
 800a080:	f1b9 0f00 	cmp.w	r9, #0
 800a084:	f300 80d4 	bgt.w	800a230 <_dtoa_r+0x610>
 800a088:	f040 825e 	bne.w	800a548 <_dtoa_r+0x928>
 800a08c:	2200      	movs	r2, #0
 800a08e:	4b66      	ldr	r3, [pc, #408]	; (800a228 <_dtoa_r+0x608>)
 800a090:	ec51 0b17 	vmov	r0, r1, d7
 800a094:	f7f6 fab8 	bl	8000608 <__aeabi_dmul>
 800a098:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a09c:	f7f6 fd3a 	bl	8000b14 <__aeabi_dcmpge>
 800a0a0:	464f      	mov	r7, r9
 800a0a2:	464e      	mov	r6, r9
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f040 8234 	bne.w	800a512 <_dtoa_r+0x8f2>
 800a0aa:	2331      	movs	r3, #49	; 0x31
 800a0ac:	f10b 0501 	add.w	r5, fp, #1
 800a0b0:	f88b 3000 	strb.w	r3, [fp]
 800a0b4:	f10a 0a01 	add.w	sl, sl, #1
 800a0b8:	e22f      	b.n	800a51a <_dtoa_r+0x8fa>
 800a0ba:	07f2      	lsls	r2, r6, #31
 800a0bc:	d505      	bpl.n	800a0ca <_dtoa_r+0x4aa>
 800a0be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c2:	f7f6 faa1 	bl	8000608 <__aeabi_dmul>
 800a0c6:	3501      	adds	r5, #1
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	1076      	asrs	r6, r6, #1
 800a0cc:	3708      	adds	r7, #8
 800a0ce:	e772      	b.n	8009fb6 <_dtoa_r+0x396>
 800a0d0:	2502      	movs	r5, #2
 800a0d2:	e774      	b.n	8009fbe <_dtoa_r+0x39e>
 800a0d4:	f8cd a020 	str.w	sl, [sp, #32]
 800a0d8:	464f      	mov	r7, r9
 800a0da:	e791      	b.n	800a000 <_dtoa_r+0x3e0>
 800a0dc:	4b4d      	ldr	r3, [pc, #308]	; (800a214 <_dtoa_r+0x5f4>)
 800a0de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d047      	beq.n	800a17c <_dtoa_r+0x55c>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	494e      	ldr	r1, [pc, #312]	; (800a22c <_dtoa_r+0x60c>)
 800a0f4:	f7f6 fbb2 	bl	800085c <__aeabi_ddiv>
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4633      	mov	r3, r6
 800a0fc:	f7f6 f8cc 	bl	8000298 <__aeabi_dsub>
 800a100:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a104:	465d      	mov	r5, fp
 800a106:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a10a:	f7f6 fd2d 	bl	8000b68 <__aeabi_d2iz>
 800a10e:	4606      	mov	r6, r0
 800a110:	f7f6 fa10 	bl	8000534 <__aeabi_i2d>
 800a114:	4602      	mov	r2, r0
 800a116:	460b      	mov	r3, r1
 800a118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a11c:	f7f6 f8bc 	bl	8000298 <__aeabi_dsub>
 800a120:	3630      	adds	r6, #48	; 0x30
 800a122:	f805 6b01 	strb.w	r6, [r5], #1
 800a126:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a12a:	e9cd 0100 	strd	r0, r1, [sp]
 800a12e:	f7f6 fcdd 	bl	8000aec <__aeabi_dcmplt>
 800a132:	2800      	cmp	r0, #0
 800a134:	d163      	bne.n	800a1fe <_dtoa_r+0x5de>
 800a136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a13a:	2000      	movs	r0, #0
 800a13c:	4937      	ldr	r1, [pc, #220]	; (800a21c <_dtoa_r+0x5fc>)
 800a13e:	f7f6 f8ab 	bl	8000298 <__aeabi_dsub>
 800a142:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a146:	f7f6 fcd1 	bl	8000aec <__aeabi_dcmplt>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	f040 80b7 	bne.w	800a2be <_dtoa_r+0x69e>
 800a150:	eba5 030b 	sub.w	r3, r5, fp
 800a154:	429f      	cmp	r7, r3
 800a156:	f77f af7c 	ble.w	800a052 <_dtoa_r+0x432>
 800a15a:	2200      	movs	r2, #0
 800a15c:	4b30      	ldr	r3, [pc, #192]	; (800a220 <_dtoa_r+0x600>)
 800a15e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a162:	f7f6 fa51 	bl	8000608 <__aeabi_dmul>
 800a166:	2200      	movs	r2, #0
 800a168:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a16c:	4b2c      	ldr	r3, [pc, #176]	; (800a220 <_dtoa_r+0x600>)
 800a16e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a172:	f7f6 fa49 	bl	8000608 <__aeabi_dmul>
 800a176:	e9cd 0100 	strd	r0, r1, [sp]
 800a17a:	e7c4      	b.n	800a106 <_dtoa_r+0x4e6>
 800a17c:	462a      	mov	r2, r5
 800a17e:	4633      	mov	r3, r6
 800a180:	f7f6 fa42 	bl	8000608 <__aeabi_dmul>
 800a184:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a188:	eb0b 0507 	add.w	r5, fp, r7
 800a18c:	465e      	mov	r6, fp
 800a18e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a192:	f7f6 fce9 	bl	8000b68 <__aeabi_d2iz>
 800a196:	4607      	mov	r7, r0
 800a198:	f7f6 f9cc 	bl	8000534 <__aeabi_i2d>
 800a19c:	3730      	adds	r7, #48	; 0x30
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1a6:	f7f6 f877 	bl	8000298 <__aeabi_dsub>
 800a1aa:	f806 7b01 	strb.w	r7, [r6], #1
 800a1ae:	42ae      	cmp	r6, r5
 800a1b0:	e9cd 0100 	strd	r0, r1, [sp]
 800a1b4:	f04f 0200 	mov.w	r2, #0
 800a1b8:	d126      	bne.n	800a208 <_dtoa_r+0x5e8>
 800a1ba:	4b1c      	ldr	r3, [pc, #112]	; (800a22c <_dtoa_r+0x60c>)
 800a1bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1c0:	f7f6 f86c 	bl	800029c <__adddf3>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1cc:	f7f6 fcac 	bl	8000b28 <__aeabi_dcmpgt>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d174      	bne.n	800a2be <_dtoa_r+0x69e>
 800a1d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a1d8:	2000      	movs	r0, #0
 800a1da:	4914      	ldr	r1, [pc, #80]	; (800a22c <_dtoa_r+0x60c>)
 800a1dc:	f7f6 f85c 	bl	8000298 <__aeabi_dsub>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1e8:	f7f6 fc80 	bl	8000aec <__aeabi_dcmplt>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	f43f af30 	beq.w	800a052 <_dtoa_r+0x432>
 800a1f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1f6:	2b30      	cmp	r3, #48	; 0x30
 800a1f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a1fc:	d002      	beq.n	800a204 <_dtoa_r+0x5e4>
 800a1fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a202:	e04a      	b.n	800a29a <_dtoa_r+0x67a>
 800a204:	4615      	mov	r5, r2
 800a206:	e7f4      	b.n	800a1f2 <_dtoa_r+0x5d2>
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <_dtoa_r+0x600>)
 800a20a:	f7f6 f9fd 	bl	8000608 <__aeabi_dmul>
 800a20e:	e9cd 0100 	strd	r0, r1, [sp]
 800a212:	e7bc      	b.n	800a18e <_dtoa_r+0x56e>
 800a214:	0800d098 	.word	0x0800d098
 800a218:	0800d070 	.word	0x0800d070
 800a21c:	3ff00000 	.word	0x3ff00000
 800a220:	40240000 	.word	0x40240000
 800a224:	401c0000 	.word	0x401c0000
 800a228:	40140000 	.word	0x40140000
 800a22c:	3fe00000 	.word	0x3fe00000
 800a230:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a234:	465d      	mov	r5, fp
 800a236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a23a:	4630      	mov	r0, r6
 800a23c:	4639      	mov	r1, r7
 800a23e:	f7f6 fb0d 	bl	800085c <__aeabi_ddiv>
 800a242:	f7f6 fc91 	bl	8000b68 <__aeabi_d2iz>
 800a246:	4680      	mov	r8, r0
 800a248:	f7f6 f974 	bl	8000534 <__aeabi_i2d>
 800a24c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a250:	f7f6 f9da 	bl	8000608 <__aeabi_dmul>
 800a254:	4602      	mov	r2, r0
 800a256:	460b      	mov	r3, r1
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a260:	f7f6 f81a 	bl	8000298 <__aeabi_dsub>
 800a264:	f805 6b01 	strb.w	r6, [r5], #1
 800a268:	eba5 060b 	sub.w	r6, r5, fp
 800a26c:	45b1      	cmp	r9, r6
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	d139      	bne.n	800a2e8 <_dtoa_r+0x6c8>
 800a274:	f7f6 f812 	bl	800029c <__adddf3>
 800a278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a27c:	4606      	mov	r6, r0
 800a27e:	460f      	mov	r7, r1
 800a280:	f7f6 fc52 	bl	8000b28 <__aeabi_dcmpgt>
 800a284:	b9c8      	cbnz	r0, 800a2ba <_dtoa_r+0x69a>
 800a286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a28a:	4630      	mov	r0, r6
 800a28c:	4639      	mov	r1, r7
 800a28e:	f7f6 fc23 	bl	8000ad8 <__aeabi_dcmpeq>
 800a292:	b110      	cbz	r0, 800a29a <_dtoa_r+0x67a>
 800a294:	f018 0f01 	tst.w	r8, #1
 800a298:	d10f      	bne.n	800a2ba <_dtoa_r+0x69a>
 800a29a:	9904      	ldr	r1, [sp, #16]
 800a29c:	4620      	mov	r0, r4
 800a29e:	f000 fac1 	bl	800a824 <_Bfree>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2a6:	702b      	strb	r3, [r5, #0]
 800a2a8:	f10a 0301 	add.w	r3, sl, #1
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 8241 	beq.w	800a738 <_dtoa_r+0xb18>
 800a2b6:	601d      	str	r5, [r3, #0]
 800a2b8:	e23e      	b.n	800a738 <_dtoa_r+0xb18>
 800a2ba:	f8cd a020 	str.w	sl, [sp, #32]
 800a2be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a2c2:	2a39      	cmp	r2, #57	; 0x39
 800a2c4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800a2c8:	d108      	bne.n	800a2dc <_dtoa_r+0x6bc>
 800a2ca:	459b      	cmp	fp, r3
 800a2cc:	d10a      	bne.n	800a2e4 <_dtoa_r+0x6c4>
 800a2ce:	9b08      	ldr	r3, [sp, #32]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	9308      	str	r3, [sp, #32]
 800a2d4:	2330      	movs	r3, #48	; 0x30
 800a2d6:	f88b 3000 	strb.w	r3, [fp]
 800a2da:	465b      	mov	r3, fp
 800a2dc:	781a      	ldrb	r2, [r3, #0]
 800a2de:	3201      	adds	r2, #1
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	e78c      	b.n	800a1fe <_dtoa_r+0x5de>
 800a2e4:	461d      	mov	r5, r3
 800a2e6:	e7ea      	b.n	800a2be <_dtoa_r+0x69e>
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	4b9b      	ldr	r3, [pc, #620]	; (800a558 <_dtoa_r+0x938>)
 800a2ec:	f7f6 f98c 	bl	8000608 <__aeabi_dmul>
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	460f      	mov	r7, r1
 800a2f8:	f7f6 fbee 	bl	8000ad8 <__aeabi_dcmpeq>
 800a2fc:	2800      	cmp	r0, #0
 800a2fe:	d09a      	beq.n	800a236 <_dtoa_r+0x616>
 800a300:	e7cb      	b.n	800a29a <_dtoa_r+0x67a>
 800a302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a304:	2a00      	cmp	r2, #0
 800a306:	f000 808b 	beq.w	800a420 <_dtoa_r+0x800>
 800a30a:	9a06      	ldr	r2, [sp, #24]
 800a30c:	2a01      	cmp	r2, #1
 800a30e:	dc6e      	bgt.n	800a3ee <_dtoa_r+0x7ce>
 800a310:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a312:	2a00      	cmp	r2, #0
 800a314:	d067      	beq.n	800a3e6 <_dtoa_r+0x7c6>
 800a316:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a31a:	9f07      	ldr	r7, [sp, #28]
 800a31c:	9d05      	ldr	r5, [sp, #20]
 800a31e:	9a05      	ldr	r2, [sp, #20]
 800a320:	2101      	movs	r1, #1
 800a322:	441a      	add	r2, r3
 800a324:	4620      	mov	r0, r4
 800a326:	9205      	str	r2, [sp, #20]
 800a328:	4498      	add	r8, r3
 800a32a:	f000 fb1b 	bl	800a964 <__i2b>
 800a32e:	4606      	mov	r6, r0
 800a330:	2d00      	cmp	r5, #0
 800a332:	dd0c      	ble.n	800a34e <_dtoa_r+0x72e>
 800a334:	f1b8 0f00 	cmp.w	r8, #0
 800a338:	dd09      	ble.n	800a34e <_dtoa_r+0x72e>
 800a33a:	4545      	cmp	r5, r8
 800a33c:	9a05      	ldr	r2, [sp, #20]
 800a33e:	462b      	mov	r3, r5
 800a340:	bfa8      	it	ge
 800a342:	4643      	movge	r3, r8
 800a344:	1ad2      	subs	r2, r2, r3
 800a346:	9205      	str	r2, [sp, #20]
 800a348:	1aed      	subs	r5, r5, r3
 800a34a:	eba8 0803 	sub.w	r8, r8, r3
 800a34e:	9b07      	ldr	r3, [sp, #28]
 800a350:	b1eb      	cbz	r3, 800a38e <_dtoa_r+0x76e>
 800a352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a354:	2b00      	cmp	r3, #0
 800a356:	d067      	beq.n	800a428 <_dtoa_r+0x808>
 800a358:	b18f      	cbz	r7, 800a37e <_dtoa_r+0x75e>
 800a35a:	4631      	mov	r1, r6
 800a35c:	463a      	mov	r2, r7
 800a35e:	4620      	mov	r0, r4
 800a360:	f000 fba0 	bl	800aaa4 <__pow5mult>
 800a364:	9a04      	ldr	r2, [sp, #16]
 800a366:	4601      	mov	r1, r0
 800a368:	4606      	mov	r6, r0
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 fb03 	bl	800a976 <__multiply>
 800a370:	9904      	ldr	r1, [sp, #16]
 800a372:	9008      	str	r0, [sp, #32]
 800a374:	4620      	mov	r0, r4
 800a376:	f000 fa55 	bl	800a824 <_Bfree>
 800a37a:	9b08      	ldr	r3, [sp, #32]
 800a37c:	9304      	str	r3, [sp, #16]
 800a37e:	9b07      	ldr	r3, [sp, #28]
 800a380:	1bda      	subs	r2, r3, r7
 800a382:	d004      	beq.n	800a38e <_dtoa_r+0x76e>
 800a384:	9904      	ldr	r1, [sp, #16]
 800a386:	4620      	mov	r0, r4
 800a388:	f000 fb8c 	bl	800aaa4 <__pow5mult>
 800a38c:	9004      	str	r0, [sp, #16]
 800a38e:	2101      	movs	r1, #1
 800a390:	4620      	mov	r0, r4
 800a392:	f000 fae7 	bl	800a964 <__i2b>
 800a396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a398:	4607      	mov	r7, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 81d0 	beq.w	800a740 <_dtoa_r+0xb20>
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	4601      	mov	r1, r0
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	f000 fb7d 	bl	800aaa4 <__pow5mult>
 800a3aa:	9b06      	ldr	r3, [sp, #24]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	dc40      	bgt.n	800a434 <_dtoa_r+0x814>
 800a3b2:	9b00      	ldr	r3, [sp, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d139      	bne.n	800a42c <_dtoa_r+0x80c>
 800a3b8:	9b01      	ldr	r3, [sp, #4]
 800a3ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d136      	bne.n	800a430 <_dtoa_r+0x810>
 800a3c2:	9b01      	ldr	r3, [sp, #4]
 800a3c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3c8:	0d1b      	lsrs	r3, r3, #20
 800a3ca:	051b      	lsls	r3, r3, #20
 800a3cc:	b12b      	cbz	r3, 800a3da <_dtoa_r+0x7ba>
 800a3ce:	9b05      	ldr	r3, [sp, #20]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	9305      	str	r3, [sp, #20]
 800a3d4:	f108 0801 	add.w	r8, r8, #1
 800a3d8:	2301      	movs	r3, #1
 800a3da:	9307      	str	r3, [sp, #28]
 800a3dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d12a      	bne.n	800a438 <_dtoa_r+0x818>
 800a3e2:	2001      	movs	r0, #1
 800a3e4:	e030      	b.n	800a448 <_dtoa_r+0x828>
 800a3e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a3ec:	e795      	b.n	800a31a <_dtoa_r+0x6fa>
 800a3ee:	9b07      	ldr	r3, [sp, #28]
 800a3f0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800a3f4:	42bb      	cmp	r3, r7
 800a3f6:	bfbf      	itttt	lt
 800a3f8:	9b07      	ldrlt	r3, [sp, #28]
 800a3fa:	9707      	strlt	r7, [sp, #28]
 800a3fc:	1afa      	sublt	r2, r7, r3
 800a3fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a400:	bfbb      	ittet	lt
 800a402:	189b      	addlt	r3, r3, r2
 800a404:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a406:	1bdf      	subge	r7, r3, r7
 800a408:	2700      	movlt	r7, #0
 800a40a:	f1b9 0f00 	cmp.w	r9, #0
 800a40e:	bfb5      	itete	lt
 800a410:	9b05      	ldrlt	r3, [sp, #20]
 800a412:	9d05      	ldrge	r5, [sp, #20]
 800a414:	eba3 0509 	sublt.w	r5, r3, r9
 800a418:	464b      	movge	r3, r9
 800a41a:	bfb8      	it	lt
 800a41c:	2300      	movlt	r3, #0
 800a41e:	e77e      	b.n	800a31e <_dtoa_r+0x6fe>
 800a420:	9f07      	ldr	r7, [sp, #28]
 800a422:	9d05      	ldr	r5, [sp, #20]
 800a424:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a426:	e783      	b.n	800a330 <_dtoa_r+0x710>
 800a428:	9a07      	ldr	r2, [sp, #28]
 800a42a:	e7ab      	b.n	800a384 <_dtoa_r+0x764>
 800a42c:	2300      	movs	r3, #0
 800a42e:	e7d4      	b.n	800a3da <_dtoa_r+0x7ba>
 800a430:	9b00      	ldr	r3, [sp, #0]
 800a432:	e7d2      	b.n	800a3da <_dtoa_r+0x7ba>
 800a434:	2300      	movs	r3, #0
 800a436:	9307      	str	r3, [sp, #28]
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a43e:	6918      	ldr	r0, [r3, #16]
 800a440:	f000 fa42 	bl	800a8c8 <__hi0bits>
 800a444:	f1c0 0020 	rsb	r0, r0, #32
 800a448:	4440      	add	r0, r8
 800a44a:	f010 001f 	ands.w	r0, r0, #31
 800a44e:	d047      	beq.n	800a4e0 <_dtoa_r+0x8c0>
 800a450:	f1c0 0320 	rsb	r3, r0, #32
 800a454:	2b04      	cmp	r3, #4
 800a456:	dd3b      	ble.n	800a4d0 <_dtoa_r+0x8b0>
 800a458:	9b05      	ldr	r3, [sp, #20]
 800a45a:	f1c0 001c 	rsb	r0, r0, #28
 800a45e:	4403      	add	r3, r0
 800a460:	9305      	str	r3, [sp, #20]
 800a462:	4405      	add	r5, r0
 800a464:	4480      	add	r8, r0
 800a466:	9b05      	ldr	r3, [sp, #20]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dd05      	ble.n	800a478 <_dtoa_r+0x858>
 800a46c:	461a      	mov	r2, r3
 800a46e:	9904      	ldr	r1, [sp, #16]
 800a470:	4620      	mov	r0, r4
 800a472:	f000 fb65 	bl	800ab40 <__lshift>
 800a476:	9004      	str	r0, [sp, #16]
 800a478:	f1b8 0f00 	cmp.w	r8, #0
 800a47c:	dd05      	ble.n	800a48a <_dtoa_r+0x86a>
 800a47e:	4639      	mov	r1, r7
 800a480:	4642      	mov	r2, r8
 800a482:	4620      	mov	r0, r4
 800a484:	f000 fb5c 	bl	800ab40 <__lshift>
 800a488:	4607      	mov	r7, r0
 800a48a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a48c:	b353      	cbz	r3, 800a4e4 <_dtoa_r+0x8c4>
 800a48e:	4639      	mov	r1, r7
 800a490:	9804      	ldr	r0, [sp, #16]
 800a492:	f000 fba9 	bl	800abe8 <__mcmp>
 800a496:	2800      	cmp	r0, #0
 800a498:	da24      	bge.n	800a4e4 <_dtoa_r+0x8c4>
 800a49a:	2300      	movs	r3, #0
 800a49c:	220a      	movs	r2, #10
 800a49e:	9904      	ldr	r1, [sp, #16]
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f000 f9d6 	bl	800a852 <__multadd>
 800a4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4a8:	9004      	str	r0, [sp, #16]
 800a4aa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f000 814d 	beq.w	800a74e <_dtoa_r+0xb2e>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	220a      	movs	r2, #10
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	f000 f9c9 	bl	800a852 <__multadd>
 800a4c0:	9b02      	ldr	r3, [sp, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	4606      	mov	r6, r0
 800a4c6:	dc4f      	bgt.n	800a568 <_dtoa_r+0x948>
 800a4c8:	9b06      	ldr	r3, [sp, #24]
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	dd4c      	ble.n	800a568 <_dtoa_r+0x948>
 800a4ce:	e011      	b.n	800a4f4 <_dtoa_r+0x8d4>
 800a4d0:	d0c9      	beq.n	800a466 <_dtoa_r+0x846>
 800a4d2:	9a05      	ldr	r2, [sp, #20]
 800a4d4:	331c      	adds	r3, #28
 800a4d6:	441a      	add	r2, r3
 800a4d8:	9205      	str	r2, [sp, #20]
 800a4da:	441d      	add	r5, r3
 800a4dc:	4498      	add	r8, r3
 800a4de:	e7c2      	b.n	800a466 <_dtoa_r+0x846>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	e7f6      	b.n	800a4d2 <_dtoa_r+0x8b2>
 800a4e4:	f1b9 0f00 	cmp.w	r9, #0
 800a4e8:	dc38      	bgt.n	800a55c <_dtoa_r+0x93c>
 800a4ea:	9b06      	ldr	r3, [sp, #24]
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	dd35      	ble.n	800a55c <_dtoa_r+0x93c>
 800a4f0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a4f4:	9b02      	ldr	r3, [sp, #8]
 800a4f6:	b963      	cbnz	r3, 800a512 <_dtoa_r+0x8f2>
 800a4f8:	4639      	mov	r1, r7
 800a4fa:	2205      	movs	r2, #5
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 f9a8 	bl	800a852 <__multadd>
 800a502:	4601      	mov	r1, r0
 800a504:	4607      	mov	r7, r0
 800a506:	9804      	ldr	r0, [sp, #16]
 800a508:	f000 fb6e 	bl	800abe8 <__mcmp>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	f73f adcc 	bgt.w	800a0aa <_dtoa_r+0x48a>
 800a512:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a514:	465d      	mov	r5, fp
 800a516:	ea6f 0a03 	mvn.w	sl, r3
 800a51a:	f04f 0900 	mov.w	r9, #0
 800a51e:	4639      	mov	r1, r7
 800a520:	4620      	mov	r0, r4
 800a522:	f000 f97f 	bl	800a824 <_Bfree>
 800a526:	2e00      	cmp	r6, #0
 800a528:	f43f aeb7 	beq.w	800a29a <_dtoa_r+0x67a>
 800a52c:	f1b9 0f00 	cmp.w	r9, #0
 800a530:	d005      	beq.n	800a53e <_dtoa_r+0x91e>
 800a532:	45b1      	cmp	r9, r6
 800a534:	d003      	beq.n	800a53e <_dtoa_r+0x91e>
 800a536:	4649      	mov	r1, r9
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 f973 	bl	800a824 <_Bfree>
 800a53e:	4631      	mov	r1, r6
 800a540:	4620      	mov	r0, r4
 800a542:	f000 f96f 	bl	800a824 <_Bfree>
 800a546:	e6a8      	b.n	800a29a <_dtoa_r+0x67a>
 800a548:	2700      	movs	r7, #0
 800a54a:	463e      	mov	r6, r7
 800a54c:	e7e1      	b.n	800a512 <_dtoa_r+0x8f2>
 800a54e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a552:	463e      	mov	r6, r7
 800a554:	e5a9      	b.n	800a0aa <_dtoa_r+0x48a>
 800a556:	bf00      	nop
 800a558:	40240000 	.word	0x40240000
 800a55c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a55e:	f8cd 9008 	str.w	r9, [sp, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 80fa 	beq.w	800a75c <_dtoa_r+0xb3c>
 800a568:	2d00      	cmp	r5, #0
 800a56a:	dd05      	ble.n	800a578 <_dtoa_r+0x958>
 800a56c:	4631      	mov	r1, r6
 800a56e:	462a      	mov	r2, r5
 800a570:	4620      	mov	r0, r4
 800a572:	f000 fae5 	bl	800ab40 <__lshift>
 800a576:	4606      	mov	r6, r0
 800a578:	9b07      	ldr	r3, [sp, #28]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d04c      	beq.n	800a618 <_dtoa_r+0x9f8>
 800a57e:	6871      	ldr	r1, [r6, #4]
 800a580:	4620      	mov	r0, r4
 800a582:	f000 f91b 	bl	800a7bc <_Balloc>
 800a586:	6932      	ldr	r2, [r6, #16]
 800a588:	3202      	adds	r2, #2
 800a58a:	4605      	mov	r5, r0
 800a58c:	0092      	lsls	r2, r2, #2
 800a58e:	f106 010c 	add.w	r1, r6, #12
 800a592:	300c      	adds	r0, #12
 800a594:	f7fe fe26 	bl	80091e4 <memcpy>
 800a598:	2201      	movs	r2, #1
 800a59a:	4629      	mov	r1, r5
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 facf 	bl	800ab40 <__lshift>
 800a5a2:	9b00      	ldr	r3, [sp, #0]
 800a5a4:	f8cd b014 	str.w	fp, [sp, #20]
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	46b1      	mov	r9, r6
 800a5ae:	9307      	str	r3, [sp, #28]
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	9804      	ldr	r0, [sp, #16]
 800a5b6:	f7ff faa5 	bl	8009b04 <quorem>
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4605      	mov	r5, r0
 800a5be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a5c2:	9804      	ldr	r0, [sp, #16]
 800a5c4:	f000 fb10 	bl	800abe8 <__mcmp>
 800a5c8:	4632      	mov	r2, r6
 800a5ca:	9000      	str	r0, [sp, #0]
 800a5cc:	4639      	mov	r1, r7
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 fb24 	bl	800ac1c <__mdiff>
 800a5d4:	68c3      	ldr	r3, [r0, #12]
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	bb03      	cbnz	r3, 800a61c <_dtoa_r+0x9fc>
 800a5da:	4601      	mov	r1, r0
 800a5dc:	9008      	str	r0, [sp, #32]
 800a5de:	9804      	ldr	r0, [sp, #16]
 800a5e0:	f000 fb02 	bl	800abe8 <__mcmp>
 800a5e4:	9a08      	ldr	r2, [sp, #32]
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	9308      	str	r3, [sp, #32]
 800a5ee:	f000 f919 	bl	800a824 <_Bfree>
 800a5f2:	9b08      	ldr	r3, [sp, #32]
 800a5f4:	b9a3      	cbnz	r3, 800a620 <_dtoa_r+0xa00>
 800a5f6:	9a06      	ldr	r2, [sp, #24]
 800a5f8:	b992      	cbnz	r2, 800a620 <_dtoa_r+0xa00>
 800a5fa:	9a07      	ldr	r2, [sp, #28]
 800a5fc:	b982      	cbnz	r2, 800a620 <_dtoa_r+0xa00>
 800a5fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a602:	d029      	beq.n	800a658 <_dtoa_r+0xa38>
 800a604:	9b00      	ldr	r3, [sp, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	dd01      	ble.n	800a60e <_dtoa_r+0x9ee>
 800a60a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a60e:	9b05      	ldr	r3, [sp, #20]
 800a610:	1c5d      	adds	r5, r3, #1
 800a612:	f883 8000 	strb.w	r8, [r3]
 800a616:	e782      	b.n	800a51e <_dtoa_r+0x8fe>
 800a618:	4630      	mov	r0, r6
 800a61a:	e7c2      	b.n	800a5a2 <_dtoa_r+0x982>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e7e3      	b.n	800a5e8 <_dtoa_r+0x9c8>
 800a620:	9a00      	ldr	r2, [sp, #0]
 800a622:	2a00      	cmp	r2, #0
 800a624:	db04      	blt.n	800a630 <_dtoa_r+0xa10>
 800a626:	d125      	bne.n	800a674 <_dtoa_r+0xa54>
 800a628:	9a06      	ldr	r2, [sp, #24]
 800a62a:	bb1a      	cbnz	r2, 800a674 <_dtoa_r+0xa54>
 800a62c:	9a07      	ldr	r2, [sp, #28]
 800a62e:	bb0a      	cbnz	r2, 800a674 <_dtoa_r+0xa54>
 800a630:	2b00      	cmp	r3, #0
 800a632:	ddec      	ble.n	800a60e <_dtoa_r+0x9ee>
 800a634:	2201      	movs	r2, #1
 800a636:	9904      	ldr	r1, [sp, #16]
 800a638:	4620      	mov	r0, r4
 800a63a:	f000 fa81 	bl	800ab40 <__lshift>
 800a63e:	4639      	mov	r1, r7
 800a640:	9004      	str	r0, [sp, #16]
 800a642:	f000 fad1 	bl	800abe8 <__mcmp>
 800a646:	2800      	cmp	r0, #0
 800a648:	dc03      	bgt.n	800a652 <_dtoa_r+0xa32>
 800a64a:	d1e0      	bne.n	800a60e <_dtoa_r+0x9ee>
 800a64c:	f018 0f01 	tst.w	r8, #1
 800a650:	d0dd      	beq.n	800a60e <_dtoa_r+0x9ee>
 800a652:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a656:	d1d8      	bne.n	800a60a <_dtoa_r+0x9ea>
 800a658:	9b05      	ldr	r3, [sp, #20]
 800a65a:	9a05      	ldr	r2, [sp, #20]
 800a65c:	1c5d      	adds	r5, r3, #1
 800a65e:	2339      	movs	r3, #57	; 0x39
 800a660:	7013      	strb	r3, [r2, #0]
 800a662:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a666:	2b39      	cmp	r3, #57	; 0x39
 800a668:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a66c:	d04f      	beq.n	800a70e <_dtoa_r+0xaee>
 800a66e:	3301      	adds	r3, #1
 800a670:	7013      	strb	r3, [r2, #0]
 800a672:	e754      	b.n	800a51e <_dtoa_r+0x8fe>
 800a674:	9a05      	ldr	r2, [sp, #20]
 800a676:	2b00      	cmp	r3, #0
 800a678:	f102 0501 	add.w	r5, r2, #1
 800a67c:	dd06      	ble.n	800a68c <_dtoa_r+0xa6c>
 800a67e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a682:	d0e9      	beq.n	800a658 <_dtoa_r+0xa38>
 800a684:	f108 0801 	add.w	r8, r8, #1
 800a688:	9b05      	ldr	r3, [sp, #20]
 800a68a:	e7c2      	b.n	800a612 <_dtoa_r+0x9f2>
 800a68c:	9a02      	ldr	r2, [sp, #8]
 800a68e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a692:	eba5 030b 	sub.w	r3, r5, fp
 800a696:	4293      	cmp	r3, r2
 800a698:	d021      	beq.n	800a6de <_dtoa_r+0xabe>
 800a69a:	2300      	movs	r3, #0
 800a69c:	220a      	movs	r2, #10
 800a69e:	9904      	ldr	r1, [sp, #16]
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 f8d6 	bl	800a852 <__multadd>
 800a6a6:	45b1      	cmp	r9, r6
 800a6a8:	9004      	str	r0, [sp, #16]
 800a6aa:	f04f 0300 	mov.w	r3, #0
 800a6ae:	f04f 020a 	mov.w	r2, #10
 800a6b2:	4649      	mov	r1, r9
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	d105      	bne.n	800a6c4 <_dtoa_r+0xaa4>
 800a6b8:	f000 f8cb 	bl	800a852 <__multadd>
 800a6bc:	4681      	mov	r9, r0
 800a6be:	4606      	mov	r6, r0
 800a6c0:	9505      	str	r5, [sp, #20]
 800a6c2:	e776      	b.n	800a5b2 <_dtoa_r+0x992>
 800a6c4:	f000 f8c5 	bl	800a852 <__multadd>
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	4681      	mov	r9, r0
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	220a      	movs	r2, #10
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 f8be 	bl	800a852 <__multadd>
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	e7f2      	b.n	800a6c0 <_dtoa_r+0xaa0>
 800a6da:	f04f 0900 	mov.w	r9, #0
 800a6de:	2201      	movs	r2, #1
 800a6e0:	9904      	ldr	r1, [sp, #16]
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f000 fa2c 	bl	800ab40 <__lshift>
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	9004      	str	r0, [sp, #16]
 800a6ec:	f000 fa7c 	bl	800abe8 <__mcmp>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	dcb6      	bgt.n	800a662 <_dtoa_r+0xa42>
 800a6f4:	d102      	bne.n	800a6fc <_dtoa_r+0xadc>
 800a6f6:	f018 0f01 	tst.w	r8, #1
 800a6fa:	d1b2      	bne.n	800a662 <_dtoa_r+0xa42>
 800a6fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a700:	2b30      	cmp	r3, #48	; 0x30
 800a702:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a706:	f47f af0a 	bne.w	800a51e <_dtoa_r+0x8fe>
 800a70a:	4615      	mov	r5, r2
 800a70c:	e7f6      	b.n	800a6fc <_dtoa_r+0xadc>
 800a70e:	4593      	cmp	fp, r2
 800a710:	d105      	bne.n	800a71e <_dtoa_r+0xafe>
 800a712:	2331      	movs	r3, #49	; 0x31
 800a714:	f10a 0a01 	add.w	sl, sl, #1
 800a718:	f88b 3000 	strb.w	r3, [fp]
 800a71c:	e6ff      	b.n	800a51e <_dtoa_r+0x8fe>
 800a71e:	4615      	mov	r5, r2
 800a720:	e79f      	b.n	800a662 <_dtoa_r+0xa42>
 800a722:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a788 <_dtoa_r+0xb68>
 800a726:	e007      	b.n	800a738 <_dtoa_r+0xb18>
 800a728:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a72a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a78c <_dtoa_r+0xb6c>
 800a72e:	b11b      	cbz	r3, 800a738 <_dtoa_r+0xb18>
 800a730:	f10b 0308 	add.w	r3, fp, #8
 800a734:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	4658      	mov	r0, fp
 800a73a:	b017      	add	sp, #92	; 0x5c
 800a73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a740:	9b06      	ldr	r3, [sp, #24]
 800a742:	2b01      	cmp	r3, #1
 800a744:	f77f ae35 	ble.w	800a3b2 <_dtoa_r+0x792>
 800a748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a74a:	9307      	str	r3, [sp, #28]
 800a74c:	e649      	b.n	800a3e2 <_dtoa_r+0x7c2>
 800a74e:	9b02      	ldr	r3, [sp, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	dc03      	bgt.n	800a75c <_dtoa_r+0xb3c>
 800a754:	9b06      	ldr	r3, [sp, #24]
 800a756:	2b02      	cmp	r3, #2
 800a758:	f73f aecc 	bgt.w	800a4f4 <_dtoa_r+0x8d4>
 800a75c:	465d      	mov	r5, fp
 800a75e:	4639      	mov	r1, r7
 800a760:	9804      	ldr	r0, [sp, #16]
 800a762:	f7ff f9cf 	bl	8009b04 <quorem>
 800a766:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a76a:	f805 8b01 	strb.w	r8, [r5], #1
 800a76e:	9a02      	ldr	r2, [sp, #8]
 800a770:	eba5 030b 	sub.w	r3, r5, fp
 800a774:	429a      	cmp	r2, r3
 800a776:	ddb0      	ble.n	800a6da <_dtoa_r+0xaba>
 800a778:	2300      	movs	r3, #0
 800a77a:	220a      	movs	r2, #10
 800a77c:	9904      	ldr	r1, [sp, #16]
 800a77e:	4620      	mov	r0, r4
 800a780:	f000 f867 	bl	800a852 <__multadd>
 800a784:	9004      	str	r0, [sp, #16]
 800a786:	e7ea      	b.n	800a75e <_dtoa_r+0xb3e>
 800a788:	0800d03c 	.word	0x0800d03c
 800a78c:	0800d060 	.word	0x0800d060

0800a790 <_localeconv_r>:
 800a790:	4b04      	ldr	r3, [pc, #16]	; (800a7a4 <_localeconv_r+0x14>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	6a18      	ldr	r0, [r3, #32]
 800a796:	4b04      	ldr	r3, [pc, #16]	; (800a7a8 <_localeconv_r+0x18>)
 800a798:	2800      	cmp	r0, #0
 800a79a:	bf08      	it	eq
 800a79c:	4618      	moveq	r0, r3
 800a79e:	30f0      	adds	r0, #240	; 0xf0
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	20000010 	.word	0x20000010
 800a7a8:	20000074 	.word	0x20000074

0800a7ac <malloc>:
 800a7ac:	4b02      	ldr	r3, [pc, #8]	; (800a7b8 <malloc+0xc>)
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	6818      	ldr	r0, [r3, #0]
 800a7b2:	f000 bb3b 	b.w	800ae2c <_malloc_r>
 800a7b6:	bf00      	nop
 800a7b8:	20000010 	.word	0x20000010

0800a7bc <_Balloc>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	460e      	mov	r6, r1
 800a7c4:	b93d      	cbnz	r5, 800a7d6 <_Balloc+0x1a>
 800a7c6:	2010      	movs	r0, #16
 800a7c8:	f7ff fff0 	bl	800a7ac <malloc>
 800a7cc:	6260      	str	r0, [r4, #36]	; 0x24
 800a7ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7d2:	6005      	str	r5, [r0, #0]
 800a7d4:	60c5      	str	r5, [r0, #12]
 800a7d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a7d8:	68eb      	ldr	r3, [r5, #12]
 800a7da:	b183      	cbz	r3, 800a7fe <_Balloc+0x42>
 800a7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a7e4:	b9b8      	cbnz	r0, 800a816 <_Balloc+0x5a>
 800a7e6:	2101      	movs	r1, #1
 800a7e8:	fa01 f506 	lsl.w	r5, r1, r6
 800a7ec:	1d6a      	adds	r2, r5, #5
 800a7ee:	0092      	lsls	r2, r2, #2
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 fabf 	bl	800ad74 <_calloc_r>
 800a7f6:	b160      	cbz	r0, 800a812 <_Balloc+0x56>
 800a7f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a7fc:	e00e      	b.n	800a81c <_Balloc+0x60>
 800a7fe:	2221      	movs	r2, #33	; 0x21
 800a800:	2104      	movs	r1, #4
 800a802:	4620      	mov	r0, r4
 800a804:	f000 fab6 	bl	800ad74 <_calloc_r>
 800a808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a80a:	60e8      	str	r0, [r5, #12]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e4      	bne.n	800a7dc <_Balloc+0x20>
 800a812:	2000      	movs	r0, #0
 800a814:	bd70      	pop	{r4, r5, r6, pc}
 800a816:	6802      	ldr	r2, [r0, #0]
 800a818:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a81c:	2300      	movs	r3, #0
 800a81e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a822:	e7f7      	b.n	800a814 <_Balloc+0x58>

0800a824 <_Bfree>:
 800a824:	b570      	push	{r4, r5, r6, lr}
 800a826:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a828:	4606      	mov	r6, r0
 800a82a:	460d      	mov	r5, r1
 800a82c:	b93c      	cbnz	r4, 800a83e <_Bfree+0x1a>
 800a82e:	2010      	movs	r0, #16
 800a830:	f7ff ffbc 	bl	800a7ac <malloc>
 800a834:	6270      	str	r0, [r6, #36]	; 0x24
 800a836:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a83a:	6004      	str	r4, [r0, #0]
 800a83c:	60c4      	str	r4, [r0, #12]
 800a83e:	b13d      	cbz	r5, 800a850 <_Bfree+0x2c>
 800a840:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a842:	686a      	ldr	r2, [r5, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a84a:	6029      	str	r1, [r5, #0]
 800a84c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a850:	bd70      	pop	{r4, r5, r6, pc}

0800a852 <__multadd>:
 800a852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a856:	690d      	ldr	r5, [r1, #16]
 800a858:	461f      	mov	r7, r3
 800a85a:	4606      	mov	r6, r0
 800a85c:	460c      	mov	r4, r1
 800a85e:	f101 0c14 	add.w	ip, r1, #20
 800a862:	2300      	movs	r3, #0
 800a864:	f8dc 0000 	ldr.w	r0, [ip]
 800a868:	b281      	uxth	r1, r0
 800a86a:	fb02 7101 	mla	r1, r2, r1, r7
 800a86e:	0c0f      	lsrs	r7, r1, #16
 800a870:	0c00      	lsrs	r0, r0, #16
 800a872:	fb02 7000 	mla	r0, r2, r0, r7
 800a876:	b289      	uxth	r1, r1
 800a878:	3301      	adds	r3, #1
 800a87a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a87e:	429d      	cmp	r5, r3
 800a880:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a884:	f84c 1b04 	str.w	r1, [ip], #4
 800a888:	dcec      	bgt.n	800a864 <__multadd+0x12>
 800a88a:	b1d7      	cbz	r7, 800a8c2 <__multadd+0x70>
 800a88c:	68a3      	ldr	r3, [r4, #8]
 800a88e:	42ab      	cmp	r3, r5
 800a890:	dc12      	bgt.n	800a8b8 <__multadd+0x66>
 800a892:	6861      	ldr	r1, [r4, #4]
 800a894:	4630      	mov	r0, r6
 800a896:	3101      	adds	r1, #1
 800a898:	f7ff ff90 	bl	800a7bc <_Balloc>
 800a89c:	6922      	ldr	r2, [r4, #16]
 800a89e:	3202      	adds	r2, #2
 800a8a0:	f104 010c 	add.w	r1, r4, #12
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	0092      	lsls	r2, r2, #2
 800a8a8:	300c      	adds	r0, #12
 800a8aa:	f7fe fc9b 	bl	80091e4 <memcpy>
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	4630      	mov	r0, r6
 800a8b2:	f7ff ffb7 	bl	800a824 <_Bfree>
 800a8b6:	4644      	mov	r4, r8
 800a8b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8bc:	3501      	adds	r5, #1
 800a8be:	615f      	str	r7, [r3, #20]
 800a8c0:	6125      	str	r5, [r4, #16]
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a8c8 <__hi0bits>:
 800a8c8:	0c02      	lsrs	r2, r0, #16
 800a8ca:	0412      	lsls	r2, r2, #16
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	b9b2      	cbnz	r2, 800a8fe <__hi0bits+0x36>
 800a8d0:	0403      	lsls	r3, r0, #16
 800a8d2:	2010      	movs	r0, #16
 800a8d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a8d8:	bf04      	itt	eq
 800a8da:	021b      	lsleq	r3, r3, #8
 800a8dc:	3008      	addeq	r0, #8
 800a8de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a8e2:	bf04      	itt	eq
 800a8e4:	011b      	lsleq	r3, r3, #4
 800a8e6:	3004      	addeq	r0, #4
 800a8e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a8ec:	bf04      	itt	eq
 800a8ee:	009b      	lsleq	r3, r3, #2
 800a8f0:	3002      	addeq	r0, #2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	db06      	blt.n	800a904 <__hi0bits+0x3c>
 800a8f6:	005b      	lsls	r3, r3, #1
 800a8f8:	d503      	bpl.n	800a902 <__hi0bits+0x3a>
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	4770      	bx	lr
 800a8fe:	2000      	movs	r0, #0
 800a900:	e7e8      	b.n	800a8d4 <__hi0bits+0xc>
 800a902:	2020      	movs	r0, #32
 800a904:	4770      	bx	lr

0800a906 <__lo0bits>:
 800a906:	6803      	ldr	r3, [r0, #0]
 800a908:	f013 0207 	ands.w	r2, r3, #7
 800a90c:	4601      	mov	r1, r0
 800a90e:	d00b      	beq.n	800a928 <__lo0bits+0x22>
 800a910:	07da      	lsls	r2, r3, #31
 800a912:	d423      	bmi.n	800a95c <__lo0bits+0x56>
 800a914:	0798      	lsls	r0, r3, #30
 800a916:	bf49      	itett	mi
 800a918:	085b      	lsrmi	r3, r3, #1
 800a91a:	089b      	lsrpl	r3, r3, #2
 800a91c:	2001      	movmi	r0, #1
 800a91e:	600b      	strmi	r3, [r1, #0]
 800a920:	bf5c      	itt	pl
 800a922:	600b      	strpl	r3, [r1, #0]
 800a924:	2002      	movpl	r0, #2
 800a926:	4770      	bx	lr
 800a928:	b298      	uxth	r0, r3
 800a92a:	b9a8      	cbnz	r0, 800a958 <__lo0bits+0x52>
 800a92c:	0c1b      	lsrs	r3, r3, #16
 800a92e:	2010      	movs	r0, #16
 800a930:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a934:	bf04      	itt	eq
 800a936:	0a1b      	lsreq	r3, r3, #8
 800a938:	3008      	addeq	r0, #8
 800a93a:	071a      	lsls	r2, r3, #28
 800a93c:	bf04      	itt	eq
 800a93e:	091b      	lsreq	r3, r3, #4
 800a940:	3004      	addeq	r0, #4
 800a942:	079a      	lsls	r2, r3, #30
 800a944:	bf04      	itt	eq
 800a946:	089b      	lsreq	r3, r3, #2
 800a948:	3002      	addeq	r0, #2
 800a94a:	07da      	lsls	r2, r3, #31
 800a94c:	d402      	bmi.n	800a954 <__lo0bits+0x4e>
 800a94e:	085b      	lsrs	r3, r3, #1
 800a950:	d006      	beq.n	800a960 <__lo0bits+0x5a>
 800a952:	3001      	adds	r0, #1
 800a954:	600b      	str	r3, [r1, #0]
 800a956:	4770      	bx	lr
 800a958:	4610      	mov	r0, r2
 800a95a:	e7e9      	b.n	800a930 <__lo0bits+0x2a>
 800a95c:	2000      	movs	r0, #0
 800a95e:	4770      	bx	lr
 800a960:	2020      	movs	r0, #32
 800a962:	4770      	bx	lr

0800a964 <__i2b>:
 800a964:	b510      	push	{r4, lr}
 800a966:	460c      	mov	r4, r1
 800a968:	2101      	movs	r1, #1
 800a96a:	f7ff ff27 	bl	800a7bc <_Balloc>
 800a96e:	2201      	movs	r2, #1
 800a970:	6144      	str	r4, [r0, #20]
 800a972:	6102      	str	r2, [r0, #16]
 800a974:	bd10      	pop	{r4, pc}

0800a976 <__multiply>:
 800a976:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97a:	4614      	mov	r4, r2
 800a97c:	690a      	ldr	r2, [r1, #16]
 800a97e:	6923      	ldr	r3, [r4, #16]
 800a980:	429a      	cmp	r2, r3
 800a982:	bfb8      	it	lt
 800a984:	460b      	movlt	r3, r1
 800a986:	4688      	mov	r8, r1
 800a988:	bfbc      	itt	lt
 800a98a:	46a0      	movlt	r8, r4
 800a98c:	461c      	movlt	r4, r3
 800a98e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a992:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a996:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a99a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a99e:	eb07 0609 	add.w	r6, r7, r9
 800a9a2:	42b3      	cmp	r3, r6
 800a9a4:	bfb8      	it	lt
 800a9a6:	3101      	addlt	r1, #1
 800a9a8:	f7ff ff08 	bl	800a7bc <_Balloc>
 800a9ac:	f100 0514 	add.w	r5, r0, #20
 800a9b0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a9b4:	462b      	mov	r3, r5
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4573      	cmp	r3, lr
 800a9ba:	d316      	bcc.n	800a9ea <__multiply+0x74>
 800a9bc:	f104 0214 	add.w	r2, r4, #20
 800a9c0:	f108 0114 	add.w	r1, r8, #20
 800a9c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a9c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	9b00      	ldr	r3, [sp, #0]
 800a9d0:	9201      	str	r2, [sp, #4]
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d80c      	bhi.n	800a9f0 <__multiply+0x7a>
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	dd03      	ble.n	800a9e2 <__multiply+0x6c>
 800a9da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d05d      	beq.n	800aa9e <__multiply+0x128>
 800a9e2:	6106      	str	r6, [r0, #16]
 800a9e4:	b003      	add	sp, #12
 800a9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ea:	f843 2b04 	str.w	r2, [r3], #4
 800a9ee:	e7e3      	b.n	800a9b8 <__multiply+0x42>
 800a9f0:	f8b2 b000 	ldrh.w	fp, [r2]
 800a9f4:	f1bb 0f00 	cmp.w	fp, #0
 800a9f8:	d023      	beq.n	800aa42 <__multiply+0xcc>
 800a9fa:	4689      	mov	r9, r1
 800a9fc:	46ac      	mov	ip, r5
 800a9fe:	f04f 0800 	mov.w	r8, #0
 800aa02:	f859 4b04 	ldr.w	r4, [r9], #4
 800aa06:	f8dc a000 	ldr.w	sl, [ip]
 800aa0a:	b2a3      	uxth	r3, r4
 800aa0c:	fa1f fa8a 	uxth.w	sl, sl
 800aa10:	fb0b a303 	mla	r3, fp, r3, sl
 800aa14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aa18:	f8dc 4000 	ldr.w	r4, [ip]
 800aa1c:	4443      	add	r3, r8
 800aa1e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa22:	fb0b 840a 	mla	r4, fp, sl, r8
 800aa26:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800aa2a:	46e2      	mov	sl, ip
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa32:	454f      	cmp	r7, r9
 800aa34:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aa38:	f84a 3b04 	str.w	r3, [sl], #4
 800aa3c:	d82b      	bhi.n	800aa96 <__multiply+0x120>
 800aa3e:	f8cc 8004 	str.w	r8, [ip, #4]
 800aa42:	9b01      	ldr	r3, [sp, #4]
 800aa44:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800aa48:	3204      	adds	r2, #4
 800aa4a:	f1ba 0f00 	cmp.w	sl, #0
 800aa4e:	d020      	beq.n	800aa92 <__multiply+0x11c>
 800aa50:	682b      	ldr	r3, [r5, #0]
 800aa52:	4689      	mov	r9, r1
 800aa54:	46a8      	mov	r8, r5
 800aa56:	f04f 0b00 	mov.w	fp, #0
 800aa5a:	f8b9 c000 	ldrh.w	ip, [r9]
 800aa5e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aa62:	fb0a 440c 	mla	r4, sl, ip, r4
 800aa66:	445c      	add	r4, fp
 800aa68:	46c4      	mov	ip, r8
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aa70:	f84c 3b04 	str.w	r3, [ip], #4
 800aa74:	f859 3b04 	ldr.w	r3, [r9], #4
 800aa78:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aa7c:	0c1b      	lsrs	r3, r3, #16
 800aa7e:	fb0a b303 	mla	r3, sl, r3, fp
 800aa82:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aa86:	454f      	cmp	r7, r9
 800aa88:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aa8c:	d805      	bhi.n	800aa9a <__multiply+0x124>
 800aa8e:	f8c8 3004 	str.w	r3, [r8, #4]
 800aa92:	3504      	adds	r5, #4
 800aa94:	e79b      	b.n	800a9ce <__multiply+0x58>
 800aa96:	46d4      	mov	ip, sl
 800aa98:	e7b3      	b.n	800aa02 <__multiply+0x8c>
 800aa9a:	46e0      	mov	r8, ip
 800aa9c:	e7dd      	b.n	800aa5a <__multiply+0xe4>
 800aa9e:	3e01      	subs	r6, #1
 800aaa0:	e799      	b.n	800a9d6 <__multiply+0x60>
	...

0800aaa4 <__pow5mult>:
 800aaa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaa8:	4615      	mov	r5, r2
 800aaaa:	f012 0203 	ands.w	r2, r2, #3
 800aaae:	4606      	mov	r6, r0
 800aab0:	460f      	mov	r7, r1
 800aab2:	d007      	beq.n	800aac4 <__pow5mult+0x20>
 800aab4:	3a01      	subs	r2, #1
 800aab6:	4c21      	ldr	r4, [pc, #132]	; (800ab3c <__pow5mult+0x98>)
 800aab8:	2300      	movs	r3, #0
 800aaba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aabe:	f7ff fec8 	bl	800a852 <__multadd>
 800aac2:	4607      	mov	r7, r0
 800aac4:	10ad      	asrs	r5, r5, #2
 800aac6:	d035      	beq.n	800ab34 <__pow5mult+0x90>
 800aac8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aaca:	b93c      	cbnz	r4, 800aadc <__pow5mult+0x38>
 800aacc:	2010      	movs	r0, #16
 800aace:	f7ff fe6d 	bl	800a7ac <malloc>
 800aad2:	6270      	str	r0, [r6, #36]	; 0x24
 800aad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aad8:	6004      	str	r4, [r0, #0]
 800aada:	60c4      	str	r4, [r0, #12]
 800aadc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aae4:	b94c      	cbnz	r4, 800aafa <__pow5mult+0x56>
 800aae6:	f240 2171 	movw	r1, #625	; 0x271
 800aaea:	4630      	mov	r0, r6
 800aaec:	f7ff ff3a 	bl	800a964 <__i2b>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	6003      	str	r3, [r0, #0]
 800aafa:	f04f 0800 	mov.w	r8, #0
 800aafe:	07eb      	lsls	r3, r5, #31
 800ab00:	d50a      	bpl.n	800ab18 <__pow5mult+0x74>
 800ab02:	4639      	mov	r1, r7
 800ab04:	4622      	mov	r2, r4
 800ab06:	4630      	mov	r0, r6
 800ab08:	f7ff ff35 	bl	800a976 <__multiply>
 800ab0c:	4639      	mov	r1, r7
 800ab0e:	4681      	mov	r9, r0
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7ff fe87 	bl	800a824 <_Bfree>
 800ab16:	464f      	mov	r7, r9
 800ab18:	106d      	asrs	r5, r5, #1
 800ab1a:	d00b      	beq.n	800ab34 <__pow5mult+0x90>
 800ab1c:	6820      	ldr	r0, [r4, #0]
 800ab1e:	b938      	cbnz	r0, 800ab30 <__pow5mult+0x8c>
 800ab20:	4622      	mov	r2, r4
 800ab22:	4621      	mov	r1, r4
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7ff ff26 	bl	800a976 <__multiply>
 800ab2a:	6020      	str	r0, [r4, #0]
 800ab2c:	f8c0 8000 	str.w	r8, [r0]
 800ab30:	4604      	mov	r4, r0
 800ab32:	e7e4      	b.n	800aafe <__pow5mult+0x5a>
 800ab34:	4638      	mov	r0, r7
 800ab36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab3a:	bf00      	nop
 800ab3c:	0800d160 	.word	0x0800d160

0800ab40 <__lshift>:
 800ab40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab44:	460c      	mov	r4, r1
 800ab46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab4a:	6923      	ldr	r3, [r4, #16]
 800ab4c:	6849      	ldr	r1, [r1, #4]
 800ab4e:	eb0a 0903 	add.w	r9, sl, r3
 800ab52:	68a3      	ldr	r3, [r4, #8]
 800ab54:	4607      	mov	r7, r0
 800ab56:	4616      	mov	r6, r2
 800ab58:	f109 0501 	add.w	r5, r9, #1
 800ab5c:	42ab      	cmp	r3, r5
 800ab5e:	db32      	blt.n	800abc6 <__lshift+0x86>
 800ab60:	4638      	mov	r0, r7
 800ab62:	f7ff fe2b 	bl	800a7bc <_Balloc>
 800ab66:	2300      	movs	r3, #0
 800ab68:	4680      	mov	r8, r0
 800ab6a:	f100 0114 	add.w	r1, r0, #20
 800ab6e:	461a      	mov	r2, r3
 800ab70:	4553      	cmp	r3, sl
 800ab72:	db2b      	blt.n	800abcc <__lshift+0x8c>
 800ab74:	6920      	ldr	r0, [r4, #16]
 800ab76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab7a:	f104 0314 	add.w	r3, r4, #20
 800ab7e:	f016 021f 	ands.w	r2, r6, #31
 800ab82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab8a:	d025      	beq.n	800abd8 <__lshift+0x98>
 800ab8c:	f1c2 0e20 	rsb	lr, r2, #32
 800ab90:	2000      	movs	r0, #0
 800ab92:	681e      	ldr	r6, [r3, #0]
 800ab94:	468a      	mov	sl, r1
 800ab96:	4096      	lsls	r6, r2
 800ab98:	4330      	orrs	r0, r6
 800ab9a:	f84a 0b04 	str.w	r0, [sl], #4
 800ab9e:	f853 0b04 	ldr.w	r0, [r3], #4
 800aba2:	459c      	cmp	ip, r3
 800aba4:	fa20 f00e 	lsr.w	r0, r0, lr
 800aba8:	d814      	bhi.n	800abd4 <__lshift+0x94>
 800abaa:	6048      	str	r0, [r1, #4]
 800abac:	b108      	cbz	r0, 800abb2 <__lshift+0x72>
 800abae:	f109 0502 	add.w	r5, r9, #2
 800abb2:	3d01      	subs	r5, #1
 800abb4:	4638      	mov	r0, r7
 800abb6:	f8c8 5010 	str.w	r5, [r8, #16]
 800abba:	4621      	mov	r1, r4
 800abbc:	f7ff fe32 	bl	800a824 <_Bfree>
 800abc0:	4640      	mov	r0, r8
 800abc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc6:	3101      	adds	r1, #1
 800abc8:	005b      	lsls	r3, r3, #1
 800abca:	e7c7      	b.n	800ab5c <__lshift+0x1c>
 800abcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800abd0:	3301      	adds	r3, #1
 800abd2:	e7cd      	b.n	800ab70 <__lshift+0x30>
 800abd4:	4651      	mov	r1, sl
 800abd6:	e7dc      	b.n	800ab92 <__lshift+0x52>
 800abd8:	3904      	subs	r1, #4
 800abda:	f853 2b04 	ldr.w	r2, [r3], #4
 800abde:	f841 2f04 	str.w	r2, [r1, #4]!
 800abe2:	459c      	cmp	ip, r3
 800abe4:	d8f9      	bhi.n	800abda <__lshift+0x9a>
 800abe6:	e7e4      	b.n	800abb2 <__lshift+0x72>

0800abe8 <__mcmp>:
 800abe8:	6903      	ldr	r3, [r0, #16]
 800abea:	690a      	ldr	r2, [r1, #16]
 800abec:	1a9b      	subs	r3, r3, r2
 800abee:	b530      	push	{r4, r5, lr}
 800abf0:	d10c      	bne.n	800ac0c <__mcmp+0x24>
 800abf2:	0092      	lsls	r2, r2, #2
 800abf4:	3014      	adds	r0, #20
 800abf6:	3114      	adds	r1, #20
 800abf8:	1884      	adds	r4, r0, r2
 800abfa:	4411      	add	r1, r2
 800abfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac04:	4295      	cmp	r5, r2
 800ac06:	d003      	beq.n	800ac10 <__mcmp+0x28>
 800ac08:	d305      	bcc.n	800ac16 <__mcmp+0x2e>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	bd30      	pop	{r4, r5, pc}
 800ac10:	42a0      	cmp	r0, r4
 800ac12:	d3f3      	bcc.n	800abfc <__mcmp+0x14>
 800ac14:	e7fa      	b.n	800ac0c <__mcmp+0x24>
 800ac16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac1a:	e7f7      	b.n	800ac0c <__mcmp+0x24>

0800ac1c <__mdiff>:
 800ac1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac20:	460d      	mov	r5, r1
 800ac22:	4607      	mov	r7, r0
 800ac24:	4611      	mov	r1, r2
 800ac26:	4628      	mov	r0, r5
 800ac28:	4614      	mov	r4, r2
 800ac2a:	f7ff ffdd 	bl	800abe8 <__mcmp>
 800ac2e:	1e06      	subs	r6, r0, #0
 800ac30:	d108      	bne.n	800ac44 <__mdiff+0x28>
 800ac32:	4631      	mov	r1, r6
 800ac34:	4638      	mov	r0, r7
 800ac36:	f7ff fdc1 	bl	800a7bc <_Balloc>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ac40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac44:	bfa4      	itt	ge
 800ac46:	4623      	movge	r3, r4
 800ac48:	462c      	movge	r4, r5
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	6861      	ldr	r1, [r4, #4]
 800ac4e:	bfa6      	itte	ge
 800ac50:	461d      	movge	r5, r3
 800ac52:	2600      	movge	r6, #0
 800ac54:	2601      	movlt	r6, #1
 800ac56:	f7ff fdb1 	bl	800a7bc <_Balloc>
 800ac5a:	692b      	ldr	r3, [r5, #16]
 800ac5c:	60c6      	str	r6, [r0, #12]
 800ac5e:	6926      	ldr	r6, [r4, #16]
 800ac60:	f105 0914 	add.w	r9, r5, #20
 800ac64:	f104 0214 	add.w	r2, r4, #20
 800ac68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ac6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ac70:	f100 0514 	add.w	r5, r0, #20
 800ac74:	f04f 0e00 	mov.w	lr, #0
 800ac78:	f852 ab04 	ldr.w	sl, [r2], #4
 800ac7c:	f859 4b04 	ldr.w	r4, [r9], #4
 800ac80:	fa1e f18a 	uxtah	r1, lr, sl
 800ac84:	b2a3      	uxth	r3, r4
 800ac86:	1ac9      	subs	r1, r1, r3
 800ac88:	0c23      	lsrs	r3, r4, #16
 800ac8a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ac8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ac92:	b289      	uxth	r1, r1
 800ac94:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ac98:	45c8      	cmp	r8, r9
 800ac9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ac9e:	4694      	mov	ip, r2
 800aca0:	f845 3b04 	str.w	r3, [r5], #4
 800aca4:	d8e8      	bhi.n	800ac78 <__mdiff+0x5c>
 800aca6:	45bc      	cmp	ip, r7
 800aca8:	d304      	bcc.n	800acb4 <__mdiff+0x98>
 800acaa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800acae:	b183      	cbz	r3, 800acd2 <__mdiff+0xb6>
 800acb0:	6106      	str	r6, [r0, #16]
 800acb2:	e7c5      	b.n	800ac40 <__mdiff+0x24>
 800acb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800acb8:	fa1e f381 	uxtah	r3, lr, r1
 800acbc:	141a      	asrs	r2, r3, #16
 800acbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acc8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800accc:	f845 3b04 	str.w	r3, [r5], #4
 800acd0:	e7e9      	b.n	800aca6 <__mdiff+0x8a>
 800acd2:	3e01      	subs	r6, #1
 800acd4:	e7e9      	b.n	800acaa <__mdiff+0x8e>

0800acd6 <__d2b>:
 800acd6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acda:	460e      	mov	r6, r1
 800acdc:	2101      	movs	r1, #1
 800acde:	ec59 8b10 	vmov	r8, r9, d0
 800ace2:	4615      	mov	r5, r2
 800ace4:	f7ff fd6a 	bl	800a7bc <_Balloc>
 800ace8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800acec:	4607      	mov	r7, r0
 800acee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acf2:	bb34      	cbnz	r4, 800ad42 <__d2b+0x6c>
 800acf4:	9301      	str	r3, [sp, #4]
 800acf6:	f1b8 0300 	subs.w	r3, r8, #0
 800acfa:	d027      	beq.n	800ad4c <__d2b+0x76>
 800acfc:	a802      	add	r0, sp, #8
 800acfe:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ad02:	f7ff fe00 	bl	800a906 <__lo0bits>
 800ad06:	9900      	ldr	r1, [sp, #0]
 800ad08:	b1f0      	cbz	r0, 800ad48 <__d2b+0x72>
 800ad0a:	9a01      	ldr	r2, [sp, #4]
 800ad0c:	f1c0 0320 	rsb	r3, r0, #32
 800ad10:	fa02 f303 	lsl.w	r3, r2, r3
 800ad14:	430b      	orrs	r3, r1
 800ad16:	40c2      	lsrs	r2, r0
 800ad18:	617b      	str	r3, [r7, #20]
 800ad1a:	9201      	str	r2, [sp, #4]
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	61bb      	str	r3, [r7, #24]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	bf14      	ite	ne
 800ad24:	2102      	movne	r1, #2
 800ad26:	2101      	moveq	r1, #1
 800ad28:	6139      	str	r1, [r7, #16]
 800ad2a:	b1c4      	cbz	r4, 800ad5e <__d2b+0x88>
 800ad2c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ad30:	4404      	add	r4, r0
 800ad32:	6034      	str	r4, [r6, #0]
 800ad34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad38:	6028      	str	r0, [r5, #0]
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	b003      	add	sp, #12
 800ad3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad46:	e7d5      	b.n	800acf4 <__d2b+0x1e>
 800ad48:	6179      	str	r1, [r7, #20]
 800ad4a:	e7e7      	b.n	800ad1c <__d2b+0x46>
 800ad4c:	a801      	add	r0, sp, #4
 800ad4e:	f7ff fdda 	bl	800a906 <__lo0bits>
 800ad52:	9b01      	ldr	r3, [sp, #4]
 800ad54:	617b      	str	r3, [r7, #20]
 800ad56:	2101      	movs	r1, #1
 800ad58:	6139      	str	r1, [r7, #16]
 800ad5a:	3020      	adds	r0, #32
 800ad5c:	e7e5      	b.n	800ad2a <__d2b+0x54>
 800ad5e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ad62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad66:	6030      	str	r0, [r6, #0]
 800ad68:	6918      	ldr	r0, [r3, #16]
 800ad6a:	f7ff fdad 	bl	800a8c8 <__hi0bits>
 800ad6e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ad72:	e7e1      	b.n	800ad38 <__d2b+0x62>

0800ad74 <_calloc_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	fb02 f401 	mul.w	r4, r2, r1
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	f000 f856 	bl	800ae2c <_malloc_r>
 800ad80:	4605      	mov	r5, r0
 800ad82:	b118      	cbz	r0, 800ad8c <_calloc_r+0x18>
 800ad84:	4622      	mov	r2, r4
 800ad86:	2100      	movs	r1, #0
 800ad88:	f7fe fa37 	bl	80091fa <memset>
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}

0800ad90 <_free_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4605      	mov	r5, r0
 800ad94:	2900      	cmp	r1, #0
 800ad96:	d045      	beq.n	800ae24 <_free_r+0x94>
 800ad98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9c:	1f0c      	subs	r4, r1, #4
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	bfb8      	it	lt
 800ada2:	18e4      	addlt	r4, r4, r3
 800ada4:	f000 fa29 	bl	800b1fa <__malloc_lock>
 800ada8:	4a1f      	ldr	r2, [pc, #124]	; (800ae28 <_free_r+0x98>)
 800adaa:	6813      	ldr	r3, [r2, #0]
 800adac:	4610      	mov	r0, r2
 800adae:	b933      	cbnz	r3, 800adbe <_free_r+0x2e>
 800adb0:	6063      	str	r3, [r4, #4]
 800adb2:	6014      	str	r4, [r2, #0]
 800adb4:	4628      	mov	r0, r5
 800adb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adba:	f000 ba1f 	b.w	800b1fc <__malloc_unlock>
 800adbe:	42a3      	cmp	r3, r4
 800adc0:	d90c      	bls.n	800addc <_free_r+0x4c>
 800adc2:	6821      	ldr	r1, [r4, #0]
 800adc4:	1862      	adds	r2, r4, r1
 800adc6:	4293      	cmp	r3, r2
 800adc8:	bf04      	itt	eq
 800adca:	681a      	ldreq	r2, [r3, #0]
 800adcc:	685b      	ldreq	r3, [r3, #4]
 800adce:	6063      	str	r3, [r4, #4]
 800add0:	bf04      	itt	eq
 800add2:	1852      	addeq	r2, r2, r1
 800add4:	6022      	streq	r2, [r4, #0]
 800add6:	6004      	str	r4, [r0, #0]
 800add8:	e7ec      	b.n	800adb4 <_free_r+0x24>
 800adda:	4613      	mov	r3, r2
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	b10a      	cbz	r2, 800ade4 <_free_r+0x54>
 800ade0:	42a2      	cmp	r2, r4
 800ade2:	d9fa      	bls.n	800adda <_free_r+0x4a>
 800ade4:	6819      	ldr	r1, [r3, #0]
 800ade6:	1858      	adds	r0, r3, r1
 800ade8:	42a0      	cmp	r0, r4
 800adea:	d10b      	bne.n	800ae04 <_free_r+0x74>
 800adec:	6820      	ldr	r0, [r4, #0]
 800adee:	4401      	add	r1, r0
 800adf0:	1858      	adds	r0, r3, r1
 800adf2:	4282      	cmp	r2, r0
 800adf4:	6019      	str	r1, [r3, #0]
 800adf6:	d1dd      	bne.n	800adb4 <_free_r+0x24>
 800adf8:	6810      	ldr	r0, [r2, #0]
 800adfa:	6852      	ldr	r2, [r2, #4]
 800adfc:	605a      	str	r2, [r3, #4]
 800adfe:	4401      	add	r1, r0
 800ae00:	6019      	str	r1, [r3, #0]
 800ae02:	e7d7      	b.n	800adb4 <_free_r+0x24>
 800ae04:	d902      	bls.n	800ae0c <_free_r+0x7c>
 800ae06:	230c      	movs	r3, #12
 800ae08:	602b      	str	r3, [r5, #0]
 800ae0a:	e7d3      	b.n	800adb4 <_free_r+0x24>
 800ae0c:	6820      	ldr	r0, [r4, #0]
 800ae0e:	1821      	adds	r1, r4, r0
 800ae10:	428a      	cmp	r2, r1
 800ae12:	bf04      	itt	eq
 800ae14:	6811      	ldreq	r1, [r2, #0]
 800ae16:	6852      	ldreq	r2, [r2, #4]
 800ae18:	6062      	str	r2, [r4, #4]
 800ae1a:	bf04      	itt	eq
 800ae1c:	1809      	addeq	r1, r1, r0
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	605c      	str	r4, [r3, #4]
 800ae22:	e7c7      	b.n	800adb4 <_free_r+0x24>
 800ae24:	bd38      	pop	{r3, r4, r5, pc}
 800ae26:	bf00      	nop
 800ae28:	20000254 	.word	0x20000254

0800ae2c <_malloc_r>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	1ccd      	adds	r5, r1, #3
 800ae30:	f025 0503 	bic.w	r5, r5, #3
 800ae34:	3508      	adds	r5, #8
 800ae36:	2d0c      	cmp	r5, #12
 800ae38:	bf38      	it	cc
 800ae3a:	250c      	movcc	r5, #12
 800ae3c:	2d00      	cmp	r5, #0
 800ae3e:	4606      	mov	r6, r0
 800ae40:	db01      	blt.n	800ae46 <_malloc_r+0x1a>
 800ae42:	42a9      	cmp	r1, r5
 800ae44:	d903      	bls.n	800ae4e <_malloc_r+0x22>
 800ae46:	230c      	movs	r3, #12
 800ae48:	6033      	str	r3, [r6, #0]
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	bd70      	pop	{r4, r5, r6, pc}
 800ae4e:	f000 f9d4 	bl	800b1fa <__malloc_lock>
 800ae52:	4a21      	ldr	r2, [pc, #132]	; (800aed8 <_malloc_r+0xac>)
 800ae54:	6814      	ldr	r4, [r2, #0]
 800ae56:	4621      	mov	r1, r4
 800ae58:	b991      	cbnz	r1, 800ae80 <_malloc_r+0x54>
 800ae5a:	4c20      	ldr	r4, [pc, #128]	; (800aedc <_malloc_r+0xb0>)
 800ae5c:	6823      	ldr	r3, [r4, #0]
 800ae5e:	b91b      	cbnz	r3, 800ae68 <_malloc_r+0x3c>
 800ae60:	4630      	mov	r0, r6
 800ae62:	f000 f98f 	bl	800b184 <_sbrk_r>
 800ae66:	6020      	str	r0, [r4, #0]
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f000 f98a 	bl	800b184 <_sbrk_r>
 800ae70:	1c43      	adds	r3, r0, #1
 800ae72:	d124      	bne.n	800aebe <_malloc_r+0x92>
 800ae74:	230c      	movs	r3, #12
 800ae76:	6033      	str	r3, [r6, #0]
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f000 f9bf 	bl	800b1fc <__malloc_unlock>
 800ae7e:	e7e4      	b.n	800ae4a <_malloc_r+0x1e>
 800ae80:	680b      	ldr	r3, [r1, #0]
 800ae82:	1b5b      	subs	r3, r3, r5
 800ae84:	d418      	bmi.n	800aeb8 <_malloc_r+0x8c>
 800ae86:	2b0b      	cmp	r3, #11
 800ae88:	d90f      	bls.n	800aeaa <_malloc_r+0x7e>
 800ae8a:	600b      	str	r3, [r1, #0]
 800ae8c:	50cd      	str	r5, [r1, r3]
 800ae8e:	18cc      	adds	r4, r1, r3
 800ae90:	4630      	mov	r0, r6
 800ae92:	f000 f9b3 	bl	800b1fc <__malloc_unlock>
 800ae96:	f104 000b 	add.w	r0, r4, #11
 800ae9a:	1d23      	adds	r3, r4, #4
 800ae9c:	f020 0007 	bic.w	r0, r0, #7
 800aea0:	1ac3      	subs	r3, r0, r3
 800aea2:	d0d3      	beq.n	800ae4c <_malloc_r+0x20>
 800aea4:	425a      	negs	r2, r3
 800aea6:	50e2      	str	r2, [r4, r3]
 800aea8:	e7d0      	b.n	800ae4c <_malloc_r+0x20>
 800aeaa:	428c      	cmp	r4, r1
 800aeac:	684b      	ldr	r3, [r1, #4]
 800aeae:	bf16      	itet	ne
 800aeb0:	6063      	strne	r3, [r4, #4]
 800aeb2:	6013      	streq	r3, [r2, #0]
 800aeb4:	460c      	movne	r4, r1
 800aeb6:	e7eb      	b.n	800ae90 <_malloc_r+0x64>
 800aeb8:	460c      	mov	r4, r1
 800aeba:	6849      	ldr	r1, [r1, #4]
 800aebc:	e7cc      	b.n	800ae58 <_malloc_r+0x2c>
 800aebe:	1cc4      	adds	r4, r0, #3
 800aec0:	f024 0403 	bic.w	r4, r4, #3
 800aec4:	42a0      	cmp	r0, r4
 800aec6:	d005      	beq.n	800aed4 <_malloc_r+0xa8>
 800aec8:	1a21      	subs	r1, r4, r0
 800aeca:	4630      	mov	r0, r6
 800aecc:	f000 f95a 	bl	800b184 <_sbrk_r>
 800aed0:	3001      	adds	r0, #1
 800aed2:	d0cf      	beq.n	800ae74 <_malloc_r+0x48>
 800aed4:	6025      	str	r5, [r4, #0]
 800aed6:	e7db      	b.n	800ae90 <_malloc_r+0x64>
 800aed8:	20000254 	.word	0x20000254
 800aedc:	20000258 	.word	0x20000258

0800aee0 <__ssputs_r>:
 800aee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee4:	688e      	ldr	r6, [r1, #8]
 800aee6:	429e      	cmp	r6, r3
 800aee8:	4682      	mov	sl, r0
 800aeea:	460c      	mov	r4, r1
 800aeec:	4690      	mov	r8, r2
 800aeee:	4699      	mov	r9, r3
 800aef0:	d837      	bhi.n	800af62 <__ssputs_r+0x82>
 800aef2:	898a      	ldrh	r2, [r1, #12]
 800aef4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aef8:	d031      	beq.n	800af5e <__ssputs_r+0x7e>
 800aefa:	6825      	ldr	r5, [r4, #0]
 800aefc:	6909      	ldr	r1, [r1, #16]
 800aefe:	1a6f      	subs	r7, r5, r1
 800af00:	6965      	ldr	r5, [r4, #20]
 800af02:	2302      	movs	r3, #2
 800af04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af08:	fb95 f5f3 	sdiv	r5, r5, r3
 800af0c:	f109 0301 	add.w	r3, r9, #1
 800af10:	443b      	add	r3, r7
 800af12:	429d      	cmp	r5, r3
 800af14:	bf38      	it	cc
 800af16:	461d      	movcc	r5, r3
 800af18:	0553      	lsls	r3, r2, #21
 800af1a:	d530      	bpl.n	800af7e <__ssputs_r+0x9e>
 800af1c:	4629      	mov	r1, r5
 800af1e:	f7ff ff85 	bl	800ae2c <_malloc_r>
 800af22:	4606      	mov	r6, r0
 800af24:	b950      	cbnz	r0, 800af3c <__ssputs_r+0x5c>
 800af26:	230c      	movs	r3, #12
 800af28:	f8ca 3000 	str.w	r3, [sl]
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af3c:	463a      	mov	r2, r7
 800af3e:	6921      	ldr	r1, [r4, #16]
 800af40:	f7fe f950 	bl	80091e4 <memcpy>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	6126      	str	r6, [r4, #16]
 800af52:	6165      	str	r5, [r4, #20]
 800af54:	443e      	add	r6, r7
 800af56:	1bed      	subs	r5, r5, r7
 800af58:	6026      	str	r6, [r4, #0]
 800af5a:	60a5      	str	r5, [r4, #8]
 800af5c:	464e      	mov	r6, r9
 800af5e:	454e      	cmp	r6, r9
 800af60:	d900      	bls.n	800af64 <__ssputs_r+0x84>
 800af62:	464e      	mov	r6, r9
 800af64:	4632      	mov	r2, r6
 800af66:	4641      	mov	r1, r8
 800af68:	6820      	ldr	r0, [r4, #0]
 800af6a:	f000 f92d 	bl	800b1c8 <memmove>
 800af6e:	68a3      	ldr	r3, [r4, #8]
 800af70:	1b9b      	subs	r3, r3, r6
 800af72:	60a3      	str	r3, [r4, #8]
 800af74:	6823      	ldr	r3, [r4, #0]
 800af76:	441e      	add	r6, r3
 800af78:	6026      	str	r6, [r4, #0]
 800af7a:	2000      	movs	r0, #0
 800af7c:	e7dc      	b.n	800af38 <__ssputs_r+0x58>
 800af7e:	462a      	mov	r2, r5
 800af80:	f000 f93d 	bl	800b1fe <_realloc_r>
 800af84:	4606      	mov	r6, r0
 800af86:	2800      	cmp	r0, #0
 800af88:	d1e2      	bne.n	800af50 <__ssputs_r+0x70>
 800af8a:	6921      	ldr	r1, [r4, #16]
 800af8c:	4650      	mov	r0, sl
 800af8e:	f7ff feff 	bl	800ad90 <_free_r>
 800af92:	e7c8      	b.n	800af26 <__ssputs_r+0x46>

0800af94 <_svfiprintf_r>:
 800af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	461d      	mov	r5, r3
 800af9a:	898b      	ldrh	r3, [r1, #12]
 800af9c:	061f      	lsls	r7, r3, #24
 800af9e:	b09d      	sub	sp, #116	; 0x74
 800afa0:	4680      	mov	r8, r0
 800afa2:	460c      	mov	r4, r1
 800afa4:	4616      	mov	r6, r2
 800afa6:	d50f      	bpl.n	800afc8 <_svfiprintf_r+0x34>
 800afa8:	690b      	ldr	r3, [r1, #16]
 800afaa:	b96b      	cbnz	r3, 800afc8 <_svfiprintf_r+0x34>
 800afac:	2140      	movs	r1, #64	; 0x40
 800afae:	f7ff ff3d 	bl	800ae2c <_malloc_r>
 800afb2:	6020      	str	r0, [r4, #0]
 800afb4:	6120      	str	r0, [r4, #16]
 800afb6:	b928      	cbnz	r0, 800afc4 <_svfiprintf_r+0x30>
 800afb8:	230c      	movs	r3, #12
 800afba:	f8c8 3000 	str.w	r3, [r8]
 800afbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afc2:	e0c8      	b.n	800b156 <_svfiprintf_r+0x1c2>
 800afc4:	2340      	movs	r3, #64	; 0x40
 800afc6:	6163      	str	r3, [r4, #20]
 800afc8:	2300      	movs	r3, #0
 800afca:	9309      	str	r3, [sp, #36]	; 0x24
 800afcc:	2320      	movs	r3, #32
 800afce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afd2:	2330      	movs	r3, #48	; 0x30
 800afd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afd8:	9503      	str	r5, [sp, #12]
 800afda:	f04f 0b01 	mov.w	fp, #1
 800afde:	4637      	mov	r7, r6
 800afe0:	463d      	mov	r5, r7
 800afe2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800afe6:	b10b      	cbz	r3, 800afec <_svfiprintf_r+0x58>
 800afe8:	2b25      	cmp	r3, #37	; 0x25
 800afea:	d13e      	bne.n	800b06a <_svfiprintf_r+0xd6>
 800afec:	ebb7 0a06 	subs.w	sl, r7, r6
 800aff0:	d00b      	beq.n	800b00a <_svfiprintf_r+0x76>
 800aff2:	4653      	mov	r3, sl
 800aff4:	4632      	mov	r2, r6
 800aff6:	4621      	mov	r1, r4
 800aff8:	4640      	mov	r0, r8
 800affa:	f7ff ff71 	bl	800aee0 <__ssputs_r>
 800affe:	3001      	adds	r0, #1
 800b000:	f000 80a4 	beq.w	800b14c <_svfiprintf_r+0x1b8>
 800b004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b006:	4453      	add	r3, sl
 800b008:	9309      	str	r3, [sp, #36]	; 0x24
 800b00a:	783b      	ldrb	r3, [r7, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 809d 	beq.w	800b14c <_svfiprintf_r+0x1b8>
 800b012:	2300      	movs	r3, #0
 800b014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b018:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b01c:	9304      	str	r3, [sp, #16]
 800b01e:	9307      	str	r3, [sp, #28]
 800b020:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b024:	931a      	str	r3, [sp, #104]	; 0x68
 800b026:	462f      	mov	r7, r5
 800b028:	2205      	movs	r2, #5
 800b02a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b02e:	4850      	ldr	r0, [pc, #320]	; (800b170 <_svfiprintf_r+0x1dc>)
 800b030:	f7f5 f8de 	bl	80001f0 <memchr>
 800b034:	9b04      	ldr	r3, [sp, #16]
 800b036:	b9d0      	cbnz	r0, 800b06e <_svfiprintf_r+0xda>
 800b038:	06d9      	lsls	r1, r3, #27
 800b03a:	bf44      	itt	mi
 800b03c:	2220      	movmi	r2, #32
 800b03e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b042:	071a      	lsls	r2, r3, #28
 800b044:	bf44      	itt	mi
 800b046:	222b      	movmi	r2, #43	; 0x2b
 800b048:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b04c:	782a      	ldrb	r2, [r5, #0]
 800b04e:	2a2a      	cmp	r2, #42	; 0x2a
 800b050:	d015      	beq.n	800b07e <_svfiprintf_r+0xea>
 800b052:	9a07      	ldr	r2, [sp, #28]
 800b054:	462f      	mov	r7, r5
 800b056:	2000      	movs	r0, #0
 800b058:	250a      	movs	r5, #10
 800b05a:	4639      	mov	r1, r7
 800b05c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b060:	3b30      	subs	r3, #48	; 0x30
 800b062:	2b09      	cmp	r3, #9
 800b064:	d94d      	bls.n	800b102 <_svfiprintf_r+0x16e>
 800b066:	b1b8      	cbz	r0, 800b098 <_svfiprintf_r+0x104>
 800b068:	e00f      	b.n	800b08a <_svfiprintf_r+0xf6>
 800b06a:	462f      	mov	r7, r5
 800b06c:	e7b8      	b.n	800afe0 <_svfiprintf_r+0x4c>
 800b06e:	4a40      	ldr	r2, [pc, #256]	; (800b170 <_svfiprintf_r+0x1dc>)
 800b070:	1a80      	subs	r0, r0, r2
 800b072:	fa0b f000 	lsl.w	r0, fp, r0
 800b076:	4318      	orrs	r0, r3
 800b078:	9004      	str	r0, [sp, #16]
 800b07a:	463d      	mov	r5, r7
 800b07c:	e7d3      	b.n	800b026 <_svfiprintf_r+0x92>
 800b07e:	9a03      	ldr	r2, [sp, #12]
 800b080:	1d11      	adds	r1, r2, #4
 800b082:	6812      	ldr	r2, [r2, #0]
 800b084:	9103      	str	r1, [sp, #12]
 800b086:	2a00      	cmp	r2, #0
 800b088:	db01      	blt.n	800b08e <_svfiprintf_r+0xfa>
 800b08a:	9207      	str	r2, [sp, #28]
 800b08c:	e004      	b.n	800b098 <_svfiprintf_r+0x104>
 800b08e:	4252      	negs	r2, r2
 800b090:	f043 0302 	orr.w	r3, r3, #2
 800b094:	9207      	str	r2, [sp, #28]
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	783b      	ldrb	r3, [r7, #0]
 800b09a:	2b2e      	cmp	r3, #46	; 0x2e
 800b09c:	d10c      	bne.n	800b0b8 <_svfiprintf_r+0x124>
 800b09e:	787b      	ldrb	r3, [r7, #1]
 800b0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a2:	d133      	bne.n	800b10c <_svfiprintf_r+0x178>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	1d1a      	adds	r2, r3, #4
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	9203      	str	r2, [sp, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	bfb8      	it	lt
 800b0b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b0b4:	3702      	adds	r7, #2
 800b0b6:	9305      	str	r3, [sp, #20]
 800b0b8:	4d2e      	ldr	r5, [pc, #184]	; (800b174 <_svfiprintf_r+0x1e0>)
 800b0ba:	7839      	ldrb	r1, [r7, #0]
 800b0bc:	2203      	movs	r2, #3
 800b0be:	4628      	mov	r0, r5
 800b0c0:	f7f5 f896 	bl	80001f0 <memchr>
 800b0c4:	b138      	cbz	r0, 800b0d6 <_svfiprintf_r+0x142>
 800b0c6:	2340      	movs	r3, #64	; 0x40
 800b0c8:	1b40      	subs	r0, r0, r5
 800b0ca:	fa03 f000 	lsl.w	r0, r3, r0
 800b0ce:	9b04      	ldr	r3, [sp, #16]
 800b0d0:	4303      	orrs	r3, r0
 800b0d2:	3701      	adds	r7, #1
 800b0d4:	9304      	str	r3, [sp, #16]
 800b0d6:	7839      	ldrb	r1, [r7, #0]
 800b0d8:	4827      	ldr	r0, [pc, #156]	; (800b178 <_svfiprintf_r+0x1e4>)
 800b0da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0de:	2206      	movs	r2, #6
 800b0e0:	1c7e      	adds	r6, r7, #1
 800b0e2:	f7f5 f885 	bl	80001f0 <memchr>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d038      	beq.n	800b15c <_svfiprintf_r+0x1c8>
 800b0ea:	4b24      	ldr	r3, [pc, #144]	; (800b17c <_svfiprintf_r+0x1e8>)
 800b0ec:	bb13      	cbnz	r3, 800b134 <_svfiprintf_r+0x1a0>
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	3307      	adds	r3, #7
 800b0f2:	f023 0307 	bic.w	r3, r3, #7
 800b0f6:	3308      	adds	r3, #8
 800b0f8:	9303      	str	r3, [sp, #12]
 800b0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0fc:	444b      	add	r3, r9
 800b0fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b100:	e76d      	b.n	800afde <_svfiprintf_r+0x4a>
 800b102:	fb05 3202 	mla	r2, r5, r2, r3
 800b106:	2001      	movs	r0, #1
 800b108:	460f      	mov	r7, r1
 800b10a:	e7a6      	b.n	800b05a <_svfiprintf_r+0xc6>
 800b10c:	2300      	movs	r3, #0
 800b10e:	3701      	adds	r7, #1
 800b110:	9305      	str	r3, [sp, #20]
 800b112:	4619      	mov	r1, r3
 800b114:	250a      	movs	r5, #10
 800b116:	4638      	mov	r0, r7
 800b118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b11c:	3a30      	subs	r2, #48	; 0x30
 800b11e:	2a09      	cmp	r2, #9
 800b120:	d903      	bls.n	800b12a <_svfiprintf_r+0x196>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d0c8      	beq.n	800b0b8 <_svfiprintf_r+0x124>
 800b126:	9105      	str	r1, [sp, #20]
 800b128:	e7c6      	b.n	800b0b8 <_svfiprintf_r+0x124>
 800b12a:	fb05 2101 	mla	r1, r5, r1, r2
 800b12e:	2301      	movs	r3, #1
 800b130:	4607      	mov	r7, r0
 800b132:	e7f0      	b.n	800b116 <_svfiprintf_r+0x182>
 800b134:	ab03      	add	r3, sp, #12
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	4622      	mov	r2, r4
 800b13a:	4b11      	ldr	r3, [pc, #68]	; (800b180 <_svfiprintf_r+0x1ec>)
 800b13c:	a904      	add	r1, sp, #16
 800b13e:	4640      	mov	r0, r8
 800b140:	f7fe f8f8 	bl	8009334 <_printf_float>
 800b144:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b148:	4681      	mov	r9, r0
 800b14a:	d1d6      	bne.n	800b0fa <_svfiprintf_r+0x166>
 800b14c:	89a3      	ldrh	r3, [r4, #12]
 800b14e:	065b      	lsls	r3, r3, #25
 800b150:	f53f af35 	bmi.w	800afbe <_svfiprintf_r+0x2a>
 800b154:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b156:	b01d      	add	sp, #116	; 0x74
 800b158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15c:	ab03      	add	r3, sp, #12
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	4622      	mov	r2, r4
 800b162:	4b07      	ldr	r3, [pc, #28]	; (800b180 <_svfiprintf_r+0x1ec>)
 800b164:	a904      	add	r1, sp, #16
 800b166:	4640      	mov	r0, r8
 800b168:	f7fe fb9a 	bl	80098a0 <_printf_i>
 800b16c:	e7ea      	b.n	800b144 <_svfiprintf_r+0x1b0>
 800b16e:	bf00      	nop
 800b170:	0800d16c 	.word	0x0800d16c
 800b174:	0800d172 	.word	0x0800d172
 800b178:	0800d176 	.word	0x0800d176
 800b17c:	08009335 	.word	0x08009335
 800b180:	0800aee1 	.word	0x0800aee1

0800b184 <_sbrk_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4c06      	ldr	r4, [pc, #24]	; (800b1a0 <_sbrk_r+0x1c>)
 800b188:	2300      	movs	r3, #0
 800b18a:	4605      	mov	r5, r0
 800b18c:	4608      	mov	r0, r1
 800b18e:	6023      	str	r3, [r4, #0]
 800b190:	f7f9 fef6 	bl	8004f80 <_sbrk>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d102      	bne.n	800b19e <_sbrk_r+0x1a>
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	b103      	cbz	r3, 800b19e <_sbrk_r+0x1a>
 800b19c:	602b      	str	r3, [r5, #0]
 800b19e:	bd38      	pop	{r3, r4, r5, pc}
 800b1a0:	20000924 	.word	0x20000924

0800b1a4 <__ascii_mbtowc>:
 800b1a4:	b082      	sub	sp, #8
 800b1a6:	b901      	cbnz	r1, 800b1aa <__ascii_mbtowc+0x6>
 800b1a8:	a901      	add	r1, sp, #4
 800b1aa:	b142      	cbz	r2, 800b1be <__ascii_mbtowc+0x1a>
 800b1ac:	b14b      	cbz	r3, 800b1c2 <__ascii_mbtowc+0x1e>
 800b1ae:	7813      	ldrb	r3, [r2, #0]
 800b1b0:	600b      	str	r3, [r1, #0]
 800b1b2:	7812      	ldrb	r2, [r2, #0]
 800b1b4:	1c10      	adds	r0, r2, #0
 800b1b6:	bf18      	it	ne
 800b1b8:	2001      	movne	r0, #1
 800b1ba:	b002      	add	sp, #8
 800b1bc:	4770      	bx	lr
 800b1be:	4610      	mov	r0, r2
 800b1c0:	e7fb      	b.n	800b1ba <__ascii_mbtowc+0x16>
 800b1c2:	f06f 0001 	mvn.w	r0, #1
 800b1c6:	e7f8      	b.n	800b1ba <__ascii_mbtowc+0x16>

0800b1c8 <memmove>:
 800b1c8:	4288      	cmp	r0, r1
 800b1ca:	b510      	push	{r4, lr}
 800b1cc:	eb01 0302 	add.w	r3, r1, r2
 800b1d0:	d807      	bhi.n	800b1e2 <memmove+0x1a>
 800b1d2:	1e42      	subs	r2, r0, #1
 800b1d4:	4299      	cmp	r1, r3
 800b1d6:	d00a      	beq.n	800b1ee <memmove+0x26>
 800b1d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b1e0:	e7f8      	b.n	800b1d4 <memmove+0xc>
 800b1e2:	4283      	cmp	r3, r0
 800b1e4:	d9f5      	bls.n	800b1d2 <memmove+0xa>
 800b1e6:	1881      	adds	r1, r0, r2
 800b1e8:	1ad2      	subs	r2, r2, r3
 800b1ea:	42d3      	cmn	r3, r2
 800b1ec:	d100      	bne.n	800b1f0 <memmove+0x28>
 800b1ee:	bd10      	pop	{r4, pc}
 800b1f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b1f8:	e7f7      	b.n	800b1ea <memmove+0x22>

0800b1fa <__malloc_lock>:
 800b1fa:	4770      	bx	lr

0800b1fc <__malloc_unlock>:
 800b1fc:	4770      	bx	lr

0800b1fe <_realloc_r>:
 800b1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b200:	4607      	mov	r7, r0
 800b202:	4614      	mov	r4, r2
 800b204:	460e      	mov	r6, r1
 800b206:	b921      	cbnz	r1, 800b212 <_realloc_r+0x14>
 800b208:	4611      	mov	r1, r2
 800b20a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b20e:	f7ff be0d 	b.w	800ae2c <_malloc_r>
 800b212:	b922      	cbnz	r2, 800b21e <_realloc_r+0x20>
 800b214:	f7ff fdbc 	bl	800ad90 <_free_r>
 800b218:	4625      	mov	r5, r4
 800b21a:	4628      	mov	r0, r5
 800b21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b21e:	f000 f821 	bl	800b264 <_malloc_usable_size_r>
 800b222:	42a0      	cmp	r0, r4
 800b224:	d20f      	bcs.n	800b246 <_realloc_r+0x48>
 800b226:	4621      	mov	r1, r4
 800b228:	4638      	mov	r0, r7
 800b22a:	f7ff fdff 	bl	800ae2c <_malloc_r>
 800b22e:	4605      	mov	r5, r0
 800b230:	2800      	cmp	r0, #0
 800b232:	d0f2      	beq.n	800b21a <_realloc_r+0x1c>
 800b234:	4631      	mov	r1, r6
 800b236:	4622      	mov	r2, r4
 800b238:	f7fd ffd4 	bl	80091e4 <memcpy>
 800b23c:	4631      	mov	r1, r6
 800b23e:	4638      	mov	r0, r7
 800b240:	f7ff fda6 	bl	800ad90 <_free_r>
 800b244:	e7e9      	b.n	800b21a <_realloc_r+0x1c>
 800b246:	4635      	mov	r5, r6
 800b248:	e7e7      	b.n	800b21a <_realloc_r+0x1c>

0800b24a <__ascii_wctomb>:
 800b24a:	b149      	cbz	r1, 800b260 <__ascii_wctomb+0x16>
 800b24c:	2aff      	cmp	r2, #255	; 0xff
 800b24e:	bf85      	ittet	hi
 800b250:	238a      	movhi	r3, #138	; 0x8a
 800b252:	6003      	strhi	r3, [r0, #0]
 800b254:	700a      	strbls	r2, [r1, #0]
 800b256:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b25a:	bf98      	it	ls
 800b25c:	2001      	movls	r0, #1
 800b25e:	4770      	bx	lr
 800b260:	4608      	mov	r0, r1
 800b262:	4770      	bx	lr

0800b264 <_malloc_usable_size_r>:
 800b264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b268:	1f18      	subs	r0, r3, #4
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	bfbc      	itt	lt
 800b26e:	580b      	ldrlt	r3, [r1, r0]
 800b270:	18c0      	addlt	r0, r0, r3
 800b272:	4770      	bx	lr
 800b274:	0000      	movs	r0, r0
	...

0800b278 <atan>:
 800b278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	ec55 4b10 	vmov	r4, r5, d0
 800b280:	4bc3      	ldr	r3, [pc, #780]	; (800b590 <atan+0x318>)
 800b282:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b286:	429e      	cmp	r6, r3
 800b288:	46ab      	mov	fp, r5
 800b28a:	dd18      	ble.n	800b2be <atan+0x46>
 800b28c:	4bc1      	ldr	r3, [pc, #772]	; (800b594 <atan+0x31c>)
 800b28e:	429e      	cmp	r6, r3
 800b290:	dc01      	bgt.n	800b296 <atan+0x1e>
 800b292:	d109      	bne.n	800b2a8 <atan+0x30>
 800b294:	b144      	cbz	r4, 800b2a8 <atan+0x30>
 800b296:	4622      	mov	r2, r4
 800b298:	462b      	mov	r3, r5
 800b29a:	4620      	mov	r0, r4
 800b29c:	4629      	mov	r1, r5
 800b29e:	f7f4 fffd 	bl	800029c <__adddf3>
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	460d      	mov	r5, r1
 800b2a6:	e006      	b.n	800b2b6 <atan+0x3e>
 800b2a8:	f1bb 0f00 	cmp.w	fp, #0
 800b2ac:	f340 8131 	ble.w	800b512 <atan+0x29a>
 800b2b0:	a59b      	add	r5, pc, #620	; (adr r5, 800b520 <atan+0x2a8>)
 800b2b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2b6:	ec45 4b10 	vmov	d0, r4, r5
 800b2ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2be:	4bb6      	ldr	r3, [pc, #728]	; (800b598 <atan+0x320>)
 800b2c0:	429e      	cmp	r6, r3
 800b2c2:	dc14      	bgt.n	800b2ee <atan+0x76>
 800b2c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b2c8:	429e      	cmp	r6, r3
 800b2ca:	dc0d      	bgt.n	800b2e8 <atan+0x70>
 800b2cc:	a396      	add	r3, pc, #600	; (adr r3, 800b528 <atan+0x2b0>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	ee10 0a10 	vmov	r0, s0
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	f7f4 ffe0 	bl	800029c <__adddf3>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4baf      	ldr	r3, [pc, #700]	; (800b59c <atan+0x324>)
 800b2e0:	f7f5 fc22 	bl	8000b28 <__aeabi_dcmpgt>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d1e6      	bne.n	800b2b6 <atan+0x3e>
 800b2e8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b2ec:	e02b      	b.n	800b346 <atan+0xce>
 800b2ee:	f000 f9a7 	bl	800b640 <fabs>
 800b2f2:	4bab      	ldr	r3, [pc, #684]	; (800b5a0 <atan+0x328>)
 800b2f4:	429e      	cmp	r6, r3
 800b2f6:	ec55 4b10 	vmov	r4, r5, d0
 800b2fa:	f300 80bf 	bgt.w	800b47c <atan+0x204>
 800b2fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b302:	429e      	cmp	r6, r3
 800b304:	f300 80a0 	bgt.w	800b448 <atan+0x1d0>
 800b308:	ee10 2a10 	vmov	r2, s0
 800b30c:	ee10 0a10 	vmov	r0, s0
 800b310:	462b      	mov	r3, r5
 800b312:	4629      	mov	r1, r5
 800b314:	f7f4 ffc2 	bl	800029c <__adddf3>
 800b318:	2200      	movs	r2, #0
 800b31a:	4ba0      	ldr	r3, [pc, #640]	; (800b59c <atan+0x324>)
 800b31c:	f7f4 ffbc 	bl	8000298 <__aeabi_dsub>
 800b320:	2200      	movs	r2, #0
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b32a:	4620      	mov	r0, r4
 800b32c:	4629      	mov	r1, r5
 800b32e:	f7f4 ffb5 	bl	800029c <__adddf3>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4630      	mov	r0, r6
 800b338:	4639      	mov	r1, r7
 800b33a:	f7f5 fa8f 	bl	800085c <__aeabi_ddiv>
 800b33e:	f04f 0a00 	mov.w	sl, #0
 800b342:	4604      	mov	r4, r0
 800b344:	460d      	mov	r5, r1
 800b346:	4622      	mov	r2, r4
 800b348:	462b      	mov	r3, r5
 800b34a:	4620      	mov	r0, r4
 800b34c:	4629      	mov	r1, r5
 800b34e:	f7f5 f95b 	bl	8000608 <__aeabi_dmul>
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	4680      	mov	r8, r0
 800b358:	4689      	mov	r9, r1
 800b35a:	f7f5 f955 	bl	8000608 <__aeabi_dmul>
 800b35e:	a374      	add	r3, pc, #464	; (adr r3, 800b530 <atan+0x2b8>)
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	4606      	mov	r6, r0
 800b366:	460f      	mov	r7, r1
 800b368:	f7f5 f94e 	bl	8000608 <__aeabi_dmul>
 800b36c:	a372      	add	r3, pc, #456	; (adr r3, 800b538 <atan+0x2c0>)
 800b36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b372:	f7f4 ff93 	bl	800029c <__adddf3>
 800b376:	4632      	mov	r2, r6
 800b378:	463b      	mov	r3, r7
 800b37a:	f7f5 f945 	bl	8000608 <__aeabi_dmul>
 800b37e:	a370      	add	r3, pc, #448	; (adr r3, 800b540 <atan+0x2c8>)
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f7f4 ff8a 	bl	800029c <__adddf3>
 800b388:	4632      	mov	r2, r6
 800b38a:	463b      	mov	r3, r7
 800b38c:	f7f5 f93c 	bl	8000608 <__aeabi_dmul>
 800b390:	a36d      	add	r3, pc, #436	; (adr r3, 800b548 <atan+0x2d0>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f4 ff81 	bl	800029c <__adddf3>
 800b39a:	4632      	mov	r2, r6
 800b39c:	463b      	mov	r3, r7
 800b39e:	f7f5 f933 	bl	8000608 <__aeabi_dmul>
 800b3a2:	a36b      	add	r3, pc, #428	; (adr r3, 800b550 <atan+0x2d8>)
 800b3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a8:	f7f4 ff78 	bl	800029c <__adddf3>
 800b3ac:	4632      	mov	r2, r6
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	f7f5 f92a 	bl	8000608 <__aeabi_dmul>
 800b3b4:	a368      	add	r3, pc, #416	; (adr r3, 800b558 <atan+0x2e0>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f4 ff6f 	bl	800029c <__adddf3>
 800b3be:	4642      	mov	r2, r8
 800b3c0:	464b      	mov	r3, r9
 800b3c2:	f7f5 f921 	bl	8000608 <__aeabi_dmul>
 800b3c6:	a366      	add	r3, pc, #408	; (adr r3, 800b560 <atan+0x2e8>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	4680      	mov	r8, r0
 800b3ce:	4689      	mov	r9, r1
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	4639      	mov	r1, r7
 800b3d4:	f7f5 f918 	bl	8000608 <__aeabi_dmul>
 800b3d8:	a363      	add	r3, pc, #396	; (adr r3, 800b568 <atan+0x2f0>)
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f7f4 ff5b 	bl	8000298 <__aeabi_dsub>
 800b3e2:	4632      	mov	r2, r6
 800b3e4:	463b      	mov	r3, r7
 800b3e6:	f7f5 f90f 	bl	8000608 <__aeabi_dmul>
 800b3ea:	a361      	add	r3, pc, #388	; (adr r3, 800b570 <atan+0x2f8>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f4 ff52 	bl	8000298 <__aeabi_dsub>
 800b3f4:	4632      	mov	r2, r6
 800b3f6:	463b      	mov	r3, r7
 800b3f8:	f7f5 f906 	bl	8000608 <__aeabi_dmul>
 800b3fc:	a35e      	add	r3, pc, #376	; (adr r3, 800b578 <atan+0x300>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	f7f4 ff49 	bl	8000298 <__aeabi_dsub>
 800b406:	4632      	mov	r2, r6
 800b408:	463b      	mov	r3, r7
 800b40a:	f7f5 f8fd 	bl	8000608 <__aeabi_dmul>
 800b40e:	a35c      	add	r3, pc, #368	; (adr r3, 800b580 <atan+0x308>)
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	f7f4 ff40 	bl	8000298 <__aeabi_dsub>
 800b418:	4632      	mov	r2, r6
 800b41a:	463b      	mov	r3, r7
 800b41c:	f7f5 f8f4 	bl	8000608 <__aeabi_dmul>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	4640      	mov	r0, r8
 800b426:	4649      	mov	r1, r9
 800b428:	f7f4 ff38 	bl	800029c <__adddf3>
 800b42c:	4622      	mov	r2, r4
 800b42e:	462b      	mov	r3, r5
 800b430:	f7f5 f8ea 	bl	8000608 <__aeabi_dmul>
 800b434:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b438:	4602      	mov	r2, r0
 800b43a:	460b      	mov	r3, r1
 800b43c:	d14b      	bne.n	800b4d6 <atan+0x25e>
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f4 ff29 	bl	8000298 <__aeabi_dsub>
 800b446:	e72c      	b.n	800b2a2 <atan+0x2a>
 800b448:	ee10 0a10 	vmov	r0, s0
 800b44c:	2200      	movs	r2, #0
 800b44e:	4b53      	ldr	r3, [pc, #332]	; (800b59c <atan+0x324>)
 800b450:	4629      	mov	r1, r5
 800b452:	f7f4 ff21 	bl	8000298 <__aeabi_dsub>
 800b456:	2200      	movs	r2, #0
 800b458:	4606      	mov	r6, r0
 800b45a:	460f      	mov	r7, r1
 800b45c:	4b4f      	ldr	r3, [pc, #316]	; (800b59c <atan+0x324>)
 800b45e:	4620      	mov	r0, r4
 800b460:	4629      	mov	r1, r5
 800b462:	f7f4 ff1b 	bl	800029c <__adddf3>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	4630      	mov	r0, r6
 800b46c:	4639      	mov	r1, r7
 800b46e:	f7f5 f9f5 	bl	800085c <__aeabi_ddiv>
 800b472:	f04f 0a01 	mov.w	sl, #1
 800b476:	4604      	mov	r4, r0
 800b478:	460d      	mov	r5, r1
 800b47a:	e764      	b.n	800b346 <atan+0xce>
 800b47c:	4b49      	ldr	r3, [pc, #292]	; (800b5a4 <atan+0x32c>)
 800b47e:	429e      	cmp	r6, r3
 800b480:	dc1d      	bgt.n	800b4be <atan+0x246>
 800b482:	ee10 0a10 	vmov	r0, s0
 800b486:	2200      	movs	r2, #0
 800b488:	4b47      	ldr	r3, [pc, #284]	; (800b5a8 <atan+0x330>)
 800b48a:	4629      	mov	r1, r5
 800b48c:	f7f4 ff04 	bl	8000298 <__aeabi_dsub>
 800b490:	2200      	movs	r2, #0
 800b492:	4606      	mov	r6, r0
 800b494:	460f      	mov	r7, r1
 800b496:	4b44      	ldr	r3, [pc, #272]	; (800b5a8 <atan+0x330>)
 800b498:	4620      	mov	r0, r4
 800b49a:	4629      	mov	r1, r5
 800b49c:	f7f5 f8b4 	bl	8000608 <__aeabi_dmul>
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	4b3e      	ldr	r3, [pc, #248]	; (800b59c <atan+0x324>)
 800b4a4:	f7f4 fefa 	bl	800029c <__adddf3>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	f7f5 f9d4 	bl	800085c <__aeabi_ddiv>
 800b4b4:	f04f 0a02 	mov.w	sl, #2
 800b4b8:	4604      	mov	r4, r0
 800b4ba:	460d      	mov	r5, r1
 800b4bc:	e743      	b.n	800b346 <atan+0xce>
 800b4be:	462b      	mov	r3, r5
 800b4c0:	ee10 2a10 	vmov	r2, s0
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	4939      	ldr	r1, [pc, #228]	; (800b5ac <atan+0x334>)
 800b4c8:	f7f5 f9c8 	bl	800085c <__aeabi_ddiv>
 800b4cc:	f04f 0a03 	mov.w	sl, #3
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	460d      	mov	r5, r1
 800b4d4:	e737      	b.n	800b346 <atan+0xce>
 800b4d6:	4b36      	ldr	r3, [pc, #216]	; (800b5b0 <atan+0x338>)
 800b4d8:	4e36      	ldr	r6, [pc, #216]	; (800b5b4 <atan+0x33c>)
 800b4da:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800b4de:	4456      	add	r6, sl
 800b4e0:	449a      	add	sl, r3
 800b4e2:	e9da 2300 	ldrd	r2, r3, [sl]
 800b4e6:	f7f4 fed7 	bl	8000298 <__aeabi_dsub>
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	462b      	mov	r3, r5
 800b4ee:	f7f4 fed3 	bl	8000298 <__aeabi_dsub>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b4fa:	f7f4 fecd 	bl	8000298 <__aeabi_dsub>
 800b4fe:	f1bb 0f00 	cmp.w	fp, #0
 800b502:	4604      	mov	r4, r0
 800b504:	460d      	mov	r5, r1
 800b506:	f6bf aed6 	bge.w	800b2b6 <atan+0x3e>
 800b50a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b50e:	461d      	mov	r5, r3
 800b510:	e6d1      	b.n	800b2b6 <atan+0x3e>
 800b512:	a51d      	add	r5, pc, #116	; (adr r5, 800b588 <atan+0x310>)
 800b514:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b518:	e6cd      	b.n	800b2b6 <atan+0x3e>
 800b51a:	bf00      	nop
 800b51c:	f3af 8000 	nop.w
 800b520:	54442d18 	.word	0x54442d18
 800b524:	3ff921fb 	.word	0x3ff921fb
 800b528:	8800759c 	.word	0x8800759c
 800b52c:	7e37e43c 	.word	0x7e37e43c
 800b530:	e322da11 	.word	0xe322da11
 800b534:	3f90ad3a 	.word	0x3f90ad3a
 800b538:	24760deb 	.word	0x24760deb
 800b53c:	3fa97b4b 	.word	0x3fa97b4b
 800b540:	a0d03d51 	.word	0xa0d03d51
 800b544:	3fb10d66 	.word	0x3fb10d66
 800b548:	c54c206e 	.word	0xc54c206e
 800b54c:	3fb745cd 	.word	0x3fb745cd
 800b550:	920083ff 	.word	0x920083ff
 800b554:	3fc24924 	.word	0x3fc24924
 800b558:	5555550d 	.word	0x5555550d
 800b55c:	3fd55555 	.word	0x3fd55555
 800b560:	2c6a6c2f 	.word	0x2c6a6c2f
 800b564:	bfa2b444 	.word	0xbfa2b444
 800b568:	52defd9a 	.word	0x52defd9a
 800b56c:	3fadde2d 	.word	0x3fadde2d
 800b570:	af749a6d 	.word	0xaf749a6d
 800b574:	3fb3b0f2 	.word	0x3fb3b0f2
 800b578:	fe231671 	.word	0xfe231671
 800b57c:	3fbc71c6 	.word	0x3fbc71c6
 800b580:	9998ebc4 	.word	0x9998ebc4
 800b584:	3fc99999 	.word	0x3fc99999
 800b588:	54442d18 	.word	0x54442d18
 800b58c:	bff921fb 	.word	0xbff921fb
 800b590:	440fffff 	.word	0x440fffff
 800b594:	7ff00000 	.word	0x7ff00000
 800b598:	3fdbffff 	.word	0x3fdbffff
 800b59c:	3ff00000 	.word	0x3ff00000
 800b5a0:	3ff2ffff 	.word	0x3ff2ffff
 800b5a4:	40037fff 	.word	0x40037fff
 800b5a8:	3ff80000 	.word	0x3ff80000
 800b5ac:	bff00000 	.word	0xbff00000
 800b5b0:	0800d2a8 	.word	0x0800d2a8
 800b5b4:	0800d288 	.word	0x0800d288

0800b5b8 <cos>:
 800b5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5ba:	ec51 0b10 	vmov	r0, r1, d0
 800b5be:	4a1e      	ldr	r2, [pc, #120]	; (800b638 <cos+0x80>)
 800b5c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	dc06      	bgt.n	800b5d6 <cos+0x1e>
 800b5c8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800b630 <cos+0x78>
 800b5cc:	f000 fbbc 	bl	800bd48 <__kernel_cos>
 800b5d0:	ec51 0b10 	vmov	r0, r1, d0
 800b5d4:	e007      	b.n	800b5e6 <cos+0x2e>
 800b5d6:	4a19      	ldr	r2, [pc, #100]	; (800b63c <cos+0x84>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	dd09      	ble.n	800b5f0 <cos+0x38>
 800b5dc:	ee10 2a10 	vmov	r2, s0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	f7f4 fe59 	bl	8000298 <__aeabi_dsub>
 800b5e6:	ec41 0b10 	vmov	d0, r0, r1
 800b5ea:	b005      	add	sp, #20
 800b5ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5f0:	4668      	mov	r0, sp
 800b5f2:	f000 f905 	bl	800b800 <__ieee754_rem_pio2>
 800b5f6:	f000 0003 	and.w	r0, r0, #3
 800b5fa:	2801      	cmp	r0, #1
 800b5fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b600:	ed9d 0b00 	vldr	d0, [sp]
 800b604:	d007      	beq.n	800b616 <cos+0x5e>
 800b606:	2802      	cmp	r0, #2
 800b608:	d00e      	beq.n	800b628 <cos+0x70>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d0de      	beq.n	800b5cc <cos+0x14>
 800b60e:	2001      	movs	r0, #1
 800b610:	f000 ffa2 	bl	800c558 <__kernel_sin>
 800b614:	e7dc      	b.n	800b5d0 <cos+0x18>
 800b616:	f000 ff9f 	bl	800c558 <__kernel_sin>
 800b61a:	ec53 2b10 	vmov	r2, r3, d0
 800b61e:	ee10 0a10 	vmov	r0, s0
 800b622:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b626:	e7de      	b.n	800b5e6 <cos+0x2e>
 800b628:	f000 fb8e 	bl	800bd48 <__kernel_cos>
 800b62c:	e7f5      	b.n	800b61a <cos+0x62>
 800b62e:	bf00      	nop
	...
 800b638:	3fe921fb 	.word	0x3fe921fb
 800b63c:	7fefffff 	.word	0x7fefffff

0800b640 <fabs>:
 800b640:	ec51 0b10 	vmov	r0, r1, d0
 800b644:	ee10 2a10 	vmov	r2, s0
 800b648:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b64c:	ec43 2b10 	vmov	d0, r2, r3
 800b650:	4770      	bx	lr
 800b652:	0000      	movs	r0, r0
 800b654:	0000      	movs	r0, r0
	...

0800b658 <sin>:
 800b658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b65a:	ec51 0b10 	vmov	r0, r1, d0
 800b65e:	4a20      	ldr	r2, [pc, #128]	; (800b6e0 <sin+0x88>)
 800b660:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b664:	4293      	cmp	r3, r2
 800b666:	dc07      	bgt.n	800b678 <sin+0x20>
 800b668:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800b6d8 <sin+0x80>
 800b66c:	2000      	movs	r0, #0
 800b66e:	f000 ff73 	bl	800c558 <__kernel_sin>
 800b672:	ec51 0b10 	vmov	r0, r1, d0
 800b676:	e007      	b.n	800b688 <sin+0x30>
 800b678:	4a1a      	ldr	r2, [pc, #104]	; (800b6e4 <sin+0x8c>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	dd09      	ble.n	800b692 <sin+0x3a>
 800b67e:	ee10 2a10 	vmov	r2, s0
 800b682:	460b      	mov	r3, r1
 800b684:	f7f4 fe08 	bl	8000298 <__aeabi_dsub>
 800b688:	ec41 0b10 	vmov	d0, r0, r1
 800b68c:	b005      	add	sp, #20
 800b68e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b692:	4668      	mov	r0, sp
 800b694:	f000 f8b4 	bl	800b800 <__ieee754_rem_pio2>
 800b698:	f000 0003 	and.w	r0, r0, #3
 800b69c:	2801      	cmp	r0, #1
 800b69e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6a2:	ed9d 0b00 	vldr	d0, [sp]
 800b6a6:	d004      	beq.n	800b6b2 <sin+0x5a>
 800b6a8:	2802      	cmp	r0, #2
 800b6aa:	d005      	beq.n	800b6b8 <sin+0x60>
 800b6ac:	b970      	cbnz	r0, 800b6cc <sin+0x74>
 800b6ae:	2001      	movs	r0, #1
 800b6b0:	e7dd      	b.n	800b66e <sin+0x16>
 800b6b2:	f000 fb49 	bl	800bd48 <__kernel_cos>
 800b6b6:	e7dc      	b.n	800b672 <sin+0x1a>
 800b6b8:	2001      	movs	r0, #1
 800b6ba:	f000 ff4d 	bl	800c558 <__kernel_sin>
 800b6be:	ec53 2b10 	vmov	r2, r3, d0
 800b6c2:	ee10 0a10 	vmov	r0, s0
 800b6c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b6ca:	e7dd      	b.n	800b688 <sin+0x30>
 800b6cc:	f000 fb3c 	bl	800bd48 <__kernel_cos>
 800b6d0:	e7f5      	b.n	800b6be <sin+0x66>
 800b6d2:	bf00      	nop
 800b6d4:	f3af 8000 	nop.w
	...
 800b6e0:	3fe921fb 	.word	0x3fe921fb
 800b6e4:	7fefffff 	.word	0x7fefffff

0800b6e8 <tan>:
 800b6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6ea:	ec51 0b10 	vmov	r0, r1, d0
 800b6ee:	4a14      	ldr	r2, [pc, #80]	; (800b740 <tan+0x58>)
 800b6f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	dc05      	bgt.n	800b704 <tan+0x1c>
 800b6f8:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800b738 <tan+0x50>
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	f000 ffe7 	bl	800c6d0 <__kernel_tan>
 800b702:	e009      	b.n	800b718 <tan+0x30>
 800b704:	4a0f      	ldr	r2, [pc, #60]	; (800b744 <tan+0x5c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	dd09      	ble.n	800b71e <tan+0x36>
 800b70a:	ee10 2a10 	vmov	r2, s0
 800b70e:	460b      	mov	r3, r1
 800b710:	f7f4 fdc2 	bl	8000298 <__aeabi_dsub>
 800b714:	ec41 0b10 	vmov	d0, r0, r1
 800b718:	b005      	add	sp, #20
 800b71a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b71e:	4668      	mov	r0, sp
 800b720:	f000 f86e 	bl	800b800 <__ieee754_rem_pio2>
 800b724:	0040      	lsls	r0, r0, #1
 800b726:	f000 0002 	and.w	r0, r0, #2
 800b72a:	f1c0 0001 	rsb	r0, r0, #1
 800b72e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b732:	ed9d 0b00 	vldr	d0, [sp]
 800b736:	e7e2      	b.n	800b6fe <tan+0x16>
	...
 800b740:	3fe921fb 	.word	0x3fe921fb
 800b744:	7fefffff 	.word	0x7fefffff

0800b748 <sqrt>:
 800b748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b74c:	ed2d 8b02 	vpush	{d8}
 800b750:	b08b      	sub	sp, #44	; 0x2c
 800b752:	ec55 4b10 	vmov	r4, r5, d0
 800b756:	f000 fa45 	bl	800bbe4 <__ieee754_sqrt>
 800b75a:	4b26      	ldr	r3, [pc, #152]	; (800b7f4 <sqrt+0xac>)
 800b75c:	eeb0 8a40 	vmov.f32	s16, s0
 800b760:	eef0 8a60 	vmov.f32	s17, s1
 800b764:	f993 6000 	ldrsb.w	r6, [r3]
 800b768:	1c73      	adds	r3, r6, #1
 800b76a:	d02a      	beq.n	800b7c2 <sqrt+0x7a>
 800b76c:	4622      	mov	r2, r4
 800b76e:	462b      	mov	r3, r5
 800b770:	4620      	mov	r0, r4
 800b772:	4629      	mov	r1, r5
 800b774:	f7f5 f9e2 	bl	8000b3c <__aeabi_dcmpun>
 800b778:	4607      	mov	r7, r0
 800b77a:	bb10      	cbnz	r0, 800b7c2 <sqrt+0x7a>
 800b77c:	f04f 0800 	mov.w	r8, #0
 800b780:	f04f 0900 	mov.w	r9, #0
 800b784:	4642      	mov	r2, r8
 800b786:	464b      	mov	r3, r9
 800b788:	4620      	mov	r0, r4
 800b78a:	4629      	mov	r1, r5
 800b78c:	f7f5 f9ae 	bl	8000aec <__aeabi_dcmplt>
 800b790:	b1b8      	cbz	r0, 800b7c2 <sqrt+0x7a>
 800b792:	2301      	movs	r3, #1
 800b794:	9300      	str	r3, [sp, #0]
 800b796:	4b18      	ldr	r3, [pc, #96]	; (800b7f8 <sqrt+0xb0>)
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	9708      	str	r7, [sp, #32]
 800b79c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b7a0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b7a4:	b9b6      	cbnz	r6, 800b7d4 <sqrt+0x8c>
 800b7a6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b7aa:	4668      	mov	r0, sp
 800b7ac:	f001 f9e0 	bl	800cb70 <matherr>
 800b7b0:	b1d0      	cbz	r0, 800b7e8 <sqrt+0xa0>
 800b7b2:	9b08      	ldr	r3, [sp, #32]
 800b7b4:	b11b      	cbz	r3, 800b7be <sqrt+0x76>
 800b7b6:	f7fd fceb 	bl	8009190 <__errno>
 800b7ba:	9b08      	ldr	r3, [sp, #32]
 800b7bc:	6003      	str	r3, [r0, #0]
 800b7be:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b7c2:	eeb0 0a48 	vmov.f32	s0, s16
 800b7c6:	eef0 0a68 	vmov.f32	s1, s17
 800b7ca:	b00b      	add	sp, #44	; 0x2c
 800b7cc:	ecbd 8b02 	vpop	{d8}
 800b7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	464b      	mov	r3, r9
 800b7d8:	4640      	mov	r0, r8
 800b7da:	4649      	mov	r1, r9
 800b7dc:	f7f5 f83e 	bl	800085c <__aeabi_ddiv>
 800b7e0:	2e02      	cmp	r6, #2
 800b7e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b7e6:	d1e0      	bne.n	800b7aa <sqrt+0x62>
 800b7e8:	f7fd fcd2 	bl	8009190 <__errno>
 800b7ec:	2321      	movs	r3, #33	; 0x21
 800b7ee:	6003      	str	r3, [r0, #0]
 800b7f0:	e7df      	b.n	800b7b2 <sqrt+0x6a>
 800b7f2:	bf00      	nop
 800b7f4:	200001e0 	.word	0x200001e0
 800b7f8:	0800d2c8 	.word	0x0800d2c8
 800b7fc:	00000000 	.word	0x00000000

0800b800 <__ieee754_rem_pio2>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	ec57 6b10 	vmov	r6, r7, d0
 800b808:	4bc3      	ldr	r3, [pc, #780]	; (800bb18 <__ieee754_rem_pio2+0x318>)
 800b80a:	b08d      	sub	sp, #52	; 0x34
 800b80c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b810:	4598      	cmp	r8, r3
 800b812:	4604      	mov	r4, r0
 800b814:	9704      	str	r7, [sp, #16]
 800b816:	dc07      	bgt.n	800b828 <__ieee754_rem_pio2+0x28>
 800b818:	2200      	movs	r2, #0
 800b81a:	2300      	movs	r3, #0
 800b81c:	ed84 0b00 	vstr	d0, [r4]
 800b820:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b824:	2500      	movs	r5, #0
 800b826:	e027      	b.n	800b878 <__ieee754_rem_pio2+0x78>
 800b828:	4bbc      	ldr	r3, [pc, #752]	; (800bb1c <__ieee754_rem_pio2+0x31c>)
 800b82a:	4598      	cmp	r8, r3
 800b82c:	dc75      	bgt.n	800b91a <__ieee754_rem_pio2+0x11a>
 800b82e:	9b04      	ldr	r3, [sp, #16]
 800b830:	4dbb      	ldr	r5, [pc, #748]	; (800bb20 <__ieee754_rem_pio2+0x320>)
 800b832:	2b00      	cmp	r3, #0
 800b834:	ee10 0a10 	vmov	r0, s0
 800b838:	a3a9      	add	r3, pc, #676	; (adr r3, 800bae0 <__ieee754_rem_pio2+0x2e0>)
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	4639      	mov	r1, r7
 800b840:	dd36      	ble.n	800b8b0 <__ieee754_rem_pio2+0xb0>
 800b842:	f7f4 fd29 	bl	8000298 <__aeabi_dsub>
 800b846:	45a8      	cmp	r8, r5
 800b848:	4606      	mov	r6, r0
 800b84a:	460f      	mov	r7, r1
 800b84c:	d018      	beq.n	800b880 <__ieee754_rem_pio2+0x80>
 800b84e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bae8 <__ieee754_rem_pio2+0x2e8>)
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	f7f4 fd20 	bl	8000298 <__aeabi_dsub>
 800b858:	4602      	mov	r2, r0
 800b85a:	460b      	mov	r3, r1
 800b85c:	e9c4 2300 	strd	r2, r3, [r4]
 800b860:	4630      	mov	r0, r6
 800b862:	4639      	mov	r1, r7
 800b864:	f7f4 fd18 	bl	8000298 <__aeabi_dsub>
 800b868:	a39f      	add	r3, pc, #636	; (adr r3, 800bae8 <__ieee754_rem_pio2+0x2e8>)
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f7f4 fd13 	bl	8000298 <__aeabi_dsub>
 800b872:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b876:	2501      	movs	r5, #1
 800b878:	4628      	mov	r0, r5
 800b87a:	b00d      	add	sp, #52	; 0x34
 800b87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b880:	a39b      	add	r3, pc, #620	; (adr r3, 800baf0 <__ieee754_rem_pio2+0x2f0>)
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f7f4 fd07 	bl	8000298 <__aeabi_dsub>
 800b88a:	a39b      	add	r3, pc, #620	; (adr r3, 800baf8 <__ieee754_rem_pio2+0x2f8>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	4606      	mov	r6, r0
 800b892:	460f      	mov	r7, r1
 800b894:	f7f4 fd00 	bl	8000298 <__aeabi_dsub>
 800b898:	4602      	mov	r2, r0
 800b89a:	460b      	mov	r3, r1
 800b89c:	e9c4 2300 	strd	r2, r3, [r4]
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	f7f4 fcf8 	bl	8000298 <__aeabi_dsub>
 800b8a8:	a393      	add	r3, pc, #588	; (adr r3, 800baf8 <__ieee754_rem_pio2+0x2f8>)
 800b8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ae:	e7de      	b.n	800b86e <__ieee754_rem_pio2+0x6e>
 800b8b0:	f7f4 fcf4 	bl	800029c <__adddf3>
 800b8b4:	45a8      	cmp	r8, r5
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	460f      	mov	r7, r1
 800b8ba:	d016      	beq.n	800b8ea <__ieee754_rem_pio2+0xea>
 800b8bc:	a38a      	add	r3, pc, #552	; (adr r3, 800bae8 <__ieee754_rem_pio2+0x2e8>)
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	f7f4 fceb 	bl	800029c <__adddf3>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	e9c4 2300 	strd	r2, r3, [r4]
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	4639      	mov	r1, r7
 800b8d2:	f7f4 fce1 	bl	8000298 <__aeabi_dsub>
 800b8d6:	a384      	add	r3, pc, #528	; (adr r3, 800bae8 <__ieee754_rem_pio2+0x2e8>)
 800b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8dc:	f7f4 fcde 	bl	800029c <__adddf3>
 800b8e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b8e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b8e8:	e7c6      	b.n	800b878 <__ieee754_rem_pio2+0x78>
 800b8ea:	a381      	add	r3, pc, #516	; (adr r3, 800baf0 <__ieee754_rem_pio2+0x2f0>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f7f4 fcd4 	bl	800029c <__adddf3>
 800b8f4:	a380      	add	r3, pc, #512	; (adr r3, 800baf8 <__ieee754_rem_pio2+0x2f8>)
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	460f      	mov	r7, r1
 800b8fe:	f7f4 fccd 	bl	800029c <__adddf3>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	e9c4 2300 	strd	r2, r3, [r4]
 800b90a:	4630      	mov	r0, r6
 800b90c:	4639      	mov	r1, r7
 800b90e:	f7f4 fcc3 	bl	8000298 <__aeabi_dsub>
 800b912:	a379      	add	r3, pc, #484	; (adr r3, 800baf8 <__ieee754_rem_pio2+0x2f8>)
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	e7e0      	b.n	800b8dc <__ieee754_rem_pio2+0xdc>
 800b91a:	4b82      	ldr	r3, [pc, #520]	; (800bb24 <__ieee754_rem_pio2+0x324>)
 800b91c:	4598      	cmp	r8, r3
 800b91e:	f300 80d0 	bgt.w	800bac2 <__ieee754_rem_pio2+0x2c2>
 800b922:	f7ff fe8d 	bl	800b640 <fabs>
 800b926:	ec57 6b10 	vmov	r6, r7, d0
 800b92a:	ee10 0a10 	vmov	r0, s0
 800b92e:	a374      	add	r3, pc, #464	; (adr r3, 800bb00 <__ieee754_rem_pio2+0x300>)
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	4639      	mov	r1, r7
 800b936:	f7f4 fe67 	bl	8000608 <__aeabi_dmul>
 800b93a:	2200      	movs	r2, #0
 800b93c:	4b7a      	ldr	r3, [pc, #488]	; (800bb28 <__ieee754_rem_pio2+0x328>)
 800b93e:	f7f4 fcad 	bl	800029c <__adddf3>
 800b942:	f7f5 f911 	bl	8000b68 <__aeabi_d2iz>
 800b946:	4605      	mov	r5, r0
 800b948:	f7f4 fdf4 	bl	8000534 <__aeabi_i2d>
 800b94c:	a364      	add	r3, pc, #400	; (adr r3, 800bae0 <__ieee754_rem_pio2+0x2e0>)
 800b94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b956:	f7f4 fe57 	bl	8000608 <__aeabi_dmul>
 800b95a:	4602      	mov	r2, r0
 800b95c:	460b      	mov	r3, r1
 800b95e:	4630      	mov	r0, r6
 800b960:	4639      	mov	r1, r7
 800b962:	f7f4 fc99 	bl	8000298 <__aeabi_dsub>
 800b966:	a360      	add	r3, pc, #384	; (adr r3, 800bae8 <__ieee754_rem_pio2+0x2e8>)
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	4682      	mov	sl, r0
 800b96e:	468b      	mov	fp, r1
 800b970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b974:	f7f4 fe48 	bl	8000608 <__aeabi_dmul>
 800b978:	2d1f      	cmp	r5, #31
 800b97a:	4606      	mov	r6, r0
 800b97c:	460f      	mov	r7, r1
 800b97e:	dc0c      	bgt.n	800b99a <__ieee754_rem_pio2+0x19a>
 800b980:	1e6a      	subs	r2, r5, #1
 800b982:	4b6a      	ldr	r3, [pc, #424]	; (800bb2c <__ieee754_rem_pio2+0x32c>)
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	4543      	cmp	r3, r8
 800b98a:	d006      	beq.n	800b99a <__ieee754_rem_pio2+0x19a>
 800b98c:	4632      	mov	r2, r6
 800b98e:	463b      	mov	r3, r7
 800b990:	4650      	mov	r0, sl
 800b992:	4659      	mov	r1, fp
 800b994:	f7f4 fc80 	bl	8000298 <__aeabi_dsub>
 800b998:	e00e      	b.n	800b9b8 <__ieee754_rem_pio2+0x1b8>
 800b99a:	4632      	mov	r2, r6
 800b99c:	463b      	mov	r3, r7
 800b99e:	4650      	mov	r0, sl
 800b9a0:	4659      	mov	r1, fp
 800b9a2:	f7f4 fc79 	bl	8000298 <__aeabi_dsub>
 800b9a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b9aa:	9305      	str	r3, [sp, #20]
 800b9ac:	9a05      	ldr	r2, [sp, #20]
 800b9ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	2b10      	cmp	r3, #16
 800b9b6:	dc02      	bgt.n	800b9be <__ieee754_rem_pio2+0x1be>
 800b9b8:	e9c4 0100 	strd	r0, r1, [r4]
 800b9bc:	e039      	b.n	800ba32 <__ieee754_rem_pio2+0x232>
 800b9be:	a34c      	add	r3, pc, #304	; (adr r3, 800baf0 <__ieee754_rem_pio2+0x2f0>)
 800b9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9c8:	f7f4 fe1e 	bl	8000608 <__aeabi_dmul>
 800b9cc:	4606      	mov	r6, r0
 800b9ce:	460f      	mov	r7, r1
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4650      	mov	r0, sl
 800b9d6:	4659      	mov	r1, fp
 800b9d8:	f7f4 fc5e 	bl	8000298 <__aeabi_dsub>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	4689      	mov	r9, r1
 800b9e4:	4650      	mov	r0, sl
 800b9e6:	4659      	mov	r1, fp
 800b9e8:	f7f4 fc56 	bl	8000298 <__aeabi_dsub>
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	463b      	mov	r3, r7
 800b9f0:	f7f4 fc52 	bl	8000298 <__aeabi_dsub>
 800b9f4:	a340      	add	r3, pc, #256	; (adr r3, 800baf8 <__ieee754_rem_pio2+0x2f8>)
 800b9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba02:	f7f4 fe01 	bl	8000608 <__aeabi_dmul>
 800ba06:	4632      	mov	r2, r6
 800ba08:	463b      	mov	r3, r7
 800ba0a:	f7f4 fc45 	bl	8000298 <__aeabi_dsub>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	4606      	mov	r6, r0
 800ba14:	460f      	mov	r7, r1
 800ba16:	4640      	mov	r0, r8
 800ba18:	4649      	mov	r1, r9
 800ba1a:	f7f4 fc3d 	bl	8000298 <__aeabi_dsub>
 800ba1e:	9a05      	ldr	r2, [sp, #20]
 800ba20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	2b31      	cmp	r3, #49	; 0x31
 800ba28:	dc20      	bgt.n	800ba6c <__ieee754_rem_pio2+0x26c>
 800ba2a:	e9c4 0100 	strd	r0, r1, [r4]
 800ba2e:	46c2      	mov	sl, r8
 800ba30:	46cb      	mov	fp, r9
 800ba32:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ba36:	4650      	mov	r0, sl
 800ba38:	4642      	mov	r2, r8
 800ba3a:	464b      	mov	r3, r9
 800ba3c:	4659      	mov	r1, fp
 800ba3e:	f7f4 fc2b 	bl	8000298 <__aeabi_dsub>
 800ba42:	463b      	mov	r3, r7
 800ba44:	4632      	mov	r2, r6
 800ba46:	f7f4 fc27 	bl	8000298 <__aeabi_dsub>
 800ba4a:	9b04      	ldr	r3, [sp, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba52:	f6bf af11 	bge.w	800b878 <__ieee754_rem_pio2+0x78>
 800ba56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ba5a:	6063      	str	r3, [r4, #4]
 800ba5c:	f8c4 8000 	str.w	r8, [r4]
 800ba60:	60a0      	str	r0, [r4, #8]
 800ba62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba66:	60e3      	str	r3, [r4, #12]
 800ba68:	426d      	negs	r5, r5
 800ba6a:	e705      	b.n	800b878 <__ieee754_rem_pio2+0x78>
 800ba6c:	a326      	add	r3, pc, #152	; (adr r3, 800bb08 <__ieee754_rem_pio2+0x308>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba76:	f7f4 fdc7 	bl	8000608 <__aeabi_dmul>
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	460f      	mov	r7, r1
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	4640      	mov	r0, r8
 800ba84:	4649      	mov	r1, r9
 800ba86:	f7f4 fc07 	bl	8000298 <__aeabi_dsub>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4682      	mov	sl, r0
 800ba90:	468b      	mov	fp, r1
 800ba92:	4640      	mov	r0, r8
 800ba94:	4649      	mov	r1, r9
 800ba96:	f7f4 fbff 	bl	8000298 <__aeabi_dsub>
 800ba9a:	4632      	mov	r2, r6
 800ba9c:	463b      	mov	r3, r7
 800ba9e:	f7f4 fbfb 	bl	8000298 <__aeabi_dsub>
 800baa2:	a31b      	add	r3, pc, #108	; (adr r3, 800bb10 <__ieee754_rem_pio2+0x310>)
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	4606      	mov	r6, r0
 800baaa:	460f      	mov	r7, r1
 800baac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bab0:	f7f4 fdaa 	bl	8000608 <__aeabi_dmul>
 800bab4:	4632      	mov	r2, r6
 800bab6:	463b      	mov	r3, r7
 800bab8:	f7f4 fbee 	bl	8000298 <__aeabi_dsub>
 800babc:	4606      	mov	r6, r0
 800babe:	460f      	mov	r7, r1
 800bac0:	e764      	b.n	800b98c <__ieee754_rem_pio2+0x18c>
 800bac2:	4b1b      	ldr	r3, [pc, #108]	; (800bb30 <__ieee754_rem_pio2+0x330>)
 800bac4:	4598      	cmp	r8, r3
 800bac6:	dd35      	ble.n	800bb34 <__ieee754_rem_pio2+0x334>
 800bac8:	ee10 2a10 	vmov	r2, s0
 800bacc:	463b      	mov	r3, r7
 800bace:	4630      	mov	r0, r6
 800bad0:	4639      	mov	r1, r7
 800bad2:	f7f4 fbe1 	bl	8000298 <__aeabi_dsub>
 800bad6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bada:	e9c4 0100 	strd	r0, r1, [r4]
 800bade:	e6a1      	b.n	800b824 <__ieee754_rem_pio2+0x24>
 800bae0:	54400000 	.word	0x54400000
 800bae4:	3ff921fb 	.word	0x3ff921fb
 800bae8:	1a626331 	.word	0x1a626331
 800baec:	3dd0b461 	.word	0x3dd0b461
 800baf0:	1a600000 	.word	0x1a600000
 800baf4:	3dd0b461 	.word	0x3dd0b461
 800baf8:	2e037073 	.word	0x2e037073
 800bafc:	3ba3198a 	.word	0x3ba3198a
 800bb00:	6dc9c883 	.word	0x6dc9c883
 800bb04:	3fe45f30 	.word	0x3fe45f30
 800bb08:	2e000000 	.word	0x2e000000
 800bb0c:	3ba3198a 	.word	0x3ba3198a
 800bb10:	252049c1 	.word	0x252049c1
 800bb14:	397b839a 	.word	0x397b839a
 800bb18:	3fe921fb 	.word	0x3fe921fb
 800bb1c:	4002d97b 	.word	0x4002d97b
 800bb20:	3ff921fb 	.word	0x3ff921fb
 800bb24:	413921fb 	.word	0x413921fb
 800bb28:	3fe00000 	.word	0x3fe00000
 800bb2c:	0800d2d0 	.word	0x0800d2d0
 800bb30:	7fefffff 	.word	0x7fefffff
 800bb34:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bb38:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bb3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bb40:	4630      	mov	r0, r6
 800bb42:	460f      	mov	r7, r1
 800bb44:	f7f5 f810 	bl	8000b68 <__aeabi_d2iz>
 800bb48:	f7f4 fcf4 	bl	8000534 <__aeabi_i2d>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	4630      	mov	r0, r6
 800bb52:	4639      	mov	r1, r7
 800bb54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb58:	f7f4 fb9e 	bl	8000298 <__aeabi_dsub>
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	4b1f      	ldr	r3, [pc, #124]	; (800bbdc <__ieee754_rem_pio2+0x3dc>)
 800bb60:	f7f4 fd52 	bl	8000608 <__aeabi_dmul>
 800bb64:	460f      	mov	r7, r1
 800bb66:	4606      	mov	r6, r0
 800bb68:	f7f4 fffe 	bl	8000b68 <__aeabi_d2iz>
 800bb6c:	f7f4 fce2 	bl	8000534 <__aeabi_i2d>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4630      	mov	r0, r6
 800bb76:	4639      	mov	r1, r7
 800bb78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb7c:	f7f4 fb8c 	bl	8000298 <__aeabi_dsub>
 800bb80:	2200      	movs	r2, #0
 800bb82:	4b16      	ldr	r3, [pc, #88]	; (800bbdc <__ieee754_rem_pio2+0x3dc>)
 800bb84:	f7f4 fd40 	bl	8000608 <__aeabi_dmul>
 800bb88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bb8c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800bb90:	f04f 0803 	mov.w	r8, #3
 800bb94:	2600      	movs	r6, #0
 800bb96:	2700      	movs	r7, #0
 800bb98:	4632      	mov	r2, r6
 800bb9a:	463b      	mov	r3, r7
 800bb9c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bba0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800bba4:	f7f4 ff98 	bl	8000ad8 <__aeabi_dcmpeq>
 800bba8:	b9b0      	cbnz	r0, 800bbd8 <__ieee754_rem_pio2+0x3d8>
 800bbaa:	4b0d      	ldr	r3, [pc, #52]	; (800bbe0 <__ieee754_rem_pio2+0x3e0>)
 800bbac:	9301      	str	r3, [sp, #4]
 800bbae:	2302      	movs	r3, #2
 800bbb0:	9300      	str	r3, [sp, #0]
 800bbb2:	462a      	mov	r2, r5
 800bbb4:	4643      	mov	r3, r8
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	a806      	add	r0, sp, #24
 800bbba:	f000 f98d 	bl	800bed8 <__kernel_rem_pio2>
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	4605      	mov	r5, r0
 800bbc4:	f6bf ae58 	bge.w	800b878 <__ieee754_rem_pio2+0x78>
 800bbc8:	6863      	ldr	r3, [r4, #4]
 800bbca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bbce:	6063      	str	r3, [r4, #4]
 800bbd0:	68e3      	ldr	r3, [r4, #12]
 800bbd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bbd6:	e746      	b.n	800ba66 <__ieee754_rem_pio2+0x266>
 800bbd8:	46d0      	mov	r8, sl
 800bbda:	e7dd      	b.n	800bb98 <__ieee754_rem_pio2+0x398>
 800bbdc:	41700000 	.word	0x41700000
 800bbe0:	0800d350 	.word	0x0800d350

0800bbe4 <__ieee754_sqrt>:
 800bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe8:	4955      	ldr	r1, [pc, #340]	; (800bd40 <__ieee754_sqrt+0x15c>)
 800bbea:	ec55 4b10 	vmov	r4, r5, d0
 800bbee:	43a9      	bics	r1, r5
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	462a      	mov	r2, r5
 800bbf4:	d112      	bne.n	800bc1c <__ieee754_sqrt+0x38>
 800bbf6:	ee10 2a10 	vmov	r2, s0
 800bbfa:	ee10 0a10 	vmov	r0, s0
 800bbfe:	4629      	mov	r1, r5
 800bc00:	f7f4 fd02 	bl	8000608 <__aeabi_dmul>
 800bc04:	4602      	mov	r2, r0
 800bc06:	460b      	mov	r3, r1
 800bc08:	4620      	mov	r0, r4
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	f7f4 fb46 	bl	800029c <__adddf3>
 800bc10:	4604      	mov	r4, r0
 800bc12:	460d      	mov	r5, r1
 800bc14:	ec45 4b10 	vmov	d0, r4, r5
 800bc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc1c:	2d00      	cmp	r5, #0
 800bc1e:	ee10 0a10 	vmov	r0, s0
 800bc22:	4621      	mov	r1, r4
 800bc24:	dc0f      	bgt.n	800bc46 <__ieee754_sqrt+0x62>
 800bc26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc2a:	4330      	orrs	r0, r6
 800bc2c:	d0f2      	beq.n	800bc14 <__ieee754_sqrt+0x30>
 800bc2e:	b155      	cbz	r5, 800bc46 <__ieee754_sqrt+0x62>
 800bc30:	ee10 2a10 	vmov	r2, s0
 800bc34:	4620      	mov	r0, r4
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f4 fb2e 	bl	8000298 <__aeabi_dsub>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	f7f4 fe0c 	bl	800085c <__aeabi_ddiv>
 800bc44:	e7e4      	b.n	800bc10 <__ieee754_sqrt+0x2c>
 800bc46:	151b      	asrs	r3, r3, #20
 800bc48:	d073      	beq.n	800bd32 <__ieee754_sqrt+0x14e>
 800bc4a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc4e:	07dd      	lsls	r5, r3, #31
 800bc50:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bc54:	bf48      	it	mi
 800bc56:	0fc8      	lsrmi	r0, r1, #31
 800bc58:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bc5c:	bf44      	itt	mi
 800bc5e:	0049      	lslmi	r1, r1, #1
 800bc60:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800bc64:	2500      	movs	r5, #0
 800bc66:	1058      	asrs	r0, r3, #1
 800bc68:	0fcb      	lsrs	r3, r1, #31
 800bc6a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800bc6e:	0049      	lsls	r1, r1, #1
 800bc70:	2316      	movs	r3, #22
 800bc72:	462c      	mov	r4, r5
 800bc74:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800bc78:	19a7      	adds	r7, r4, r6
 800bc7a:	4297      	cmp	r7, r2
 800bc7c:	bfde      	ittt	le
 800bc7e:	19bc      	addle	r4, r7, r6
 800bc80:	1bd2      	suble	r2, r2, r7
 800bc82:	19ad      	addle	r5, r5, r6
 800bc84:	0fcf      	lsrs	r7, r1, #31
 800bc86:	3b01      	subs	r3, #1
 800bc88:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800bc8c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bc94:	d1f0      	bne.n	800bc78 <__ieee754_sqrt+0x94>
 800bc96:	f04f 0c20 	mov.w	ip, #32
 800bc9a:	469e      	mov	lr, r3
 800bc9c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bca0:	42a2      	cmp	r2, r4
 800bca2:	eb06 070e 	add.w	r7, r6, lr
 800bca6:	dc02      	bgt.n	800bcae <__ieee754_sqrt+0xca>
 800bca8:	d112      	bne.n	800bcd0 <__ieee754_sqrt+0xec>
 800bcaa:	428f      	cmp	r7, r1
 800bcac:	d810      	bhi.n	800bcd0 <__ieee754_sqrt+0xec>
 800bcae:	2f00      	cmp	r7, #0
 800bcb0:	eb07 0e06 	add.w	lr, r7, r6
 800bcb4:	da42      	bge.n	800bd3c <__ieee754_sqrt+0x158>
 800bcb6:	f1be 0f00 	cmp.w	lr, #0
 800bcba:	db3f      	blt.n	800bd3c <__ieee754_sqrt+0x158>
 800bcbc:	f104 0801 	add.w	r8, r4, #1
 800bcc0:	1b12      	subs	r2, r2, r4
 800bcc2:	428f      	cmp	r7, r1
 800bcc4:	bf88      	it	hi
 800bcc6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800bcca:	1bc9      	subs	r1, r1, r7
 800bccc:	4433      	add	r3, r6
 800bcce:	4644      	mov	r4, r8
 800bcd0:	0052      	lsls	r2, r2, #1
 800bcd2:	f1bc 0c01 	subs.w	ip, ip, #1
 800bcd6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800bcda:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bcde:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bce2:	d1dd      	bne.n	800bca0 <__ieee754_sqrt+0xbc>
 800bce4:	430a      	orrs	r2, r1
 800bce6:	d006      	beq.n	800bcf6 <__ieee754_sqrt+0x112>
 800bce8:	1c5c      	adds	r4, r3, #1
 800bcea:	bf13      	iteet	ne
 800bcec:	3301      	addne	r3, #1
 800bcee:	3501      	addeq	r5, #1
 800bcf0:	4663      	moveq	r3, ip
 800bcf2:	f023 0301 	bicne.w	r3, r3, #1
 800bcf6:	106a      	asrs	r2, r5, #1
 800bcf8:	085b      	lsrs	r3, r3, #1
 800bcfa:	07e9      	lsls	r1, r5, #31
 800bcfc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800bd00:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800bd04:	bf48      	it	mi
 800bd06:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800bd0a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800bd0e:	461c      	mov	r4, r3
 800bd10:	e780      	b.n	800bc14 <__ieee754_sqrt+0x30>
 800bd12:	0aca      	lsrs	r2, r1, #11
 800bd14:	3815      	subs	r0, #21
 800bd16:	0549      	lsls	r1, r1, #21
 800bd18:	2a00      	cmp	r2, #0
 800bd1a:	d0fa      	beq.n	800bd12 <__ieee754_sqrt+0x12e>
 800bd1c:	02d6      	lsls	r6, r2, #11
 800bd1e:	d50a      	bpl.n	800bd36 <__ieee754_sqrt+0x152>
 800bd20:	f1c3 0420 	rsb	r4, r3, #32
 800bd24:	fa21 f404 	lsr.w	r4, r1, r4
 800bd28:	1e5d      	subs	r5, r3, #1
 800bd2a:	4099      	lsls	r1, r3
 800bd2c:	4322      	orrs	r2, r4
 800bd2e:	1b43      	subs	r3, r0, r5
 800bd30:	e78b      	b.n	800bc4a <__ieee754_sqrt+0x66>
 800bd32:	4618      	mov	r0, r3
 800bd34:	e7f0      	b.n	800bd18 <__ieee754_sqrt+0x134>
 800bd36:	0052      	lsls	r2, r2, #1
 800bd38:	3301      	adds	r3, #1
 800bd3a:	e7ef      	b.n	800bd1c <__ieee754_sqrt+0x138>
 800bd3c:	46a0      	mov	r8, r4
 800bd3e:	e7bf      	b.n	800bcc0 <__ieee754_sqrt+0xdc>
 800bd40:	7ff00000 	.word	0x7ff00000
 800bd44:	00000000 	.word	0x00000000

0800bd48 <__kernel_cos>:
 800bd48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	ec59 8b10 	vmov	r8, r9, d0
 800bd50:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800bd54:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800bd58:	ed2d 8b02 	vpush	{d8}
 800bd5c:	eeb0 8a41 	vmov.f32	s16, s2
 800bd60:	eef0 8a61 	vmov.f32	s17, s3
 800bd64:	da07      	bge.n	800bd76 <__kernel_cos+0x2e>
 800bd66:	ee10 0a10 	vmov	r0, s0
 800bd6a:	4649      	mov	r1, r9
 800bd6c:	f7f4 fefc 	bl	8000b68 <__aeabi_d2iz>
 800bd70:	2800      	cmp	r0, #0
 800bd72:	f000 8089 	beq.w	800be88 <__kernel_cos+0x140>
 800bd76:	4642      	mov	r2, r8
 800bd78:	464b      	mov	r3, r9
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	f7f4 fc43 	bl	8000608 <__aeabi_dmul>
 800bd82:	2200      	movs	r2, #0
 800bd84:	4b4e      	ldr	r3, [pc, #312]	; (800bec0 <__kernel_cos+0x178>)
 800bd86:	4604      	mov	r4, r0
 800bd88:	460d      	mov	r5, r1
 800bd8a:	f7f4 fc3d 	bl	8000608 <__aeabi_dmul>
 800bd8e:	a340      	add	r3, pc, #256	; (adr r3, 800be90 <__kernel_cos+0x148>)
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	4682      	mov	sl, r0
 800bd96:	468b      	mov	fp, r1
 800bd98:	4620      	mov	r0, r4
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	f7f4 fc34 	bl	8000608 <__aeabi_dmul>
 800bda0:	a33d      	add	r3, pc, #244	; (adr r3, 800be98 <__kernel_cos+0x150>)
 800bda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda6:	f7f4 fa79 	bl	800029c <__adddf3>
 800bdaa:	4622      	mov	r2, r4
 800bdac:	462b      	mov	r3, r5
 800bdae:	f7f4 fc2b 	bl	8000608 <__aeabi_dmul>
 800bdb2:	a33b      	add	r3, pc, #236	; (adr r3, 800bea0 <__kernel_cos+0x158>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fa6e 	bl	8000298 <__aeabi_dsub>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	f7f4 fc22 	bl	8000608 <__aeabi_dmul>
 800bdc4:	a338      	add	r3, pc, #224	; (adr r3, 800bea8 <__kernel_cos+0x160>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 fa67 	bl	800029c <__adddf3>
 800bdce:	4622      	mov	r2, r4
 800bdd0:	462b      	mov	r3, r5
 800bdd2:	f7f4 fc19 	bl	8000608 <__aeabi_dmul>
 800bdd6:	a336      	add	r3, pc, #216	; (adr r3, 800beb0 <__kernel_cos+0x168>)
 800bdd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bddc:	f7f4 fa5c 	bl	8000298 <__aeabi_dsub>
 800bde0:	4622      	mov	r2, r4
 800bde2:	462b      	mov	r3, r5
 800bde4:	f7f4 fc10 	bl	8000608 <__aeabi_dmul>
 800bde8:	a333      	add	r3, pc, #204	; (adr r3, 800beb8 <__kernel_cos+0x170>)
 800bdea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdee:	f7f4 fa55 	bl	800029c <__adddf3>
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	462b      	mov	r3, r5
 800bdf6:	f7f4 fc07 	bl	8000608 <__aeabi_dmul>
 800bdfa:	4622      	mov	r2, r4
 800bdfc:	462b      	mov	r3, r5
 800bdfe:	f7f4 fc03 	bl	8000608 <__aeabi_dmul>
 800be02:	ec53 2b18 	vmov	r2, r3, d8
 800be06:	4604      	mov	r4, r0
 800be08:	460d      	mov	r5, r1
 800be0a:	4640      	mov	r0, r8
 800be0c:	4649      	mov	r1, r9
 800be0e:	f7f4 fbfb 	bl	8000608 <__aeabi_dmul>
 800be12:	460b      	mov	r3, r1
 800be14:	4602      	mov	r2, r0
 800be16:	4629      	mov	r1, r5
 800be18:	4620      	mov	r0, r4
 800be1a:	f7f4 fa3d 	bl	8000298 <__aeabi_dsub>
 800be1e:	4b29      	ldr	r3, [pc, #164]	; (800bec4 <__kernel_cos+0x17c>)
 800be20:	429e      	cmp	r6, r3
 800be22:	4680      	mov	r8, r0
 800be24:	4689      	mov	r9, r1
 800be26:	dc11      	bgt.n	800be4c <__kernel_cos+0x104>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	4650      	mov	r0, sl
 800be2e:	4659      	mov	r1, fp
 800be30:	f7f4 fa32 	bl	8000298 <__aeabi_dsub>
 800be34:	460b      	mov	r3, r1
 800be36:	4924      	ldr	r1, [pc, #144]	; (800bec8 <__kernel_cos+0x180>)
 800be38:	4602      	mov	r2, r0
 800be3a:	2000      	movs	r0, #0
 800be3c:	f7f4 fa2c 	bl	8000298 <__aeabi_dsub>
 800be40:	ecbd 8b02 	vpop	{d8}
 800be44:	ec41 0b10 	vmov	d0, r0, r1
 800be48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4c:	4b1f      	ldr	r3, [pc, #124]	; (800becc <__kernel_cos+0x184>)
 800be4e:	491e      	ldr	r1, [pc, #120]	; (800bec8 <__kernel_cos+0x180>)
 800be50:	429e      	cmp	r6, r3
 800be52:	bfcc      	ite	gt
 800be54:	4d1e      	ldrgt	r5, [pc, #120]	; (800bed0 <__kernel_cos+0x188>)
 800be56:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800be5a:	2400      	movs	r4, #0
 800be5c:	4622      	mov	r2, r4
 800be5e:	462b      	mov	r3, r5
 800be60:	2000      	movs	r0, #0
 800be62:	f7f4 fa19 	bl	8000298 <__aeabi_dsub>
 800be66:	4622      	mov	r2, r4
 800be68:	4606      	mov	r6, r0
 800be6a:	460f      	mov	r7, r1
 800be6c:	462b      	mov	r3, r5
 800be6e:	4650      	mov	r0, sl
 800be70:	4659      	mov	r1, fp
 800be72:	f7f4 fa11 	bl	8000298 <__aeabi_dsub>
 800be76:	4642      	mov	r2, r8
 800be78:	464b      	mov	r3, r9
 800be7a:	f7f4 fa0d 	bl	8000298 <__aeabi_dsub>
 800be7e:	4602      	mov	r2, r0
 800be80:	460b      	mov	r3, r1
 800be82:	4630      	mov	r0, r6
 800be84:	4639      	mov	r1, r7
 800be86:	e7d9      	b.n	800be3c <__kernel_cos+0xf4>
 800be88:	2000      	movs	r0, #0
 800be8a:	490f      	ldr	r1, [pc, #60]	; (800bec8 <__kernel_cos+0x180>)
 800be8c:	e7d8      	b.n	800be40 <__kernel_cos+0xf8>
 800be8e:	bf00      	nop
 800be90:	be8838d4 	.word	0xbe8838d4
 800be94:	bda8fae9 	.word	0xbda8fae9
 800be98:	bdb4b1c4 	.word	0xbdb4b1c4
 800be9c:	3e21ee9e 	.word	0x3e21ee9e
 800bea0:	809c52ad 	.word	0x809c52ad
 800bea4:	3e927e4f 	.word	0x3e927e4f
 800bea8:	19cb1590 	.word	0x19cb1590
 800beac:	3efa01a0 	.word	0x3efa01a0
 800beb0:	16c15177 	.word	0x16c15177
 800beb4:	3f56c16c 	.word	0x3f56c16c
 800beb8:	5555554c 	.word	0x5555554c
 800bebc:	3fa55555 	.word	0x3fa55555
 800bec0:	3fe00000 	.word	0x3fe00000
 800bec4:	3fd33332 	.word	0x3fd33332
 800bec8:	3ff00000 	.word	0x3ff00000
 800becc:	3fe90000 	.word	0x3fe90000
 800bed0:	3fd20000 	.word	0x3fd20000
 800bed4:	00000000 	.word	0x00000000

0800bed8 <__kernel_rem_pio2>:
 800bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	ed2d 8b02 	vpush	{d8}
 800bee0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800bee4:	1ed4      	subs	r4, r2, #3
 800bee6:	9308      	str	r3, [sp, #32]
 800bee8:	9101      	str	r1, [sp, #4]
 800beea:	4bc5      	ldr	r3, [pc, #788]	; (800c200 <__kernel_rem_pio2+0x328>)
 800beec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800beee:	9009      	str	r0, [sp, #36]	; 0x24
 800bef0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bef4:	9304      	str	r3, [sp, #16]
 800bef6:	9b08      	ldr	r3, [sp, #32]
 800bef8:	3b01      	subs	r3, #1
 800befa:	9307      	str	r3, [sp, #28]
 800befc:	2318      	movs	r3, #24
 800befe:	fb94 f4f3 	sdiv	r4, r4, r3
 800bf02:	f06f 0317 	mvn.w	r3, #23
 800bf06:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800bf0a:	fb04 3303 	mla	r3, r4, r3, r3
 800bf0e:	eb03 0a02 	add.w	sl, r3, r2
 800bf12:	9b04      	ldr	r3, [sp, #16]
 800bf14:	9a07      	ldr	r2, [sp, #28]
 800bf16:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c1f0 <__kernel_rem_pio2+0x318>
 800bf1a:	eb03 0802 	add.w	r8, r3, r2
 800bf1e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bf20:	1aa7      	subs	r7, r4, r2
 800bf22:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bf26:	ae22      	add	r6, sp, #136	; 0x88
 800bf28:	2500      	movs	r5, #0
 800bf2a:	4545      	cmp	r5, r8
 800bf2c:	dd13      	ble.n	800bf56 <__kernel_rem_pio2+0x7e>
 800bf2e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800c1f0 <__kernel_rem_pio2+0x318>
 800bf32:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800bf36:	2600      	movs	r6, #0
 800bf38:	9b04      	ldr	r3, [sp, #16]
 800bf3a:	429e      	cmp	r6, r3
 800bf3c:	dc32      	bgt.n	800bfa4 <__kernel_rem_pio2+0xcc>
 800bf3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf40:	9302      	str	r3, [sp, #8]
 800bf42:	9b08      	ldr	r3, [sp, #32]
 800bf44:	199d      	adds	r5, r3, r6
 800bf46:	ab22      	add	r3, sp, #136	; 0x88
 800bf48:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bf4c:	9306      	str	r3, [sp, #24]
 800bf4e:	ec59 8b18 	vmov	r8, r9, d8
 800bf52:	2700      	movs	r7, #0
 800bf54:	e01f      	b.n	800bf96 <__kernel_rem_pio2+0xbe>
 800bf56:	42ef      	cmn	r7, r5
 800bf58:	d407      	bmi.n	800bf6a <__kernel_rem_pio2+0x92>
 800bf5a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bf5e:	f7f4 fae9 	bl	8000534 <__aeabi_i2d>
 800bf62:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bf66:	3501      	adds	r5, #1
 800bf68:	e7df      	b.n	800bf2a <__kernel_rem_pio2+0x52>
 800bf6a:	ec51 0b18 	vmov	r0, r1, d8
 800bf6e:	e7f8      	b.n	800bf62 <__kernel_rem_pio2+0x8a>
 800bf70:	9906      	ldr	r1, [sp, #24]
 800bf72:	9d02      	ldr	r5, [sp, #8]
 800bf74:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800bf78:	9106      	str	r1, [sp, #24]
 800bf7a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800bf7e:	9502      	str	r5, [sp, #8]
 800bf80:	f7f4 fb42 	bl	8000608 <__aeabi_dmul>
 800bf84:	4602      	mov	r2, r0
 800bf86:	460b      	mov	r3, r1
 800bf88:	4640      	mov	r0, r8
 800bf8a:	4649      	mov	r1, r9
 800bf8c:	f7f4 f986 	bl	800029c <__adddf3>
 800bf90:	3701      	adds	r7, #1
 800bf92:	4680      	mov	r8, r0
 800bf94:	4689      	mov	r9, r1
 800bf96:	9b07      	ldr	r3, [sp, #28]
 800bf98:	429f      	cmp	r7, r3
 800bf9a:	dde9      	ble.n	800bf70 <__kernel_rem_pio2+0x98>
 800bf9c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800bfa0:	3601      	adds	r6, #1
 800bfa2:	e7c9      	b.n	800bf38 <__kernel_rem_pio2+0x60>
 800bfa4:	9b04      	ldr	r3, [sp, #16]
 800bfa6:	aa0e      	add	r2, sp, #56	; 0x38
 800bfa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfac:	930c      	str	r3, [sp, #48]	; 0x30
 800bfae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bfb0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bfb4:	9c04      	ldr	r4, [sp, #16]
 800bfb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfb8:	ab9a      	add	r3, sp, #616	; 0x268
 800bfba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800bfbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bfc2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bfc6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800bfca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800bfce:	ab9a      	add	r3, sp, #616	; 0x268
 800bfd0:	445b      	add	r3, fp
 800bfd2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800bfd6:	2500      	movs	r5, #0
 800bfd8:	1b63      	subs	r3, r4, r5
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	dc78      	bgt.n	800c0d0 <__kernel_rem_pio2+0x1f8>
 800bfde:	4650      	mov	r0, sl
 800bfe0:	ec49 8b10 	vmov	d0, r8, r9
 800bfe4:	f000 fdc8 	bl	800cb78 <scalbn>
 800bfe8:	ec57 6b10 	vmov	r6, r7, d0
 800bfec:	2200      	movs	r2, #0
 800bfee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bff2:	ee10 0a10 	vmov	r0, s0
 800bff6:	4639      	mov	r1, r7
 800bff8:	f7f4 fb06 	bl	8000608 <__aeabi_dmul>
 800bffc:	ec41 0b10 	vmov	d0, r0, r1
 800c000:	f000 fd32 	bl	800ca68 <floor>
 800c004:	2200      	movs	r2, #0
 800c006:	ec51 0b10 	vmov	r0, r1, d0
 800c00a:	4b7e      	ldr	r3, [pc, #504]	; (800c204 <__kernel_rem_pio2+0x32c>)
 800c00c:	f7f4 fafc 	bl	8000608 <__aeabi_dmul>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	4630      	mov	r0, r6
 800c016:	4639      	mov	r1, r7
 800c018:	f7f4 f93e 	bl	8000298 <__aeabi_dsub>
 800c01c:	460f      	mov	r7, r1
 800c01e:	4606      	mov	r6, r0
 800c020:	f7f4 fda2 	bl	8000b68 <__aeabi_d2iz>
 800c024:	9006      	str	r0, [sp, #24]
 800c026:	f7f4 fa85 	bl	8000534 <__aeabi_i2d>
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	4630      	mov	r0, r6
 800c030:	4639      	mov	r1, r7
 800c032:	f7f4 f931 	bl	8000298 <__aeabi_dsub>
 800c036:	f1ba 0f00 	cmp.w	sl, #0
 800c03a:	4606      	mov	r6, r0
 800c03c:	460f      	mov	r7, r1
 800c03e:	dd6c      	ble.n	800c11a <__kernel_rem_pio2+0x242>
 800c040:	1e62      	subs	r2, r4, #1
 800c042:	ab0e      	add	r3, sp, #56	; 0x38
 800c044:	f1ca 0118 	rsb	r1, sl, #24
 800c048:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c04c:	9d06      	ldr	r5, [sp, #24]
 800c04e:	fa40 f301 	asr.w	r3, r0, r1
 800c052:	441d      	add	r5, r3
 800c054:	408b      	lsls	r3, r1
 800c056:	1ac0      	subs	r0, r0, r3
 800c058:	ab0e      	add	r3, sp, #56	; 0x38
 800c05a:	9506      	str	r5, [sp, #24]
 800c05c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c060:	f1ca 0317 	rsb	r3, sl, #23
 800c064:	fa40 f303 	asr.w	r3, r0, r3
 800c068:	9302      	str	r3, [sp, #8]
 800c06a:	9b02      	ldr	r3, [sp, #8]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	dd62      	ble.n	800c136 <__kernel_rem_pio2+0x25e>
 800c070:	9b06      	ldr	r3, [sp, #24]
 800c072:	2200      	movs	r2, #0
 800c074:	3301      	adds	r3, #1
 800c076:	9306      	str	r3, [sp, #24]
 800c078:	4615      	mov	r5, r2
 800c07a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c07e:	4294      	cmp	r4, r2
 800c080:	f300 8095 	bgt.w	800c1ae <__kernel_rem_pio2+0x2d6>
 800c084:	f1ba 0f00 	cmp.w	sl, #0
 800c088:	dd07      	ble.n	800c09a <__kernel_rem_pio2+0x1c2>
 800c08a:	f1ba 0f01 	cmp.w	sl, #1
 800c08e:	f000 80a2 	beq.w	800c1d6 <__kernel_rem_pio2+0x2fe>
 800c092:	f1ba 0f02 	cmp.w	sl, #2
 800c096:	f000 80c1 	beq.w	800c21c <__kernel_rem_pio2+0x344>
 800c09a:	9b02      	ldr	r3, [sp, #8]
 800c09c:	2b02      	cmp	r3, #2
 800c09e:	d14a      	bne.n	800c136 <__kernel_rem_pio2+0x25e>
 800c0a0:	4632      	mov	r2, r6
 800c0a2:	463b      	mov	r3, r7
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	4958      	ldr	r1, [pc, #352]	; (800c208 <__kernel_rem_pio2+0x330>)
 800c0a8:	f7f4 f8f6 	bl	8000298 <__aeabi_dsub>
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	460f      	mov	r7, r1
 800c0b0:	2d00      	cmp	r5, #0
 800c0b2:	d040      	beq.n	800c136 <__kernel_rem_pio2+0x25e>
 800c0b4:	4650      	mov	r0, sl
 800c0b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c1f8 <__kernel_rem_pio2+0x320>
 800c0ba:	f000 fd5d 	bl	800cb78 <scalbn>
 800c0be:	4630      	mov	r0, r6
 800c0c0:	4639      	mov	r1, r7
 800c0c2:	ec53 2b10 	vmov	r2, r3, d0
 800c0c6:	f7f4 f8e7 	bl	8000298 <__aeabi_dsub>
 800c0ca:	4606      	mov	r6, r0
 800c0cc:	460f      	mov	r7, r1
 800c0ce:	e032      	b.n	800c136 <__kernel_rem_pio2+0x25e>
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4b4e      	ldr	r3, [pc, #312]	; (800c20c <__kernel_rem_pio2+0x334>)
 800c0d4:	4640      	mov	r0, r8
 800c0d6:	4649      	mov	r1, r9
 800c0d8:	f7f4 fa96 	bl	8000608 <__aeabi_dmul>
 800c0dc:	f7f4 fd44 	bl	8000b68 <__aeabi_d2iz>
 800c0e0:	f7f4 fa28 	bl	8000534 <__aeabi_i2d>
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	4b4a      	ldr	r3, [pc, #296]	; (800c210 <__kernel_rem_pio2+0x338>)
 800c0e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ec:	f7f4 fa8c 	bl	8000608 <__aeabi_dmul>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	f7f4 f8ce 	bl	8000298 <__aeabi_dsub>
 800c0fc:	f7f4 fd34 	bl	8000b68 <__aeabi_d2iz>
 800c100:	ab0e      	add	r3, sp, #56	; 0x38
 800c102:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c106:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c10a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c10e:	f7f4 f8c5 	bl	800029c <__adddf3>
 800c112:	3501      	adds	r5, #1
 800c114:	4680      	mov	r8, r0
 800c116:	4689      	mov	r9, r1
 800c118:	e75e      	b.n	800bfd8 <__kernel_rem_pio2+0x100>
 800c11a:	d105      	bne.n	800c128 <__kernel_rem_pio2+0x250>
 800c11c:	1e63      	subs	r3, r4, #1
 800c11e:	aa0e      	add	r2, sp, #56	; 0x38
 800c120:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c124:	15c3      	asrs	r3, r0, #23
 800c126:	e79f      	b.n	800c068 <__kernel_rem_pio2+0x190>
 800c128:	2200      	movs	r2, #0
 800c12a:	4b3a      	ldr	r3, [pc, #232]	; (800c214 <__kernel_rem_pio2+0x33c>)
 800c12c:	f7f4 fcf2 	bl	8000b14 <__aeabi_dcmpge>
 800c130:	2800      	cmp	r0, #0
 800c132:	d139      	bne.n	800c1a8 <__kernel_rem_pio2+0x2d0>
 800c134:	9002      	str	r0, [sp, #8]
 800c136:	2200      	movs	r2, #0
 800c138:	2300      	movs	r3, #0
 800c13a:	4630      	mov	r0, r6
 800c13c:	4639      	mov	r1, r7
 800c13e:	f7f4 fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 800c142:	2800      	cmp	r0, #0
 800c144:	f000 80c7 	beq.w	800c2d6 <__kernel_rem_pio2+0x3fe>
 800c148:	1e65      	subs	r5, r4, #1
 800c14a:	462b      	mov	r3, r5
 800c14c:	2200      	movs	r2, #0
 800c14e:	9904      	ldr	r1, [sp, #16]
 800c150:	428b      	cmp	r3, r1
 800c152:	da6a      	bge.n	800c22a <__kernel_rem_pio2+0x352>
 800c154:	2a00      	cmp	r2, #0
 800c156:	f000 8088 	beq.w	800c26a <__kernel_rem_pio2+0x392>
 800c15a:	ab0e      	add	r3, sp, #56	; 0x38
 800c15c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c160:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c164:	2b00      	cmp	r3, #0
 800c166:	f000 80b4 	beq.w	800c2d2 <__kernel_rem_pio2+0x3fa>
 800c16a:	4650      	mov	r0, sl
 800c16c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800c1f8 <__kernel_rem_pio2+0x320>
 800c170:	f000 fd02 	bl	800cb78 <scalbn>
 800c174:	00ec      	lsls	r4, r5, #3
 800c176:	ab72      	add	r3, sp, #456	; 0x1c8
 800c178:	191e      	adds	r6, r3, r4
 800c17a:	ec59 8b10 	vmov	r8, r9, d0
 800c17e:	f106 0a08 	add.w	sl, r6, #8
 800c182:	462f      	mov	r7, r5
 800c184:	2f00      	cmp	r7, #0
 800c186:	f280 80df 	bge.w	800c348 <__kernel_rem_pio2+0x470>
 800c18a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800c1f0 <__kernel_rem_pio2+0x318>
 800c18e:	f04f 0a00 	mov.w	sl, #0
 800c192:	eba5 030a 	sub.w	r3, r5, sl
 800c196:	2b00      	cmp	r3, #0
 800c198:	f2c0 810a 	blt.w	800c3b0 <__kernel_rem_pio2+0x4d8>
 800c19c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800c218 <__kernel_rem_pio2+0x340>
 800c1a0:	ec59 8b18 	vmov	r8, r9, d8
 800c1a4:	2700      	movs	r7, #0
 800c1a6:	e0f5      	b.n	800c394 <__kernel_rem_pio2+0x4bc>
 800c1a8:	2302      	movs	r3, #2
 800c1aa:	9302      	str	r3, [sp, #8]
 800c1ac:	e760      	b.n	800c070 <__kernel_rem_pio2+0x198>
 800c1ae:	ab0e      	add	r3, sp, #56	; 0x38
 800c1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1b4:	b94d      	cbnz	r5, 800c1ca <__kernel_rem_pio2+0x2f2>
 800c1b6:	b12b      	cbz	r3, 800c1c4 <__kernel_rem_pio2+0x2ec>
 800c1b8:	a80e      	add	r0, sp, #56	; 0x38
 800c1ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c1be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	3201      	adds	r2, #1
 800c1c6:	461d      	mov	r5, r3
 800c1c8:	e759      	b.n	800c07e <__kernel_rem_pio2+0x1a6>
 800c1ca:	a80e      	add	r0, sp, #56	; 0x38
 800c1cc:	1acb      	subs	r3, r1, r3
 800c1ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c1d2:	462b      	mov	r3, r5
 800c1d4:	e7f6      	b.n	800c1c4 <__kernel_rem_pio2+0x2ec>
 800c1d6:	1e62      	subs	r2, r4, #1
 800c1d8:	ab0e      	add	r3, sp, #56	; 0x38
 800c1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c1e2:	a90e      	add	r1, sp, #56	; 0x38
 800c1e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c1e8:	e757      	b.n	800c09a <__kernel_rem_pio2+0x1c2>
 800c1ea:	bf00      	nop
 800c1ec:	f3af 8000 	nop.w
	...
 800c1fc:	3ff00000 	.word	0x3ff00000
 800c200:	0800d498 	.word	0x0800d498
 800c204:	40200000 	.word	0x40200000
 800c208:	3ff00000 	.word	0x3ff00000
 800c20c:	3e700000 	.word	0x3e700000
 800c210:	41700000 	.word	0x41700000
 800c214:	3fe00000 	.word	0x3fe00000
 800c218:	0800d458 	.word	0x0800d458
 800c21c:	1e62      	subs	r2, r4, #1
 800c21e:	ab0e      	add	r3, sp, #56	; 0x38
 800c220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c224:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c228:	e7db      	b.n	800c1e2 <__kernel_rem_pio2+0x30a>
 800c22a:	a90e      	add	r1, sp, #56	; 0x38
 800c22c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c230:	3b01      	subs	r3, #1
 800c232:	430a      	orrs	r2, r1
 800c234:	e78b      	b.n	800c14e <__kernel_rem_pio2+0x276>
 800c236:	3301      	adds	r3, #1
 800c238:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c23c:	2900      	cmp	r1, #0
 800c23e:	d0fa      	beq.n	800c236 <__kernel_rem_pio2+0x35e>
 800c240:	9a08      	ldr	r2, [sp, #32]
 800c242:	4422      	add	r2, r4
 800c244:	00d2      	lsls	r2, r2, #3
 800c246:	a922      	add	r1, sp, #136	; 0x88
 800c248:	18e3      	adds	r3, r4, r3
 800c24a:	9206      	str	r2, [sp, #24]
 800c24c:	440a      	add	r2, r1
 800c24e:	9302      	str	r3, [sp, #8]
 800c250:	f10b 0108 	add.w	r1, fp, #8
 800c254:	f102 0308 	add.w	r3, r2, #8
 800c258:	1c66      	adds	r6, r4, #1
 800c25a:	910a      	str	r1, [sp, #40]	; 0x28
 800c25c:	2500      	movs	r5, #0
 800c25e:	930d      	str	r3, [sp, #52]	; 0x34
 800c260:	9b02      	ldr	r3, [sp, #8]
 800c262:	42b3      	cmp	r3, r6
 800c264:	da04      	bge.n	800c270 <__kernel_rem_pio2+0x398>
 800c266:	461c      	mov	r4, r3
 800c268:	e6a6      	b.n	800bfb8 <__kernel_rem_pio2+0xe0>
 800c26a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c26c:	2301      	movs	r3, #1
 800c26e:	e7e3      	b.n	800c238 <__kernel_rem_pio2+0x360>
 800c270:	9b06      	ldr	r3, [sp, #24]
 800c272:	18ef      	adds	r7, r5, r3
 800c274:	ab22      	add	r3, sp, #136	; 0x88
 800c276:	441f      	add	r7, r3
 800c278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c27a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c27e:	f7f4 f959 	bl	8000534 <__aeabi_i2d>
 800c282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c284:	461c      	mov	r4, r3
 800c286:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c288:	e9c7 0100 	strd	r0, r1, [r7]
 800c28c:	eb03 0b05 	add.w	fp, r3, r5
 800c290:	2700      	movs	r7, #0
 800c292:	f04f 0800 	mov.w	r8, #0
 800c296:	f04f 0900 	mov.w	r9, #0
 800c29a:	9b07      	ldr	r3, [sp, #28]
 800c29c:	429f      	cmp	r7, r3
 800c29e:	dd08      	ble.n	800c2b2 <__kernel_rem_pio2+0x3da>
 800c2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a2:	aa72      	add	r2, sp, #456	; 0x1c8
 800c2a4:	18eb      	adds	r3, r5, r3
 800c2a6:	4413      	add	r3, r2
 800c2a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800c2ac:	3601      	adds	r6, #1
 800c2ae:	3508      	adds	r5, #8
 800c2b0:	e7d6      	b.n	800c260 <__kernel_rem_pio2+0x388>
 800c2b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c2b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c2ba:	f7f4 f9a5 	bl	8000608 <__aeabi_dmul>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	4640      	mov	r0, r8
 800c2c4:	4649      	mov	r1, r9
 800c2c6:	f7f3 ffe9 	bl	800029c <__adddf3>
 800c2ca:	3701      	adds	r7, #1
 800c2cc:	4680      	mov	r8, r0
 800c2ce:	4689      	mov	r9, r1
 800c2d0:	e7e3      	b.n	800c29a <__kernel_rem_pio2+0x3c2>
 800c2d2:	3d01      	subs	r5, #1
 800c2d4:	e741      	b.n	800c15a <__kernel_rem_pio2+0x282>
 800c2d6:	f1ca 0000 	rsb	r0, sl, #0
 800c2da:	ec47 6b10 	vmov	d0, r6, r7
 800c2de:	f000 fc4b 	bl	800cb78 <scalbn>
 800c2e2:	ec57 6b10 	vmov	r6, r7, d0
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	4b99      	ldr	r3, [pc, #612]	; (800c550 <__kernel_rem_pio2+0x678>)
 800c2ea:	ee10 0a10 	vmov	r0, s0
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	f7f4 fc10 	bl	8000b14 <__aeabi_dcmpge>
 800c2f4:	b1f8      	cbz	r0, 800c336 <__kernel_rem_pio2+0x45e>
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4b96      	ldr	r3, [pc, #600]	; (800c554 <__kernel_rem_pio2+0x67c>)
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	f7f4 f983 	bl	8000608 <__aeabi_dmul>
 800c302:	f7f4 fc31 	bl	8000b68 <__aeabi_d2iz>
 800c306:	4680      	mov	r8, r0
 800c308:	f7f4 f914 	bl	8000534 <__aeabi_i2d>
 800c30c:	2200      	movs	r2, #0
 800c30e:	4b90      	ldr	r3, [pc, #576]	; (800c550 <__kernel_rem_pio2+0x678>)
 800c310:	f7f4 f97a 	bl	8000608 <__aeabi_dmul>
 800c314:	460b      	mov	r3, r1
 800c316:	4602      	mov	r2, r0
 800c318:	4639      	mov	r1, r7
 800c31a:	4630      	mov	r0, r6
 800c31c:	f7f3 ffbc 	bl	8000298 <__aeabi_dsub>
 800c320:	f7f4 fc22 	bl	8000b68 <__aeabi_d2iz>
 800c324:	1c65      	adds	r5, r4, #1
 800c326:	ab0e      	add	r3, sp, #56	; 0x38
 800c328:	f10a 0a18 	add.w	sl, sl, #24
 800c32c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c330:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c334:	e719      	b.n	800c16a <__kernel_rem_pio2+0x292>
 800c336:	4630      	mov	r0, r6
 800c338:	4639      	mov	r1, r7
 800c33a:	f7f4 fc15 	bl	8000b68 <__aeabi_d2iz>
 800c33e:	ab0e      	add	r3, sp, #56	; 0x38
 800c340:	4625      	mov	r5, r4
 800c342:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c346:	e710      	b.n	800c16a <__kernel_rem_pio2+0x292>
 800c348:	ab0e      	add	r3, sp, #56	; 0x38
 800c34a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c34e:	f7f4 f8f1 	bl	8000534 <__aeabi_i2d>
 800c352:	4642      	mov	r2, r8
 800c354:	464b      	mov	r3, r9
 800c356:	f7f4 f957 	bl	8000608 <__aeabi_dmul>
 800c35a:	2200      	movs	r2, #0
 800c35c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800c360:	4b7c      	ldr	r3, [pc, #496]	; (800c554 <__kernel_rem_pio2+0x67c>)
 800c362:	4640      	mov	r0, r8
 800c364:	4649      	mov	r1, r9
 800c366:	f7f4 f94f 	bl	8000608 <__aeabi_dmul>
 800c36a:	3f01      	subs	r7, #1
 800c36c:	4680      	mov	r8, r0
 800c36e:	4689      	mov	r9, r1
 800c370:	e708      	b.n	800c184 <__kernel_rem_pio2+0x2ac>
 800c372:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800c376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800c37e:	f7f4 f943 	bl	8000608 <__aeabi_dmul>
 800c382:	4602      	mov	r2, r0
 800c384:	460b      	mov	r3, r1
 800c386:	4640      	mov	r0, r8
 800c388:	4649      	mov	r1, r9
 800c38a:	f7f3 ff87 	bl	800029c <__adddf3>
 800c38e:	3701      	adds	r7, #1
 800c390:	4680      	mov	r8, r0
 800c392:	4689      	mov	r9, r1
 800c394:	9b04      	ldr	r3, [sp, #16]
 800c396:	429f      	cmp	r7, r3
 800c398:	dc01      	bgt.n	800c39e <__kernel_rem_pio2+0x4c6>
 800c39a:	45ba      	cmp	sl, r7
 800c39c:	dae9      	bge.n	800c372 <__kernel_rem_pio2+0x49a>
 800c39e:	ab4a      	add	r3, sp, #296	; 0x128
 800c3a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c3a4:	e9c3 8900 	strd	r8, r9, [r3]
 800c3a8:	f10a 0a01 	add.w	sl, sl, #1
 800c3ac:	3e08      	subs	r6, #8
 800c3ae:	e6f0      	b.n	800c192 <__kernel_rem_pio2+0x2ba>
 800c3b0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c3b2:	2b03      	cmp	r3, #3
 800c3b4:	d85b      	bhi.n	800c46e <__kernel_rem_pio2+0x596>
 800c3b6:	e8df f003 	tbb	[pc, r3]
 800c3ba:	264a      	.short	0x264a
 800c3bc:	0226      	.short	0x0226
 800c3be:	ab9a      	add	r3, sp, #616	; 0x268
 800c3c0:	441c      	add	r4, r3
 800c3c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c3c6:	46a2      	mov	sl, r4
 800c3c8:	46ab      	mov	fp, r5
 800c3ca:	f1bb 0f00 	cmp.w	fp, #0
 800c3ce:	dc6c      	bgt.n	800c4aa <__kernel_rem_pio2+0x5d2>
 800c3d0:	46a2      	mov	sl, r4
 800c3d2:	46ab      	mov	fp, r5
 800c3d4:	f1bb 0f01 	cmp.w	fp, #1
 800c3d8:	f300 8086 	bgt.w	800c4e8 <__kernel_rem_pio2+0x610>
 800c3dc:	2000      	movs	r0, #0
 800c3de:	2100      	movs	r1, #0
 800c3e0:	2d01      	cmp	r5, #1
 800c3e2:	f300 80a0 	bgt.w	800c526 <__kernel_rem_pio2+0x64e>
 800c3e6:	9b02      	ldr	r3, [sp, #8]
 800c3e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800c3ec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f040 809e 	bne.w	800c532 <__kernel_rem_pio2+0x65a>
 800c3f6:	9b01      	ldr	r3, [sp, #4]
 800c3f8:	e9c3 7800 	strd	r7, r8, [r3]
 800c3fc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c400:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c404:	e033      	b.n	800c46e <__kernel_rem_pio2+0x596>
 800c406:	3408      	adds	r4, #8
 800c408:	ab4a      	add	r3, sp, #296	; 0x128
 800c40a:	441c      	add	r4, r3
 800c40c:	462e      	mov	r6, r5
 800c40e:	2000      	movs	r0, #0
 800c410:	2100      	movs	r1, #0
 800c412:	2e00      	cmp	r6, #0
 800c414:	da3a      	bge.n	800c48c <__kernel_rem_pio2+0x5b4>
 800c416:	9b02      	ldr	r3, [sp, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d03d      	beq.n	800c498 <__kernel_rem_pio2+0x5c0>
 800c41c:	4602      	mov	r2, r0
 800c41e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c422:	9c01      	ldr	r4, [sp, #4]
 800c424:	e9c4 2300 	strd	r2, r3, [r4]
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c430:	f7f3 ff32 	bl	8000298 <__aeabi_dsub>
 800c434:	ae4c      	add	r6, sp, #304	; 0x130
 800c436:	2401      	movs	r4, #1
 800c438:	42a5      	cmp	r5, r4
 800c43a:	da30      	bge.n	800c49e <__kernel_rem_pio2+0x5c6>
 800c43c:	9b02      	ldr	r3, [sp, #8]
 800c43e:	b113      	cbz	r3, 800c446 <__kernel_rem_pio2+0x56e>
 800c440:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c444:	4619      	mov	r1, r3
 800c446:	9b01      	ldr	r3, [sp, #4]
 800c448:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c44c:	e00f      	b.n	800c46e <__kernel_rem_pio2+0x596>
 800c44e:	ab9a      	add	r3, sp, #616	; 0x268
 800c450:	441c      	add	r4, r3
 800c452:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c456:	2000      	movs	r0, #0
 800c458:	2100      	movs	r1, #0
 800c45a:	2d00      	cmp	r5, #0
 800c45c:	da10      	bge.n	800c480 <__kernel_rem_pio2+0x5a8>
 800c45e:	9b02      	ldr	r3, [sp, #8]
 800c460:	b113      	cbz	r3, 800c468 <__kernel_rem_pio2+0x590>
 800c462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c466:	4619      	mov	r1, r3
 800c468:	9b01      	ldr	r3, [sp, #4]
 800c46a:	e9c3 0100 	strd	r0, r1, [r3]
 800c46e:	9b06      	ldr	r3, [sp, #24]
 800c470:	f003 0007 	and.w	r0, r3, #7
 800c474:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c478:	ecbd 8b02 	vpop	{d8}
 800c47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c480:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c484:	f7f3 ff0a 	bl	800029c <__adddf3>
 800c488:	3d01      	subs	r5, #1
 800c48a:	e7e6      	b.n	800c45a <__kernel_rem_pio2+0x582>
 800c48c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c490:	f7f3 ff04 	bl	800029c <__adddf3>
 800c494:	3e01      	subs	r6, #1
 800c496:	e7bc      	b.n	800c412 <__kernel_rem_pio2+0x53a>
 800c498:	4602      	mov	r2, r0
 800c49a:	460b      	mov	r3, r1
 800c49c:	e7c1      	b.n	800c422 <__kernel_rem_pio2+0x54a>
 800c49e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c4a2:	f7f3 fefb 	bl	800029c <__adddf3>
 800c4a6:	3401      	adds	r4, #1
 800c4a8:	e7c6      	b.n	800c438 <__kernel_rem_pio2+0x560>
 800c4aa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800c4ae:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	ec53 2b17 	vmov	r2, r3, d7
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c4be:	f7f3 feed 	bl	800029c <__adddf3>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	460f      	mov	r7, r1
 800c4ca:	4640      	mov	r0, r8
 800c4cc:	4649      	mov	r1, r9
 800c4ce:	f7f3 fee3 	bl	8000298 <__aeabi_dsub>
 800c4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4d6:	f7f3 fee1 	bl	800029c <__adddf3>
 800c4da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c4de:	e9ca 0100 	strd	r0, r1, [sl]
 800c4e2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800c4e6:	e770      	b.n	800c3ca <__kernel_rem_pio2+0x4f2>
 800c4e8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800c4ec:	ed3a 7b02 	vldmdb	sl!, {d7}
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	ec53 2b17 	vmov	r2, r3, d7
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c4fc:	f7f3 fece 	bl	800029c <__adddf3>
 800c500:	4602      	mov	r2, r0
 800c502:	460b      	mov	r3, r1
 800c504:	4680      	mov	r8, r0
 800c506:	4689      	mov	r9, r1
 800c508:	4630      	mov	r0, r6
 800c50a:	4639      	mov	r1, r7
 800c50c:	f7f3 fec4 	bl	8000298 <__aeabi_dsub>
 800c510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c514:	f7f3 fec2 	bl	800029c <__adddf3>
 800c518:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c51c:	e9ca 0100 	strd	r0, r1, [sl]
 800c520:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800c524:	e756      	b.n	800c3d4 <__kernel_rem_pio2+0x4fc>
 800c526:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c52a:	f7f3 feb7 	bl	800029c <__adddf3>
 800c52e:	3d01      	subs	r5, #1
 800c530:	e756      	b.n	800c3e0 <__kernel_rem_pio2+0x508>
 800c532:	9b01      	ldr	r3, [sp, #4]
 800c534:	9a01      	ldr	r2, [sp, #4]
 800c536:	601f      	str	r7, [r3, #0]
 800c538:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c53c:	605c      	str	r4, [r3, #4]
 800c53e:	609d      	str	r5, [r3, #8]
 800c540:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c544:	60d3      	str	r3, [r2, #12]
 800c546:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c54a:	6110      	str	r0, [r2, #16]
 800c54c:	6153      	str	r3, [r2, #20]
 800c54e:	e78e      	b.n	800c46e <__kernel_rem_pio2+0x596>
 800c550:	41700000 	.word	0x41700000
 800c554:	3e700000 	.word	0x3e700000

0800c558 <__kernel_sin>:
 800c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	ec55 4b10 	vmov	r4, r5, d0
 800c560:	b085      	sub	sp, #20
 800c562:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c566:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c56a:	ed8d 1b00 	vstr	d1, [sp]
 800c56e:	9002      	str	r0, [sp, #8]
 800c570:	da06      	bge.n	800c580 <__kernel_sin+0x28>
 800c572:	ee10 0a10 	vmov	r0, s0
 800c576:	4629      	mov	r1, r5
 800c578:	f7f4 faf6 	bl	8000b68 <__aeabi_d2iz>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d051      	beq.n	800c624 <__kernel_sin+0xcc>
 800c580:	4622      	mov	r2, r4
 800c582:	462b      	mov	r3, r5
 800c584:	4620      	mov	r0, r4
 800c586:	4629      	mov	r1, r5
 800c588:	f7f4 f83e 	bl	8000608 <__aeabi_dmul>
 800c58c:	4682      	mov	sl, r0
 800c58e:	468b      	mov	fp, r1
 800c590:	4602      	mov	r2, r0
 800c592:	460b      	mov	r3, r1
 800c594:	4620      	mov	r0, r4
 800c596:	4629      	mov	r1, r5
 800c598:	f7f4 f836 	bl	8000608 <__aeabi_dmul>
 800c59c:	a341      	add	r3, pc, #260	; (adr r3, 800c6a4 <__kernel_sin+0x14c>)
 800c59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a2:	4680      	mov	r8, r0
 800c5a4:	4689      	mov	r9, r1
 800c5a6:	4650      	mov	r0, sl
 800c5a8:	4659      	mov	r1, fp
 800c5aa:	f7f4 f82d 	bl	8000608 <__aeabi_dmul>
 800c5ae:	a33f      	add	r3, pc, #252	; (adr r3, 800c6ac <__kernel_sin+0x154>)
 800c5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b4:	f7f3 fe70 	bl	8000298 <__aeabi_dsub>
 800c5b8:	4652      	mov	r2, sl
 800c5ba:	465b      	mov	r3, fp
 800c5bc:	f7f4 f824 	bl	8000608 <__aeabi_dmul>
 800c5c0:	a33c      	add	r3, pc, #240	; (adr r3, 800c6b4 <__kernel_sin+0x15c>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f3 fe69 	bl	800029c <__adddf3>
 800c5ca:	4652      	mov	r2, sl
 800c5cc:	465b      	mov	r3, fp
 800c5ce:	f7f4 f81b 	bl	8000608 <__aeabi_dmul>
 800c5d2:	a33a      	add	r3, pc, #232	; (adr r3, 800c6bc <__kernel_sin+0x164>)
 800c5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d8:	f7f3 fe5e 	bl	8000298 <__aeabi_dsub>
 800c5dc:	4652      	mov	r2, sl
 800c5de:	465b      	mov	r3, fp
 800c5e0:	f7f4 f812 	bl	8000608 <__aeabi_dmul>
 800c5e4:	a337      	add	r3, pc, #220	; (adr r3, 800c6c4 <__kernel_sin+0x16c>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7f3 fe57 	bl	800029c <__adddf3>
 800c5ee:	9b02      	ldr	r3, [sp, #8]
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	460f      	mov	r7, r1
 800c5f4:	b9db      	cbnz	r3, 800c62e <__kernel_sin+0xd6>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	4650      	mov	r0, sl
 800c5fc:	4659      	mov	r1, fp
 800c5fe:	f7f4 f803 	bl	8000608 <__aeabi_dmul>
 800c602:	a325      	add	r3, pc, #148	; (adr r3, 800c698 <__kernel_sin+0x140>)
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	f7f3 fe46 	bl	8000298 <__aeabi_dsub>
 800c60c:	4642      	mov	r2, r8
 800c60e:	464b      	mov	r3, r9
 800c610:	f7f3 fffa 	bl	8000608 <__aeabi_dmul>
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	4620      	mov	r0, r4
 800c61a:	4629      	mov	r1, r5
 800c61c:	f7f3 fe3e 	bl	800029c <__adddf3>
 800c620:	4604      	mov	r4, r0
 800c622:	460d      	mov	r5, r1
 800c624:	ec45 4b10 	vmov	d0, r4, r5
 800c628:	b005      	add	sp, #20
 800c62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c62e:	2200      	movs	r2, #0
 800c630:	4b1b      	ldr	r3, [pc, #108]	; (800c6a0 <__kernel_sin+0x148>)
 800c632:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c636:	f7f3 ffe7 	bl	8000608 <__aeabi_dmul>
 800c63a:	4632      	mov	r2, r6
 800c63c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c640:	463b      	mov	r3, r7
 800c642:	4640      	mov	r0, r8
 800c644:	4649      	mov	r1, r9
 800c646:	f7f3 ffdf 	bl	8000608 <__aeabi_dmul>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c652:	f7f3 fe21 	bl	8000298 <__aeabi_dsub>
 800c656:	4652      	mov	r2, sl
 800c658:	465b      	mov	r3, fp
 800c65a:	f7f3 ffd5 	bl	8000608 <__aeabi_dmul>
 800c65e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c662:	f7f3 fe19 	bl	8000298 <__aeabi_dsub>
 800c666:	a30c      	add	r3, pc, #48	; (adr r3, 800c698 <__kernel_sin+0x140>)
 800c668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66c:	4606      	mov	r6, r0
 800c66e:	460f      	mov	r7, r1
 800c670:	4640      	mov	r0, r8
 800c672:	4649      	mov	r1, r9
 800c674:	f7f3 ffc8 	bl	8000608 <__aeabi_dmul>
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4630      	mov	r0, r6
 800c67e:	4639      	mov	r1, r7
 800c680:	f7f3 fe0c 	bl	800029c <__adddf3>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	4620      	mov	r0, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	f7f3 fe04 	bl	8000298 <__aeabi_dsub>
 800c690:	e7c6      	b.n	800c620 <__kernel_sin+0xc8>
 800c692:	bf00      	nop
 800c694:	f3af 8000 	nop.w
 800c698:	55555549 	.word	0x55555549
 800c69c:	3fc55555 	.word	0x3fc55555
 800c6a0:	3fe00000 	.word	0x3fe00000
 800c6a4:	5acfd57c 	.word	0x5acfd57c
 800c6a8:	3de5d93a 	.word	0x3de5d93a
 800c6ac:	8a2b9ceb 	.word	0x8a2b9ceb
 800c6b0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c6b4:	57b1fe7d 	.word	0x57b1fe7d
 800c6b8:	3ec71de3 	.word	0x3ec71de3
 800c6bc:	19c161d5 	.word	0x19c161d5
 800c6c0:	3f2a01a0 	.word	0x3f2a01a0
 800c6c4:	1110f8a6 	.word	0x1110f8a6
 800c6c8:	3f811111 	.word	0x3f811111
 800c6cc:	00000000 	.word	0x00000000

0800c6d0 <__kernel_tan>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	ec5b ab10 	vmov	sl, fp, d0
 800c6d8:	4bbf      	ldr	r3, [pc, #764]	; (800c9d8 <__kernel_tan+0x308>)
 800c6da:	b089      	sub	sp, #36	; 0x24
 800c6dc:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800c6e0:	429f      	cmp	r7, r3
 800c6e2:	ec59 8b11 	vmov	r8, r9, d1
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	f8cd b008 	str.w	fp, [sp, #8]
 800c6ec:	dc22      	bgt.n	800c734 <__kernel_tan+0x64>
 800c6ee:	ee10 0a10 	vmov	r0, s0
 800c6f2:	4659      	mov	r1, fp
 800c6f4:	f7f4 fa38 	bl	8000b68 <__aeabi_d2iz>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d145      	bne.n	800c788 <__kernel_tan+0xb8>
 800c6fc:	1c73      	adds	r3, r6, #1
 800c6fe:	4652      	mov	r2, sl
 800c700:	4313      	orrs	r3, r2
 800c702:	433b      	orrs	r3, r7
 800c704:	d110      	bne.n	800c728 <__kernel_tan+0x58>
 800c706:	ec4b ab10 	vmov	d0, sl, fp
 800c70a:	f7fe ff99 	bl	800b640 <fabs>
 800c70e:	49b3      	ldr	r1, [pc, #716]	; (800c9dc <__kernel_tan+0x30c>)
 800c710:	ec53 2b10 	vmov	r2, r3, d0
 800c714:	2000      	movs	r0, #0
 800c716:	f7f4 f8a1 	bl	800085c <__aeabi_ddiv>
 800c71a:	4682      	mov	sl, r0
 800c71c:	468b      	mov	fp, r1
 800c71e:	ec4b ab10 	vmov	d0, sl, fp
 800c722:	b009      	add	sp, #36	; 0x24
 800c724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c728:	2e01      	cmp	r6, #1
 800c72a:	d0f8      	beq.n	800c71e <__kernel_tan+0x4e>
 800c72c:	465b      	mov	r3, fp
 800c72e:	2000      	movs	r0, #0
 800c730:	49ab      	ldr	r1, [pc, #684]	; (800c9e0 <__kernel_tan+0x310>)
 800c732:	e7f0      	b.n	800c716 <__kernel_tan+0x46>
 800c734:	4bab      	ldr	r3, [pc, #684]	; (800c9e4 <__kernel_tan+0x314>)
 800c736:	429f      	cmp	r7, r3
 800c738:	dd26      	ble.n	800c788 <__kernel_tan+0xb8>
 800c73a:	9b02      	ldr	r3, [sp, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	da09      	bge.n	800c754 <__kernel_tan+0x84>
 800c740:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c744:	469b      	mov	fp, r3
 800c746:	ee10 aa10 	vmov	sl, s0
 800c74a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c74e:	ee11 8a10 	vmov	r8, s2
 800c752:	4699      	mov	r9, r3
 800c754:	4652      	mov	r2, sl
 800c756:	465b      	mov	r3, fp
 800c758:	a181      	add	r1, pc, #516	; (adr r1, 800c960 <__kernel_tan+0x290>)
 800c75a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c75e:	f7f3 fd9b 	bl	8000298 <__aeabi_dsub>
 800c762:	4642      	mov	r2, r8
 800c764:	464b      	mov	r3, r9
 800c766:	4604      	mov	r4, r0
 800c768:	460d      	mov	r5, r1
 800c76a:	a17f      	add	r1, pc, #508	; (adr r1, 800c968 <__kernel_tan+0x298>)
 800c76c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c770:	f7f3 fd92 	bl	8000298 <__aeabi_dsub>
 800c774:	4622      	mov	r2, r4
 800c776:	462b      	mov	r3, r5
 800c778:	f7f3 fd90 	bl	800029c <__adddf3>
 800c77c:	f04f 0800 	mov.w	r8, #0
 800c780:	4682      	mov	sl, r0
 800c782:	468b      	mov	fp, r1
 800c784:	f04f 0900 	mov.w	r9, #0
 800c788:	4652      	mov	r2, sl
 800c78a:	465b      	mov	r3, fp
 800c78c:	4650      	mov	r0, sl
 800c78e:	4659      	mov	r1, fp
 800c790:	f7f3 ff3a 	bl	8000608 <__aeabi_dmul>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	e9cd 0100 	strd	r0, r1, [sp]
 800c79c:	f7f3 ff34 	bl	8000608 <__aeabi_dmul>
 800c7a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	460d      	mov	r5, r1
 800c7a8:	4650      	mov	r0, sl
 800c7aa:	4659      	mov	r1, fp
 800c7ac:	f7f3 ff2c 	bl	8000608 <__aeabi_dmul>
 800c7b0:	a36f      	add	r3, pc, #444	; (adr r3, 800c970 <__kernel_tan+0x2a0>)
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	4629      	mov	r1, r5
 800c7be:	f7f3 ff23 	bl	8000608 <__aeabi_dmul>
 800c7c2:	a36d      	add	r3, pc, #436	; (adr r3, 800c978 <__kernel_tan+0x2a8>)
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	f7f3 fd68 	bl	800029c <__adddf3>
 800c7cc:	4622      	mov	r2, r4
 800c7ce:	462b      	mov	r3, r5
 800c7d0:	f7f3 ff1a 	bl	8000608 <__aeabi_dmul>
 800c7d4:	a36a      	add	r3, pc, #424	; (adr r3, 800c980 <__kernel_tan+0x2b0>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 fd5f 	bl	800029c <__adddf3>
 800c7de:	4622      	mov	r2, r4
 800c7e0:	462b      	mov	r3, r5
 800c7e2:	f7f3 ff11 	bl	8000608 <__aeabi_dmul>
 800c7e6:	a368      	add	r3, pc, #416	; (adr r3, 800c988 <__kernel_tan+0x2b8>)
 800c7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ec:	f7f3 fd56 	bl	800029c <__adddf3>
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	462b      	mov	r3, r5
 800c7f4:	f7f3 ff08 	bl	8000608 <__aeabi_dmul>
 800c7f8:	a365      	add	r3, pc, #404	; (adr r3, 800c990 <__kernel_tan+0x2c0>)
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f7f3 fd4d 	bl	800029c <__adddf3>
 800c802:	4622      	mov	r2, r4
 800c804:	462b      	mov	r3, r5
 800c806:	f7f3 feff 	bl	8000608 <__aeabi_dmul>
 800c80a:	a363      	add	r3, pc, #396	; (adr r3, 800c998 <__kernel_tan+0x2c8>)
 800c80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c810:	f7f3 fd44 	bl	800029c <__adddf3>
 800c814:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c818:	f7f3 fef6 	bl	8000608 <__aeabi_dmul>
 800c81c:	a360      	add	r3, pc, #384	; (adr r3, 800c9a0 <__kernel_tan+0x2d0>)
 800c81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c822:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c826:	4620      	mov	r0, r4
 800c828:	4629      	mov	r1, r5
 800c82a:	f7f3 feed 	bl	8000608 <__aeabi_dmul>
 800c82e:	a35e      	add	r3, pc, #376	; (adr r3, 800c9a8 <__kernel_tan+0x2d8>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	f7f3 fd32 	bl	800029c <__adddf3>
 800c838:	4622      	mov	r2, r4
 800c83a:	462b      	mov	r3, r5
 800c83c:	f7f3 fee4 	bl	8000608 <__aeabi_dmul>
 800c840:	a35b      	add	r3, pc, #364	; (adr r3, 800c9b0 <__kernel_tan+0x2e0>)
 800c842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c846:	f7f3 fd29 	bl	800029c <__adddf3>
 800c84a:	4622      	mov	r2, r4
 800c84c:	462b      	mov	r3, r5
 800c84e:	f7f3 fedb 	bl	8000608 <__aeabi_dmul>
 800c852:	a359      	add	r3, pc, #356	; (adr r3, 800c9b8 <__kernel_tan+0x2e8>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7f3 fd20 	bl	800029c <__adddf3>
 800c85c:	4622      	mov	r2, r4
 800c85e:	462b      	mov	r3, r5
 800c860:	f7f3 fed2 	bl	8000608 <__aeabi_dmul>
 800c864:	a356      	add	r3, pc, #344	; (adr r3, 800c9c0 <__kernel_tan+0x2f0>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	f7f3 fd17 	bl	800029c <__adddf3>
 800c86e:	4622      	mov	r2, r4
 800c870:	462b      	mov	r3, r5
 800c872:	f7f3 fec9 	bl	8000608 <__aeabi_dmul>
 800c876:	a354      	add	r3, pc, #336	; (adr r3, 800c9c8 <__kernel_tan+0x2f8>)
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f7f3 fd0e 	bl	800029c <__adddf3>
 800c880:	4602      	mov	r2, r0
 800c882:	460b      	mov	r3, r1
 800c884:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c888:	f7f3 fd08 	bl	800029c <__adddf3>
 800c88c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c890:	f7f3 feba 	bl	8000608 <__aeabi_dmul>
 800c894:	4642      	mov	r2, r8
 800c896:	464b      	mov	r3, r9
 800c898:	f7f3 fd00 	bl	800029c <__adddf3>
 800c89c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8a0:	f7f3 feb2 	bl	8000608 <__aeabi_dmul>
 800c8a4:	4642      	mov	r2, r8
 800c8a6:	464b      	mov	r3, r9
 800c8a8:	f7f3 fcf8 	bl	800029c <__adddf3>
 800c8ac:	a348      	add	r3, pc, #288	; (adr r3, 800c9d0 <__kernel_tan+0x300>)
 800c8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	460d      	mov	r5, r1
 800c8b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8ba:	f7f3 fea5 	bl	8000608 <__aeabi_dmul>
 800c8be:	4622      	mov	r2, r4
 800c8c0:	462b      	mov	r3, r5
 800c8c2:	f7f3 fceb 	bl	800029c <__adddf3>
 800c8c6:	e9cd 0100 	strd	r0, r1, [sp]
 800c8ca:	460b      	mov	r3, r1
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	4659      	mov	r1, fp
 800c8d0:	4650      	mov	r0, sl
 800c8d2:	f7f3 fce3 	bl	800029c <__adddf3>
 800c8d6:	4b43      	ldr	r3, [pc, #268]	; (800c9e4 <__kernel_tan+0x314>)
 800c8d8:	429f      	cmp	r7, r3
 800c8da:	4604      	mov	r4, r0
 800c8dc:	460d      	mov	r5, r1
 800c8de:	f340 8083 	ble.w	800c9e8 <__kernel_tan+0x318>
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f7f3 fe26 	bl	8000534 <__aeabi_i2d>
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4680      	mov	r8, r0
 800c8ec:	4689      	mov	r9, r1
 800c8ee:	462b      	mov	r3, r5
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	f7f3 fe88 	bl	8000608 <__aeabi_dmul>
 800c8f8:	4642      	mov	r2, r8
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	460f      	mov	r7, r1
 800c8fe:	464b      	mov	r3, r9
 800c900:	4620      	mov	r0, r4
 800c902:	4629      	mov	r1, r5
 800c904:	f7f3 fcca 	bl	800029c <__adddf3>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4630      	mov	r0, r6
 800c90e:	4639      	mov	r1, r7
 800c910:	f7f3 ffa4 	bl	800085c <__aeabi_ddiv>
 800c914:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c918:	f7f3 fcbe 	bl	8000298 <__aeabi_dsub>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4650      	mov	r0, sl
 800c922:	4659      	mov	r1, fp
 800c924:	f7f3 fcb8 	bl	8000298 <__aeabi_dsub>
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	f7f3 fcb6 	bl	800029c <__adddf3>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4640      	mov	r0, r8
 800c936:	4649      	mov	r1, r9
 800c938:	f7f3 fcae 	bl	8000298 <__aeabi_dsub>
 800c93c:	9b02      	ldr	r3, [sp, #8]
 800c93e:	4604      	mov	r4, r0
 800c940:	1798      	asrs	r0, r3, #30
 800c942:	f000 0002 	and.w	r0, r0, #2
 800c946:	f1c0 0001 	rsb	r0, r0, #1
 800c94a:	460d      	mov	r5, r1
 800c94c:	f7f3 fdf2 	bl	8000534 <__aeabi_i2d>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4620      	mov	r0, r4
 800c956:	4629      	mov	r1, r5
 800c958:	f7f3 fe56 	bl	8000608 <__aeabi_dmul>
 800c95c:	e6dd      	b.n	800c71a <__kernel_tan+0x4a>
 800c95e:	bf00      	nop
 800c960:	54442d18 	.word	0x54442d18
 800c964:	3fe921fb 	.word	0x3fe921fb
 800c968:	33145c07 	.word	0x33145c07
 800c96c:	3c81a626 	.word	0x3c81a626
 800c970:	74bf7ad4 	.word	0x74bf7ad4
 800c974:	3efb2a70 	.word	0x3efb2a70
 800c978:	32f0a7e9 	.word	0x32f0a7e9
 800c97c:	3f12b80f 	.word	0x3f12b80f
 800c980:	1a8d1068 	.word	0x1a8d1068
 800c984:	3f3026f7 	.word	0x3f3026f7
 800c988:	fee08315 	.word	0xfee08315
 800c98c:	3f57dbc8 	.word	0x3f57dbc8
 800c990:	e96e8493 	.word	0xe96e8493
 800c994:	3f8226e3 	.word	0x3f8226e3
 800c998:	1bb341fe 	.word	0x1bb341fe
 800c99c:	3faba1ba 	.word	0x3faba1ba
 800c9a0:	db605373 	.word	0xdb605373
 800c9a4:	bef375cb 	.word	0xbef375cb
 800c9a8:	a03792a6 	.word	0xa03792a6
 800c9ac:	3f147e88 	.word	0x3f147e88
 800c9b0:	f2f26501 	.word	0xf2f26501
 800c9b4:	3f4344d8 	.word	0x3f4344d8
 800c9b8:	c9560328 	.word	0xc9560328
 800c9bc:	3f6d6d22 	.word	0x3f6d6d22
 800c9c0:	8406d637 	.word	0x8406d637
 800c9c4:	3f9664f4 	.word	0x3f9664f4
 800c9c8:	1110fe7a 	.word	0x1110fe7a
 800c9cc:	3fc11111 	.word	0x3fc11111
 800c9d0:	55555563 	.word	0x55555563
 800c9d4:	3fd55555 	.word	0x3fd55555
 800c9d8:	3e2fffff 	.word	0x3e2fffff
 800c9dc:	3ff00000 	.word	0x3ff00000
 800c9e0:	bff00000 	.word	0xbff00000
 800c9e4:	3fe59427 	.word	0x3fe59427
 800c9e8:	2e01      	cmp	r6, #1
 800c9ea:	d036      	beq.n	800ca5a <__kernel_tan+0x38a>
 800c9ec:	460f      	mov	r7, r1
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	491a      	ldr	r1, [pc, #104]	; (800ca60 <__kernel_tan+0x390>)
 800c9f6:	f7f3 ff31 	bl	800085c <__aeabi_ddiv>
 800c9fa:	2600      	movs	r6, #0
 800c9fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca00:	4652      	mov	r2, sl
 800ca02:	465b      	mov	r3, fp
 800ca04:	4630      	mov	r0, r6
 800ca06:	4639      	mov	r1, r7
 800ca08:	f7f3 fc46 	bl	8000298 <__aeabi_dsub>
 800ca0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca10:	4602      	mov	r2, r0
 800ca12:	460b      	mov	r3, r1
 800ca14:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca18:	f7f3 fc3e 	bl	8000298 <__aeabi_dsub>
 800ca1c:	4632      	mov	r2, r6
 800ca1e:	462b      	mov	r3, r5
 800ca20:	f7f3 fdf2 	bl	8000608 <__aeabi_dmul>
 800ca24:	4632      	mov	r2, r6
 800ca26:	4682      	mov	sl, r0
 800ca28:	468b      	mov	fp, r1
 800ca2a:	462b      	mov	r3, r5
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	4639      	mov	r1, r7
 800ca30:	f7f3 fdea 	bl	8000608 <__aeabi_dmul>
 800ca34:	2200      	movs	r2, #0
 800ca36:	4b0b      	ldr	r3, [pc, #44]	; (800ca64 <__kernel_tan+0x394>)
 800ca38:	f7f3 fc30 	bl	800029c <__adddf3>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	460b      	mov	r3, r1
 800ca40:	4650      	mov	r0, sl
 800ca42:	4659      	mov	r1, fp
 800ca44:	f7f3 fc2a 	bl	800029c <__adddf3>
 800ca48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca4c:	f7f3 fddc 	bl	8000608 <__aeabi_dmul>
 800ca50:	4632      	mov	r2, r6
 800ca52:	462b      	mov	r3, r5
 800ca54:	f7f3 fc22 	bl	800029c <__adddf3>
 800ca58:	e65f      	b.n	800c71a <__kernel_tan+0x4a>
 800ca5a:	4682      	mov	sl, r0
 800ca5c:	468b      	mov	fp, r1
 800ca5e:	e65e      	b.n	800c71e <__kernel_tan+0x4e>
 800ca60:	bff00000 	.word	0xbff00000
 800ca64:	3ff00000 	.word	0x3ff00000

0800ca68 <floor>:
 800ca68:	ec51 0b10 	vmov	r0, r1, d0
 800ca6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ca74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ca78:	2e13      	cmp	r6, #19
 800ca7a:	460c      	mov	r4, r1
 800ca7c:	ee10 5a10 	vmov	r5, s0
 800ca80:	4680      	mov	r8, r0
 800ca82:	dc34      	bgt.n	800caee <floor+0x86>
 800ca84:	2e00      	cmp	r6, #0
 800ca86:	da16      	bge.n	800cab6 <floor+0x4e>
 800ca88:	a335      	add	r3, pc, #212	; (adr r3, 800cb60 <floor+0xf8>)
 800ca8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca8e:	f7f3 fc05 	bl	800029c <__adddf3>
 800ca92:	2200      	movs	r2, #0
 800ca94:	2300      	movs	r3, #0
 800ca96:	f7f4 f847 	bl	8000b28 <__aeabi_dcmpgt>
 800ca9a:	b148      	cbz	r0, 800cab0 <floor+0x48>
 800ca9c:	2c00      	cmp	r4, #0
 800ca9e:	da59      	bge.n	800cb54 <floor+0xec>
 800caa0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800caa4:	4a30      	ldr	r2, [pc, #192]	; (800cb68 <floor+0x100>)
 800caa6:	432b      	orrs	r3, r5
 800caa8:	2500      	movs	r5, #0
 800caaa:	42ab      	cmp	r3, r5
 800caac:	bf18      	it	ne
 800caae:	4614      	movne	r4, r2
 800cab0:	4621      	mov	r1, r4
 800cab2:	4628      	mov	r0, r5
 800cab4:	e025      	b.n	800cb02 <floor+0x9a>
 800cab6:	4f2d      	ldr	r7, [pc, #180]	; (800cb6c <floor+0x104>)
 800cab8:	4137      	asrs	r7, r6
 800caba:	ea01 0307 	and.w	r3, r1, r7
 800cabe:	4303      	orrs	r3, r0
 800cac0:	d01f      	beq.n	800cb02 <floor+0x9a>
 800cac2:	a327      	add	r3, pc, #156	; (adr r3, 800cb60 <floor+0xf8>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	f7f3 fbe8 	bl	800029c <__adddf3>
 800cacc:	2200      	movs	r2, #0
 800cace:	2300      	movs	r3, #0
 800cad0:	f7f4 f82a 	bl	8000b28 <__aeabi_dcmpgt>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d0eb      	beq.n	800cab0 <floor+0x48>
 800cad8:	2c00      	cmp	r4, #0
 800cada:	bfbe      	ittt	lt
 800cadc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cae0:	fa43 f606 	asrlt.w	r6, r3, r6
 800cae4:	19a4      	addlt	r4, r4, r6
 800cae6:	ea24 0407 	bic.w	r4, r4, r7
 800caea:	2500      	movs	r5, #0
 800caec:	e7e0      	b.n	800cab0 <floor+0x48>
 800caee:	2e33      	cmp	r6, #51	; 0x33
 800caf0:	dd0b      	ble.n	800cb0a <floor+0xa2>
 800caf2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800caf6:	d104      	bne.n	800cb02 <floor+0x9a>
 800caf8:	ee10 2a10 	vmov	r2, s0
 800cafc:	460b      	mov	r3, r1
 800cafe:	f7f3 fbcd 	bl	800029c <__adddf3>
 800cb02:	ec41 0b10 	vmov	d0, r0, r1
 800cb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800cb0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb12:	fa23 f707 	lsr.w	r7, r3, r7
 800cb16:	4207      	tst	r7, r0
 800cb18:	d0f3      	beq.n	800cb02 <floor+0x9a>
 800cb1a:	a311      	add	r3, pc, #68	; (adr r3, 800cb60 <floor+0xf8>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	f7f3 fbbc 	bl	800029c <__adddf3>
 800cb24:	2200      	movs	r2, #0
 800cb26:	2300      	movs	r3, #0
 800cb28:	f7f3 fffe 	bl	8000b28 <__aeabi_dcmpgt>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d0bf      	beq.n	800cab0 <floor+0x48>
 800cb30:	2c00      	cmp	r4, #0
 800cb32:	da02      	bge.n	800cb3a <floor+0xd2>
 800cb34:	2e14      	cmp	r6, #20
 800cb36:	d103      	bne.n	800cb40 <floor+0xd8>
 800cb38:	3401      	adds	r4, #1
 800cb3a:	ea25 0507 	bic.w	r5, r5, r7
 800cb3e:	e7b7      	b.n	800cab0 <floor+0x48>
 800cb40:	2301      	movs	r3, #1
 800cb42:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cb46:	fa03 f606 	lsl.w	r6, r3, r6
 800cb4a:	4435      	add	r5, r6
 800cb4c:	4545      	cmp	r5, r8
 800cb4e:	bf38      	it	cc
 800cb50:	18e4      	addcc	r4, r4, r3
 800cb52:	e7f2      	b.n	800cb3a <floor+0xd2>
 800cb54:	2500      	movs	r5, #0
 800cb56:	462c      	mov	r4, r5
 800cb58:	e7aa      	b.n	800cab0 <floor+0x48>
 800cb5a:	bf00      	nop
 800cb5c:	f3af 8000 	nop.w
 800cb60:	8800759c 	.word	0x8800759c
 800cb64:	7e37e43c 	.word	0x7e37e43c
 800cb68:	bff00000 	.word	0xbff00000
 800cb6c:	000fffff 	.word	0x000fffff

0800cb70 <matherr>:
 800cb70:	2000      	movs	r0, #0
 800cb72:	4770      	bx	lr
 800cb74:	0000      	movs	r0, r0
	...

0800cb78 <scalbn>:
 800cb78:	b570      	push	{r4, r5, r6, lr}
 800cb7a:	ec55 4b10 	vmov	r4, r5, d0
 800cb7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cb82:	4606      	mov	r6, r0
 800cb84:	462b      	mov	r3, r5
 800cb86:	b9aa      	cbnz	r2, 800cbb4 <scalbn+0x3c>
 800cb88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cb8c:	4323      	orrs	r3, r4
 800cb8e:	d03b      	beq.n	800cc08 <scalbn+0x90>
 800cb90:	4b31      	ldr	r3, [pc, #196]	; (800cc58 <scalbn+0xe0>)
 800cb92:	4629      	mov	r1, r5
 800cb94:	2200      	movs	r2, #0
 800cb96:	ee10 0a10 	vmov	r0, s0
 800cb9a:	f7f3 fd35 	bl	8000608 <__aeabi_dmul>
 800cb9e:	4b2f      	ldr	r3, [pc, #188]	; (800cc5c <scalbn+0xe4>)
 800cba0:	429e      	cmp	r6, r3
 800cba2:	4604      	mov	r4, r0
 800cba4:	460d      	mov	r5, r1
 800cba6:	da12      	bge.n	800cbce <scalbn+0x56>
 800cba8:	a327      	add	r3, pc, #156	; (adr r3, 800cc48 <scalbn+0xd0>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7f3 fd2b 	bl	8000608 <__aeabi_dmul>
 800cbb2:	e009      	b.n	800cbc8 <scalbn+0x50>
 800cbb4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cbb8:	428a      	cmp	r2, r1
 800cbba:	d10c      	bne.n	800cbd6 <scalbn+0x5e>
 800cbbc:	ee10 2a10 	vmov	r2, s0
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	f7f3 fb6a 	bl	800029c <__adddf3>
 800cbc8:	4604      	mov	r4, r0
 800cbca:	460d      	mov	r5, r1
 800cbcc:	e01c      	b.n	800cc08 <scalbn+0x90>
 800cbce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	3a36      	subs	r2, #54	; 0x36
 800cbd6:	4432      	add	r2, r6
 800cbd8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cbdc:	428a      	cmp	r2, r1
 800cbde:	dd0b      	ble.n	800cbf8 <scalbn+0x80>
 800cbe0:	ec45 4b11 	vmov	d1, r4, r5
 800cbe4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800cc50 <scalbn+0xd8>
 800cbe8:	f000 f83c 	bl	800cc64 <copysign>
 800cbec:	a318      	add	r3, pc, #96	; (adr r3, 800cc50 <scalbn+0xd8>)
 800cbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf2:	ec51 0b10 	vmov	r0, r1, d0
 800cbf6:	e7da      	b.n	800cbae <scalbn+0x36>
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	dd08      	ble.n	800cc0e <scalbn+0x96>
 800cbfc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc08:	ec45 4b10 	vmov	d0, r4, r5
 800cc0c:	bd70      	pop	{r4, r5, r6, pc}
 800cc0e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cc12:	da0d      	bge.n	800cc30 <scalbn+0xb8>
 800cc14:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cc18:	429e      	cmp	r6, r3
 800cc1a:	ec45 4b11 	vmov	d1, r4, r5
 800cc1e:	dce1      	bgt.n	800cbe4 <scalbn+0x6c>
 800cc20:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800cc48 <scalbn+0xd0>
 800cc24:	f000 f81e 	bl	800cc64 <copysign>
 800cc28:	a307      	add	r3, pc, #28	; (adr r3, 800cc48 <scalbn+0xd0>)
 800cc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2e:	e7e0      	b.n	800cbf2 <scalbn+0x7a>
 800cc30:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cc34:	3236      	adds	r2, #54	; 0x36
 800cc36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cc3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cc3e:	4620      	mov	r0, r4
 800cc40:	4629      	mov	r1, r5
 800cc42:	2200      	movs	r2, #0
 800cc44:	4b06      	ldr	r3, [pc, #24]	; (800cc60 <scalbn+0xe8>)
 800cc46:	e7b2      	b.n	800cbae <scalbn+0x36>
 800cc48:	c2f8f359 	.word	0xc2f8f359
 800cc4c:	01a56e1f 	.word	0x01a56e1f
 800cc50:	8800759c 	.word	0x8800759c
 800cc54:	7e37e43c 	.word	0x7e37e43c
 800cc58:	43500000 	.word	0x43500000
 800cc5c:	ffff3cb0 	.word	0xffff3cb0
 800cc60:	3c900000 	.word	0x3c900000

0800cc64 <copysign>:
 800cc64:	ec51 0b10 	vmov	r0, r1, d0
 800cc68:	ee11 0a90 	vmov	r0, s3
 800cc6c:	ee10 2a10 	vmov	r2, s0
 800cc70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cc74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800cc78:	ea41 0300 	orr.w	r3, r1, r0
 800cc7c:	ec43 2b10 	vmov	d0, r2, r3
 800cc80:	4770      	bx	lr
	...

0800cc84 <_init>:
 800cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc86:	bf00      	nop
 800cc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc8a:	bc08      	pop	{r3}
 800cc8c:	469e      	mov	lr, r3
 800cc8e:	4770      	bx	lr

0800cc90 <_fini>:
 800cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc92:	bf00      	nop
 800cc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc96:	bc08      	pop	{r3}
 800cc98:	469e      	mov	lr, r3
 800cc9a:	4770      	bx	lr
