
FlightControllerF401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b74c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  0800b8f0  0800b8f0  0001b8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0b8  0800c0b8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c0  0800c0c0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c0  0800c0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  200001e4  0800c2ac  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  0800c2ac  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002263b  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000036a0  00000000  00000000  0004284f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d0  00000000  00000000  00045ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001260  00000000  00000000  000472c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a67f  00000000  00000000  00048520  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011f21  00000000  00000000  00062b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097d19  00000000  00000000  00074ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010c7d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fc4  00000000  00000000  0010c854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b8d4 	.word	0x0800b8d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800b8d4 	.word	0x0800b8d4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b972 	b.w	8000f54 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	4688      	mov	r8, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14b      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4615      	mov	r5, r2
 8000c9a:	d967      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0720 	rsb	r7, r2, #32
 8000ca6:	fa01 f302 	lsl.w	r3, r1, r2
 8000caa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cae:	4095      	lsls	r5, r2
 8000cb0:	ea47 0803 	orr.w	r8, r7, r3
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc0:	fa1f fc85 	uxth.w	ip, r5
 8000cc4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cc8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ccc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18eb      	adds	r3, r5, r3
 8000cd6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cda:	f080 811b 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8118 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000ce4:	3f02      	subs	r7, #2
 8000ce6:	442b      	add	r3, r5
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfc:	45a4      	cmp	ip, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	192c      	adds	r4, r5, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8107 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	f240 8104 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000d10:	3802      	subs	r0, #2
 8000d12:	442c      	add	r4, r5
 8000d14:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d18:	eba4 040c 	sub.w	r4, r4, ip
 8000d1c:	2700      	movs	r7, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	4639      	mov	r1, r7
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0xbe>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80eb 	beq.w	8000f0e <__udivmoddi4+0x286>
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d3e:	4638      	mov	r0, r7
 8000d40:	4639      	mov	r1, r7
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f783 	clz	r7, r3
 8000d4a:	2f00      	cmp	r7, #0
 8000d4c:	d147      	bne.n	8000dde <__udivmoddi4+0x156>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0xd0>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80fa 	bhi.w	8000f4c <__udivmoddi4+0x2c4>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	4698      	mov	r8, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d0e0      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000d66:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6a:	e7dd      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000d6c:	b902      	cbnz	r2, 8000d70 <__udivmoddi4+0xe8>
 8000d6e:	deff      	udf	#255	; 0xff
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f040 808f 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d7a:	1b49      	subs	r1, r1, r5
 8000d7c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d80:	fa1f f885 	uxth.w	r8, r5
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb08 f10c 	mul.w	r1, r8, ip
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9c:	18eb      	adds	r3, r5, r3
 8000d9e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4299      	cmp	r1, r3
 8000da6:	f200 80cd 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000daa:	4684      	mov	ip, r0
 8000dac:	1a59      	subs	r1, r3, r1
 8000dae:	b2a3      	uxth	r3, r4
 8000db0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000db8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dbc:	fb08 f800 	mul.w	r8, r8, r0
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x14c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x14a>
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	f200 80b6 	bhi.w	8000f3e <__udivmoddi4+0x2b6>
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	eba4 0408 	sub.w	r4, r4, r8
 8000dd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ddc:	e79f      	b.n	8000d1e <__udivmoddi4+0x96>
 8000dde:	f1c7 0c20 	rsb	ip, r7, #32
 8000de2:	40bb      	lsls	r3, r7
 8000de4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000de8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dec:	fa01 f407 	lsl.w	r4, r1, r7
 8000df0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000df8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dfc:	4325      	orrs	r5, r4
 8000dfe:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e02:	0c2c      	lsrs	r4, r5, #16
 8000e04:	fb08 3319 	mls	r3, r8, r9, r3
 8000e08:	fa1f fa8e 	uxth.w	sl, lr
 8000e0c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e10:	fb09 f40a 	mul.w	r4, r9, sl
 8000e14:	429c      	cmp	r4, r3
 8000e16:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1e 0303 	adds.w	r3, lr, r3
 8000e24:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e28:	f080 8087 	bcs.w	8000f3a <__udivmoddi4+0x2b2>
 8000e2c:	429c      	cmp	r4, r3
 8000e2e:	f240 8084 	bls.w	8000f3a <__udivmoddi4+0x2b2>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4473      	add	r3, lr
 8000e38:	1b1b      	subs	r3, r3, r4
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e48:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e4c:	45a2      	cmp	sl, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1e 0404 	adds.w	r4, lr, r4
 8000e54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e58:	d26b      	bcs.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5a:	45a2      	cmp	sl, r4
 8000e5c:	d969      	bls.n	8000f32 <__udivmoddi4+0x2aa>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4474      	add	r4, lr
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6a:	eba4 040a 	sub.w	r4, r4, sl
 8000e6e:	454c      	cmp	r4, r9
 8000e70:	46c2      	mov	sl, r8
 8000e72:	464b      	mov	r3, r9
 8000e74:	d354      	bcc.n	8000f20 <__udivmoddi4+0x298>
 8000e76:	d051      	beq.n	8000f1c <__udivmoddi4+0x294>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d069      	beq.n	8000f50 <__udivmoddi4+0x2c8>
 8000e7c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e80:	eb64 0403 	sbc.w	r4, r4, r3
 8000e84:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e88:	40fd      	lsrs	r5, r7
 8000e8a:	40fc      	lsrs	r4, r7
 8000e8c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e90:	e9c6 5400 	strd	r5, r4, [r6]
 8000e94:	2700      	movs	r7, #0
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea0:	4095      	lsls	r5, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	0c01      	lsrs	r1, r0, #16
 8000eb2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eb6:	fa1f f885 	uxth.w	r8, r5
 8000eba:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ebe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec2:	fb07 f308 	mul.w	r3, r7, r8
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x256>
 8000ece:	1869      	adds	r1, r5, r1
 8000ed0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed4:	d22f      	bcs.n	8000f36 <__udivmoddi4+0x2ae>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d92d      	bls.n	8000f36 <__udivmoddi4+0x2ae>
 8000eda:	3f02      	subs	r7, #2
 8000edc:	4429      	add	r1, r5
 8000ede:	1acb      	subs	r3, r1, r3
 8000ee0:	b281      	uxth	r1, r0
 8000ee2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eee:	fb00 f308 	mul.w	r3, r0, r8
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x27e>
 8000ef6:	1869      	adds	r1, r5, r1
 8000ef8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efc:	d217      	bcs.n	8000f2e <__udivmoddi4+0x2a6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d915      	bls.n	8000f2e <__udivmoddi4+0x2a6>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4429      	add	r1, r5
 8000f06:	1ac9      	subs	r1, r1, r3
 8000f08:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f0c:	e73b      	b.n	8000d86 <__udivmoddi4+0xfe>
 8000f0e:	4637      	mov	r7, r6
 8000f10:	4630      	mov	r0, r6
 8000f12:	e709      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f14:	4607      	mov	r7, r0
 8000f16:	e6e7      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f18:	4618      	mov	r0, r3
 8000f1a:	e6fb      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f1c:	4541      	cmp	r1, r8
 8000f1e:	d2ab      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f20:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f24:	eb69 020e 	sbc.w	r2, r9, lr
 8000f28:	3801      	subs	r0, #1
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	e7a4      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f2e:	4660      	mov	r0, ip
 8000f30:	e7e9      	b.n	8000f06 <__udivmoddi4+0x27e>
 8000f32:	4618      	mov	r0, r3
 8000f34:	e795      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f36:	4667      	mov	r7, ip
 8000f38:	e7d1      	b.n	8000ede <__udivmoddi4+0x256>
 8000f3a:	4681      	mov	r9, r0
 8000f3c:	e77c      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f3e:	3802      	subs	r0, #2
 8000f40:	442c      	add	r4, r5
 8000f42:	e747      	b.n	8000dd4 <__udivmoddi4+0x14c>
 8000f44:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f48:	442b      	add	r3, r5
 8000f4a:	e72f      	b.n	8000dac <__udivmoddi4+0x124>
 8000f4c:	4638      	mov	r0, r7
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xda>
 8000f50:	4637      	mov	r7, r6
 8000f52:	e6e9      	b.n	8000d28 <__udivmoddi4+0xa0>

08000f54 <__aeabi_idiv0>:
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop

08000f58 <MPU9250_OnActivate>:

static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

__weak void MPU9250_OnActivate()
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8000f6c:	f7ff fff4 	bl	8000f58 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(GYRO_CSN_GPIO_Port, GYRO_CSN_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2110      	movs	r1, #16
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <MPU9250_Activate+0x18>)
 8000f76:	f004 f95f 	bl	8005238 <HAL_GPIO_WritePin>
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020000 	.word	0x40020000

08000f84 <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CSN_GPIO_Port, GYRO_CSN_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <MPU9250_Deactivate+0x14>)
 8000f8e:	f004 f953 	bl	8005238 <HAL_GPIO_WritePin>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40020000 	.word	0x40020000

08000f9c <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af02      	add	r7, sp, #8
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000faa:	f107 020f 	add.w	r2, r7, #15
 8000fae:	1df9      	adds	r1, r7, #7
 8000fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <SPIx_WriteRead+0x38>)
 8000fba:	f005 f986 	bl	80062ca <HAL_SPI_TransmitReceive>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SPIx_WriteRead+0x2c>
	{
		return -1;
 8000fc4:	23ff      	movs	r3, #255	; 0xff
 8000fc6:	e000      	b.n	8000fca <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	2000060c 	.word	0x2000060c

08000fd8 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	70fb      	strb	r3, [r7, #3]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8000fe8:	f7ff ffbe 	bl	8000f68 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffd4 	bl	8000f9c <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8000ff4:	e00a      	b.n	800100c <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*pBuffer);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffce 	bl	8000f9c <SPIx_WriteRead>
		NumByteToWrite--;
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	3b01      	subs	r3, #1
 8001004:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3301      	adds	r3, #1
 800100a:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 800100c:	883b      	ldrh	r3, [r7, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f1      	bne.n	8000ff6 <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 8001012:	f7ff ffb7 	bl	8000f84 <MPU9250_Deactivate>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	70fb      	strb	r3, [r7, #3]
 800102c:	4613      	mov	r3, r2
 800102e:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001030:	f7ff ff9a 	bl	8000f68 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	78fb      	ldrb	r3, [r7, #3]
 8001038:	4313      	orrs	r3, r2
 800103a:	b2db      	uxtb	r3, r3
 800103c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 800103e:	f107 010f 	add.w	r1, r7, #15
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001046:	2201      	movs	r2, #1
 8001048:	4807      	ldr	r0, [pc, #28]	; (8001068 <MPU_SPI_Read+0x48>)
 800104a:	f004 ff01 	bl	8005e50 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&MPU9250_SPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 800104e:	883a      	ldrh	r2, [r7, #0]
 8001050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <MPU_SPI_Read+0x48>)
 8001058:	f005 f82e 	bl	80060b8 <HAL_SPI_Receive>
	MPU9250_Deactivate();
 800105c:	f7ff ff92 	bl	8000f84 <MPU9250_Deactivate>
}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000060c 	.word	0x2000060c

0800106c <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 800107c:	79f9      	ldrb	r1, [r7, #7]
 800107e:	1dbb      	adds	r3, r7, #6
 8001080:	2201      	movs	r2, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff ffa8 	bl	8000fd8 <MPU_SPI_Write>
	HAL_Delay(10);
 8001088:	200a      	movs	r0, #10
 800108a:	f003 fa85 	bl	8004598 <HAL_Delay>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	603a      	str	r2, [r7, #0]
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	460b      	mov	r3, r1
 80010a4:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 80010a6:	79bb      	ldrb	r3, [r7, #6]
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	4619      	mov	r1, r3
 80010ae:	6838      	ldr	r0, [r7, #0]
 80010b0:	f7ff ffb6 	bl	8001020 <MPU_SPI_Read>
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	460a      	mov	r2, r1
 80010c6:	71fb      	strb	r3, [r7, #7]
 80010c8:	4613      	mov	r3, r2
 80010ca:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80010cc:	2325      	movs	r3, #37	; 0x25
 80010ce:	220c      	movs	r2, #12
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffca 	bl	800106c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80010d8:	2226      	movs	r2, #38	; 0x26
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4619      	mov	r1, r3
 80010de:	4610      	mov	r0, r2
 80010e0:	f7ff ffc4 	bl	800106c <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80010e4:	2263      	movs	r2, #99	; 0x63
 80010e6:	79bb      	ldrb	r3, [r7, #6]
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f7ff ffbe 	bl	800106c <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 80010f0:	2227      	movs	r2, #39	; 0x27
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	4619      	mov	r1, r3
 80010fc:	4610      	mov	r0, r2
 80010fe:	f7ff ffb5 	bl	800106c <writeRegister>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	603a      	str	r2, [r7, #0]
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	460b      	mov	r3, r1
 8001118:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 800111a:	2025      	movs	r0, #37	; 0x25
 800111c:	220c      	movs	r2, #12
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	4313      	orrs	r3, r2
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff ffa1 	bl	800106c <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 800112a:	2226      	movs	r2, #38	; 0x26
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	4619      	mov	r1, r3
 8001130:	4610      	mov	r0, r2
 8001132:	f7ff ff9b 	bl	800106c <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 8001136:	2027      	movs	r0, #39	; 0x27
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	79bb      	ldrb	r3, [r7, #6]
 800113c:	4313      	orrs	r3, r2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff ff93 	bl	800106c <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f003 fa26 	bl	8004598 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 800114c:	2049      	movs	r0, #73	; 0x49
 800114e:	79bb      	ldrb	r3, [r7, #6]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff ff9f 	bl	8001096 <readRegisters>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 8001164:	2375      	movs	r3, #117	; 0x75
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <whoAmI+0x18>)
 8001168:	2101      	movs	r1, #1
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff93 	bl	8001096 <readRegisters>

	// return the register value
	return _buffer[0];
 8001170:	4b01      	ldr	r3, [pc, #4]	; (8001178 <whoAmI+0x18>)
 8001172:	781b      	ldrb	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000200 	.word	0x20000200

0800117c <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8001180:	2300      	movs	r3, #0
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <whoAmIAK8963+0x18>)
 8001184:	2101      	movs	r1, #1
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ffbf 	bl	800110a <readAK8963Registers>
	// return the register value
	return _buffer[0];
 800118c:	4b01      	ldr	r3, [pc, #4]	; (8001194 <whoAmIAK8963+0x18>)
 800118e:	781b      	ldrb	r3, [r3, #0]
}
 8001190:	4618      	mov	r0, r3
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000200 	.word	0x20000200

08001198 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 800119e:	236b      	movs	r3, #107	; 0x6b
 80011a0:	2201      	movs	r2, #1
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff61 	bl	800106c <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80011aa:	236a      	movs	r3, #106	; 0x6a
 80011ac:	2220      	movs	r2, #32
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5b 	bl	800106c <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80011b6:	2324      	movs	r3, #36	; 0x24
 80011b8:	220d      	movs	r2, #13
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff55 	bl	800106c <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80011c2:	230a      	movs	r3, #10
 80011c4:	2200      	movs	r2, #0
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff77 	bl	80010bc <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80011ce:	236b      	movs	r3, #107	; 0x6b
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff49 	bl	800106c <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80011da:	200a      	movs	r0, #10
 80011dc:	f003 f9dc 	bl	8004598 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80011e0:	230b      	movs	r3, #11
 80011e2:	2201      	movs	r2, #1
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff68 	bl	80010bc <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80011ec:	236b      	movs	r3, #107	; 0x6b
 80011ee:	2201      	movs	r2, #1
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff3a 	bl	800106c <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80011f8:	f7ff ffb2 	bl	8001160 <whoAmI>
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b71      	cmp	r3, #113	; 0x71
 8001204:	d004      	beq.n	8001210 <MPU9250_Init+0x78>
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b73      	cmp	r3, #115	; 0x73
 800120a:	d001      	beq.n	8001210 <MPU9250_Init+0x78>
	{
		return 1;
 800120c:	2301      	movs	r3, #1
 800120e:	e06c      	b.n	80012ea <MPU9250_Init+0x152>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8001210:	236c      	movs	r3, #108	; 0x6c
 8001212:	2200      	movs	r2, #0
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff28 	bl	800106c <writeRegister>

	// setting accel range to 8G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_8G);
 800121c:	231c      	movs	r3, #28
 800121e:	2210      	movs	r2, #16
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff22 	bl	800106c <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS);
 8001228:	231b      	movs	r3, #27
 800122a:	2218      	movs	r2, #24
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff1c 	bl	800106c <writeRegister>

	// setting bandwidth to 184Hz as default
	writeRegister(ACCEL_CONFIG2,DLPF_184);
 8001234:	231d      	movs	r3, #29
 8001236:	2201      	movs	r2, #1
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff16 	bl	800106c <writeRegister>

	// setting gyro bandwidth to 184Hz
	writeRegister(CONFIG,DLPF_184);
 8001240:	231a      	movs	r3, #26
 8001242:	2201      	movs	r2, #1
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff10 	bl	800106c <writeRegister>

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 800124c:	2319      	movs	r3, #25
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff0b 	bl	800106c <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8001256:	236a      	movs	r3, #106	; 0x6a
 8001258:	2220      	movs	r2, #32
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff05 	bl	800106c <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 8001262:	2324      	movs	r3, #36	; 0x24
 8001264:	220d      	movs	r2, #13
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff feff 	bl	800106c <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 800126e:	f7ff ff85 	bl	800117c <whoAmIAK8963>
 8001272:	4603      	mov	r3, r0
 8001274:	2b48      	cmp	r3, #72	; 0x48
 8001276:	d001      	beq.n	800127c <MPU9250_Init+0xe4>
	{
		return 1;
 8001278:	2301      	movs	r3, #1
 800127a:	e036      	b.n	80012ea <MPU9250_Init+0x152>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 800127c:	230a      	movs	r3, #10
 800127e:	2200      	movs	r2, #0
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff1a 	bl	80010bc <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f003 f985 	bl	8004598 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 800128e:	230a      	movs	r3, #10
 8001290:	220f      	movs	r2, #15
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff11 	bl	80010bc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 800129a:	2064      	movs	r0, #100	; 0x64
 800129c:	f003 f97c 	bl	8004598 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 80012a0:	2310      	movs	r3, #16
 80012a2:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <MPU9250_Init+0x15c>)
 80012a4:	2103      	movs	r1, #3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff2f 	bl	800110a <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80012ac:	230a      	movs	r3, #10
 80012ae:	2200      	movs	r2, #0
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff02 	bl	80010bc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80012b8:	2064      	movs	r0, #100	; 0x64
 80012ba:	f003 f96d 	bl	8004598 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80012be:	230a      	movs	r3, #10
 80012c0:	2216      	movs	r2, #22
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fef9 	bl	80010bc <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80012ca:	2064      	movs	r0, #100	; 0x64
 80012cc:	f003 f964 	bl	8004598 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80012d0:	236b      	movs	r3, #107	; 0x6b
 80012d2:	2201      	movs	r2, #1
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fec8 	bl	800106c <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80012dc:	2303      	movs	r3, #3
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <MPU9250_Init+0x160>)
 80012e0:	2107      	movs	r1, #7
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff11 	bl	800110a <readAK8963Registers>

	// successful init, return 0
	return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000218 	.word	0x20000218
 80012f8:	20000200 	.word	0x20000200

080012fc <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the data, each argiment should point to a array for x, y, and x */
void MPU9250_GetData(struct MPUstr* DataStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 8001304:	233b      	movs	r3, #59	; 0x3b
 8001306:	4a60      	ldr	r2, [pc, #384]	; (8001488 <MPU9250_GetData+0x18c>)
 8001308:	2115      	movs	r1, #21
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fec3 	bl	8001096 <readRegisters>

	// combine into 16 bit values
	DataStruct->Accelerometer_X_RAW = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001310:	4b5d      	ldr	r3, [pc, #372]	; (8001488 <MPU9250_GetData+0x18c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b5b      	ldr	r3, [pc, #364]	; (8001488 <MPU9250_GetData+0x18c>)
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21a      	sxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y_RAW = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <MPU9250_GetData+0x18c>)
 8001328:	789b      	ldrb	r3, [r3, #2]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b56      	ldr	r3, [pc, #344]	; (8001488 <MPU9250_GetData+0x18c>)
 8001330:	78db      	ldrb	r3, [r3, #3]
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z_RAW = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 800133c:	4b52      	ldr	r3, [pc, #328]	; (8001488 <MPU9250_GetData+0x18c>)
 800133e:	791b      	ldrb	r3, [r3, #4]
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <MPU9250_GetData+0x18c>)
 8001346:	795b      	ldrb	r3, [r3, #5]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21a      	sxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	809a      	strh	r2, [r3, #4]
	DataStruct->Gyroscope_X_RAW = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8001352:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <MPU9250_GetData+0x18c>)
 8001354:	7a1b      	ldrb	r3, [r3, #8]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b21a      	sxth	r2, r3
 800135a:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <MPU9250_GetData+0x18c>)
 800135c:	7a5b      	ldrb	r3, [r3, #9]
 800135e:	b21b      	sxth	r3, r3
 8001360:	4313      	orrs	r3, r2
 8001362:	b21a      	sxth	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y_RAW = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <MPU9250_GetData+0x18c>)
 800136a:	7a9b      	ldrb	r3, [r3, #10]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	b21a      	sxth	r2, r3
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <MPU9250_GetData+0x18c>)
 8001372:	7adb      	ldrb	r3, [r3, #11]
 8001374:	b21b      	sxth	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b21a      	sxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z_RAW = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 800137e:	4b42      	ldr	r3, [pc, #264]	; (8001488 <MPU9250_GetData+0x18c>)
 8001380:	7b1b      	ldrb	r3, [r3, #12]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b40      	ldr	r3, [pc, #256]	; (8001488 <MPU9250_GetData+0x18c>)
 8001388:	7b5b      	ldrb	r3, [r3, #13]
 800138a:	b21b      	sxth	r3, r3
 800138c:	4313      	orrs	r3, r2
 800138e:	b21a      	sxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	815a      	strh	r2, [r3, #10]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MPU9250_GetData+0x18c>)
 8001396:	7bdb      	ldrb	r3, [r3, #15]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <MPU9250_GetData+0x18c>)
 800139e:	7b9b      	ldrb	r3, [r3, #14]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	81fb      	strh	r3, [r7, #14]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <MPU9250_GetData+0x18c>)
 80013a8:	7c5b      	ldrb	r3, [r3, #17]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MPU9250_GetData+0x18c>)
 80013b0:	7c1b      	ldrb	r3, [r3, #16]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	81bb      	strh	r3, [r7, #12]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80013b8:	4b33      	ldr	r3, [pc, #204]	; (8001488 <MPU9250_GetData+0x18c>)
 80013ba:	7cdb      	ldrb	r3, [r3, #19]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	4b31      	ldr	r3, [pc, #196]	; (8001488 <MPU9250_GetData+0x18c>)
 80013c2:	7c9b      	ldrb	r3, [r3, #18]
 80013c4:	b21b      	sxth	r3, r3
 80013c6:	4313      	orrs	r3, r2
 80013c8:	817b      	strh	r3, [r7, #10]

	DataStruct->Mag_X_RAW = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80013ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ce:	ee07 3a90 	vmov	s15, r3
 80013d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MPU9250_GetData+0x190>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3b80      	subs	r3, #128	; 0x80
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013e4:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8001490 <MPU9250_GetData+0x194>
 80013e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fc:	ee17 3a90 	vmov	r3, s15
 8001400:	b21a      	sxth	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	819a      	strh	r2, [r3, #12]
	DataStruct->Mag_Y_RAW = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 8001406:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MPU9250_GetData+0x190>)
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	3b80      	subs	r3, #128	; 0x80
 8001418:	ee07 3a90 	vmov	s15, r3
 800141c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001420:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8001490 <MPU9250_GetData+0x194>
 8001424:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800142c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001438:	ee17 3a90 	vmov	r3, s15
 800143c:	b21a      	sxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	81da      	strh	r2, [r3, #14]
	DataStruct->Mag_Z_RAW  = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 8001442:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MPU9250_GetData+0x190>)
 8001450:	789b      	ldrb	r3, [r3, #2]
 8001452:	3b80      	subs	r3, #128	; 0x80
 8001454:	ee07 3a90 	vmov	s15, r3
 8001458:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800145c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8001490 <MPU9250_GetData+0x194>
 8001460:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001464:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800146c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001474:	ee17 3a90 	vmov	r3, s15
 8001478:	b21a      	sxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	821a      	strh	r2, [r3, #16]
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000200 	.word	0x20000200
 800148c:	20000218 	.word	0x20000218
 8001490:	43800000 	.word	0x43800000
 8001494:	00000000 	.word	0x00000000

08001498 <MPU_CalculateFromRAWData>:
	if ( ang->roll < -180 ) ang->roll += 360;
	ang->roll=-ang->roll; //positive angle drone tilt to right
}

void MPU_CalculateFromRAWData(struct MPUstr* d,float timedelta)
{
 8001498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800149c:	b08c      	sub	sp, #48	; 0x30
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	ed87 0a02 	vstr	s0, [r7, #8]
	float AccelVectorRoll;
	float p,q,r;
	float X,Y,Z;

	//Offset RAW gyro values with calibrated offsets
	d->Gyroscope_X_Cal = (float)(d->Gyroscope_X_RAW) - d->Offset_Gyro_X;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	edc3 7a08 	vstr	s15, [r3, #32]
	d->Gyroscope_Y_Cal = (float)(d->Gyroscope_Y_RAW) - d->Offset_Gyro_Y;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80014d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	d->Gyroscope_Z_Cal = (float)(d->Gyroscope_Z_RAW) - d->Offset_Gyro_Z;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80014f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	//GYRO AND ACCEL DATA in STANDARD X,Y,Z directions Roll (nose), Pitch(right wing), Yaw (down)
	//Sensor MPU 6050 axis position X (right wing), Y (nose), Z (up)
	d->Gyro_X = d->Gyroscope_Y_Cal;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800150a:	ee17 3a90 	vmov	r3, s15
 800150e:	b21a      	sxth	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	865a      	strh	r2, [r3, #50]	; 0x32
	d->Gyro_Y = d->Gyroscope_X_Cal;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	edd3 7a08 	vldr	s15, [r3, #32]
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 3a90 	vmov	r3, s15
 8001522:	b21a      	sxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	869a      	strh	r2, [r3, #52]	; 0x34
	d->Gyro_Z = -d->Gyroscope_Z_Cal;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800152e:	eef1 7a67 	vneg.f32	s15, s15
 8001532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001536:	ee17 3a90 	vmov	r3, s15
 800153a:	b21a      	sxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	86da      	strh	r2, [r3, #54]	; 0x36

	d->Accel_X = d->Accelerometer_Y_RAW;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	859a      	strh	r2, [r3, #44]	; 0x2c
	d->Accel_Y = d->Accelerometer_X_RAW;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	85da      	strh	r2, [r3, #46]	; 0x2e
	d->Accel_Z = -d->Accelerometer_Z_RAW;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800155a:	b29b      	uxth	r3, r3
 800155c:	425b      	negs	r3, r3
 800155e:	b29b      	uxth	r3, r3
 8001560:	b21a      	sxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	861a      	strh	r2, [r3, #48]	; 0x30


	//Accelerometer angles-----------------------------------------------------------------
	AccelVectorRoll =  sqrt( (d->Accel_X * d->Accel_X) + (d->Accel_Z * d->Accel_Z) );
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001574:	fb03 f202 	mul.w	r2, r3, r2
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800157e:	4619      	mov	r1, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001586:	fb03 f301 	mul.w	r3, r3, r1
 800158a:	4413      	add	r3, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffd1 	bl	8000534 <__aeabi_i2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	ec43 2b10 	vmov	d0, r2, r3
 800159a:	f008 fefd 	bl	800a398 <sqrt>
 800159e:	ec53 2b10 	vmov	r2, r3, d0
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	f7ff fb07 	bl	8000bb8 <__aeabi_d2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	AccelVectorPitch = sqrt( (d->Accel_Y * d->Accel_Y) + (d->Accel_Z * d->Accel_Z) );
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80015b4:	461a      	mov	r2, r3
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80015bc:	fb03 f202 	mul.w	r2, r3, r2
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80015c6:	4619      	mov	r1, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80015ce:	fb03 f301 	mul.w	r3, r3, r1
 80015d2:	4413      	add	r3, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffad 	bl	8000534 <__aeabi_i2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	ec43 2b10 	vmov	d0, r2, r3
 80015e2:	f008 fed9 	bl	800a398 <sqrt>
 80015e6:	ec53 2b10 	vmov	r2, r3, d0
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fae3 	bl	8000bb8 <__aeabi_d2f>
 80015f2:	4603      	mov	r3, r0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28

	d->Angle_Accel_Roll  = -atan(d->Accel_Y/AccelVectorRoll) * RADIANSTODEGREES;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001604:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001608:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800160c:	ee16 0a90 	vmov	r0, s13
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	ec43 2b10 	vmov	d0, r2, r3
 800161c:	f008 fc54 	bl	8009ec8 <atan>
 8001620:	ec53 2b10 	vmov	r2, r3, d0
 8001624:	4614      	mov	r4, r2
 8001626:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800162a:	a3f7      	add	r3, pc, #988	; (adr r3, 8001a08 <MPU_CalculateFromRAWData+0x570>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe ffe8 	bl	8000608 <__aeabi_dmul>
 8001638:	4603      	mov	r3, r0
 800163a:	460c      	mov	r4, r1
 800163c:	4618      	mov	r0, r3
 800163e:	4621      	mov	r1, r4
 8001640:	f7ff faba 	bl	8000bb8 <__aeabi_d2f>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
	d->Angle_Accel_Pitch = atan(d->Accel_X/AccelVectorPitch) * RADIANSTODEGREES;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001658:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800165c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001660:	ee16 0a90 	vmov	r0, s13
 8001664:	f7fe ff78 	bl	8000558 <__aeabi_f2d>
 8001668:	4603      	mov	r3, r0
 800166a:	460c      	mov	r4, r1
 800166c:	ec44 3b10 	vmov	d0, r3, r4
 8001670:	f008 fc2a 	bl	8009ec8 <atan>
 8001674:	ec51 0b10 	vmov	r0, r1, d0
 8001678:	a3e3      	add	r3, pc, #908	; (adr r3, 8001a08 <MPU_CalculateFromRAWData+0x570>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe ffc3 	bl	8000608 <__aeabi_dmul>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	4618      	mov	r0, r3
 8001688:	4621      	mov	r1, r4
 800168a:	f7ff fa95 	bl	8000bb8 <__aeabi_d2f>
 800168e:	4602      	mov	r2, r0
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	641a      	str	r2, [r3, #64]	; 0x40

	//Compensate offset with spirit level manual offset
	d->Angle_Accel_Pitch-=ACCELPITCHMANUALOFFSET;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800169a:	ed9f 7ad7 	vldr	s14, [pc, #860]	; 80019f8 <MPU_CalculateFromRAWData+0x560>
 800169e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	d->Angle_Accel_Roll-=ACCELROLLMANUALOFFSET;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016ae:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 80019fc <MPU_CalculateFromRAWData+0x564>
 80016b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	//Save angles in Radians
	d->Angle_Accel_Pitch_Rad=d->Angle_Accel_Pitch*DEGREESTORADIANS;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80016c2:	ed9f 7acf 	vldr	s14, [pc, #828]	; 8001a00 <MPU_CalculateFromRAWData+0x568>
 80016c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	d->Angle_Accel_Roll_Rad=d->Angle_Accel_Roll*DEGREESTORADIANS;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80016d6:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8001a00 <MPU_CalculateFromRAWData+0x568>
 80016da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	//Calculate angular gyro velocities----------------------------------------------------
	d->AngleSpeed_Gyro_X = d->Gyro_X / GYROCONSTANT;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80016ea:	ee07 3a90 	vmov	s15, r3
 80016ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f2:	eddf 6ac4 	vldr	s13, [pc, #784]	; 8001a04 <MPU_CalculateFromRAWData+0x56c>
 80016f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	d->AngleSpeed_Gyro_Y = d->Gyro_Y / GYROCONSTANT;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001706:	ee07 3a90 	vmov	s15, r3
 800170a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800170e:	eddf 6abd 	vldr	s13, [pc, #756]	; 8001a04 <MPU_CalculateFromRAWData+0x56c>
 8001712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	d->AngleSpeed_Gyro_Z = d->Gyro_Z / GYROCONSTANT;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172a:	eddf 6ab6 	vldr	s13, [pc, #728]	; 8001a04 <MPU_CalculateFromRAWData+0x56c>
 800172e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	//convert angular velocity to radians/s
	p = d->AngleSpeed_Gyro_X * DEGREESTORADIANS;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800173e:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8001a00 <MPU_CalculateFromRAWData+0x568>
 8001742:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001746:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	q = d->AngleSpeed_Gyro_Y * DEGREESTORADIANS;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001750:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8001a00 <MPU_CalculateFromRAWData+0x568>
 8001754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001758:	edc7 7a08 	vstr	s15, [r7, #32]
	r = d->AngleSpeed_Gyro_Z * DEGREESTORADIANS;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001762:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8001a00 <MPU_CalculateFromRAWData+0x568>
 8001766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800176a:	edc7 7a07 	vstr	s15, [r7, #28]

	//Save Angles in radians from previous STEP
	X = d->Roll_Rad;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001774:	61bb      	str	r3, [r7, #24]
	Y = d->Pitch_Rad;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800177c:	617b      	str	r3, [r7, #20]
	Z = d->Angle_Gyro_Yaw_Rad ;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001782:	613b      	str	r3, [r7, #16]

	//TRANSFORM gyro data to Euler Angles with complementary filter with accelerometer
	d->Roll_Rad   = 0.999 * (X + timedelta * (p  +  q*sin(X)*tan(Y) + r*cos(X)*tan(Y) ) ) + 0.001*d->Angle_Accel_Roll_Rad;
 8001784:	69b8      	ldr	r0, [r7, #24]
 8001786:	f7fe fee7 	bl	8000558 <__aeabi_f2d>
 800178a:	4604      	mov	r4, r0
 800178c:	460d      	mov	r5, r1
 800178e:	68b8      	ldr	r0, [r7, #8]
 8001790:	f7fe fee2 	bl	8000558 <__aeabi_f2d>
 8001794:	4680      	mov	r8, r0
 8001796:	4689      	mov	r9, r1
 8001798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800179a:	f7fe fedd 	bl	8000558 <__aeabi_f2d>
 800179e:	4682      	mov	sl, r0
 80017a0:	468b      	mov	fp, r1
 80017a2:	6a38      	ldr	r0, [r7, #32]
 80017a4:	f7fe fed8 	bl	8000558 <__aeabi_f2d>
 80017a8:	e9c7 0100 	strd	r0, r1, [r7]
 80017ac:	69b8      	ldr	r0, [r7, #24]
 80017ae:	f7fe fed3 	bl	8000558 <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	ec43 2b10 	vmov	d0, r2, r3
 80017ba:	f008 fd75 	bl	800a2a8 <sin>
 80017be:	ec53 2b10 	vmov	r2, r3, d0
 80017c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017c6:	f7fe ff1f 	bl	8000608 <__aeabi_dmul>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	e9c7 2300 	strd	r2, r3, [r7]
 80017d2:	6978      	ldr	r0, [r7, #20]
 80017d4:	f7fe fec0 	bl	8000558 <__aeabi_f2d>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	ec43 2b10 	vmov	d0, r2, r3
 80017e0:	f008 fdaa 	bl	800a338 <tan>
 80017e4:	ec53 2b10 	vmov	r2, r3, d0
 80017e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ec:	f7fe ff0c 	bl	8000608 <__aeabi_dmul>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4650      	mov	r0, sl
 80017f6:	4659      	mov	r1, fp
 80017f8:	f7fe fd50 	bl	800029c <__adddf3>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4692      	mov	sl, r2
 8001802:	469b      	mov	fp, r3
 8001804:	69f8      	ldr	r0, [r7, #28]
 8001806:	f7fe fea7 	bl	8000558 <__aeabi_f2d>
 800180a:	e9c7 0100 	strd	r0, r1, [r7]
 800180e:	69b8      	ldr	r0, [r7, #24]
 8001810:	f7fe fea2 	bl	8000558 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	ec43 2b10 	vmov	d0, r2, r3
 800181c:	f008 fcf4 	bl	800a208 <cos>
 8001820:	ec53 2b10 	vmov	r2, r3, d0
 8001824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001828:	f7fe feee 	bl	8000608 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	e9c7 2300 	strd	r2, r3, [r7]
 8001834:	6978      	ldr	r0, [r7, #20]
 8001836:	f7fe fe8f 	bl	8000558 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	ec43 2b10 	vmov	d0, r2, r3
 8001842:	f008 fd79 	bl	800a338 <tan>
 8001846:	ec53 2b10 	vmov	r2, r3, d0
 800184a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800184e:	f7fe fedb 	bl	8000608 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4650      	mov	r0, sl
 8001858:	4659      	mov	r1, fp
 800185a:	f7fe fd1f 	bl	800029c <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4640      	mov	r0, r8
 8001864:	4649      	mov	r1, r9
 8001866:	f7fe fecf 	bl	8000608 <__aeabi_dmul>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4620      	mov	r0, r4
 8001870:	4629      	mov	r1, r5
 8001872:	f7fe fd13 	bl	800029c <__adddf3>
 8001876:	4603      	mov	r3, r0
 8001878:	460c      	mov	r4, r1
 800187a:	4618      	mov	r0, r3
 800187c:	4621      	mov	r1, r4
 800187e:	a35a      	add	r3, pc, #360	; (adr r3, 80019e8 <MPU_CalculateFromRAWData+0x550>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fec0 	bl	8000608 <__aeabi_dmul>
 8001888:	4603      	mov	r3, r0
 800188a:	460c      	mov	r4, r1
 800188c:	4625      	mov	r5, r4
 800188e:	461c      	mov	r4, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe5f 	bl	8000558 <__aeabi_f2d>
 800189a:	a355      	add	r3, pc, #340	; (adr r3, 80019f0 <MPU_CalculateFromRAWData+0x558>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe feb2 	bl	8000608 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4620      	mov	r0, r4
 80018aa:	4629      	mov	r1, r5
 80018ac:	f7fe fcf6 	bl	800029c <__adddf3>
 80018b0:	4603      	mov	r3, r0
 80018b2:	460c      	mov	r4, r1
 80018b4:	4618      	mov	r0, r3
 80018b6:	4621      	mov	r1, r4
 80018b8:	f7ff f97e 	bl	8000bb8 <__aeabi_d2f>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	d->Pitch_Rad  = 0.999 * (Y + timedelta * (q * cos(X) -  r * sin(X) ) 			    ) + 0.001*d->Angle_Accel_Pitch_Rad;
 80018c4:	6978      	ldr	r0, [r7, #20]
 80018c6:	f7fe fe47 	bl	8000558 <__aeabi_f2d>
 80018ca:	4604      	mov	r4, r0
 80018cc:	460d      	mov	r5, r1
 80018ce:	68b8      	ldr	r0, [r7, #8]
 80018d0:	f7fe fe42 	bl	8000558 <__aeabi_f2d>
 80018d4:	4680      	mov	r8, r0
 80018d6:	4689      	mov	r9, r1
 80018d8:	6a38      	ldr	r0, [r7, #32]
 80018da:	f7fe fe3d 	bl	8000558 <__aeabi_f2d>
 80018de:	4682      	mov	sl, r0
 80018e0:	468b      	mov	fp, r1
 80018e2:	69b8      	ldr	r0, [r7, #24]
 80018e4:	f7fe fe38 	bl	8000558 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	ec43 2b10 	vmov	d0, r2, r3
 80018f0:	f008 fc8a 	bl	800a208 <cos>
 80018f4:	ec53 2b10 	vmov	r2, r3, d0
 80018f8:	4650      	mov	r0, sl
 80018fa:	4659      	mov	r1, fp
 80018fc:	f7fe fe84 	bl	8000608 <__aeabi_dmul>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4692      	mov	sl, r2
 8001906:	469b      	mov	fp, r3
 8001908:	69f8      	ldr	r0, [r7, #28]
 800190a:	f7fe fe25 	bl	8000558 <__aeabi_f2d>
 800190e:	e9c7 0100 	strd	r0, r1, [r7]
 8001912:	69b8      	ldr	r0, [r7, #24]
 8001914:	f7fe fe20 	bl	8000558 <__aeabi_f2d>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	ec43 2b10 	vmov	d0, r2, r3
 8001920:	f008 fcc2 	bl	800a2a8 <sin>
 8001924:	ec53 2b10 	vmov	r2, r3, d0
 8001928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800192c:	f7fe fe6c 	bl	8000608 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4650      	mov	r0, sl
 8001936:	4659      	mov	r1, fp
 8001938:	f7fe fcae 	bl	8000298 <__aeabi_dsub>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4640      	mov	r0, r8
 8001942:	4649      	mov	r1, r9
 8001944:	f7fe fe60 	bl	8000608 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fca4 	bl	800029c <__adddf3>
 8001954:	4603      	mov	r3, r0
 8001956:	460c      	mov	r4, r1
 8001958:	4618      	mov	r0, r3
 800195a:	4621      	mov	r1, r4
 800195c:	a322      	add	r3, pc, #136	; (adr r3, 80019e8 <MPU_CalculateFromRAWData+0x550>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fe51 	bl	8000608 <__aeabi_dmul>
 8001966:	4603      	mov	r3, r0
 8001968:	460c      	mov	r4, r1
 800196a:	4625      	mov	r5, r4
 800196c:	461c      	mov	r4, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdf0 	bl	8000558 <__aeabi_f2d>
 8001978:	a31d      	add	r3, pc, #116	; (adr r3, 80019f0 <MPU_CalculateFromRAWData+0x558>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f7fe fe43 	bl	8000608 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4620      	mov	r0, r4
 8001988:	4629      	mov	r1, r5
 800198a:	f7fe fc87 	bl	800029c <__adddf3>
 800198e:	4603      	mov	r3, r0
 8001990:	460c      	mov	r4, r1
 8001992:	4618      	mov	r0, r3
 8001994:	4621      	mov	r1, r4
 8001996:	f7ff f90f 	bl	8000bb8 <__aeabi_d2f>
 800199a:	4602      	mov	r2, r0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	d->Angle_Gyro_Yaw_Rad = Z + timedelta * (q*sin(X)/cos(Y) + r*cos(X)/cos(Y) ); //Only Gyro Angle will drift
 80019a2:	6938      	ldr	r0, [r7, #16]
 80019a4:	f7fe fdd8 	bl	8000558 <__aeabi_f2d>
 80019a8:	4604      	mov	r4, r0
 80019aa:	460d      	mov	r5, r1
 80019ac:	68b8      	ldr	r0, [r7, #8]
 80019ae:	f7fe fdd3 	bl	8000558 <__aeabi_f2d>
 80019b2:	4680      	mov	r8, r0
 80019b4:	4689      	mov	r9, r1
 80019b6:	6a38      	ldr	r0, [r7, #32]
 80019b8:	f7fe fdce 	bl	8000558 <__aeabi_f2d>
 80019bc:	4682      	mov	sl, r0
 80019be:	468b      	mov	fp, r1
 80019c0:	69b8      	ldr	r0, [r7, #24]
 80019c2:	f7fe fdc9 	bl	8000558 <__aeabi_f2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	ec43 2b10 	vmov	d0, r2, r3
 80019ce:	f008 fc6b 	bl	800a2a8 <sin>
 80019d2:	ec53 2b10 	vmov	r2, r3, d0
 80019d6:	4650      	mov	r0, sl
 80019d8:	4659      	mov	r1, fp
 80019da:	f7fe fe15 	bl	8000608 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4692      	mov	sl, r2
 80019e4:	469b      	mov	fp, r3
 80019e6:	e015      	b.n	8001a14 <MPU_CalculateFromRAWData+0x57c>
 80019e8:	d916872b 	.word	0xd916872b
 80019ec:	3feff7ce 	.word	0x3feff7ce
 80019f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019f4:	3f50624d 	.word	0x3f50624d
 80019f8:	3e99999a 	.word	0x3e99999a
 80019fc:	400ccccd 	.word	0x400ccccd
 8001a00:	3c8efa35 	.word	0x3c8efa35
 8001a04:	41833333 	.word	0x41833333
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	404ca5dc 	.word	0x404ca5dc
 8001a10:	42652ee1 	.word	0x42652ee1
 8001a14:	6978      	ldr	r0, [r7, #20]
 8001a16:	f7fe fd9f 	bl	8000558 <__aeabi_f2d>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	ec43 2b10 	vmov	d0, r2, r3
 8001a22:	f008 fbf1 	bl	800a208 <cos>
 8001a26:	ec53 2b10 	vmov	r2, r3, d0
 8001a2a:	4650      	mov	r0, sl
 8001a2c:	4659      	mov	r1, fp
 8001a2e:	f7fe ff15 	bl	800085c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4692      	mov	sl, r2
 8001a38:	469b      	mov	fp, r3
 8001a3a:	69f8      	ldr	r0, [r7, #28]
 8001a3c:	f7fe fd8c 	bl	8000558 <__aeabi_f2d>
 8001a40:	e9c7 0100 	strd	r0, r1, [r7]
 8001a44:	69b8      	ldr	r0, [r7, #24]
 8001a46:	f7fe fd87 	bl	8000558 <__aeabi_f2d>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	ec43 2b10 	vmov	d0, r2, r3
 8001a52:	f008 fbd9 	bl	800a208 <cos>
 8001a56:	ec53 2b10 	vmov	r2, r3, d0
 8001a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a5e:	f7fe fdd3 	bl	8000608 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	e9c7 2300 	strd	r2, r3, [r7]
 8001a6a:	6978      	ldr	r0, [r7, #20]
 8001a6c:	f7fe fd74 	bl	8000558 <__aeabi_f2d>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	ec43 2b10 	vmov	d0, r2, r3
 8001a78:	f008 fbc6 	bl	800a208 <cos>
 8001a7c:	ec53 2b10 	vmov	r2, r3, d0
 8001a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a84:	f7fe feea 	bl	800085c <__aeabi_ddiv>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4650      	mov	r0, sl
 8001a8e:	4659      	mov	r1, fp
 8001a90:	f7fe fc04 	bl	800029c <__adddf3>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4640      	mov	r0, r8
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	f7fe fdb4 	bl	8000608 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	f7fe fbf8 	bl	800029c <__adddf3>
 8001aac:	4603      	mov	r3, r0
 8001aae:	460c      	mov	r4, r1
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	f7ff f880 	bl	8000bb8 <__aeabi_d2f>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	669a      	str	r2, [r3, #104]	; 0x68

	//Convert to Degrees
	d->Roll   = d->Roll_Rad * RADIANSTODEGREES;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001ac4:	ed1f 7a2e 	vldr	s14, [pc, #-184]	; 8001a10 <MPU_CalculateFromRAWData+0x578>
 8001ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	d->Pitch  = d->Pitch_Rad * RADIANSTODEGREES;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001ad8:	ed1f 7a33 	vldr	s14, [pc, #-204]	; 8001a10 <MPU_CalculateFromRAWData+0x578>
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	d->Angle_Gyro_Yaw   = d->Angle_Gyro_Yaw_Rad * RADIANSTODEGREES;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001aec:	ed1f 7a38 	vldr	s14, [pc, #-224]	; 8001a10 <MPU_CalculateFromRAWData+0x578>
 8001af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
}
 8001afa:	bf00      	nop
 8001afc:	3730      	adds	r7, #48	; 0x30
 8001afe:	46bd      	mov	sp, r7
 8001b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001b04 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001b10:	887a      	ldrh	r2, [r7, #2]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60da      	str	r2, [r3, #12]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	b29b      	uxth	r3, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b76:	463b      	mov	r3, r7
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001b84:	4a21      	ldr	r2, [pc, #132]	; (8001c0c <MX_ADC1_Init+0x9c>)
 8001b86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001b8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b8e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001bb2:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <MX_ADC1_Init+0xa0>)
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001bd2:	f002 fd03 	bl	80045dc <HAL_ADC_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001bdc:	f000 feba 	bl	8002954 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001be8:	2301      	movs	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_ADC1_Init+0x98>)
 8001bf2:	f002 fe6f 	bl	80048d4 <HAL_ADC_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001bfc:	f000 feaa 	bl	8002954 <Error_Handler>
  }

}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000244 	.word	0x20000244
 8001c0c:	40012000 	.word	0x40012000
 8001c10:	0f000001 	.word	0x0f000001

08001c14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <HAL_ADC_MspInit+0x7c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d127      	bne.n	8001c86 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b16      	ldr	r3, [pc, #88]	; (8001c94 <HAL_ADC_MspInit+0x80>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <HAL_ADC_MspInit+0x80>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <HAL_ADC_MspInit+0x80>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_ADC_MspInit+0x80>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_ADC_MspInit+0x80>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6313      	str	r3, [r2, #48]	; 0x30
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_ADC_MspInit+0x80>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c72:	2303      	movs	r3, #3
 8001c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <HAL_ADC_MspInit+0x84>)
 8001c82:	f003 f957 	bl	8004f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40012000 	.word	0x40012000
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40020000 	.word	0x40020000

08001c9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b43      	ldr	r3, [pc, #268]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a42      	ldr	r2, [pc, #264]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001cbc:	f043 0304 	orr.w	r3, r3, #4
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a3b      	ldr	r2, [pc, #236]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b35      	ldr	r3, [pc, #212]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfa:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <MX_GPIO_Init+0x128>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d28:	4827      	ldr	r0, [pc, #156]	; (8001dc8 <MX_GPIO_Init+0x12c>)
 8001d2a:	f003 fa85 	bl	8005238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CSN_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f248 0110 	movw	r1, #32784	; 0x8010
 8001d34:	4825      	ldr	r0, [pc, #148]	; (8001dcc <MX_GPIO_Init+0x130>)
 8001d36:	f003 fa7f 	bl	8005238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d40:	4823      	ldr	r0, [pc, #140]	; (8001dd0 <MX_GPIO_Init+0x134>)
 8001d42:	f003 fa79 	bl	8005238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <MX_GPIO_Init+0x12c>)
 8001d60:	f003 f8e8 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GYRO_CSN_Pin|NRF24_CSN_Pin;
 8001d64:	f248 0310 	movw	r3, #32784	; 0x8010
 8001d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4813      	ldr	r0, [pc, #76]	; (8001dcc <MX_GPIO_Init+0x130>)
 8001d7e:	f003 f8d9 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_GPIO_Init+0x134>)
 8001d9c:	f003 f8ca 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <MX_GPIO_Init+0x130>)
 8001db6:	f003 f8bd 	bl	8004f34 <HAL_GPIO_Init>

}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40020800 	.word	0x40020800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <MX_I2C1_Init+0x54>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <MX_I2C1_Init+0x58>)
 8001de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001e12:	f003 fa45 	bl	80052a0 <HAL_I2C_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e1c:	f000 fd9a 	bl	8002954 <Error_Handler>
  }

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000028c 	.word	0x2000028c
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	000186a0 	.word	0x000186a0

08001e30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <HAL_I2C_MspInit+0x84>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d12c      	bne.n	8001eac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <HAL_I2C_MspInit+0x88>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a17      	ldr	r2, [pc, #92]	; (8001eb8 <HAL_I2C_MspInit+0x88>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_I2C_MspInit+0x88>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e74:	2312      	movs	r3, #18
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e80:	2304      	movs	r3, #4
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	480c      	ldr	r0, [pc, #48]	; (8001ebc <HAL_I2C_MspInit+0x8c>)
 8001e8c:	f003 f852 	bl	8004f34 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_I2C_MspInit+0x88>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <HAL_I2C_MspInit+0x88>)
 8001e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_I2C_MspInit+0x88>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001eac:	bf00      	nop
 8001eae:	3728      	adds	r7, #40	; 0x28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40005400 	.word	0x40005400
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020400 	.word	0x40020400

08001ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec8:	f002 faf4 	bl	80044b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ecc:	f000 fca4 	bl	8002818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed0:	f7ff fee4 	bl	8001c9c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001ed4:	f002 f990 	bl	80041f8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001ed8:	f7ff fe4a 	bl	8001b70 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001edc:	f7ff ff7a 	bl	8001dd4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001ee0:	f001 f8fa 	bl	80030d8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001ee4:	f001 f92e 	bl	8003144 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001ee8:	f001 f962 	bl	80031b0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001eec:	f002 f8be 	bl	800406c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001ef0:	f002 fa44 	bl	800437c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8001ef4:	48be      	ldr	r0, [pc, #760]	; (80021f0 <main+0x330>)
 8001ef6:	f002 fbb5 	bl	8004664 <HAL_ADC_Start>

  HAL_Delay(400);//wait for stable power
 8001efa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001efe:	f002 fb4b 	bl	8004598 <HAL_Delay>

  //NRF24 INIT-----------------------------------
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 8001f02:	4bbc      	ldr	r3, [pc, #752]	; (80021f4 <main+0x334>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4abb      	ldr	r2, [pc, #748]	; (80021f4 <main+0x334>)
 8001f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f0c:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	48b8      	ldr	r0, [pc, #736]	; (80021f8 <main+0x338>)
 8001f16:	f003 f98f 	bl	8005238 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 8001f1a:	f000 fea9 	bl	8002c70 <nRF24_Check>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	4bb6      	ldr	r3, [pc, #728]	; (80021fc <main+0x33c>)
 8001f24:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 8001f26:	f000 fe51 	bl	8002bcc <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 8001f2a:	20ff      	movs	r0, #255	; 0xff
 8001f2c:	f001 f832 	bl	8002f94 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 8001f30:	200f      	movs	r0, #15
 8001f32:	f000 ff2c 	bl	8002d8e <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 8001f36:	2020      	movs	r0, #32
 8001f38:	f000 ffbd 	bl	8002eb6 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 8001f3c:	2008      	movs	r0, #8
 8001f3e:	f000 ff05 	bl	8002d4c <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 8001f42:	2003      	movs	r0, #3
 8001f44:	f000 ff31 	bl	8002daa <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 8001f48:	49ad      	ldr	r1, [pc, #692]	; (8002200 <main+0x340>)
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f000 ff3e 	bl	8002dcc <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 8); // Auto-ACK: disabled
 8001f50:	2208      	movs	r2, #8
 8001f52:	2100      	movs	r1, #0
 8001f54:	2001      	movs	r0, #1
 8001f56:	f000 ffc9 	bl	8002eec <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 8001f5a:	49a9      	ldr	r1, [pc, #676]	; (8002200 <main+0x340>)
 8001f5c:	2006      	movs	r0, #6
 8001f5e:	f000 ff35 	bl	8002dcc <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_18dBm);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 ff8c 	bl	8002e80 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f000 fece 	bl	8002d0a <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 8001f6e:	f001 f85b 	bl	8003028 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 8001f72:	2002      	movs	r0, #2
 8001f74:	f000 feaa 	bl	8002ccc <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7e:	489e      	ldr	r0, [pc, #632]	; (80021f8 <main+0x338>)
 8001f80:	f003 f95a 	bl	8005238 <HAL_GPIO_WritePin>

  //Gyro Init
  MPU9250_Init();
 8001f84:	f7ff f908 	bl	8001198 <MPU9250_Init>


  HAL_Delay(5000);//wait to connect battery
 8001f88:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f8c:	f002 fb04 	bl	8004598 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001f90:	2100      	movs	r1, #0
 8001f92:	489c      	ldr	r0, [pc, #624]	; (8002204 <main+0x344>)
 8001f94:	f004 fcd0 	bl	8006938 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001f98:	2104      	movs	r1, #4
 8001f9a:	489a      	ldr	r0, [pc, #616]	; (8002204 <main+0x344>)
 8001f9c:	f004 fccc 	bl	8006938 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4898      	ldr	r0, [pc, #608]	; (8002204 <main+0x344>)
 8001fa4:	f004 fcc8 	bl	8006938 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001fa8:	210c      	movs	r1, #12
 8001faa:	4896      	ldr	r0, [pc, #600]	; (8002204 <main+0x344>)
 8001fac:	f004 fcc4 	bl	8006938 <HAL_TIM_PWM_Start>

  MotorStatus=MOTOROFF;
 8001fb0:	4b95      	ldr	r3, [pc, #596]	; (8002208 <main+0x348>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 8001fb6:	4895      	ldr	r0, [pc, #596]	; (800220c <main+0x34c>)
 8001fb8:	f004 fc65 	bl	8006886 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	  //own function is used for UART TX, very basic function for direct Register write one char at the time
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 ); //removed ->missing bytes on occasion

	  HAL_Delay(100);
 8001fbc:	2064      	movs	r0, #100	; 0x64
 8001fbe:	f002 faeb 	bl	8004598 <HAL_Delay>

	  sprintf(UartTXbuff0,T_HIDE_CUR);
 8001fc2:	4b93      	ldr	r3, [pc, #588]	; (8002210 <main+0x350>)
 8001fc4:	4a93      	ldr	r2, [pc, #588]	; (8002214 <main+0x354>)
 8001fc6:	6810      	ldr	r0, [r2, #0]
 8001fc8:	6018      	str	r0, [r3, #0]
 8001fca:	8891      	ldrh	r1, [r2, #4]
 8001fcc:	7992      	ldrb	r2, [r2, #6]
 8001fce:	8099      	strh	r1, [r3, #4]
 8001fd0:	719a      	strb	r2, [r3, #6]
	  WriteString(UartTXbuff0);
 8001fd2:	488f      	ldr	r0, [pc, #572]	; (8002210 <main+0x350>)
 8001fd4:	f000 fc8a 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0,T_GO_TO,1,1); //Go to start Screen
 8001fd8:	2301      	movs	r3, #1
 8001fda:	2201      	movs	r2, #1
 8001fdc:	498e      	ldr	r1, [pc, #568]	; (8002218 <main+0x358>)
 8001fde:	488c      	ldr	r0, [pc, #560]	; (8002210 <main+0x350>)
 8001fe0:	f006 fb98 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8001fe4:	488a      	ldr	r0, [pc, #552]	; (8002210 <main+0x350>)
 8001fe6:	f000 fc81 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 8001fea:	4b89      	ldr	r3, [pc, #548]	; (8002210 <main+0x350>)
 8001fec:	4a8b      	ldr	r2, [pc, #556]	; (800221c <main+0x35c>)
 8001fee:	6810      	ldr	r0, [r2, #0]
 8001ff0:	6018      	str	r0, [r3, #0]
 8001ff2:	7912      	ldrb	r2, [r2, #4]
 8001ff4:	711a      	strb	r2, [r3, #4]
	  WriteString(UartTXbuff0);
 8001ff6:	4886      	ldr	r0, [pc, #536]	; (8002210 <main+0x350>)
 8001ff8:	f000 fc78 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Motor Status %u \n\r",MotorStatus);
 8001ffc:	4b82      	ldr	r3, [pc, #520]	; (8002208 <main+0x348>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4987      	ldr	r1, [pc, #540]	; (8002220 <main+0x360>)
 8002004:	4882      	ldr	r0, [pc, #520]	; (8002210 <main+0x350>)
 8002006:	f006 fb85 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800200a:	4881      	ldr	r0, [pc, #516]	; (8002210 <main+0x350>)
 800200c:	f000 fc6e 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 8002010:	4b84      	ldr	r3, [pc, #528]	; (8002224 <main+0x364>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa9f 	bl	8000558 <__aeabi_f2d>
 800201a:	4603      	mov	r3, r0
 800201c:	460c      	mov	r4, r1
 800201e:	461a      	mov	r2, r3
 8002020:	4623      	mov	r3, r4
 8002022:	4981      	ldr	r1, [pc, #516]	; (8002228 <main+0x368>)
 8002024:	487a      	ldr	r0, [pc, #488]	; (8002210 <main+0x350>)
 8002026:	f006 fb75 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800202a:	4879      	ldr	r0, [pc, #484]	; (8002210 <main+0x350>)
 800202c:	f000 fc5e 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "PitchIN %.2f \n\r",PitchINscaled);
 8002030:	4b7e      	ldr	r3, [pc, #504]	; (800222c <main+0x36c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fa8f 	bl	8000558 <__aeabi_f2d>
 800203a:	4603      	mov	r3, r0
 800203c:	460c      	mov	r4, r1
 800203e:	461a      	mov	r2, r3
 8002040:	4623      	mov	r3, r4
 8002042:	497b      	ldr	r1, [pc, #492]	; (8002230 <main+0x370>)
 8002044:	4872      	ldr	r0, [pc, #456]	; (8002210 <main+0x350>)
 8002046:	f006 fb65 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800204a:	4871      	ldr	r0, [pc, #452]	; (8002210 <main+0x350>)
 800204c:	f000 fc4e 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "RollIN %.2f \n\r",RollINscaled);
 8002050:	4b78      	ldr	r3, [pc, #480]	; (8002234 <main+0x374>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe fa7f 	bl	8000558 <__aeabi_f2d>
 800205a:	4603      	mov	r3, r0
 800205c:	460c      	mov	r4, r1
 800205e:	461a      	mov	r2, r3
 8002060:	4623      	mov	r3, r4
 8002062:	4975      	ldr	r1, [pc, #468]	; (8002238 <main+0x378>)
 8002064:	486a      	ldr	r0, [pc, #424]	; (8002210 <main+0x350>)
 8002066:	f006 fb55 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800206a:	4869      	ldr	r0, [pc, #420]	; (8002210 <main+0x350>)
 800206c:	f000 fc3e 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "YawIN %.2f \n\r",YawINscaled);
 8002070:	4b72      	ldr	r3, [pc, #456]	; (800223c <main+0x37c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa6f 	bl	8000558 <__aeabi_f2d>
 800207a:	4603      	mov	r3, r0
 800207c:	460c      	mov	r4, r1
 800207e:	461a      	mov	r2, r3
 8002080:	4623      	mov	r3, r4
 8002082:	496f      	ldr	r1, [pc, #444]	; (8002240 <main+0x380>)
 8002084:	4862      	ldr	r0, [pc, #392]	; (8002210 <main+0x350>)
 8002086:	f006 fb45 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800208a:	4861      	ldr	r0, [pc, #388]	; (8002210 <main+0x350>)
 800208c:	f000 fc2e 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 8002090:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <main+0x350>)
 8002092:	4a6c      	ldr	r2, [pc, #432]	; (8002244 <main+0x384>)
 8002094:	8811      	ldrh	r1, [r2, #0]
 8002096:	7892      	ldrb	r2, [r2, #2]
 8002098:	8019      	strh	r1, [r3, #0]
 800209a:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 800209c:	485c      	ldr	r0, [pc, #368]	; (8002210 <main+0x350>)
 800209e:	f000 fc25 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Pitch=%.2f deg\n\r",mpuDataStr.Pitch);
 80020a2:	4b69      	ldr	r3, [pc, #420]	; (8002248 <main+0x388>)
 80020a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7fe fa56 	bl	8000558 <__aeabi_f2d>
 80020ac:	4603      	mov	r3, r0
 80020ae:	460c      	mov	r4, r1
 80020b0:	461a      	mov	r2, r3
 80020b2:	4623      	mov	r3, r4
 80020b4:	4965      	ldr	r1, [pc, #404]	; (800224c <main+0x38c>)
 80020b6:	4856      	ldr	r0, [pc, #344]	; (8002210 <main+0x350>)
 80020b8:	f006 fb2c 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80020bc:	4854      	ldr	r0, [pc, #336]	; (8002210 <main+0x350>)
 80020be:	f000 fc15 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Roll=%.2f deg\n\r",mpuDataStr.Roll);
 80020c2:	4b61      	ldr	r3, [pc, #388]	; (8002248 <main+0x388>)
 80020c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa46 	bl	8000558 <__aeabi_f2d>
 80020cc:	4603      	mov	r3, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	461a      	mov	r2, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	495e      	ldr	r1, [pc, #376]	; (8002250 <main+0x390>)
 80020d6:	484e      	ldr	r0, [pc, #312]	; (8002210 <main+0x350>)
 80020d8:	f006 fb1c 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80020dc:	484c      	ldr	r0, [pc, #304]	; (8002210 <main+0x350>)
 80020de:	f000 fc05 	bl	80028ec <WriteString>
	  //WriteString(UartTXbuff0);

	  //sprintf(UartTXbuff0, "Gyro Roll=%.2f deg\n\r",mpuDataStr.Angle_Gyro_Roll);
	  //WriteString(UartTXbuff0);

	  sprintf(UartTXbuff0, "Yaw-Gyro=%.2f deg\n\r",mpuDataStr.Angle_Gyro_Yaw);
 80020e2:	4b59      	ldr	r3, [pc, #356]	; (8002248 <main+0x388>)
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fa36 	bl	8000558 <__aeabi_f2d>
 80020ec:	4603      	mov	r3, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	4957      	ldr	r1, [pc, #348]	; (8002254 <main+0x394>)
 80020f6:	4846      	ldr	r0, [pc, #280]	; (8002210 <main+0x350>)
 80020f8:	f006 fb0c 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80020fc:	4844      	ldr	r0, [pc, #272]	; (8002210 <main+0x350>)
 80020fe:	f000 fbf5 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 8002102:	4b43      	ldr	r3, [pc, #268]	; (8002210 <main+0x350>)
 8002104:	4a4f      	ldr	r2, [pc, #316]	; (8002244 <main+0x384>)
 8002106:	8811      	ldrh	r1, [r2, #0]
 8002108:	7892      	ldrb	r2, [r2, #2]
 800210a:	8019      	strh	r1, [r3, #0]
 800210c:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 800210e:	4840      	ldr	r0, [pc, #256]	; (8002210 <main+0x350>)
 8002110:	f000 fbec 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Accel Pitch=%.2f deg\n\r",mpuDataStr.Angle_Accel_Pitch);
 8002114:	4b4c      	ldr	r3, [pc, #304]	; (8002248 <main+0x388>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fa1d 	bl	8000558 <__aeabi_f2d>
 800211e:	4603      	mov	r3, r0
 8002120:	460c      	mov	r4, r1
 8002122:	461a      	mov	r2, r3
 8002124:	4623      	mov	r3, r4
 8002126:	494c      	ldr	r1, [pc, #304]	; (8002258 <main+0x398>)
 8002128:	4839      	ldr	r0, [pc, #228]	; (8002210 <main+0x350>)
 800212a:	f006 faf3 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800212e:	4838      	ldr	r0, [pc, #224]	; (8002210 <main+0x350>)
 8002130:	f000 fbdc 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Accel Roll=%.2f deg\n\r",mpuDataStr.Angle_Accel_Roll);
 8002134:	4b44      	ldr	r3, [pc, #272]	; (8002248 <main+0x388>)
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fa0d 	bl	8000558 <__aeabi_f2d>
 800213e:	4603      	mov	r3, r0
 8002140:	460c      	mov	r4, r1
 8002142:	461a      	mov	r2, r3
 8002144:	4623      	mov	r3, r4
 8002146:	4945      	ldr	r1, [pc, #276]	; (800225c <main+0x39c>)
 8002148:	4831      	ldr	r0, [pc, #196]	; (8002210 <main+0x350>)
 800214a:	f006 fae3 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800214e:	4830      	ldr	r0, [pc, #192]	; (8002210 <main+0x350>)
 8002150:	f000 fbcc 	bl	80028ec <WriteString>
	  //WriteString(UartTXbuff0);

	  //sprintf(UartTXbuff0, "Gyro Z speed=%.2f deg/s\n\r",mpuDataStr.AngleSpeed_Gyro_Z);
	  //WriteString(UartTXbuff0);

	  sprintf(UartTXbuff0, "\n\r" );
 8002154:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <main+0x350>)
 8002156:	4a3b      	ldr	r2, [pc, #236]	; (8002244 <main+0x384>)
 8002158:	8811      	ldrh	r1, [r2, #0]
 800215a:	7892      	ldrb	r2, [r2, #2]
 800215c:	8019      	strh	r1, [r3, #0]
 800215e:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8002160:	482b      	ldr	r0, [pc, #172]	; (8002210 <main+0x350>)
 8002162:	f000 fbc3 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Acc Raw %d %d %d \n\r",mpuDataStr.Accelerometer_X_RAW,mpuDataStr.Accelerometer_Y_RAW,mpuDataStr.Accelerometer_Z_RAW);
 8002166:	4b38      	ldr	r3, [pc, #224]	; (8002248 <main+0x388>)
 8002168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216c:	461a      	mov	r2, r3
 800216e:	4b36      	ldr	r3, [pc, #216]	; (8002248 <main+0x388>)
 8002170:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002174:	4619      	mov	r1, r3
 8002176:	4b34      	ldr	r3, [pc, #208]	; (8002248 <main+0x388>)
 8002178:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	460b      	mov	r3, r1
 8002180:	4937      	ldr	r1, [pc, #220]	; (8002260 <main+0x3a0>)
 8002182:	4823      	ldr	r0, [pc, #140]	; (8002210 <main+0x350>)
 8002184:	f006 fac6 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002188:	4821      	ldr	r0, [pc, #132]	; (8002210 <main+0x350>)
 800218a:	f000 fbaf 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Gyro Raw %d %d %d \n\r",mpuDataStr.Gyroscope_X_RAW,mpuDataStr.Gyroscope_Y_RAW,mpuDataStr.Gyroscope_Z_RAW);
 800218e:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <main+0x388>)
 8002190:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002194:	461a      	mov	r2, r3
 8002196:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <main+0x388>)
 8002198:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800219c:	4619      	mov	r1, r3
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <main+0x388>)
 80021a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	460b      	mov	r3, r1
 80021a8:	492e      	ldr	r1, [pc, #184]	; (8002264 <main+0x3a4>)
 80021aa:	4819      	ldr	r0, [pc, #100]	; (8002210 <main+0x350>)
 80021ac:	f006 fab2 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80021b0:	4817      	ldr	r0, [pc, #92]	; (8002210 <main+0x350>)
 80021b2:	f000 fb9b 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Gyro Offset %.1f %.1f %.1f \n\r",mpuDataStr.Offset_Gyro_X,mpuDataStr.Offset_Gyro_Y,mpuDataStr.Offset_Gyro_Z);
 80021b6:	4b24      	ldr	r3, [pc, #144]	; (8002248 <main+0x388>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f9cc 	bl	8000558 <__aeabi_f2d>
 80021c0:	4680      	mov	r8, r0
 80021c2:	4689      	mov	r9, r1
 80021c4:	4b20      	ldr	r3, [pc, #128]	; (8002248 <main+0x388>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe f9c5 	bl	8000558 <__aeabi_f2d>
 80021ce:	4604      	mov	r4, r0
 80021d0:	460d      	mov	r5, r1
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <main+0x388>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe f9be 	bl	8000558 <__aeabi_f2d>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021e4:	e9cd 4500 	strd	r4, r5, [sp]
 80021e8:	4642      	mov	r2, r8
 80021ea:	464b      	mov	r3, r9
 80021ec:	491e      	ldr	r1, [pc, #120]	; (8002268 <main+0x3a8>)
 80021ee:	e03d      	b.n	800226c <main+0x3ac>
 80021f0:	20000244 	.word	0x20000244
 80021f4:	40003800 	.word	0x40003800
 80021f8:	40020400 	.word	0x40020400
 80021fc:	200003f8 	.word	0x200003f8
 8002200:	0800bc0c 	.word	0x0800bc0c
 8002204:	20000828 	.word	0x20000828
 8002208:	2000021c 	.word	0x2000021c
 800220c:	20000868 	.word	0x20000868
 8002210:	20000400 	.word	0x20000400
 8002214:	0800b8f0 	.word	0x0800b8f0
 8002218:	0800b8f8 	.word	0x0800b8f8
 800221c:	0800b904 	.word	0x0800b904
 8002220:	0800b90c 	.word	0x0800b90c
 8002224:	20000670 	.word	0x20000670
 8002228:	0800b920 	.word	0x0800b920
 800222c:	20000788 	.word	0x20000788
 8002230:	0800b934 	.word	0x0800b934
 8002234:	20000784 	.word	0x20000784
 8002238:	0800b944 	.word	0x0800b944
 800223c:	20000688 	.word	0x20000688
 8002240:	0800b954 	.word	0x0800b954
 8002244:	0800b964 	.word	0x0800b964
 8002248:	2000030c 	.word	0x2000030c
 800224c:	0800b968 	.word	0x0800b968
 8002250:	0800b97c 	.word	0x0800b97c
 8002254:	0800b98c 	.word	0x0800b98c
 8002258:	0800b9a0 	.word	0x0800b9a0
 800225c:	0800b9b8 	.word	0x0800b9b8
 8002260:	0800b9d0 	.word	0x0800b9d0
 8002264:	0800b9e4 	.word	0x0800b9e4
 8002268:	0800b9fc 	.word	0x0800b9fc
 800226c:	48a8      	ldr	r0, [pc, #672]	; (8002510 <main+0x650>)
 800226e:	f006 fa51 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002272:	48a7      	ldr	r0, [pc, #668]	; (8002510 <main+0x650>)
 8002274:	f000 fb3a 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Gyro Cal %.1f %.1f %.1f \n\r",mpuDataStr.Gyroscope_X_Cal,mpuDataStr.Gyroscope_Y_Cal,mpuDataStr.Gyroscope_Z_Cal);
 8002278:	4ba6      	ldr	r3, [pc, #664]	; (8002514 <main+0x654>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe f96b 	bl	8000558 <__aeabi_f2d>
 8002282:	4680      	mov	r8, r0
 8002284:	4689      	mov	r9, r1
 8002286:	4ba3      	ldr	r3, [pc, #652]	; (8002514 <main+0x654>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f964 	bl	8000558 <__aeabi_f2d>
 8002290:	4604      	mov	r4, r0
 8002292:	460d      	mov	r5, r1
 8002294:	4b9f      	ldr	r3, [pc, #636]	; (8002514 <main+0x654>)
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f95d 	bl	8000558 <__aeabi_f2d>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022a6:	e9cd 4500 	strd	r4, r5, [sp]
 80022aa:	4642      	mov	r2, r8
 80022ac:	464b      	mov	r3, r9
 80022ae:	499a      	ldr	r1, [pc, #616]	; (8002518 <main+0x658>)
 80022b0:	4897      	ldr	r0, [pc, #604]	; (8002510 <main+0x650>)
 80022b2:	f006 fa2f 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80022b6:	4896      	ldr	r0, [pc, #600]	; (8002510 <main+0x650>)
 80022b8:	f000 fb18 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 80022bc:	4b94      	ldr	r3, [pc, #592]	; (8002510 <main+0x650>)
 80022be:	4a97      	ldr	r2, [pc, #604]	; (800251c <main+0x65c>)
 80022c0:	8811      	ldrh	r1, [r2, #0]
 80022c2:	7892      	ldrb	r2, [r2, #2]
 80022c4:	8019      	strh	r1, [r3, #0]
 80022c6:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 80022c8:	4891      	ldr	r0, [pc, #580]	; (8002510 <main+0x650>)
 80022ca:	f000 fb0f 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "PWM 1:%u  2:%u  3:%u  4:%u   \n\r",PWM_Mot1,PWM_Mot2,PWM_Mot3,PWM_Mot4);
 80022ce:	4b94      	ldr	r3, [pc, #592]	; (8002520 <main+0x660>)
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	4b94      	ldr	r3, [pc, #592]	; (8002524 <main+0x664>)
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	4b94      	ldr	r3, [pc, #592]	; (8002528 <main+0x668>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a94      	ldr	r2, [pc, #592]	; (800252c <main+0x66c>)
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	9201      	str	r2, [sp, #4]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	4603      	mov	r3, r0
 80022e4:	460a      	mov	r2, r1
 80022e6:	4992      	ldr	r1, [pc, #584]	; (8002530 <main+0x670>)
 80022e8:	4889      	ldr	r0, [pc, #548]	; (8002510 <main+0x650>)
 80022ea:	f006 fa13 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80022ee:	4888      	ldr	r0, [pc, #544]	; (8002510 <main+0x650>)
 80022f0:	f000 fafc 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Toggle %d %d %d %d %d %d  ",togg1,togg2,togg3,togg4,togg5,togg6);
 80022f4:	4b8f      	ldr	r3, [pc, #572]	; (8002534 <main+0x674>)
 80022f6:	681c      	ldr	r4, [r3, #0]
 80022f8:	4b8f      	ldr	r3, [pc, #572]	; (8002538 <main+0x678>)
 80022fa:	681d      	ldr	r5, [r3, #0]
 80022fc:	4b8f      	ldr	r3, [pc, #572]	; (800253c <main+0x67c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a8f      	ldr	r2, [pc, #572]	; (8002540 <main+0x680>)
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	498f      	ldr	r1, [pc, #572]	; (8002544 <main+0x684>)
 8002306:	6809      	ldr	r1, [r1, #0]
 8002308:	488f      	ldr	r0, [pc, #572]	; (8002548 <main+0x688>)
 800230a:	6800      	ldr	r0, [r0, #0]
 800230c:	9003      	str	r0, [sp, #12]
 800230e:	9102      	str	r1, [sp, #8]
 8002310:	9201      	str	r2, [sp, #4]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	462b      	mov	r3, r5
 8002316:	4622      	mov	r2, r4
 8002318:	498c      	ldr	r1, [pc, #560]	; (800254c <main+0x68c>)
 800231a:	487d      	ldr	r0, [pc, #500]	; (8002510 <main+0x650>)
 800231c:	f006 f9fa 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002320:	487b      	ldr	r0, [pc, #492]	; (8002510 <main+0x650>)
 8002322:	f000 fae3 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Potenc %d %d  ",potenc1,potenc2);
 8002326:	4b8a      	ldr	r3, [pc, #552]	; (8002550 <main+0x690>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4b8a      	ldr	r3, [pc, #552]	; (8002554 <main+0x694>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	498a      	ldr	r1, [pc, #552]	; (8002558 <main+0x698>)
 8002330:	4877      	ldr	r0, [pc, #476]	; (8002510 <main+0x650>)
 8002332:	f006 f9ef 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002336:	4876      	ldr	r0, [pc, #472]	; (8002510 <main+0x650>)
 8002338:	f000 fad8 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "YL %d %d  YD %d %d \n\r",Ljoyupdown, Ljoyleftright, Djoyupdown, Djoyleftright);
 800233c:	4b87      	ldr	r3, [pc, #540]	; (800255c <main+0x69c>)
 800233e:	6819      	ldr	r1, [r3, #0]
 8002340:	4b87      	ldr	r3, [pc, #540]	; (8002560 <main+0x6a0>)
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	4b87      	ldr	r3, [pc, #540]	; (8002564 <main+0x6a4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a87      	ldr	r2, [pc, #540]	; (8002568 <main+0x6a8>)
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	9201      	str	r2, [sp, #4]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4603      	mov	r3, r0
 8002352:	460a      	mov	r2, r1
 8002354:	4985      	ldr	r1, [pc, #532]	; (800256c <main+0x6ac>)
 8002356:	486e      	ldr	r0, [pc, #440]	; (8002510 <main+0x650>)
 8002358:	f006 f9dc 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800235c:	486c      	ldr	r0, [pc, #432]	; (8002510 <main+0x650>)
 800235e:	f000 fac5 	bl	80028ec <WriteString>

	  //ACTIVE PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Active  \n\r" );
 8002362:	4a6b      	ldr	r2, [pc, #428]	; (8002510 <main+0x650>)
 8002364:	4b82      	ldr	r3, [pc, #520]	; (8002570 <main+0x6b0>)
 8002366:	4615      	mov	r5, r2
 8002368:	461c      	mov	r4, r3
 800236a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236c:	6028      	str	r0, [r5, #0]
 800236e:	6069      	str	r1, [r5, #4]
 8002370:	60aa      	str	r2, [r5, #8]
 8002372:	60eb      	str	r3, [r5, #12]
 8002374:	cc03      	ldmia	r4!, {r0, r1}
 8002376:	6128      	str	r0, [r5, #16]
 8002378:	6169      	str	r1, [r5, #20]
 800237a:	8823      	ldrh	r3, [r4, #0]
 800237c:	78a2      	ldrb	r2, [r4, #2]
 800237e:	832b      	strh	r3, [r5, #24]
 8002380:	4613      	mov	r3, r2
 8002382:	76ab      	strb	r3, [r5, #26]
	  WriteString(UartTXbuff0);
 8002384:	4862      	ldr	r0, [pc, #392]	; (8002510 <main+0x650>)
 8002386:	f000 fab1 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch);
 800238a:	4b7a      	ldr	r3, [pc, #488]	; (8002574 <main+0x6b4>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f8e2 	bl	8000558 <__aeabi_f2d>
 8002394:	4680      	mov	r8, r0
 8002396:	4689      	mov	r9, r1
 8002398:	4b76      	ldr	r3, [pc, #472]	; (8002574 <main+0x6b4>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8db 	bl	8000558 <__aeabi_f2d>
 80023a2:	4604      	mov	r4, r0
 80023a4:	460d      	mov	r5, r1
 80023a6:	4b73      	ldr	r3, [pc, #460]	; (8002574 <main+0x6b4>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8d4 	bl	8000558 <__aeabi_f2d>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023b8:	e9cd 4500 	strd	r4, r5, [sp]
 80023bc:	4642      	mov	r2, r8
 80023be:	464b      	mov	r3, r9
 80023c0:	496d      	ldr	r1, [pc, #436]	; (8002578 <main+0x6b8>)
 80023c2:	4853      	ldr	r0, [pc, #332]	; (8002510 <main+0x650>)
 80023c4:	f006 f9a6 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80023c8:	4851      	ldr	r0, [pc, #324]	; (8002510 <main+0x650>)
 80023ca:	f000 fa8f 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll);
 80023ce:	4b69      	ldr	r3, [pc, #420]	; (8002574 <main+0x6b4>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f8c0 	bl	8000558 <__aeabi_f2d>
 80023d8:	4680      	mov	r8, r0
 80023da:	4689      	mov	r9, r1
 80023dc:	4b65      	ldr	r3, [pc, #404]	; (8002574 <main+0x6b4>)
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f8b9 	bl	8000558 <__aeabi_f2d>
 80023e6:	4604      	mov	r4, r0
 80023e8:	460d      	mov	r5, r1
 80023ea:	4b62      	ldr	r3, [pc, #392]	; (8002574 <main+0x6b4>)
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f8b2 	bl	8000558 <__aeabi_f2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023fc:	e9cd 4500 	strd	r4, r5, [sp]
 8002400:	4642      	mov	r2, r8
 8002402:	464b      	mov	r3, r9
 8002404:	495d      	ldr	r1, [pc, #372]	; (800257c <main+0x6bc>)
 8002406:	4842      	ldr	r0, [pc, #264]	; (8002510 <main+0x650>)
 8002408:	f006 f984 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800240c:	4840      	ldr	r0, [pc, #256]	; (8002510 <main+0x650>)
 800240e:	f000 fa6d 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw);
 8002412:	4b58      	ldr	r3, [pc, #352]	; (8002574 <main+0x6b4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f89e 	bl	8000558 <__aeabi_f2d>
 800241c:	4680      	mov	r8, r0
 800241e:	4689      	mov	r9, r1
 8002420:	4b54      	ldr	r3, [pc, #336]	; (8002574 <main+0x6b4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f897 	bl	8000558 <__aeabi_f2d>
 800242a:	4604      	mov	r4, r0
 800242c:	460d      	mov	r5, r1
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <main+0x6b4>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f890 	bl	8000558 <__aeabi_f2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002440:	e9cd 4500 	strd	r4, r5, [sp]
 8002444:	4642      	mov	r2, r8
 8002446:	464b      	mov	r3, r9
 8002448:	494d      	ldr	r1, [pc, #308]	; (8002580 <main+0x6c0>)
 800244a:	4831      	ldr	r0, [pc, #196]	; (8002510 <main+0x650>)
 800244c:	f006 f962 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002450:	482f      	ldr	r0, [pc, #188]	; (8002510 <main+0x650>)
 8002452:	f000 fa4b 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataActive.pid_max_pitch, FlashDataActive.pid_i_max_pitch);
 8002456:	4b47      	ldr	r3, [pc, #284]	; (8002574 <main+0x6b4>)
 8002458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <main+0x6b4>)
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	4949      	ldr	r1, [pc, #292]	; (8002584 <main+0x6c4>)
 8002460:	482b      	ldr	r0, [pc, #172]	; (8002510 <main+0x650>)
 8002462:	f006 f957 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002466:	482a      	ldr	r0, [pc, #168]	; (8002510 <main+0x650>)
 8002468:	f000 fa40 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataActive.pid_max_roll, FlashDataActive.pid_i_max_roll);
 800246c:	4b41      	ldr	r3, [pc, #260]	; (8002574 <main+0x6b4>)
 800246e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002470:	4b40      	ldr	r3, [pc, #256]	; (8002574 <main+0x6b4>)
 8002472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002474:	4944      	ldr	r1, [pc, #272]	; (8002588 <main+0x6c8>)
 8002476:	4826      	ldr	r0, [pc, #152]	; (8002510 <main+0x650>)
 8002478:	f006 f94c 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800247c:	4824      	ldr	r0, [pc, #144]	; (8002510 <main+0x650>)
 800247e:	f000 fa35 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataActive.pid_max_yaw, FlashDataActive.pid_i_max_yaw);
 8002482:	4b3c      	ldr	r3, [pc, #240]	; (8002574 <main+0x6b4>)
 8002484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002486:	4b3b      	ldr	r3, [pc, #236]	; (8002574 <main+0x6b4>)
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	4940      	ldr	r1, [pc, #256]	; (800258c <main+0x6cc>)
 800248c:	4820      	ldr	r0, [pc, #128]	; (8002510 <main+0x650>)
 800248e:	f006 f941 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002492:	481f      	ldr	r0, [pc, #124]	; (8002510 <main+0x650>)
 8002494:	f000 fa2a 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataActive.maxpitchdegree);
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <main+0x6b4>)
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f85b 	bl	8000558 <__aeabi_f2d>
 80024a2:	4603      	mov	r3, r0
 80024a4:	460c      	mov	r4, r1
 80024a6:	461a      	mov	r2, r3
 80024a8:	4623      	mov	r3, r4
 80024aa:	4939      	ldr	r1, [pc, #228]	; (8002590 <main+0x6d0>)
 80024ac:	4818      	ldr	r0, [pc, #96]	; (8002510 <main+0x650>)
 80024ae:	f006 f931 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80024b2:	4817      	ldr	r0, [pc, #92]	; (8002510 <main+0x650>)
 80024b4:	f000 fa1a 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataActive.maxrolldegree);
 80024b8:	4b2e      	ldr	r3, [pc, #184]	; (8002574 <main+0x6b4>)
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f84b 	bl	8000558 <__aeabi_f2d>
 80024c2:	4603      	mov	r3, r0
 80024c4:	460c      	mov	r4, r1
 80024c6:	461a      	mov	r2, r3
 80024c8:	4623      	mov	r3, r4
 80024ca:	4932      	ldr	r1, [pc, #200]	; (8002594 <main+0x6d4>)
 80024cc:	4810      	ldr	r0, [pc, #64]	; (8002510 <main+0x650>)
 80024ce:	f006 f921 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80024d2:	480f      	ldr	r0, [pc, #60]	; (8002510 <main+0x650>)
 80024d4:	f000 fa0a 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataActive.maxyawdegree);
 80024d8:	4b26      	ldr	r3, [pc, #152]	; (8002574 <main+0x6b4>)
 80024da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f83b 	bl	8000558 <__aeabi_f2d>
 80024e2:	4603      	mov	r3, r0
 80024e4:	460c      	mov	r4, r1
 80024e6:	461a      	mov	r2, r3
 80024e8:	4623      	mov	r3, r4
 80024ea:	492b      	ldr	r1, [pc, #172]	; (8002598 <main+0x6d8>)
 80024ec:	4808      	ldr	r0, [pc, #32]	; (8002510 <main+0x650>)
 80024ee:	f006 f911 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80024f2:	4807      	ldr	r0, [pc, #28]	; (8002510 <main+0x650>)
 80024f4:	f000 f9fa 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataActive.maxthrottle, FlashDataActive.minthrottle);
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <main+0x6b4>)
 80024fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f82b 	bl	8000558 <__aeabi_f2d>
 8002502:	4605      	mov	r5, r0
 8002504:	460e      	mov	r6, r1
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <main+0x6b4>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	4618      	mov	r0, r3
 800250c:	e046      	b.n	800259c <main+0x6dc>
 800250e:	bf00      	nop
 8002510:	20000400 	.word	0x20000400
 8002514:	2000030c 	.word	0x2000030c
 8002518:	0800ba1c 	.word	0x0800ba1c
 800251c:	0800b964 	.word	0x0800b964
 8002520:	20000798 	.word	0x20000798
 8002524:	20000674 	.word	0x20000674
 8002528:	20000668 	.word	0x20000668
 800252c:	20000764 	.word	0x20000764
 8002530:	0800ba38 	.word	0x0800ba38
 8002534:	20000490 	.word	0x20000490
 8002538:	20000554 	.word	0x20000554
 800253c:	200002e4 	.word	0x200002e4
 8002540:	2000049c 	.word	0x2000049c
 8002544:	20000464 	.word	0x20000464
 8002548:	200002e8 	.word	0x200002e8
 800254c:	0800ba58 	.word	0x0800ba58
 8002550:	200004f4 	.word	0x200004f4
 8002554:	20000550 	.word	0x20000550
 8002558:	0800ba74 	.word	0x0800ba74
 800255c:	20000494 	.word	0x20000494
 8002560:	20000488 	.word	0x20000488
 8002564:	2000054c 	.word	0x2000054c
 8002568:	200002e0 	.word	0x200002e0
 800256c:	0800ba84 	.word	0x0800ba84
 8002570:	0800ba9c 	.word	0x0800ba9c
 8002574:	200004a0 	.word	0x200004a0
 8002578:	0800bab8 	.word	0x0800bab8
 800257c:	0800bad8 	.word	0x0800bad8
 8002580:	0800baf8 	.word	0x0800baf8
 8002584:	0800bb14 	.word	0x0800bb14
 8002588:	0800bb30 	.word	0x0800bb30
 800258c:	0800bb48 	.word	0x0800bb48
 8002590:	0800bb60 	.word	0x0800bb60
 8002594:	0800bb7c 	.word	0x0800bb7c
 8002598:	0800bb94 	.word	0x0800bb94
 800259c:	f7fd ffdc 	bl	8000558 <__aeabi_f2d>
 80025a0:	4603      	mov	r3, r0
 80025a2:	460c      	mov	r4, r1
 80025a4:	e9cd 3400 	strd	r3, r4, [sp]
 80025a8:	462a      	mov	r2, r5
 80025aa:	4633      	mov	r3, r6
 80025ac:	4985      	ldr	r1, [pc, #532]	; (80027c4 <main+0x904>)
 80025ae:	4886      	ldr	r0, [pc, #536]	; (80027c8 <main+0x908>)
 80025b0:	f006 f8b0 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80025b4:	4884      	ldr	r0, [pc, #528]	; (80027c8 <main+0x908>)
 80025b6:	f000 f999 	bl	80028ec <WriteString>


	  //FLASH PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Flash  \n\r" );
 80025ba:	4a83      	ldr	r2, [pc, #524]	; (80027c8 <main+0x908>)
 80025bc:	4b83      	ldr	r3, [pc, #524]	; (80027cc <main+0x90c>)
 80025be:	4615      	mov	r5, r2
 80025c0:	461c      	mov	r4, r3
 80025c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c4:	6028      	str	r0, [r5, #0]
 80025c6:	6069      	str	r1, [r5, #4]
 80025c8:	60aa      	str	r2, [r5, #8]
 80025ca:	60eb      	str	r3, [r5, #12]
 80025cc:	cc03      	ldmia	r4!, {r0, r1}
 80025ce:	6128      	str	r0, [r5, #16]
 80025d0:	6169      	str	r1, [r5, #20]
 80025d2:	8823      	ldrh	r3, [r4, #0]
 80025d4:	832b      	strh	r3, [r5, #24]
	  WriteString(UartTXbuff0);
 80025d6:	487c      	ldr	r0, [pc, #496]	; (80027c8 <main+0x908>)
 80025d8:	f000 f988 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_pitch, FlashDataFlash.pid_i_gain_pitch, FlashDataFlash.pid_d_gain_pitch);
 80025dc:	4b7c      	ldr	r3, [pc, #496]	; (80027d0 <main+0x910>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ffb9 	bl	8000558 <__aeabi_f2d>
 80025e6:	4680      	mov	r8, r0
 80025e8:	4689      	mov	r9, r1
 80025ea:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <main+0x910>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ffb2 	bl	8000558 <__aeabi_f2d>
 80025f4:	4604      	mov	r4, r0
 80025f6:	460d      	mov	r5, r1
 80025f8:	4b75      	ldr	r3, [pc, #468]	; (80027d0 <main+0x910>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ffab 	bl	8000558 <__aeabi_f2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800260a:	e9cd 4500 	strd	r4, r5, [sp]
 800260e:	4642      	mov	r2, r8
 8002610:	464b      	mov	r3, r9
 8002612:	4970      	ldr	r1, [pc, #448]	; (80027d4 <main+0x914>)
 8002614:	486c      	ldr	r0, [pc, #432]	; (80027c8 <main+0x908>)
 8002616:	f006 f87d 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800261a:	486b      	ldr	r0, [pc, #428]	; (80027c8 <main+0x908>)
 800261c:	f000 f966 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_roll, FlashDataFlash.pid_i_gain_roll, FlashDataFlash.pid_d_gain_roll);
 8002620:	4b6b      	ldr	r3, [pc, #428]	; (80027d0 <main+0x910>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fd ff97 	bl	8000558 <__aeabi_f2d>
 800262a:	4680      	mov	r8, r0
 800262c:	4689      	mov	r9, r1
 800262e:	4b68      	ldr	r3, [pc, #416]	; (80027d0 <main+0x910>)
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff90 	bl	8000558 <__aeabi_f2d>
 8002638:	4604      	mov	r4, r0
 800263a:	460d      	mov	r5, r1
 800263c:	4b64      	ldr	r3, [pc, #400]	; (80027d0 <main+0x910>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd ff89 	bl	8000558 <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800264e:	e9cd 4500 	strd	r4, r5, [sp]
 8002652:	4642      	mov	r2, r8
 8002654:	464b      	mov	r3, r9
 8002656:	4960      	ldr	r1, [pc, #384]	; (80027d8 <main+0x918>)
 8002658:	485b      	ldr	r0, [pc, #364]	; (80027c8 <main+0x908>)
 800265a:	f006 f85b 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 800265e:	485a      	ldr	r0, [pc, #360]	; (80027c8 <main+0x908>)
 8002660:	f000 f944 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_yaw, FlashDataFlash.pid_i_gain_yaw, FlashDataFlash.pid_d_gain_yaw);
 8002664:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <main+0x910>)
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fd ff75 	bl	8000558 <__aeabi_f2d>
 800266e:	4680      	mov	r8, r0
 8002670:	4689      	mov	r9, r1
 8002672:	4b57      	ldr	r3, [pc, #348]	; (80027d0 <main+0x910>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff6e 	bl	8000558 <__aeabi_f2d>
 800267c:	4604      	mov	r4, r0
 800267e:	460d      	mov	r5, r1
 8002680:	4b53      	ldr	r3, [pc, #332]	; (80027d0 <main+0x910>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff67 	bl	8000558 <__aeabi_f2d>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002692:	e9cd 4500 	strd	r4, r5, [sp]
 8002696:	4642      	mov	r2, r8
 8002698:	464b      	mov	r3, r9
 800269a:	4950      	ldr	r1, [pc, #320]	; (80027dc <main+0x91c>)
 800269c:	484a      	ldr	r0, [pc, #296]	; (80027c8 <main+0x908>)
 800269e:	f006 f839 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80026a2:	4849      	ldr	r0, [pc, #292]	; (80027c8 <main+0x908>)
 80026a4:	f000 f922 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataFlash.pid_max_pitch, FlashDataFlash.pid_i_max_pitch);
 80026a8:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <main+0x910>)
 80026aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ac:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <main+0x910>)
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	494b      	ldr	r1, [pc, #300]	; (80027e0 <main+0x920>)
 80026b2:	4845      	ldr	r0, [pc, #276]	; (80027c8 <main+0x908>)
 80026b4:	f006 f82e 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80026b8:	4843      	ldr	r0, [pc, #268]	; (80027c8 <main+0x908>)
 80026ba:	f000 f917 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataFlash.pid_max_roll, FlashDataFlash.pid_i_max_roll);
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <main+0x910>)
 80026c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c2:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <main+0x910>)
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	4947      	ldr	r1, [pc, #284]	; (80027e4 <main+0x924>)
 80026c8:	483f      	ldr	r0, [pc, #252]	; (80027c8 <main+0x908>)
 80026ca:	f006 f823 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80026ce:	483e      	ldr	r0, [pc, #248]	; (80027c8 <main+0x908>)
 80026d0:	f000 f90c 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataFlash.pid_max_yaw, FlashDataFlash.pid_i_max_yaw);
 80026d4:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <main+0x910>)
 80026d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026d8:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <main+0x910>)
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	4942      	ldr	r1, [pc, #264]	; (80027e8 <main+0x928>)
 80026de:	483a      	ldr	r0, [pc, #232]	; (80027c8 <main+0x908>)
 80026e0:	f006 f818 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80026e4:	4838      	ldr	r0, [pc, #224]	; (80027c8 <main+0x908>)
 80026e6:	f000 f901 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataFlash.maxpitchdegree);
 80026ea:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <main+0x910>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7fd ff32 	bl	8000558 <__aeabi_f2d>
 80026f4:	4603      	mov	r3, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	461a      	mov	r2, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	493b      	ldr	r1, [pc, #236]	; (80027ec <main+0x92c>)
 80026fe:	4832      	ldr	r0, [pc, #200]	; (80027c8 <main+0x908>)
 8002700:	f006 f808 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002704:	4830      	ldr	r0, [pc, #192]	; (80027c8 <main+0x908>)
 8002706:	f000 f8f1 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataFlash.maxrolldegree);
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <main+0x910>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff22 	bl	8000558 <__aeabi_f2d>
 8002714:	4603      	mov	r3, r0
 8002716:	460c      	mov	r4, r1
 8002718:	461a      	mov	r2, r3
 800271a:	4623      	mov	r3, r4
 800271c:	4934      	ldr	r1, [pc, #208]	; (80027f0 <main+0x930>)
 800271e:	482a      	ldr	r0, [pc, #168]	; (80027c8 <main+0x908>)
 8002720:	f005 fff8 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002724:	4828      	ldr	r0, [pc, #160]	; (80027c8 <main+0x908>)
 8002726:	f000 f8e1 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataFlash.maxyawdegree);
 800272a:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <main+0x910>)
 800272c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272e:	4618      	mov	r0, r3
 8002730:	f7fd ff12 	bl	8000558 <__aeabi_f2d>
 8002734:	4603      	mov	r3, r0
 8002736:	460c      	mov	r4, r1
 8002738:	461a      	mov	r2, r3
 800273a:	4623      	mov	r3, r4
 800273c:	492d      	ldr	r1, [pc, #180]	; (80027f4 <main+0x934>)
 800273e:	4822      	ldr	r0, [pc, #136]	; (80027c8 <main+0x908>)
 8002740:	f005 ffe8 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002744:	4820      	ldr	r0, [pc, #128]	; (80027c8 <main+0x908>)
 8002746:	f000 f8d1 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataFlash.maxthrottle, FlashDataFlash.minthrottle);
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <main+0x910>)
 800274c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd ff02 	bl	8000558 <__aeabi_f2d>
 8002754:	4605      	mov	r5, r0
 8002756:	460e      	mov	r6, r1
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <main+0x910>)
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fefb 	bl	8000558 <__aeabi_f2d>
 8002762:	4603      	mov	r3, r0
 8002764:	460c      	mov	r4, r1
 8002766:	e9cd 3400 	strd	r3, r4, [sp]
 800276a:	462a      	mov	r2, r5
 800276c:	4633      	mov	r3, r6
 800276e:	4915      	ldr	r1, [pc, #84]	; (80027c4 <main+0x904>)
 8002770:	4815      	ldr	r0, [pc, #84]	; (80027c8 <main+0x908>)
 8002772:	f005 ffcf 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 8002776:	4814      	ldr	r0, [pc, #80]	; (80027c8 <main+0x908>)
 8002778:	f000 f8b8 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <main+0x908>)
 800277e:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <main+0x938>)
 8002780:	8811      	ldrh	r1, [r2, #0]
 8002782:	7892      	ldrb	r2, [r2, #2]
 8002784:	8019      	strh	r1, [r3, #0]
 8002786:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8002788:	480f      	ldr	r0, [pc, #60]	; (80027c8 <main+0x908>)
 800278a:	f000 f8af 	bl	80028ec <WriteString>

	  sprintf(UartTXbuff0, "watch %d %d %d %d %d %d\n\r",watch1,watch2,watch3,watch4,watch5,watch6);
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <main+0x93c>)
 8002790:	681c      	ldr	r4, [r3, #0]
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <main+0x940>)
 8002794:	681d      	ldr	r5, [r3, #0]
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <main+0x944>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <main+0x948>)
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	491b      	ldr	r1, [pc, #108]	; (800280c <main+0x94c>)
 80027a0:	6809      	ldr	r1, [r1, #0]
 80027a2:	481b      	ldr	r0, [pc, #108]	; (8002810 <main+0x950>)
 80027a4:	6800      	ldr	r0, [r0, #0]
 80027a6:	9003      	str	r0, [sp, #12]
 80027a8:	9102      	str	r1, [sp, #8]
 80027aa:	9201      	str	r2, [sp, #4]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	462b      	mov	r3, r5
 80027b0:	4622      	mov	r2, r4
 80027b2:	4918      	ldr	r1, [pc, #96]	; (8002814 <main+0x954>)
 80027b4:	4804      	ldr	r0, [pc, #16]	; (80027c8 <main+0x908>)
 80027b6:	f005 ffad 	bl	8008714 <siprintf>
	  WriteString(UartTXbuff0);
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <main+0x908>)
 80027bc:	f000 f896 	bl	80028ec <WriteString>
	  HAL_Delay(100);
 80027c0:	f7ff bbfc 	b.w	8001fbc <main+0xfc>
 80027c4:	0800bbac 	.word	0x0800bbac
 80027c8:	20000400 	.word	0x20000400
 80027cc:	0800bbcc 	.word	0x0800bbcc
 80027d0:	200004f8 	.word	0x200004f8
 80027d4:	0800bab8 	.word	0x0800bab8
 80027d8:	0800bad8 	.word	0x0800bad8
 80027dc:	0800baf8 	.word	0x0800baf8
 80027e0:	0800bb14 	.word	0x0800bb14
 80027e4:	0800bb30 	.word	0x0800bb30
 80027e8:	0800bb48 	.word	0x0800bb48
 80027ec:	0800bb60 	.word	0x0800bb60
 80027f0:	0800bb7c 	.word	0x0800bb7c
 80027f4:	0800bb94 	.word	0x0800bb94
 80027f8:	0800b964 	.word	0x0800b964
 80027fc:	200003fc 	.word	0x200003fc
 8002800:	200003f0 	.word	0x200003f0
 8002804:	20000498 	.word	0x20000498
 8002808:	200003f4 	.word	0x200003f4
 800280c:	20000558 	.word	0x20000558
 8002810:	2000048c 	.word	0x2000048c
 8002814:	0800bbe8 	.word	0x0800bbe8

08002818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b094      	sub	sp, #80	; 0x50
 800281c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800281e:	f107 0320 	add.w	r3, r7, #32
 8002822:	2230      	movs	r2, #48	; 0x30
 8002824:	2100      	movs	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f005 fb0f 	bl	8007e4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <SystemClock_Config+0xcc>)
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	4a27      	ldr	r2, [pc, #156]	; (80028e4 <SystemClock_Config+0xcc>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	6413      	str	r3, [r2, #64]	; 0x40
 800284c:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <SystemClock_Config+0xcc>)
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <SystemClock_Config+0xd0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002864:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <SystemClock_Config+0xd0>)
 8002866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <SystemClock_Config+0xd0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002878:	2301      	movs	r3, #1
 800287a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800287c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002882:	2302      	movs	r3, #2
 8002884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800288c:	2319      	movs	r3, #25
 800288e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002890:	23a8      	movs	r3, #168	; 0xa8
 8002892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002894:	2302      	movs	r3, #2
 8002896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002898:	2304      	movs	r3, #4
 800289a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800289c:	f107 0320 	add.w	r3, r7, #32
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 fe35 	bl	8005510 <HAL_RCC_OscConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028ac:	f000 f852 	bl	8002954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028b0:	230f      	movs	r3, #15
 80028b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028b4:	2302      	movs	r3, #2
 80028b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	2102      	movs	r1, #2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 f88f 	bl	80059f0 <HAL_RCC_ClockConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80028d8:	f000 f83c 	bl	8002954 <Error_Handler>
  }
}
 80028dc:	bf00      	nop
 80028de:	3750      	adds	r7, #80	; 0x50
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000

080028ec <WriteString>:
	p->maxthrottle=(float)( (*(( uint32_t *) (StartAddr+80) )) );
}

/* Print character to array */
void WriteString(char string[])
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  unsigned int i=0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  while (string[i])
 80028f8:	e009      	b.n	800290e <WriteString+0x22>
  {
	PrintCharUart (string[i]);
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f80e 	bl	8002924 <PrintCharUart>
	i++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	3301      	adds	r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
  while (string[i])
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ef      	bne.n	80028fa <WriteString+0xe>
  }
}
 800291a:	bf00      	nop
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <PrintCharUart>:

/* Write character to Serial Port    */
void PrintCharUart (int ch)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));
 800292c:	bf00      	nop
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <PrintCharUart+0x2c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f9      	beq.n	800292e <PrintCharUart+0xa>
	USART1->DR = (USART_DR_DR & ch);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a04      	ldr	r2, [pc, #16]	; (8002950 <PrintCharUart+0x2c>)
 800293e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002942:	6053      	str	r3, [r2, #4]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40011000 	.word	0x40011000

08002954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8002970:	4b22      	ldr	r3, [pc, #136]	; (80029fc <nRF24_TransmitPacket+0x98>)
 8002972:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8002974:	2200      	movs	r2, #0
 8002976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800297a:	4821      	ldr	r0, [pc, #132]	; (8002a00 <nRF24_TransmitPacket+0x9c>)
 800297c:	f002 fc5c 	bl	8005238 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	4619      	mov	r1, r3
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fb64 	bl	8003052 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002990:	481b      	ldr	r0, [pc, #108]	; (8002a00 <nRF24_TransmitPacket+0x9c>)
 8002992:	f002 fc51 	bl	8005238 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8002996:	f000 fb24 	bl	8002fe2 <nRF24_GetStatus>
 800299a:	4603      	mov	r3, r0
 800299c:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	1e5a      	subs	r2, r3, #1
 80029ac:	60ba      	str	r2, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f1      	bne.n	8002996 <nRF24_TransmitPacket+0x32>
 80029b2:	e000      	b.n	80029b6 <nRF24_TransmitPacket+0x52>
			break;
 80029b4:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 80029b6:	2200      	movs	r2, #0
 80029b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029bc:	4810      	ldr	r0, [pc, #64]	; (8002a00 <nRF24_TransmitPacket+0x9c>)
 80029be:	f002 fc3b 	bl	8005238 <HAL_GPIO_WritePin>

	if (!wait) {
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 80029c8:	2302      	movs	r3, #2
 80029ca:	e012      	b.n	80029f2 <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 80029cc:	f000 fb2c 	bl	8003028 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 80029d0:	7bfb      	ldrb	r3, [r7, #15]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e009      	b.n	80029f2 <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e002      	b.n	80029f2 <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 80029ec:	f000 fb0c 	bl	8003008 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	000fffff 	.word	0x000fffff
 8002a00:	40020400 	.word	0x40020400

08002a04 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8002a0e:	bf00      	nop
 8002a10:	2102      	movs	r1, #2
 8002a12:	480e      	ldr	r0, [pc, #56]	; (8002a4c <nRF24_LL_RW+0x48>)
 8002a14:	f7ff f892 	bl	8001b3c <SPI_I2S_GetFlagStatus>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f8      	beq.n	8002a10 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	4619      	mov	r1, r3
 8002a24:	4809      	ldr	r0, [pc, #36]	; (8002a4c <nRF24_LL_RW+0x48>)
 8002a26:	f7ff f86d 	bl	8001b04 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8002a2a:	bf00      	nop
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4807      	ldr	r0, [pc, #28]	; (8002a4c <nRF24_LL_RW+0x48>)
 8002a30:	f7ff f884 	bl	8001b3c <SPI_I2S_GetFlagStatus>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f8      	beq.n	8002a2c <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8002a3a:	4804      	ldr	r0, [pc, #16]	; (8002a4c <nRF24_LL_RW+0x48>)
 8002a3c:	f7ff f871 	bl	8001b22 <SPI_I2S_ReceiveData>
 8002a40:	4603      	mov	r3, r0
 8002a42:	b2db      	uxtb	r3, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40003800 	.word	0x40003800

08002a50 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a60:	480c      	ldr	r0, [pc, #48]	; (8002a94 <nRF24_ReadReg+0x44>)
 8002a62:	f002 fbe9 	bl	8005238 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ffc8 	bl	8002a04 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8002a74:	20ff      	movs	r0, #255	; 0xff
 8002a76:	f7ff ffc5 	bl	8002a04 <nRF24_LL_RW>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a84:	4803      	ldr	r0, [pc, #12]	; (8002a94 <nRF24_ReadReg+0x44>)
 8002a86:	f002 fbd7 	bl	8005238 <HAL_GPIO_WritePin>

	return value;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40020000 	.word	0x40020000

08002a98 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002aae:	481a      	ldr	r0, [pc, #104]	; (8002b18 <nRF24_WriteReg+0x80>)
 8002ab0:	f002 fbc2 	bl	8005238 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	2b1f      	cmp	r3, #31
 8002ab8:	d810      	bhi.n	8002adc <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	b25b      	sxtb	r3, r3
 8002ac4:	f043 0320 	orr.w	r3, r3, #32
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff99 	bl	8002a04 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8002ad2:	79bb      	ldrb	r3, [r7, #6]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff95 	bl	8002a04 <nRF24_LL_RW>
 8002ada:	e013      	b.n	8002b04 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff90 	bl	8002a04 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	2be1      	cmp	r3, #225	; 0xe1
 8002ae8:	d00c      	beq.n	8002b04 <nRF24_WriteReg+0x6c>
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	2be2      	cmp	r3, #226	; 0xe2
 8002aee:	d009      	beq.n	8002b04 <nRF24_WriteReg+0x6c>
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	2be3      	cmp	r3, #227	; 0xe3
 8002af4:	d006      	beq.n	8002b04 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	2bff      	cmp	r3, #255	; 0xff
 8002afa:	d003      	beq.n	8002b04 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8002afc:	79bb      	ldrb	r3, [r7, #6]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff80 	bl	8002a04 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8002b04:	2201      	movs	r2, #1
 8002b06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b0a:	4803      	ldr	r0, [pc, #12]	; (8002b18 <nRF24_WriteReg+0x80>)
 8002b0c:	f002 fb94 	bl	8005238 <HAL_GPIO_WritePin>
}
 8002b10:	bf00      	nop
 8002b12:	3708      	adds	r7, #8
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40020000 	.word	0x40020000

08002b1c <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8002b1c:	b590      	push	{r4, r7, lr}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b32:	480f      	ldr	r0, [pc, #60]	; (8002b70 <nRF24_ReadMBReg+0x54>)
 8002b34:	f002 fb80 	bl	8005238 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff62 	bl	8002a04 <nRF24_LL_RW>
	while (count--) {
 8002b40:	e007      	b.n	8002b52 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8002b42:	683c      	ldr	r4, [r7, #0]
 8002b44:	1c63      	adds	r3, r4, #1
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	20ff      	movs	r0, #255	; 0xff
 8002b4a:	f7ff ff5b 	bl	8002a04 <nRF24_LL_RW>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8002b52:	79bb      	ldrb	r3, [r7, #6]
 8002b54:	1e5a      	subs	r2, r3, #1
 8002b56:	71ba      	strb	r2, [r7, #6]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f2      	bne.n	8002b42 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b62:	4803      	ldr	r0, [pc, #12]	; (8002b70 <nRF24_ReadMBReg+0x54>)
 8002b64:	f002 fb68 	bl	8005238 <HAL_GPIO_WritePin>
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd90      	pop	{r4, r7, pc}
 8002b70:	40020000 	.word	0x40020000

08002b74 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	6039      	str	r1, [r7, #0]
 8002b7e:	71fb      	strb	r3, [r7, #7]
 8002b80:	4613      	mov	r3, r2
 8002b82:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8002b84:	2200      	movs	r2, #0
 8002b86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b8a:	480f      	ldr	r0, [pc, #60]	; (8002bc8 <nRF24_WriteMBReg+0x54>)
 8002b8c:	f002 fb54 	bl	8005238 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8002b90:	79fb      	ldrb	r3, [r7, #7]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff36 	bl	8002a04 <nRF24_LL_RW>
	while (count--) {
 8002b98:	e006      	b.n	8002ba8 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	603a      	str	r2, [r7, #0]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff2e 	bl	8002a04 <nRF24_LL_RW>
	while (count--) {
 8002ba8:	79bb      	ldrb	r3, [r7, #6]
 8002baa:	1e5a      	subs	r2, r3, #1
 8002bac:	71ba      	strb	r2, [r7, #6]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f3      	bne.n	8002b9a <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb8:	4803      	ldr	r0, [pc, #12]	; (8002bc8 <nRF24_WriteMBReg+0x54>)
 8002bba:	f002 fb3d 	bl	8005238 <HAL_GPIO_WritePin>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40020000 	.word	0x40020000

08002bcc <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8002bd0:	2108      	movs	r1, #8
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f7ff ff60 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8002bd8:	213f      	movs	r1, #63	; 0x3f
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7ff ff5c 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8002be0:	2103      	movs	r1, #3
 8002be2:	2002      	movs	r0, #2
 8002be4:	f7ff ff58 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8002be8:	2103      	movs	r1, #3
 8002bea:	2003      	movs	r0, #3
 8002bec:	f7ff ff54 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8002bf0:	2103      	movs	r1, #3
 8002bf2:	2004      	movs	r0, #4
 8002bf4:	f7ff ff50 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	2005      	movs	r0, #5
 8002bfc:	f7ff ff4c 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8002c00:	210e      	movs	r1, #14
 8002c02:	2006      	movs	r0, #6
 8002c04:	f7ff ff48 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2007      	movs	r0, #7
 8002c0c:	f7ff ff44 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8002c10:	2100      	movs	r1, #0
 8002c12:	2011      	movs	r0, #17
 8002c14:	f7ff ff40 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2012      	movs	r0, #18
 8002c1c:	f7ff ff3c 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8002c20:	2100      	movs	r1, #0
 8002c22:	2013      	movs	r0, #19
 8002c24:	f7ff ff38 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8002c28:	2100      	movs	r1, #0
 8002c2a:	2014      	movs	r0, #20
 8002c2c:	f7ff ff34 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8002c30:	2100      	movs	r1, #0
 8002c32:	2015      	movs	r0, #21
 8002c34:	f7ff ff30 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8002c38:	2100      	movs	r1, #0
 8002c3a:	2016      	movs	r0, #22
 8002c3c:	f7ff ff2c 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8002c40:	2100      	movs	r1, #0
 8002c42:	201c      	movs	r0, #28
 8002c44:	f7ff ff28 	bl	8002a98 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8002c48:	2100      	movs	r1, #0
 8002c4a:	201d      	movs	r0, #29
 8002c4c:	f7ff ff24 	bl	8002a98 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8002c50:	f000 f9e2 	bl	8003018 <nRF24_FlushRX>
	nRF24_FlushTX();
 8002c54:	f000 f9d8 	bl	8003008 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8002c58:	f000 f9e6 	bl	8003028 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c62:	4802      	ldr	r0, [pc, #8]	; (8002c6c <nRF24_Init+0xa0>)
 8002c64:	f002 fae8 	bl	8005238 <HAL_GPIO_WritePin>
}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40020000 	.word	0x40020000

08002c70 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <nRF24_Check+0x58>)
 8002c78:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8002c7a:	2205      	movs	r2, #5
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	2030      	movs	r0, #48	; 0x30
 8002c80:	f7ff ff78 	bl	8002b74 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8002c84:	463b      	mov	r3, r7
 8002c86:	2205      	movs	r2, #5
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2010      	movs	r0, #16
 8002c8c:	f7ff ff46 	bl	8002b1c <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e010      	b.n	8002cb8 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	f107 0210 	add.w	r2, r7, #16
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1c59      	adds	r1, r3, #1
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d001      	beq.n	8002cb2 <nRF24_Check+0x42>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e006      	b.n	8002cc0 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d9eb      	bls.n	8002c96 <nRF24_Check+0x26>
	}

	return 1;
 8002cbe:	2301      	movs	r3, #1
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	0800bc04 	.word	0x0800bc04

08002ccc <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7ff feba 	bl	8002a50 <nRF24_ReadReg>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d104      	bne.n	8002cf0 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e003      	b.n	8002cf8 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	f023 0302 	bic.w	r3, r3, #2
 8002cf6:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f7ff fecb 	bl	8002a98 <nRF24_WriteReg>
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b084      	sub	sp, #16
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	4603      	mov	r3, r0
 8002d12:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7ff fe9b 	bl	8002a50 <nRF24_ReadReg>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
 8002d20:	f023 0301 	bic.w	r3, r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	b25a      	sxtb	r2, r3
 8002d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	2000      	movs	r0, #0
 8002d40:	f7ff feaa 	bl	8002a98 <nRF24_WriteReg>
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8002d56:	2000      	movs	r0, #0
 8002d58:	f7ff fe7a 	bl	8002a50 <nRF24_ReadReg>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	f023 030c 	bic.w	r3, r3, #12
 8002d66:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	f003 030c 	and.w	r3, r3, #12
 8002d70:	b25a      	sxtb	r2, r3
 8002d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	b25b      	sxtb	r3, r3
 8002d7a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7ff fe89 	bl	8002a98 <nRF24_WriteReg>
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	2005      	movs	r0, #5
 8002d9e:	f7ff fe7b 	bl	8002a98 <nRF24_WriteReg>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	3b02      	subs	r3, #2
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	4619      	mov	r1, r3
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f7ff fe6b 	bl	8002a98 <nRF24_WriteReg>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	2b06      	cmp	r3, #6
 8002ddc:	d846      	bhi.n	8002e6c <nRF24_SetAddr+0xa0>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <nRF24_SetAddr+0x18>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e01 	.word	0x08002e01
 8002de8:	08002e01 	.word	0x08002e01
 8002dec:	08002e59 	.word	0x08002e59
 8002df0:	08002e59 	.word	0x08002e59
 8002df4:	08002e59 	.word	0x08002e59
 8002df8:	08002e59 	.word	0x08002e59
 8002dfc:	08002e01 	.word	0x08002e01
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8002e00:	2003      	movs	r0, #3
 8002e02:	f7ff fe25 	bl	8002a50 <nRF24_ReadReg>
 8002e06:	4603      	mov	r3, r0
 8002e08:	3301      	adds	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	4413      	add	r3, r2
 8002e12:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8002e14:	2200      	movs	r2, #0
 8002e16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e1a:	4817      	ldr	r0, [pc, #92]	; (8002e78 <nRF24_SetAddr+0xac>)
 8002e1c:	f002 fa0c 	bl	8005238 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <nRF24_SetAddr+0xb0>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	f043 0320 	orr.w	r3, r3, #32
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fde9 	bl	8002a04 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	603a      	str	r2, [r7, #0]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff fde2 	bl	8002a04 <nRF24_LL_RW>
			} while (addr_width--);
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	1e5a      	subs	r2, r3, #1
 8002e44:	73fa      	strb	r2, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f3      	bne.n	8002e32 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e50:	4809      	ldr	r0, [pc, #36]	; (8002e78 <nRF24_SetAddr+0xac>)
 8002e52:	f002 f9f1 	bl	8005238 <HAL_GPIO_WritePin>
			break;
 8002e56:	e00a      	b.n	8002e6e <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <nRF24_SetAddr+0xb0>)
 8002e5c:	5cd2      	ldrb	r2, [r2, r3]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	4619      	mov	r1, r3
 8002e64:	4610      	mov	r0, r2
 8002e66:	f7ff fe17 	bl	8002a98 <nRF24_WriteReg>
			break;
 8002e6a:	e000      	b.n	8002e6e <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8002e6c:	bf00      	nop
	}
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	0800bc18 	.word	0x0800bc18

08002e80 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002e8a:	2006      	movs	r0, #6
 8002e8c:	f7ff fde0 	bl	8002a50 <nRF24_ReadReg>
 8002e90:	4603      	mov	r3, r0
 8002e92:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	f023 0306 	bic.w	r3, r3, #6
 8002e9a:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 8002e9c:	7bfa      	ldrb	r2, [r7, #15]
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	2006      	movs	r0, #6
 8002eaa:	f7ff fdf5 	bl	8002a98 <nRF24_WriteReg>
}
 8002eae:	bf00      	nop
 8002eb0:	3710      	adds	r7, #16
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8002ec0:	2006      	movs	r0, #6
 8002ec2:	f7ff fdc5 	bl	8002a50 <nRF24_ReadReg>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8002ed0:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	79fb      	ldrb	r3, [r7, #7]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	4619      	mov	r1, r3
 8002ede:	2006      	movs	r0, #6
 8002ee0:	f7ff fdda 	bl	8002a98 <nRF24_WriteReg>
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	71bb      	strb	r3, [r7, #6]
 8002efa:	4613      	mov	r3, r2
 8002efc:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8002efe:	2002      	movs	r0, #2
 8002f00:	f7ff fda6 	bl	8002a50 <nRF24_ReadReg>
 8002f04:	4603      	mov	r3, r0
 8002f06:	b25a      	sxtb	r2, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	b25b      	sxtb	r3, r3
 8002f12:	4313      	orrs	r3, r2
 8002f14:	b25b      	sxtb	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f1c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	4619      	mov	r1, r3
 8002f22:	2002      	movs	r0, #2
 8002f24:	f7ff fdb8 	bl	8002a98 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <nRF24_SetRXPipe+0xa4>)
 8002f2c:	5cd2      	ldrb	r2, [r2, r3]
 8002f2e:	797b      	ldrb	r3, [r7, #5]
 8002f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f7ff fdad 	bl	8002a98 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002f3e:	2001      	movs	r0, #1
 8002f40:	f7ff fd86 	bl	8002a50 <nRF24_ReadReg>
 8002f44:	4603      	mov	r3, r0
 8002f46:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8002f48:	79bb      	ldrb	r3, [r7, #6]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10a      	bne.n	8002f64 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	2201      	movs	r2, #1
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	b25a      	sxtb	r2, r3
 8002f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	b25b      	sxtb	r3, r3
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	e00b      	b.n	8002f7c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2201      	movs	r2, #1
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	b25a      	sxtb	r2, r3
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b25b      	sxtb	r3, r3
 8002f7a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7ff fd89 	bl	8002a98 <nRF24_WriteReg>
}
 8002f86:	bf00      	nop
 8002f88:	3710      	adds	r7, #16
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	0800bc10 	.word	0x0800bc10

08002f94 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d904      	bls.n	8002fae <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7ff fd76 	bl	8002a98 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8002fac:	e015      	b.n	8002fda <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f7ff fd4e 	bl	8002a50 <nRF24_ReadReg>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	b25b      	sxtb	r3, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	b25a      	sxtb	r2, r3
 8002fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	2001      	movs	r0, #1
 8002fd6:	f7ff fd5f 	bl	8002a98 <nRF24_WriteReg>
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8002fe6:	2007      	movs	r0, #7
 8002fe8:	f7ff fd32 	bl	8002a50 <nRF24_ReadReg>
 8002fec:	4603      	mov	r3, r0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8002ff6:	2017      	movs	r0, #23
 8002ff8:	f7ff fd2a 	bl	8002a50 <nRF24_ReadReg>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	b2db      	uxtb	r3, r3
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}

08003008 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800300c:	21ff      	movs	r1, #255	; 0xff
 800300e:	20e1      	movs	r0, #225	; 0xe1
 8003010:	f7ff fd42 	bl	8002a98 <nRF24_WriteReg>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800301c:	21ff      	movs	r1, #255	; 0xff
 800301e:	20e2      	movs	r0, #226	; 0xe2
 8003020:	f7ff fd3a 	bl	8002a98 <nRF24_WriteReg>
}
 8003024:	bf00      	nop
 8003026:	bd80      	pop	{r7, pc}

08003028 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800302e:	2007      	movs	r0, #7
 8003030:	f7ff fd0e 	bl	8002a50 <nRF24_ReadReg>
 8003034:	4603      	mov	r3, r0
 8003036:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800303e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4619      	mov	r1, r3
 8003044:	2007      	movs	r0, #7
 8003046:	f7ff fd27 	bl	8002a98 <nRF24_WriteReg>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	461a      	mov	r2, r3
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	20a0      	movs	r0, #160	; 0xa0
 8003066:	f7ff fd85 	bl	8002b74 <nRF24_WriteMBReg>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800307e:	2007      	movs	r0, #7
 8003080:	f7ff fce6 	bl	8002a50 <nRF24_ReadReg>
 8003084:	4603      	mov	r3, r0
 8003086:	105b      	asrs	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d816      	bhi.n	80030c4 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <nRF24_ReadPayload+0x60>)
 800309a:	5cd3      	ldrb	r3, [r2, r3]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fcd7 	bl	8002a50 <nRF24_ReadReg>
 80030a2:	4603      	mov	r3, r0
 80030a4:	461a      	mov	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d006      	beq.n	80030c0 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	2061      	movs	r0, #97	; 0x61
 80030bc:	f7ff fd2e 	bl	8002b1c <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	e003      	b.n	80030cc <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80030ca:	23ff      	movs	r3, #255	; 0xff
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	0800bc10 	.word	0x0800bc10

080030d8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <MX_SPI1_Init+0x64>)
 80030de:	4a18      	ldr	r2, [pc, #96]	; (8003140 <MX_SPI1_Init+0x68>)
 80030e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <MX_SPI1_Init+0x64>)
 80030e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030ea:	4b14      	ldr	r3, [pc, #80]	; (800313c <MX_SPI1_Init+0x64>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <MX_SPI1_Init+0x64>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <MX_SPI1_Init+0x64>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <MX_SPI1_Init+0x64>)
 80030fe:	2200      	movs	r2, #0
 8003100:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <MX_SPI1_Init+0x64>)
 8003104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003108:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800310a:	4b0c      	ldr	r3, [pc, #48]	; (800313c <MX_SPI1_Init+0x64>)
 800310c:	2230      	movs	r2, #48	; 0x30
 800310e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003110:	4b0a      	ldr	r3, [pc, #40]	; (800313c <MX_SPI1_Init+0x64>)
 8003112:	2200      	movs	r2, #0
 8003114:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <MX_SPI1_Init+0x64>)
 8003118:	2200      	movs	r2, #0
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311c:	4b07      	ldr	r3, [pc, #28]	; (800313c <MX_SPI1_Init+0x64>)
 800311e:	2200      	movs	r2, #0
 8003120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <MX_SPI1_Init+0x64>)
 8003124:	220a      	movs	r2, #10
 8003126:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003128:	4804      	ldr	r0, [pc, #16]	; (800313c <MX_SPI1_Init+0x64>)
 800312a:	f002 fe2d 	bl	8005d88 <HAL_SPI_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003134:	f7ff fc0e 	bl	8002954 <Error_Handler>
  }

}
 8003138:	bf00      	nop
 800313a:	bd80      	pop	{r7, pc}
 800313c:	2000060c 	.word	0x2000060c
 8003140:	40013000 	.word	0x40013000

08003144 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003148:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <MX_SPI2_Init+0x64>)
 800314a:	4a18      	ldr	r2, [pc, #96]	; (80031ac <MX_SPI2_Init+0x68>)
 800314c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800314e:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <MX_SPI2_Init+0x64>)
 8003150:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003154:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003156:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <MX_SPI2_Init+0x64>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <MX_SPI2_Init+0x64>)
 800315e:	2200      	movs	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003162:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <MX_SPI2_Init+0x64>)
 8003164:	2200      	movs	r2, #0
 8003166:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003168:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <MX_SPI2_Init+0x64>)
 800316a:	2200      	movs	r2, #0
 800316c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800316e:	4b0e      	ldr	r3, [pc, #56]	; (80031a8 <MX_SPI2_Init+0x64>)
 8003170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003174:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <MX_SPI2_Init+0x64>)
 8003178:	2208      	movs	r2, #8
 800317a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800317c:	4b0a      	ldr	r3, [pc, #40]	; (80031a8 <MX_SPI2_Init+0x64>)
 800317e:	2200      	movs	r2, #0
 8003180:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <MX_SPI2_Init+0x64>)
 8003184:	2200      	movs	r2, #0
 8003186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003188:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <MX_SPI2_Init+0x64>)
 800318a:	2200      	movs	r2, #0
 800318c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <MX_SPI2_Init+0x64>)
 8003190:	220a      	movs	r2, #10
 8003192:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003194:	4804      	ldr	r0, [pc, #16]	; (80031a8 <MX_SPI2_Init+0x64>)
 8003196:	f002 fdf7 	bl	8005d88 <HAL_SPI_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80031a0:	f7ff fbd8 	bl	8002954 <Error_Handler>
  }

}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	2000055c 	.word	0x2000055c
 80031ac:	40003800 	.word	0x40003800

080031b0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <MX_SPI3_Init+0x64>)
 80031b6:	4a18      	ldr	r2, [pc, #96]	; (8003218 <MX_SPI3_Init+0x68>)
 80031b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80031ba:	4b16      	ldr	r3, [pc, #88]	; (8003214 <MX_SPI3_Init+0x64>)
 80031bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80031c2:	4b14      	ldr	r3, [pc, #80]	; (8003214 <MX_SPI3_Init+0x64>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <MX_SPI3_Init+0x64>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <MX_SPI3_Init+0x64>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <MX_SPI3_Init+0x64>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80031da:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <MX_SPI3_Init+0x64>)
 80031dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MX_SPI3_Init+0x64>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <MX_SPI3_Init+0x64>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <MX_SPI3_Init+0x64>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f4:	4b07      	ldr	r3, [pc, #28]	; (8003214 <MX_SPI3_Init+0x64>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80031fa:	4b06      	ldr	r3, [pc, #24]	; (8003214 <MX_SPI3_Init+0x64>)
 80031fc:	220a      	movs	r2, #10
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003200:	4804      	ldr	r0, [pc, #16]	; (8003214 <MX_SPI3_Init+0x64>)
 8003202:	f002 fdc1 	bl	8005d88 <HAL_SPI_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800320c:	f7ff fba2 	bl	8002954 <Error_Handler>
  }

}
 8003210:	bf00      	nop
 8003212:	bd80      	pop	{r7, pc}
 8003214:	200005b4 	.word	0x200005b4
 8003218:	40003c00 	.word	0x40003c00

0800321c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	; 0x38
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	609a      	str	r2, [r3, #8]
 8003230:	60da      	str	r2, [r3, #12]
 8003232:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a4b      	ldr	r2, [pc, #300]	; (8003368 <HAL_SPI_MspInit+0x14c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d12c      	bne.n	8003298 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_SPI_MspInit+0x150>)
 8003244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003246:	4a49      	ldr	r2, [pc, #292]	; (800336c <HAL_SPI_MspInit+0x150>)
 8003248:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800324c:	6453      	str	r3, [r2, #68]	; 0x44
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_SPI_MspInit+0x150>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	4b43      	ldr	r3, [pc, #268]	; (800336c <HAL_SPI_MspInit+0x150>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a42      	ldr	r2, [pc, #264]	; (800336c <HAL_SPI_MspInit+0x150>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b40      	ldr	r3, [pc, #256]	; (800336c <HAL_SPI_MspInit+0x150>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003276:	23e0      	movs	r3, #224	; 0xe0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003282:	2303      	movs	r3, #3
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003286:	2305      	movs	r3, #5
 8003288:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328e:	4619      	mov	r1, r3
 8003290:	4837      	ldr	r0, [pc, #220]	; (8003370 <HAL_SPI_MspInit+0x154>)
 8003292:	f001 fe4f 	bl	8004f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003296:	e063      	b.n	8003360 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a35      	ldr	r2, [pc, #212]	; (8003374 <HAL_SPI_MspInit+0x158>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d12d      	bne.n	80032fe <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	4b31      	ldr	r3, [pc, #196]	; (800336c <HAL_SPI_MspInit+0x150>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	4a30      	ldr	r2, [pc, #192]	; (800336c <HAL_SPI_MspInit+0x150>)
 80032ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b0:	6413      	str	r3, [r2, #64]	; 0x40
 80032b2:	4b2e      	ldr	r3, [pc, #184]	; (800336c <HAL_SPI_MspInit+0x150>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ba:	61bb      	str	r3, [r7, #24]
 80032bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	4b2a      	ldr	r3, [pc, #168]	; (800336c <HAL_SPI_MspInit+0x150>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4a29      	ldr	r2, [pc, #164]	; (800336c <HAL_SPI_MspInit+0x150>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	6313      	str	r3, [r2, #48]	; 0x30
 80032ce:	4b27      	ldr	r3, [pc, #156]	; (800336c <HAL_SPI_MspInit+0x150>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80032da:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80032ec:	2305      	movs	r3, #5
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f4:	4619      	mov	r1, r3
 80032f6:	4820      	ldr	r0, [pc, #128]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 80032f8:	f001 fe1c 	bl	8004f34 <HAL_GPIO_Init>
}
 80032fc:	e030      	b.n	8003360 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1e      	ldr	r2, [pc, #120]	; (800337c <HAL_SPI_MspInit+0x160>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d12b      	bne.n	8003360 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <HAL_SPI_MspInit+0x150>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	4a16      	ldr	r2, [pc, #88]	; (800336c <HAL_SPI_MspInit+0x150>)
 8003312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003316:	6413      	str	r3, [r2, #64]	; 0x40
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <HAL_SPI_MspInit+0x150>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	4b10      	ldr	r3, [pc, #64]	; (800336c <HAL_SPI_MspInit+0x150>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	4a0f      	ldr	r2, [pc, #60]	; (800336c <HAL_SPI_MspInit+0x150>)
 800332e:	f043 0302 	orr.w	r3, r3, #2
 8003332:	6313      	str	r3, [r2, #48]	; 0x30
 8003334:	4b0d      	ldr	r3, [pc, #52]	; (800336c <HAL_SPI_MspInit+0x150>)
 8003336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003340:	2338      	movs	r3, #56	; 0x38
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003350:	2306      	movs	r3, #6
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003358:	4619      	mov	r1, r3
 800335a:	4807      	ldr	r0, [pc, #28]	; (8003378 <HAL_SPI_MspInit+0x15c>)
 800335c:	f001 fdea 	bl	8004f34 <HAL_GPIO_Init>
}
 8003360:	bf00      	nop
 8003362:	3738      	adds	r7, #56	; 0x38
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40013000 	.word	0x40013000
 800336c:	40023800 	.word	0x40023800
 8003370:	40020000 	.word	0x40020000
 8003374:	40003800 	.word	0x40003800
 8003378:	40020400 	.word	0x40020400
 800337c:	40003c00 	.word	0x40003c00

08003380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	4b10      	ldr	r3, [pc, #64]	; (80033cc <HAL_MspInit+0x4c>)
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	4a0f      	ldr	r2, [pc, #60]	; (80033cc <HAL_MspInit+0x4c>)
 8003390:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003394:	6453      	str	r3, [r2, #68]	; 0x44
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <HAL_MspInit+0x4c>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_MspInit+0x4c>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a08      	ldr	r2, [pc, #32]	; (80033cc <HAL_MspInit+0x4c>)
 80033ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_MspInit+0x4c>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800

080033d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033e2:	e7fe      	b.n	80033e2 <HardFault_Handler+0x4>

080033e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033e8:	e7fe      	b.n	80033e8 <MemManage_Handler+0x4>

080033ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ee:	e7fe      	b.n	80033ee <BusFault_Handler+0x4>

080033f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <UsageFault_Handler+0x4>

080033f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033f6:	b480      	push	{r7}
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003424:	f001 f898 	bl	8004558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}

0800342c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003432:	4890      	ldr	r0, [pc, #576]	; (8003674 <TIM2_IRQHandler+0x248>)
 8003434:	f003 fab2 	bl	800699c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky--------------------------------------------------------------
  LEDcount++;
 8003438:	4b8f      	ldr	r3, [pc, #572]	; (8003678 <TIM2_IRQHandler+0x24c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	4a8e      	ldr	r2, [pc, #568]	; (8003678 <TIM2_IRQHandler+0x24c>)
 8003440:	6013      	str	r3, [r2, #0]
  if(LEDcount>=50)
 8003442:	4b8d      	ldr	r3, [pc, #564]	; (8003678 <TIM2_IRQHandler+0x24c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b31      	cmp	r3, #49	; 0x31
 8003448:	d907      	bls.n	800345a <TIM2_IRQHandler+0x2e>
  {
	  LEDcount=0;
 800344a:	4b8b      	ldr	r3, [pc, #556]	; (8003678 <TIM2_IRQHandler+0x24c>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8003450:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003454:	4889      	ldr	r0, [pc, #548]	; (800367c <TIM2_IRQHandler+0x250>)
 8003456:	f001 ff08 	bl	800526a <HAL_GPIO_TogglePin>
  }//-------------------------------------------------------------------


  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,1);
 800345a:	2101      	movs	r1, #1
 800345c:	4888      	ldr	r0, [pc, #544]	; (8003680 <TIM2_IRQHandler+0x254>)
 800345e:	f001 f9a7 	bl	80047b0 <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 8003462:	4887      	ldr	r0, [pc, #540]	; (8003680 <TIM2_IRQHandler+0x254>)
 8003464:	f001 fa28 	bl	80048b8 <HAL_ADC_GetValue>
 8003468:	ee07 0a90 	vmov	s15, r0
 800346c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003470:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003684 <TIM2_IRQHandler+0x258>
 8003474:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003478:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800347c:	ee17 2a90 	vmov	r2, s15
 8003480:	4b81      	ldr	r3, [pc, #516]	; (8003688 <TIM2_IRQHandler+0x25c>)
 8003482:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8003484:	4b81      	ldr	r3, [pc, #516]	; (800368c <TIM2_IRQHandler+0x260>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a7f      	ldr	r2, [pc, #508]	; (8003688 <TIM2_IRQHandler+0x25c>)
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	4980      	ldr	r1, [pc, #512]	; (8003690 <TIM2_IRQHandler+0x264>)
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8003492:	4b7e      	ldr	r3, [pc, #504]	; (800368c <TIM2_IRQHandler+0x260>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3301      	adds	r3, #1
 8003498:	4a7c      	ldr	r2, [pc, #496]	; (800368c <TIM2_IRQHandler+0x260>)
 800349a:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 800349c:	4b7b      	ldr	r3, [pc, #492]	; (800368c <TIM2_IRQHandler+0x260>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b31      	cmp	r3, #49	; 0x31
 80034a2:	d902      	bls.n	80034aa <TIM2_IRQHandler+0x7e>
 80034a4:	4b79      	ldr	r3, [pc, #484]	; (800368c <TIM2_IRQHandler+0x260>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 80034aa:	4b7a      	ldr	r3, [pc, #488]	; (8003694 <TIM2_IRQHandler+0x268>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 80034b0:	4b79      	ldr	r3, [pc, #484]	; (8003698 <TIM2_IRQHandler+0x26c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e00e      	b.n	80034d6 <TIM2_IRQHandler+0xaa>
  {
	  BattmVSUM+=BAttmVhist[i];
 80034b8:	4b77      	ldr	r3, [pc, #476]	; (8003698 <TIM2_IRQHandler+0x26c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a74      	ldr	r2, [pc, #464]	; (8003690 <TIM2_IRQHandler+0x264>)
 80034be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80034c2:	4b74      	ldr	r3, [pc, #464]	; (8003694 <TIM2_IRQHandler+0x268>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	4a72      	ldr	r2, [pc, #456]	; (8003694 <TIM2_IRQHandler+0x268>)
 80034ca:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 80034cc:	4b72      	ldr	r3, [pc, #456]	; (8003698 <TIM2_IRQHandler+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	4a71      	ldr	r2, [pc, #452]	; (8003698 <TIM2_IRQHandler+0x26c>)
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b70      	ldr	r3, [pc, #448]	; (8003698 <TIM2_IRQHandler+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b31      	cmp	r3, #49	; 0x31
 80034dc:	d9ec      	bls.n	80034b8 <TIM2_IRQHandler+0x8c>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 80034de:	4b6d      	ldr	r3, [pc, #436]	; (8003694 <TIM2_IRQHandler+0x268>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a6e      	ldr	r2, [pc, #440]	; (800369c <TIM2_IRQHandler+0x270>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	4a6d      	ldr	r2, [pc, #436]	; (80036a0 <TIM2_IRQHandler+0x274>)
 80034ec:	6013      	str	r3, [r2, #0]
  //--------------------------------------------------------------------

  //save OLD toggle values
  togg1hist=togg1;
 80034ee:	4b6d      	ldr	r3, [pc, #436]	; (80036a4 <TIM2_IRQHandler+0x278>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a6d      	ldr	r2, [pc, #436]	; (80036a8 <TIM2_IRQHandler+0x27c>)
 80034f4:	6013      	str	r3, [r2, #0]
  togg2hist=togg2;
 80034f6:	4b6d      	ldr	r3, [pc, #436]	; (80036ac <TIM2_IRQHandler+0x280>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a6d      	ldr	r2, [pc, #436]	; (80036b0 <TIM2_IRQHandler+0x284>)
 80034fc:	6013      	str	r3, [r2, #0]
  togg3hist=togg3;
 80034fe:	4b6d      	ldr	r3, [pc, #436]	; (80036b4 <TIM2_IRQHandler+0x288>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6d      	ldr	r2, [pc, #436]	; (80036b8 <TIM2_IRQHandler+0x28c>)
 8003504:	6013      	str	r3, [r2, #0]
  togg4hist=togg4;
 8003506:	4b6d      	ldr	r3, [pc, #436]	; (80036bc <TIM2_IRQHandler+0x290>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6d      	ldr	r2, [pc, #436]	; (80036c0 <TIM2_IRQHandler+0x294>)
 800350c:	6013      	str	r3, [r2, #0]
  togg5hist=togg5;
 800350e:	4b6d      	ldr	r3, [pc, #436]	; (80036c4 <TIM2_IRQHandler+0x298>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a6d      	ldr	r2, [pc, #436]	; (80036c8 <TIM2_IRQHandler+0x29c>)
 8003514:	6013      	str	r3, [r2, #0]
  togg6hist=togg6;
 8003516:	4b6d      	ldr	r3, [pc, #436]	; (80036cc <TIM2_IRQHandler+0x2a0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6d      	ldr	r2, [pc, #436]	; (80036d0 <TIM2_IRQHandler+0x2a4>)
 800351c:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 800351e:	4b6d      	ldr	r3, [pc, #436]	; (80036d4 <TIM2_IRQHandler+0x2a8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 823b 	beq.w	800399e <TIM2_IRQHandler+0x572>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8003528:	f7ff fd63 	bl	8002ff2 <nRF24_GetStatus_RXFIFO>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	f000 8235 	beq.w	800399e <TIM2_IRQHandler+0x572>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8003534:	4968      	ldr	r1, [pc, #416]	; (80036d8 <TIM2_IRQHandler+0x2ac>)
 8003536:	4869      	ldr	r0, [pc, #420]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 8003538:	f7ff fd9c 	bl	8003074 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 800353c:	f7ff fd74 	bl	8003028 <nRF24_ClearIRQFlags>

  			MSGSelector=(nRF24_payloadRX[0]);
 8003540:	4b66      	ldr	r3, [pc, #408]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	4b66      	ldr	r3, [pc, #408]	; (80036e0 <TIM2_IRQHandler+0x2b4>)
 8003548:	601a      	str	r2, [r3, #0]

  			switch(MSGSelector)
 800354a:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <TIM2_IRQHandler+0x2b4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b04      	cmp	r3, #4
 8003550:	f200 80dd 	bhi.w	800370e <TIM2_IRQHandler+0x2e2>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <TIM2_IRQHandler+0x130>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003571 	.word	0x08003571
 8003560:	0800363b 	.word	0x0800363b
 8003564:	08003669 	.word	0x08003669
 8003568:	0800362b 	.word	0x0800362b
 800356c:	08003633 	.word	0x08003633
  			{
  				case COMMCONTROLDATA:
  									{
  										if(nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100 && nRF24_payloadRX[4]<=100)//Check if Data is in correct ranges
 8003570:	4b5a      	ldr	r3, [pc, #360]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 8003572:	785b      	ldrb	r3, [r3, #1]
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	f200 80c9 	bhi.w	800370c <TIM2_IRQHandler+0x2e0>
 800357a:	4b58      	ldr	r3, [pc, #352]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 800357c:	789b      	ldrb	r3, [r3, #2]
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	f200 80c4 	bhi.w	800370c <TIM2_IRQHandler+0x2e0>
 8003584:	4b55      	ldr	r3, [pc, #340]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 8003586:	78db      	ldrb	r3, [r3, #3]
 8003588:	2b64      	cmp	r3, #100	; 0x64
 800358a:	f200 80bf 	bhi.w	800370c <TIM2_IRQHandler+0x2e0>
 800358e:	4b53      	ldr	r3, [pc, #332]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 8003590:	791b      	ldrb	r3, [r3, #4]
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	f200 80ba 	bhi.w	800370c <TIM2_IRQHandler+0x2e0>
  										{
  							  				Ljoyupdown=nRF24_payloadRX[1];
 8003598:	4b50      	ldr	r3, [pc, #320]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 800359a:	785b      	ldrb	r3, [r3, #1]
 800359c:	461a      	mov	r2, r3
 800359e:	4b51      	ldr	r3, [pc, #324]	; (80036e4 <TIM2_IRQHandler+0x2b8>)
 80035a0:	601a      	str	r2, [r3, #0]
  							  				Ljoyleftright=nRF24_payloadRX[2];
 80035a2:	4b4e      	ldr	r3, [pc, #312]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 80035a4:	789b      	ldrb	r3, [r3, #2]
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b4f      	ldr	r3, [pc, #316]	; (80036e8 <TIM2_IRQHandler+0x2bc>)
 80035aa:	601a      	str	r2, [r3, #0]
  							  				Djoyupdown=nRF24_payloadRX[3];
 80035ac:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 80035ae:	78db      	ldrb	r3, [r3, #3]
 80035b0:	461a      	mov	r2, r3
 80035b2:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <TIM2_IRQHandler+0x2c0>)
 80035b4:	601a      	str	r2, [r3, #0]
  							  				Djoyleftright=nRF24_payloadRX[4];
 80035b6:	4b49      	ldr	r3, [pc, #292]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 80035b8:	791b      	ldrb	r3, [r3, #4]
 80035ba:	461a      	mov	r2, r3
 80035bc:	4b4c      	ldr	r3, [pc, #304]	; (80036f0 <TIM2_IRQHandler+0x2c4>)
 80035be:	601a      	str	r2, [r3, #0]
  							  				potenc1=nRF24_payloadRX[5];
 80035c0:	4b46      	ldr	r3, [pc, #280]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 80035c2:	795b      	ldrb	r3, [r3, #5]
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b4b      	ldr	r3, [pc, #300]	; (80036f4 <TIM2_IRQHandler+0x2c8>)
 80035c8:	601a      	str	r2, [r3, #0]
  							  				potenc2=nRF24_payloadRX[6];
 80035ca:	4b44      	ldr	r3, [pc, #272]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 80035cc:	799b      	ldrb	r3, [r3, #6]
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <TIM2_IRQHandler+0x2cc>)
 80035d2:	601a      	str	r2, [r3, #0]

  							  				togg1=nRF24_payloadRX[7]>>7;
 80035d4:	4b41      	ldr	r3, [pc, #260]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 80035d6:	79db      	ldrb	r3, [r3, #7]
 80035d8:	09db      	lsrs	r3, r3, #7
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <TIM2_IRQHandler+0x278>)
 80035e0:	601a      	str	r2, [r3, #0]
  							  				togg2=(nRF24_payloadRX[7] & 64 )>>6;
 80035e2:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 80035e4:	79db      	ldrb	r3, [r3, #7]
 80035e6:	119b      	asrs	r3, r3, #6
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <TIM2_IRQHandler+0x280>)
 80035ee:	6013      	str	r3, [r2, #0]
  							  				togg3=(nRF24_payloadRX[7] & 32 )>>5;
 80035f0:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 80035f2:	79db      	ldrb	r3, [r3, #7]
 80035f4:	115b      	asrs	r3, r3, #5
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	4a2e      	ldr	r2, [pc, #184]	; (80036b4 <TIM2_IRQHandler+0x288>)
 80035fc:	6013      	str	r3, [r2, #0]
  							  				togg4=(nRF24_payloadRX[7] & 16 )>>4;
 80035fe:	4b37      	ldr	r3, [pc, #220]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 8003600:	79db      	ldrb	r3, [r3, #7]
 8003602:	111b      	asrs	r3, r3, #4
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	4a2c      	ldr	r2, [pc, #176]	; (80036bc <TIM2_IRQHandler+0x290>)
 800360a:	6013      	str	r3, [r2, #0]
  							  				togg5=(nRF24_payloadRX[7] & 8 )>>3;
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 800360e:	79db      	ldrb	r3, [r3, #7]
 8003610:	10db      	asrs	r3, r3, #3
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	4a2b      	ldr	r2, [pc, #172]	; (80036c4 <TIM2_IRQHandler+0x298>)
 8003618:	6013      	str	r3, [r2, #0]
  							  				togg6=(nRF24_payloadRX[7] & 4 )>>2;
 800361a:	4b30      	ldr	r3, [pc, #192]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 800361c:	79db      	ldrb	r3, [r3, #7]
 800361e:	109b      	asrs	r3, r3, #2
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	4a29      	ldr	r2, [pc, #164]	; (80036cc <TIM2_IRQHandler+0x2a0>)
 8003626:	6013      	str	r3, [r2, #0]
  										}
  									}break;
 8003628:	e070      	b.n	800370c <TIM2_IRQHandler+0x2e0>

  				case COMMERASEFLASHDR:
  									{
  										FlashEraseFlag=1;
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <TIM2_IRQHandler+0x2d0>)
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]

  									}break;
 8003630:	e06d      	b.n	800370e <TIM2_IRQHandler+0x2e2>

  				case COMMWRITEFLASHDR:
  									{
  										FlashWriteFlag=1;
 8003632:	4b33      	ldr	r3, [pc, #204]	; (8003700 <TIM2_IRQHandler+0x2d4>)
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  									}break;
 8003638:	e069      	b.n	800370e <TIM2_IRQHandler+0x2e2>

  				case COMMPARAMACTIVE:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 800363a:	4b28      	ldr	r3, [pc, #160]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 800363c:	785b      	ldrb	r3, [r3, #1]
 800363e:	461a      	mov	r2, r3
 8003640:	4b30      	ldr	r3, [pc, #192]	; (8003704 <TIM2_IRQHandler+0x2d8>)
 8003642:	601a      	str	r2, [r3, #0]
  				  						ParamDataRX=(nRF24_payloadRX[2]<<24) + (nRF24_payloadRX[3]<<16) + (nRF24_payloadRX[4]<<8) + (nRF24_payloadRX[5]);
 8003644:	4b25      	ldr	r3, [pc, #148]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 8003646:	789b      	ldrb	r3, [r3, #2]
 8003648:	061a      	lsls	r2, r3, #24
 800364a:	4b24      	ldr	r3, [pc, #144]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 800364c:	78db      	ldrb	r3, [r3, #3]
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	441a      	add	r2, r3
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 8003654:	791b      	ldrb	r3, [r3, #4]
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	4413      	add	r3, r2
 800365a:	4a20      	ldr	r2, [pc, #128]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 800365c:	7952      	ldrb	r2, [r2, #5]
 800365e:	4413      	add	r3, r2
 8003660:	461a      	mov	r2, r3
 8003662:	4b29      	ldr	r3, [pc, #164]	; (8003708 <TIM2_IRQHandler+0x2dc>)
 8003664:	601a      	str	r2, [r3, #0]

  				  					}break;
 8003666:	e052      	b.n	800370e <TIM2_IRQHandler+0x2e2>

  				case COMMPARAMFLASH:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 8003668:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <TIM2_IRQHandler+0x2b0>)
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	461a      	mov	r2, r3
 800366e:	4b25      	ldr	r3, [pc, #148]	; (8003704 <TIM2_IRQHandler+0x2d8>)
 8003670:	601a      	str	r2, [r3, #0]

  				  					}break;
 8003672:	e04c      	b.n	800370e <TIM2_IRQHandler+0x2e2>
 8003674:	20000868 	.word	0x20000868
 8003678:	20000800 	.word	0x20000800
 800367c:	40020800 	.word	0x40020800
 8003680:	20000244 	.word	0x20000244
 8003684:	4090ac29 	.word	0x4090ac29
 8003688:	20000810 	.word	0x20000810
 800368c:	2000022c 	.word	0x2000022c
 8003690:	2000068c 	.word	0x2000068c
 8003694:	20000224 	.word	0x20000224
 8003698:	2000076c 	.word	0x2000076c
 800369c:	51eb851f 	.word	0x51eb851f
 80036a0:	20000228 	.word	0x20000228
 80036a4:	20000490 	.word	0x20000490
 80036a8:	20000824 	.word	0x20000824
 80036ac:	20000554 	.word	0x20000554
 80036b0:	20000790 	.word	0x20000790
 80036b4:	200002e4 	.word	0x200002e4
 80036b8:	20000820 	.word	0x20000820
 80036bc:	2000049c 	.word	0x2000049c
 80036c0:	20000754 	.word	0x20000754
 80036c4:	20000464 	.word	0x20000464
 80036c8:	20000680 	.word	0x20000680
 80036cc:	200002e8 	.word	0x200002e8
 80036d0:	20000808 	.word	0x20000808
 80036d4:	20000000 	.word	0x20000000
 80036d8:	2000021b 	.word	0x2000021b
 80036dc:	200002ec 	.word	0x200002ec
 80036e0:	20000684 	.word	0x20000684
 80036e4:	20000494 	.word	0x20000494
 80036e8:	20000488 	.word	0x20000488
 80036ec:	2000054c 	.word	0x2000054c
 80036f0:	200002e0 	.word	0x200002e0
 80036f4:	200004f4 	.word	0x200004f4
 80036f8:	20000550 	.word	0x20000550
 80036fc:	2000066c 	.word	0x2000066c
 8003700:	2000080c 	.word	0x2000080c
 8003704:	20000774 	.word	0x20000774
 8003708:	20000758 	.word	0x20000758
  									}break;
 800370c:	bf00      	nop


  			}


  			if(MSGSelector==COMMPARAMACTIVE)//save values in active structure
 800370e:	4bb4      	ldr	r3, [pc, #720]	; (80039e0 <TIM2_IRQHandler+0x5b4>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	f040 8138 	bne.w	8003988 <TIM2_IRQHandler+0x55c>
  			{
  				switch(ParamSelector)
 8003718:	4bb2      	ldr	r3, [pc, #712]	; (80039e4 <TIM2_IRQHandler+0x5b8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3b01      	subs	r3, #1
 800371e:	2b13      	cmp	r3, #19
 8003720:	f200 8132 	bhi.w	8003988 <TIM2_IRQHandler+0x55c>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <TIM2_IRQHandler+0x300>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	0800377d 	.word	0x0800377d
 8003730:	08003799 	.word	0x08003799
 8003734:	080037b5 	.word	0x080037b5
 8003738:	080037d1 	.word	0x080037d1
 800373c:	080037ed 	.word	0x080037ed
 8003740:	08003809 	.word	0x08003809
 8003744:	08003825 	.word	0x08003825
 8003748:	08003841 	.word	0x08003841
 800374c:	0800385d 	.word	0x0800385d
 8003750:	08003879 	.word	0x08003879
 8003754:	0800388f 	.word	0x0800388f
 8003758:	080038a5 	.word	0x080038a5
 800375c:	080038bb 	.word	0x080038bb
 8003760:	080038d1 	.word	0x080038d1
 8003764:	080038e7 	.word	0x080038e7
 8003768:	080038fd 	.word	0x080038fd
 800376c:	08003919 	.word	0x08003919
 8003770:	08003935 	.word	0x08003935
 8003774:	08003951 	.word	0x08003951
 8003778:	0800396d 	.word	0x0800396d
  				{
					case  PARAM1 :{FlashDataActive.pid_p_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 800377c:	4b9a      	ldr	r3, [pc, #616]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	ee07 3a90 	vmov	s15, r3
 8003784:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003788:	eddf 6a98 	vldr	s13, [pc, #608]	; 80039ec <TIM2_IRQHandler+0x5c0>
 800378c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003790:	4b97      	ldr	r3, [pc, #604]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 8003792:	edc3 7a01 	vstr	s15, [r3, #4]
 8003796:	e0f7      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM2 :{FlashDataActive.pid_i_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003798:	4b93      	ldr	r3, [pc, #588]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	ee07 3a90 	vmov	s15, r3
 80037a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037a4:	eddf 6a91 	vldr	s13, [pc, #580]	; 80039ec <TIM2_IRQHandler+0x5c0>
 80037a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037ac:	4b90      	ldr	r3, [pc, #576]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 80037ae:	edc3 7a02 	vstr	s15, [r3, #8]
 80037b2:	e0e9      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM3 :{FlashDataActive.pid_d_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80037b4:	4b8c      	ldr	r3, [pc, #560]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	ee07 3a90 	vmov	s15, r3
 80037bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037c0:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80039ec <TIM2_IRQHandler+0x5c0>
 80037c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037c8:	4b89      	ldr	r3, [pc, #548]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 80037ca:	edc3 7a03 	vstr	s15, [r3, #12]
 80037ce:	e0db      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM4 :{FlashDataActive.pid_p_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80037d0:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037dc:	eddf 6a83 	vldr	s13, [pc, #524]	; 80039ec <TIM2_IRQHandler+0x5c0>
 80037e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037e4:	4b82      	ldr	r3, [pc, #520]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 80037e6:	edc3 7a04 	vstr	s15, [r3, #16]
 80037ea:	e0cd      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM5 :{FlashDataActive.pid_i_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80037ec:	4b7e      	ldr	r3, [pc, #504]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	ee07 3a90 	vmov	s15, r3
 80037f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037f8:	eddf 6a7c 	vldr	s13, [pc, #496]	; 80039ec <TIM2_IRQHandler+0x5c0>
 80037fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003800:	4b7b      	ldr	r3, [pc, #492]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 8003802:	edc3 7a05 	vstr	s15, [r3, #20]
 8003806:	e0bf      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM6 :{FlashDataActive.pid_d_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003808:	4b77      	ldr	r3, [pc, #476]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003814:	eddf 6a75 	vldr	s13, [pc, #468]	; 80039ec <TIM2_IRQHandler+0x5c0>
 8003818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800381c:	4b74      	ldr	r3, [pc, #464]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 800381e:	edc3 7a06 	vstr	s15, [r3, #24]
 8003822:	e0b1      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM7 :{FlashDataActive.pid_p_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003824:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003830:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80039ec <TIM2_IRQHandler+0x5c0>
 8003834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003838:	4b6d      	ldr	r3, [pc, #436]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 800383a:	edc3 7a07 	vstr	s15, [r3, #28]
 800383e:	e0a3      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM8 :{FlashDataActive.pid_i_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003840:	4b69      	ldr	r3, [pc, #420]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	ee07 3a90 	vmov	s15, r3
 8003848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800384c:	eddf 6a67 	vldr	s13, [pc, #412]	; 80039ec <TIM2_IRQHandler+0x5c0>
 8003850:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003854:	4b66      	ldr	r3, [pc, #408]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 8003856:	edc3 7a08 	vstr	s15, [r3, #32]
 800385a:	e095      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM9 :{FlashDataActive.pid_d_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 800385c:	4b62      	ldr	r3, [pc, #392]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003868:	eddf 6a60 	vldr	s13, [pc, #384]	; 80039ec <TIM2_IRQHandler+0x5c0>
 800386c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003870:	4b5f      	ldr	r3, [pc, #380]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 8003872:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8003876:	e087      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM10 :{FlashDataActive.pid_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8003878:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	4a5d      	ldr	r2, [pc, #372]	; (80039f4 <TIM2_IRQHandler+0x5c8>)
 8003880:	fba2 2303 	umull	r2, r3, r2, r3
 8003884:	09db      	lsrs	r3, r3, #7
 8003886:	461a      	mov	r2, r3
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
 800388c:	e07c      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM11 :{FlashDataActive.pid_i_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 800388e:	4b56      	ldr	r3, [pc, #344]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	4a57      	ldr	r2, [pc, #348]	; (80039f4 <TIM2_IRQHandler+0x5c8>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	09db      	lsrs	r3, r3, #7
 800389c:	461a      	mov	r2, r3
 800389e:	4b54      	ldr	r3, [pc, #336]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 80038a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80038a2:	e071      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM12 :{FlashDataActive.pid_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 80038a4:	4b50      	ldr	r3, [pc, #320]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	4a52      	ldr	r2, [pc, #328]	; (80039f4 <TIM2_IRQHandler+0x5c8>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	09db      	lsrs	r3, r3, #7
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b4e      	ldr	r3, [pc, #312]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
 80038b8:	e066      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM13 :{FlashDataActive.pid_i_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 80038ba:	4b4b      	ldr	r3, [pc, #300]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	4a4c      	ldr	r2, [pc, #304]	; (80039f4 <TIM2_IRQHandler+0x5c8>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	09db      	lsrs	r3, r3, #7
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 80038cc:	635a      	str	r2, [r3, #52]	; 0x34
 80038ce:	e05b      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM14 :{FlashDataActive.pid_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 80038d0:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	4a47      	ldr	r2, [pc, #284]	; (80039f4 <TIM2_IRQHandler+0x5c8>)
 80038d8:	fba2 2303 	umull	r2, r3, r2, r3
 80038dc:	09db      	lsrs	r3, r3, #7
 80038de:	461a      	mov	r2, r3
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 80038e2:	639a      	str	r2, [r3, #56]	; 0x38
 80038e4:	e050      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM15 :{FlashDataActive.pid_i_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 80038e6:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	4a41      	ldr	r2, [pc, #260]	; (80039f4 <TIM2_IRQHandler+0x5c8>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	09db      	lsrs	r3, r3, #7
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 80038f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80038fa:	e045      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM16 :{FlashDataActive.maxpitchdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80038fc:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003908:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039ec <TIM2_IRQHandler+0x5c0>
 800390c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003910:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 8003912:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8003916:	e037      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM17 :{FlashDataActive.maxrolldegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003918:	4b33      	ldr	r3, [pc, #204]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	ee07 3a90 	vmov	s15, r3
 8003920:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003924:	eddf 6a31 	vldr	s13, [pc, #196]	; 80039ec <TIM2_IRQHandler+0x5c0>
 8003928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800392c:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 800392e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8003932:	e029      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM18 :{FlashDataActive.maxyawdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003934:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003940:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80039ec <TIM2_IRQHandler+0x5c0>
 8003944:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003948:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 800394a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 800394e:	e01b      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM19 :{FlashDataActive.minthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003950:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800395c:	eddf 6a23 	vldr	s13, [pc, #140]	; 80039ec <TIM2_IRQHandler+0x5c0>
 8003960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003964:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 8003966:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 800396a:	e00d      	b.n	8003988 <TIM2_IRQHandler+0x55c>
					case  PARAM20 :{FlashDataActive.maxthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <TIM2_IRQHandler+0x5bc>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	ee07 3a90 	vmov	s15, r3
 8003974:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003978:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80039ec <TIM2_IRQHandler+0x5c0>
 800397c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003980:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 8003982:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8003986:	bf00      	nop
  				}
  			}



  			SendBackFlag=1;
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <TIM2_IRQHandler+0x5cc>)
 800398a:	2201      	movs	r2, #1
 800398c:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <TIM2_IRQHandler+0x5d0>)
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 8003994:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <TIM2_IRQHandler+0x5d4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	4a19      	ldr	r2, [pc, #100]	; (8003a00 <TIM2_IRQHandler+0x5d4>)
 800399c:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 800399e:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <TIM2_IRQHandler+0x5cc>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 82aa 	beq.w	8003efc <TIM2_IRQHandler+0xad0>
  {
    	BackTimer++;
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <TIM2_IRQHandler+0x5d8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3301      	adds	r3, #1
 80039ae:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <TIM2_IRQHandler+0x5d8>)
 80039b0:	6013      	str	r3, [r2, #0]

    	//Calculate param for transfer
    	 if(MSGSelector==COMMPARAMACTIVE || MSGSelector==COMMPARAMFLASH)
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <TIM2_IRQHandler+0x5b4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d004      	beq.n	80039c4 <TIM2_IRQHandler+0x598>
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <TIM2_IRQHandler+0x5b4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	f040 8158 	bne.w	8003c74 <TIM2_IRQHandler+0x848>
    	 {
    		 if(MSGSelector==COMMPARAMACTIVE)FlashDataTemp=FlashDataActive;
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <TIM2_IRQHandler+0x5b4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d11f      	bne.n	8003a0c <TIM2_IRQHandler+0x5e0>
 80039cc:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <TIM2_IRQHandler+0x5dc>)
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <TIM2_IRQHandler+0x5c4>)
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	2354      	movs	r3, #84	; 0x54
 80039d6:	461a      	mov	r2, r3
 80039d8:	f004 fa2c 	bl	8007e34 <memcpy>
 80039dc:	e01e      	b.n	8003a1c <TIM2_IRQHandler+0x5f0>
 80039de:	bf00      	nop
 80039e0:	20000684 	.word	0x20000684
 80039e4:	20000774 	.word	0x20000774
 80039e8:	20000758 	.word	0x20000758
 80039ec:	47c35000 	.word	0x47c35000
 80039f0:	200004a0 	.word	0x200004a0
 80039f4:	0a7c5ac5 	.word	0x0a7c5ac5
 80039f8:	20000230 	.word	0x20000230
 80039fc:	20000000 	.word	0x20000000
 8003a00:	2000067c 	.word	0x2000067c
 8003a04:	20000234 	.word	0x20000234
 8003a08:	200007a0 	.word	0x200007a0
    		 else FlashDataTemp=FlashDataFlash;
 8003a0c:	4ab5      	ldr	r2, [pc, #724]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003a0e:	4bb6      	ldr	r3, [pc, #728]	; (8003ce8 <TIM2_IRQHandler+0x8bc>)
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	2354      	movs	r3, #84	; 0x54
 8003a16:	461a      	mov	r2, r3
 8003a18:	f004 fa0c 	bl	8007e34 <memcpy>

    		 switch(ParamSelector)
 8003a1c:	4bb3      	ldr	r3, [pc, #716]	; (8003cec <TIM2_IRQHandler+0x8c0>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3b01      	subs	r3, #1
 8003a22:	2b13      	cmp	r3, #19
 8003a24:	f200 8126 	bhi.w	8003c74 <TIM2_IRQHandler+0x848>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <TIM2_IRQHandler+0x604>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003a9d 	.word	0x08003a9d
 8003a38:	08003ab9 	.word	0x08003ab9
 8003a3c:	08003ad5 	.word	0x08003ad5
 8003a40:	08003af1 	.word	0x08003af1
 8003a44:	08003b0d 	.word	0x08003b0d
 8003a48:	08003b29 	.word	0x08003b29
 8003a4c:	08003b45 	.word	0x08003b45
 8003a50:	08003b61 	.word	0x08003b61
 8003a54:	08003b7d 	.word	0x08003b7d
 8003a58:	08003b8f 	.word	0x08003b8f
 8003a5c:	08003ba1 	.word	0x08003ba1
 8003a60:	08003bb3 	.word	0x08003bb3
 8003a64:	08003bc5 	.word	0x08003bc5
 8003a68:	08003bd7 	.word	0x08003bd7
 8003a6c:	08003be9 	.word	0x08003be9
 8003a70:	08003c05 	.word	0x08003c05
 8003a74:	08003c21 	.word	0x08003c21
 8003a78:	08003c3d 	.word	0x08003c3d
 8003a7c:	08003c59 	.word	0x08003c59
    		 {
    	 	 	 case PARAM1: {ParamDataTX=FlashDataTemp.pid_p_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8003a80:	4b98      	ldr	r3, [pc, #608]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003a82:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a86:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a92:	ee17 2a90 	vmov	r2, s15
 8003a96:	4b97      	ldr	r3, [pc, #604]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e0eb      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM2: {ParamDataTX=FlashDataTemp.pid_i_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8003a9c:	4b91      	ldr	r3, [pc, #580]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003a9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003aa2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aae:	ee17 2a90 	vmov	r2, s15
 8003ab2:	4b90      	ldr	r3, [pc, #576]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e0dd      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM3: {ParamDataTX=FlashDataTemp.pid_d_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8003ab8:	4b8a      	ldr	r3, [pc, #552]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003aba:	edd3 7a03 	vldr	s15, [r3, #12]
 8003abe:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aca:	ee17 2a90 	vmov	r2, s15
 8003ace:	4b89      	ldr	r3, [pc, #548]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e0cf      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM4: {ParamDataTX=FlashDataTemp.pid_p_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8003ad4:	4b83      	ldr	r3, [pc, #524]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003ad6:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ada:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae6:	ee17 2a90 	vmov	r2, s15
 8003aea:	4b82      	ldr	r3, [pc, #520]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e0c1      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM5: {ParamDataTX=FlashDataTemp.pid_i_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8003af0:	4b7c      	ldr	r3, [pc, #496]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003af2:	edd3 7a05 	vldr	s15, [r3, #20]
 8003af6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003afa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b02:	ee17 2a90 	vmov	r2, s15
 8003b06:	4b7b      	ldr	r3, [pc, #492]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	e0b3      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM6: {ParamDataTX=FlashDataTemp.pid_d_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8003b0c:	4b75      	ldr	r3, [pc, #468]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003b0e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b12:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b1e:	ee17 2a90 	vmov	r2, s15
 8003b22:	4b74      	ldr	r3, [pc, #464]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e0a5      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM7: {ParamDataTX=FlashDataTemp.pid_p_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8003b28:	4b6e      	ldr	r3, [pc, #440]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003b2a:	edd3 7a07 	vldr	s15, [r3, #28]
 8003b2e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b3a:	ee17 2a90 	vmov	r2, s15
 8003b3e:	4b6d      	ldr	r3, [pc, #436]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e097      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM8: {ParamDataTX=FlashDataTemp.pid_i_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8003b44:	4b67      	ldr	r3, [pc, #412]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003b46:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b4a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b56:	ee17 2a90 	vmov	r2, s15
 8003b5a:	4b66      	ldr	r3, [pc, #408]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e089      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM9: {ParamDataTX=FlashDataTemp.pid_d_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8003b60:	4b60      	ldr	r3, [pc, #384]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003b62:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003b66:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b72:	ee17 2a90 	vmov	r2, s15
 8003b76:	4b5f      	ldr	r3, [pc, #380]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e07b      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM10: {ParamDataTX=FlashDataTemp.pid_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8003b7c:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	4a5d      	ldr	r2, [pc, #372]	; (8003cf8 <TIM2_IRQHandler+0x8cc>)
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b5a      	ldr	r3, [pc, #360]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	e072      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM11: {ParamDataTX=FlashDataTemp.pid_i_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8003b8e:	4b55      	ldr	r3, [pc, #340]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	4a59      	ldr	r2, [pc, #356]	; (8003cf8 <TIM2_IRQHandler+0x8cc>)
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b56      	ldr	r3, [pc, #344]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	e069      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM12: {ParamDataTX=FlashDataTemp.pid_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8003ba0:	4b50      	ldr	r3, [pc, #320]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	4a54      	ldr	r2, [pc, #336]	; (8003cf8 <TIM2_IRQHandler+0x8cc>)
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b51      	ldr	r3, [pc, #324]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e060      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM13: {ParamDataTX=FlashDataTemp.pid_i_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8003bb2:	4b4c      	ldr	r3, [pc, #304]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	4a50      	ldr	r2, [pc, #320]	; (8003cf8 <TIM2_IRQHandler+0x8cc>)
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b4d      	ldr	r3, [pc, #308]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e057      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM14: {ParamDataTX=FlashDataTemp.pid_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8003bc4:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	4a4b      	ldr	r2, [pc, #300]	; (8003cf8 <TIM2_IRQHandler+0x8cc>)
 8003bca:	fb02 f303 	mul.w	r3, r2, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b48      	ldr	r3, [pc, #288]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e04e      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM15: {ParamDataTX=FlashDataTemp.pid_i_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8003bd6:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	4a47      	ldr	r2, [pc, #284]	; (8003cf8 <TIM2_IRQHandler+0x8cc>)
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	4b44      	ldr	r3, [pc, #272]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e045      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM16: {ParamDataTX=FlashDataTemp.maxpitchdegree*FLASHCONSTANTMULTIPLIER;}break;
 8003be8:	4b3e      	ldr	r3, [pc, #248]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003bea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8003bee:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfa:	ee17 2a90 	vmov	r2, s15
 8003bfe:	4b3d      	ldr	r3, [pc, #244]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e037      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM17: {ParamDataTX=FlashDataTemp.maxrolldegree*FLASHCONSTANTMULTIPLIER;}break;
 8003c04:	4b37      	ldr	r3, [pc, #220]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003c06:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003c0a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c16:	ee17 2a90 	vmov	r2, s15
 8003c1a:	4b36      	ldr	r3, [pc, #216]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e029      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM18: {ParamDataTX=FlashDataTemp.maxyawdegree*FLASHCONSTANTMULTIPLIER;}break;
 8003c20:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003c22:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003c26:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c32:	ee17 2a90 	vmov	r2, s15
 8003c36:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e01b      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM19: {ParamDataTX=FlashDataTemp.minthrottle*FLASHCONSTANTMULTIPLIER;}break;
 8003c3c:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003c3e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003c42:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003c46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4e:	ee17 2a90 	vmov	r2, s15
 8003c52:	4b28      	ldr	r3, [pc, #160]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e00d      	b.n	8003c74 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM20: {ParamDataTX=FlashDataTemp.maxthrottle*FLASHCONSTANTMULTIPLIER;}break;
 8003c58:	4b22      	ldr	r3, [pc, #136]	; (8003ce4 <TIM2_IRQHandler+0x8b8>)
 8003c5a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003c5e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8003cf0 <TIM2_IRQHandler+0x8c4>
 8003c62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c6a:	ee17 2a90 	vmov	r2, s15
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <TIM2_IRQHandler+0x8c8>)
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	bf00      	nop
    		 }
    	 }

      	switch(BackTimer)
 8003c74:	4b21      	ldr	r3, [pc, #132]	; (8003cfc <TIM2_IRQHandler+0x8d0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	f200 813e 	bhi.w	8003efc <TIM2_IRQHandler+0xad0>
 8003c80:	a201      	add	r2, pc, #4	; (adr r2, 8003c88 <TIM2_IRQHandler+0x85c>)
 8003c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c86:	bf00      	nop
 8003c88:	08003ca1 	.word	0x08003ca1
 8003c8c:	08003efd 	.word	0x08003efd
 8003c90:	08003efd 	.word	0x08003efd
 8003c94:	08003cb5 	.word	0x08003cb5
 8003c98:	08003ed5 	.word	0x08003ed5
 8003c9c:	08003ee9 	.word	0x08003ee9
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ca6:	4816      	ldr	r0, [pc, #88]	; (8003d00 <TIM2_IRQHandler+0x8d4>)
 8003ca8:	f001 fac6 	bl	8005238 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8003cac:	2000      	movs	r0, #0
 8003cae:	f7ff f82c 	bl	8002d0a <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8003cb2:	e123      	b.n	8003efc <TIM2_IRQHandler+0xad0>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 	 		 nRF24_payloadTX[0] = MSGSelector;
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <TIM2_IRQHandler+0x8d8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <TIM2_IRQHandler+0x8dc>)
 8003cbc:	701a      	strb	r2, [r3, #0]

  	 	 	 		switch(MSGSelector)
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <TIM2_IRQHandler+0x8d8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	f200 8101 	bhi.w	8003eca <TIM2_IRQHandler+0xa9e>
 8003cc8:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <TIM2_IRQHandler+0x8a4>)
 8003cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cce:	bf00      	nop
 8003cd0:	08003d0d 	.word	0x08003d0d
 8003cd4:	08003e57 	.word	0x08003e57
 8003cd8:	08003e91 	.word	0x08003e91
 8003cdc:	08003e07 	.word	0x08003e07
 8003ce0:	08003e2f 	.word	0x08003e2f
 8003ce4:	200007a0 	.word	0x200007a0
 8003ce8:	200004f8 	.word	0x200004f8
 8003cec:	20000774 	.word	0x20000774
 8003cf0:	47c35000 	.word	0x47c35000
 8003cf4:	2000077c 	.word	0x2000077c
 8003cf8:	000186a0 	.word	0x000186a0
 8003cfc:	20000234 	.word	0x20000234
 8003d00:	40020400 	.word	0x40020400
 8003d04:	20000684 	.word	0x20000684
 8003d08:	20000468 	.word	0x20000468
  	 	 	 		{
  	 	 	 			case COMMCONTROLDATA:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = (uint8_t)(BattmVAVG & 0xFF);
 8003d0c:	4b9c      	ldr	r3, [pc, #624]	; (8003f80 <TIM2_IRQHandler+0xb54>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b9c      	ldr	r3, [pc, #624]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003d14:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 8003d16:	4b9a      	ldr	r3, [pc, #616]	; (8003f80 <TIM2_IRQHandler+0xb54>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4b99      	ldr	r3, [pc, #612]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003d20:	709a      	strb	r2, [r3, #2]

  	 	 	 								  	//save Angle for NRF24 transfer
  	 	 	 								  	if(mpuDataStr.Pitch<0)
 8003d22:	4b99      	ldr	r3, [pc, #612]	; (8003f88 <TIM2_IRQHandler+0xb5c>)
 8003d24:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d30:	d510      	bpl.n	8003d54 <TIM2_IRQHandler+0x928>
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=1;
 8003d32:	4b96      	ldr	r3, [pc, #600]	; (8003f8c <TIM2_IRQHandler+0xb60>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=mpuDataStr.Pitch*(-1);
 8003d38:	4b93      	ldr	r3, [pc, #588]	; (8003f88 <TIM2_IRQHandler+0xb5c>)
 8003d3a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003d3e:	eef1 7a67 	vneg.f32	s15, s15
 8003d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d46:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d4a:	793b      	ldrb	r3, [r7, #4]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	4b90      	ldr	r3, [pc, #576]	; (8003f90 <TIM2_IRQHandler+0xb64>)
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	e00d      	b.n	8003d70 <TIM2_IRQHandler+0x944>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=0;
 8003d54:	4b8d      	ldr	r3, [pc, #564]	; (8003f8c <TIM2_IRQHandler+0xb60>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=mpuDataStr.Pitch;
 8003d5a:	4b8b      	ldr	r3, [pc, #556]	; (8003f88 <TIM2_IRQHandler+0xb5c>)
 8003d5c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d64:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d68:	793b      	ldrb	r3, [r7, #4]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <TIM2_IRQHandler+0xb64>)
 8003d6e:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	if(mpuDataStr.Roll<0)
 8003d70:	4b85      	ldr	r3, [pc, #532]	; (8003f88 <TIM2_IRQHandler+0xb5c>)
 8003d72:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7e:	d510      	bpl.n	8003da2 <TIM2_IRQHandler+0x976>
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=1;
 8003d80:	4b84      	ldr	r3, [pc, #528]	; (8003f94 <TIM2_IRQHandler+0xb68>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=mpuDataStr.Roll*(-1);
 8003d86:	4b80      	ldr	r3, [pc, #512]	; (8003f88 <TIM2_IRQHandler+0xb5c>)
 8003d88:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003d8c:	eef1 7a67 	vneg.f32	s15, s15
 8003d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d94:	edc7 7a01 	vstr	s15, [r7, #4]
 8003d98:	793b      	ldrb	r3, [r7, #4]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	4b7e      	ldr	r3, [pc, #504]	; (8003f98 <TIM2_IRQHandler+0xb6c>)
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	e00d      	b.n	8003dbe <TIM2_IRQHandler+0x992>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=0;
 8003da2:	4b7c      	ldr	r3, [pc, #496]	; (8003f94 <TIM2_IRQHandler+0xb68>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=mpuDataStr.Roll;
 8003da8:	4b77      	ldr	r3, [pc, #476]	; (8003f88 <TIM2_IRQHandler+0xb5c>)
 8003daa:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8003dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db2:	edc7 7a01 	vstr	s15, [r7, #4]
 8003db6:	793b      	ldrb	r3, [r7, #4]
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	4b77      	ldr	r3, [pc, #476]	; (8003f98 <TIM2_IRQHandler+0xb6c>)
 8003dbc:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	nRF24_payloadTX[3] = (uint8_t)(AnglePitchNRF24);
 8003dbe:	4b74      	ldr	r3, [pc, #464]	; (8003f90 <TIM2_IRQHandler+0xb64>)
 8003dc0:	781a      	ldrb	r2, [r3, #0]
 8003dc2:	4b70      	ldr	r3, [pc, #448]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003dc4:	70da      	strb	r2, [r3, #3]
  	 	 	 								  	nRF24_payloadTX[4] = (uint8_t)(AngleRollNRF24);
 8003dc6:	4b74      	ldr	r3, [pc, #464]	; (8003f98 <TIM2_IRQHandler+0xb6c>)
 8003dc8:	781a      	ldrb	r2, [r3, #0]
 8003dca:	4b6e      	ldr	r3, [pc, #440]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003dcc:	711a      	strb	r2, [r3, #4]
  	 	 	 								  	nRF24_payloadTX[5] = (uint8_t)(AnglePitchDIR + (AngleRollDIR<<1) + (GyroCalibStatus<<2) + ((MotorStatus & 0x7)<<3) ); //1bit Pitch DIR, 1bit Roll DIR, 1 bit GyroCalinFlag, 3 bit MotorStatus
 8003dce:	4b71      	ldr	r3, [pc, #452]	; (8003f94 <TIM2_IRQHandler+0xb68>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	b2da      	uxtb	r2, r3
 8003dd6:	4b6d      	ldr	r3, [pc, #436]	; (8003f8c <TIM2_IRQHandler+0xb60>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	4413      	add	r3, r2
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <TIM2_IRQHandler+0xb70>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	4413      	add	r3, r2
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <TIM2_IRQHandler+0xb74>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	4b60      	ldr	r3, [pc, #384]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e02:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 8003e04:	e061      	b.n	8003eca <TIM2_IRQHandler+0xa9e>
  	 	 	 			case COMMERASEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 8003e06:	4b5f      	ldr	r3, [pc, #380]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2]=0;
 8003e0c:	4b5d      	ldr	r3, [pc, #372]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	709a      	strb	r2, [r3, #2]
  	 	 	 							  	 	nRF24_payloadTX[3]=0;
 8003e12:	4b5c      	ldr	r3, [pc, #368]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	70da      	strb	r2, [r3, #3]
  	 	 	 							  	 	nRF24_payloadTX[4]=0;
 8003e18:	4b5a      	ldr	r3, [pc, #360]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	711a      	strb	r2, [r3, #4]
  	 	 	 							  	 	nRF24_payloadTX[5]=0;
 8003e1e:	4b59      	ldr	r3, [pc, #356]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	715a      	strb	r2, [r3, #5]
  	 	 	 							  	 	FlashEraseTimeoutCount=FLASHOPERATIONTIMEOUT;//set timeout to prevent multiple calls
 8003e24:	4b5f      	ldr	r3, [pc, #380]	; (8003fa4 <TIM2_IRQHandler+0xb78>)
 8003e26:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e2a:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 8003e2c:	e04d      	b.n	8003eca <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMWRITEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 8003e2e:	4b55      	ldr	r3, [pc, #340]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	705a      	strb	r2, [r3, #1]
  	 	 	 						  	 	  	nRF24_payloadTX[2]=0;
 8003e34:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	709a      	strb	r2, [r3, #2]
  	 	 	 						  	 	  	nRF24_payloadTX[3]=0;
 8003e3a:	4b52      	ldr	r3, [pc, #328]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	70da      	strb	r2, [r3, #3]
  	 	 	 						  	 	  	nRF24_payloadTX[4]=0;
 8003e40:	4b50      	ldr	r3, [pc, #320]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	711a      	strb	r2, [r3, #4]
  	 	 	 						  	 	  	nRF24_payloadTX[5]=0;
 8003e46:	4b4f      	ldr	r3, [pc, #316]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	715a      	strb	r2, [r3, #5]
  	 	 	 						  	 	  	FlashWriteTimeoutCount=FLASHOPERATIONTIMEOUT; //set timeout to prevent multiple calls
 8003e4c:	4b56      	ldr	r3, [pc, #344]	; (8003fa8 <TIM2_IRQHandler+0xb7c>)
 8003e4e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003e52:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 8003e54:	e039      	b.n	8003eca <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMPARAMACTIVE:
											{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 8003e56:	4b55      	ldr	r3, [pc, #340]	; (8003fac <TIM2_IRQHandler+0xb80>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	4b49      	ldr	r3, [pc, #292]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e5e:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 8003e60:	4b53      	ldr	r3, [pc, #332]	; (8003fb0 <TIM2_IRQHandler+0xb84>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	0e1b      	lsrs	r3, r3, #24
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	4b46      	ldr	r3, [pc, #280]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e6a:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 8003e6c:	4b50      	ldr	r3, [pc, #320]	; (8003fb0 <TIM2_IRQHandler+0xb84>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	4b43      	ldr	r3, [pc, #268]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e76:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 8003e78:	4b4d      	ldr	r3, [pc, #308]	; (8003fb0 <TIM2_IRQHandler+0xb84>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	0a1b      	lsrs	r3, r3, #8
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	4b40      	ldr	r3, [pc, #256]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e82:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8003e84:	4b4a      	ldr	r3, [pc, #296]	; (8003fb0 <TIM2_IRQHandler+0xb84>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e8c:	715a      	strb	r2, [r3, #5]
											}break;
 8003e8e:	e01c      	b.n	8003eca <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMPARAMFLASH:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 8003e90:	4b46      	ldr	r3, [pc, #280]	; (8003fac <TIM2_IRQHandler+0xb80>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4b3b      	ldr	r3, [pc, #236]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003e98:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 8003e9a:	4b45      	ldr	r3, [pc, #276]	; (8003fb0 <TIM2_IRQHandler+0xb84>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	0e1b      	lsrs	r3, r3, #24
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003ea4:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 8003ea6:	4b42      	ldr	r3, [pc, #264]	; (8003fb0 <TIM2_IRQHandler+0xb84>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	0c1b      	lsrs	r3, r3, #16
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003eb0:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 8003eb2:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <TIM2_IRQHandler+0xb84>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	0a1b      	lsrs	r3, r3, #8
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003ebc:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8003ebe:	4b3c      	ldr	r3, [pc, #240]	; (8003fb0 <TIM2_IRQHandler+0xb84>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003ec6:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 8003ec8:	bf00      	nop
  	 	 	 		}

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 6);
 8003eca:	2106      	movs	r1, #6
 8003ecc:	482d      	ldr	r0, [pc, #180]	; (8003f84 <TIM2_IRQHandler+0xb58>)
 8003ece:	f7fe fd49 	bl	8002964 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 8003ed2:	e013      	b.n	8003efc <TIM2_IRQHandler+0xad0>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	f7fe ff18 	bl	8002d0a <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 8003eda:	2201      	movs	r2, #1
 8003edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ee0:	4834      	ldr	r0, [pc, #208]	; (8003fb4 <TIM2_IRQHandler+0xb88>)
 8003ee2:	f001 f9a9 	bl	8005238 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 8003ee6:	e009      	b.n	8003efc <TIM2_IRQHandler+0xad0>

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 8003ee8:	4b33      	ldr	r3, [pc, #204]	; (8003fb8 <TIM2_IRQHandler+0xb8c>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8003eee:	4b33      	ldr	r3, [pc, #204]	; (8003fbc <TIM2_IRQHandler+0xb90>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <TIM2_IRQHandler+0xb94>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

  				}break;
 8003efa:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 8003efc:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <TIM2_IRQHandler+0xb98>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3301      	adds	r3, #1
 8003f02:	4a30      	ldr	r2, [pc, #192]	; (8003fc4 <TIM2_IRQHandler+0xb98>)
 8003f04:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <TIM2_IRQHandler+0xb98>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f0e:	d119      	bne.n	8003f44 <TIM2_IRQHandler+0xb18>
  {
    		MSGprerSecond=MSGcount;
 8003f10:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <TIM2_IRQHandler+0xb9c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a2d      	ldr	r2, [pc, #180]	; (8003fcc <TIM2_IRQHandler+0xba0>)
 8003f16:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8003f18:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <TIM2_IRQHandler+0xb9c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b09      	cmp	r3, #9
 8003f1e:	d808      	bhi.n	8003f32 <TIM2_IRQHandler+0xb06>
    		{
    			MSGLowCount++;
 8003f20:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <TIM2_IRQHandler+0xba4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	4a2a      	ldr	r2, [pc, #168]	; (8003fd0 <TIM2_IRQHandler+0xba4>)
 8003f28:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <TIM2_IRQHandler+0xba8>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	e002      	b.n	8003f38 <TIM2_IRQHandler+0xb0c>
    		}
    		 else  ConnectWeakFlag=0;
 8003f32:	4b28      	ldr	r3, [pc, #160]	; (8003fd4 <TIM2_IRQHandler+0xba8>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8003f38:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <TIM2_IRQHandler+0xb9c>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <TIM2_IRQHandler+0xb98>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  //MPU 9250
  watch1=TIM2->CNT;
 8003f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <TIM2_IRQHandler+0xbac>)
 8003f4c:	6013      	str	r3, [r2, #0]
  MPU9250_GetData(&mpuDataStr);
 8003f4e:	480e      	ldr	r0, [pc, #56]	; (8003f88 <TIM2_IRQHandler+0xb5c>)
 8003f50:	f7fd f9d4 	bl	80012fc <MPU9250_GetData>
  MPU_CalculateFromRAWData(&mpuDataStr,0.002);
 8003f54:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003fdc <TIM2_IRQHandler+0xbb0>
 8003f58:	480b      	ldr	r0, [pc, #44]	; (8003f88 <TIM2_IRQHandler+0xb5c>)
 8003f5a:	f7fd fa9d 	bl	8001498 <MPU_CalculateFromRAWData>
  watch2=TIM2->CNT;
 8003f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	4a1e      	ldr	r2, [pc, #120]	; (8003fe0 <TIM2_IRQHandler+0xbb4>)
 8003f66:	6013      	str	r3, [r2, #0]
  watch3=watch2-watch1;
 8003f68:	4b1d      	ldr	r3, [pc, #116]	; (8003fe0 <TIM2_IRQHandler+0xbb4>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <TIM2_IRQHandler+0xbac>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <TIM2_IRQHandler+0xbb8>)
 8003f74:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000228 	.word	0x20000228
 8003f84:	20000468 	.word	0x20000468
 8003f88:	2000030c 	.word	0x2000030c
 8003f8c:	20000768 	.word	0x20000768
 8003f90:	200007fc 	.word	0x200007fc
 8003f94:	20000794 	.word	0x20000794
 8003f98:	20000804 	.word	0x20000804
 8003f9c:	20000220 	.word	0x20000220
 8003fa0:	2000021c 	.word	0x2000021c
 8003fa4:	20000678 	.word	0x20000678
 8003fa8:	20000814 	.word	0x20000814
 8003fac:	20000774 	.word	0x20000774
 8003fb0:	2000077c 	.word	0x2000077c
 8003fb4:	40020400 	.word	0x40020400
 8003fb8:	20000000 	.word	0x20000000
 8003fbc:	20000230 	.word	0x20000230
 8003fc0:	20000234 	.word	0x20000234
 8003fc4:	20000664 	.word	0x20000664
 8003fc8:	2000067c 	.word	0x2000067c
 8003fcc:	20000760 	.word	0x20000760
 8003fd0:	2000075c 	.word	0x2000075c
 8003fd4:	2000079c 	.word	0x2000079c
 8003fd8:	200003fc 	.word	0x200003fc
 8003fdc:	3b03126f 	.word	0x3b03126f
 8003fe0:	200003f0 	.word	0x200003f0
 8003fe4:	20000498 	.word	0x20000498

08003fe8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <_sbrk+0x50>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d102      	bne.n	8003ffe <_sbrk+0x16>
		heap_end = &end;
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <_sbrk+0x50>)
 8003ffa:	4a10      	ldr	r2, [pc, #64]	; (800403c <_sbrk+0x54>)
 8003ffc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <_sbrk+0x50>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <_sbrk+0x50>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4413      	add	r3, r2
 800400c:	466a      	mov	r2, sp
 800400e:	4293      	cmp	r3, r2
 8004010:	d907      	bls.n	8004022 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004012:	f003 fee5 	bl	8007de0 <__errno>
 8004016:	4602      	mov	r2, r0
 8004018:	230c      	movs	r3, #12
 800401a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800401c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004020:	e006      	b.n	8004030 <_sbrk+0x48>
	}

	heap_end += incr;
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <_sbrk+0x50>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4413      	add	r3, r2
 800402a:	4a03      	ldr	r2, [pc, #12]	; (8004038 <_sbrk+0x50>)
 800402c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800402e:	68fb      	ldr	r3, [r7, #12]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	20000238 	.word	0x20000238
 800403c:	200008f0 	.word	0x200008f0

08004040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004044:	4b08      	ldr	r3, [pc, #32]	; (8004068 <SystemInit+0x28>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <SystemInit+0x28>)
 800404c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <SystemInit+0x28>)
 8004056:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800405a:	609a      	str	r2, [r3, #8]
#endif
}
 800405c:	bf00      	nop
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b096      	sub	sp, #88	; 0x58
 8004070:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004072:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004076:	2200      	movs	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004080:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800408a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	609a      	str	r2, [r3, #8]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	611a      	str	r2, [r3, #16]
 800409a:	615a      	str	r2, [r3, #20]
 800409c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	2220      	movs	r2, #32
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f003 fed0 	bl	8007e4a <memset>

  htim1.Instance = TIM1;
 80040aa:	4b51      	ldr	r3, [pc, #324]	; (80041f0 <MX_TIM1_Init+0x184>)
 80040ac:	4a51      	ldr	r2, [pc, #324]	; (80041f4 <MX_TIM1_Init+0x188>)
 80040ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80040b0:	4b4f      	ldr	r3, [pc, #316]	; (80041f0 <MX_TIM1_Init+0x184>)
 80040b2:	2253      	movs	r2, #83	; 0x53
 80040b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040b6:	4b4e      	ldr	r3, [pc, #312]	; (80041f0 <MX_TIM1_Init+0x184>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80040bc:	4b4c      	ldr	r3, [pc, #304]	; (80041f0 <MX_TIM1_Init+0x184>)
 80040be:	f644 6220 	movw	r2, #20000	; 0x4e20
 80040c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c4:	4b4a      	ldr	r3, [pc, #296]	; (80041f0 <MX_TIM1_Init+0x184>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80040ca:	4b49      	ldr	r3, [pc, #292]	; (80041f0 <MX_TIM1_Init+0x184>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040d0:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <MX_TIM1_Init+0x184>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80040d6:	4846      	ldr	r0, [pc, #280]	; (80041f0 <MX_TIM1_Init+0x184>)
 80040d8:	f002 fbaa 	bl	8006830 <HAL_TIM_Base_Init>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80040e2:	f7fe fc37 	bl	8002954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040f0:	4619      	mov	r1, r3
 80040f2:	483f      	ldr	r0, [pc, #252]	; (80041f0 <MX_TIM1_Init+0x184>)
 80040f4:	f002 fe20 	bl	8006d38 <HAL_TIM_ConfigClockSource>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80040fe:	f7fe fc29 	bl	8002954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004102:	483b      	ldr	r0, [pc, #236]	; (80041f0 <MX_TIM1_Init+0x184>)
 8004104:	f002 fbe3 	bl	80068ce <HAL_TIM_PWM_Init>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800410e:	f7fe fc21 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004112:	2300      	movs	r3, #0
 8004114:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004116:	2300      	movs	r3, #0
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800411a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800411e:	4619      	mov	r1, r3
 8004120:	4833      	ldr	r0, [pc, #204]	; (80041f0 <MX_TIM1_Init+0x184>)
 8004122:	f003 f9bf 	bl	80074a4 <HAL_TIMEx_MasterConfigSynchronization>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800412c:	f7fe fc12 	bl	8002954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004130:	2360      	movs	r3, #96	; 0x60
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8004134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800413a:	2300      	movs	r3, #0
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800413e:	2300      	movs	r3, #0
 8004140:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004142:	2304      	movs	r3, #4
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004146:	2300      	movs	r3, #0
 8004148:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800414e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004152:	2200      	movs	r2, #0
 8004154:	4619      	mov	r1, r3
 8004156:	4826      	ldr	r0, [pc, #152]	; (80041f0 <MX_TIM1_Init+0x184>)
 8004158:	f002 fd28 	bl	8006bac <HAL_TIM_PWM_ConfigChannel>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004162:	f7fe fbf7 	bl	8002954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800416a:	2204      	movs	r2, #4
 800416c:	4619      	mov	r1, r3
 800416e:	4820      	ldr	r0, [pc, #128]	; (80041f0 <MX_TIM1_Init+0x184>)
 8004170:	f002 fd1c 	bl	8006bac <HAL_TIM_PWM_ConfigChannel>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800417a:	f7fe fbeb 	bl	8002954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800417e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004182:	2208      	movs	r2, #8
 8004184:	4619      	mov	r1, r3
 8004186:	481a      	ldr	r0, [pc, #104]	; (80041f0 <MX_TIM1_Init+0x184>)
 8004188:	f002 fd10 	bl	8006bac <HAL_TIM_PWM_ConfigChannel>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8004192:	f7fe fbdf 	bl	8002954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800419a:	220c      	movs	r2, #12
 800419c:	4619      	mov	r1, r3
 800419e:	4814      	ldr	r0, [pc, #80]	; (80041f0 <MX_TIM1_Init+0x184>)
 80041a0:	f002 fd04 	bl	8006bac <HAL_TIM_PWM_ConfigChannel>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80041aa:	f7fe fbd3 	bl	8002954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80041cc:	1d3b      	adds	r3, r7, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4807      	ldr	r0, [pc, #28]	; (80041f0 <MX_TIM1_Init+0x184>)
 80041d2:	f003 f9d5 	bl	8007580 <HAL_TIMEx_ConfigBreakDeadTime>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80041dc:	f7fe fbba 	bl	8002954 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80041e0:	4803      	ldr	r0, [pc, #12]	; (80041f0 <MX_TIM1_Init+0x184>)
 80041e2:	f000 f891 	bl	8004308 <HAL_TIM_MspPostInit>

}
 80041e6:	bf00      	nop
 80041e8:	3758      	adds	r7, #88	; 0x58
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000828 	.word	0x20000828
 80041f4:	40010000 	.word	0x40010000

080041f8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041fe:	f107 0308 	add.w	r3, r7, #8
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800420c:	463b      	mov	r3, r7
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <MX_TIM2_Init+0x94>)
 8004216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800421a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <MX_TIM2_Init+0x94>)
 800421e:	2253      	movs	r2, #83	; 0x53
 8004220:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004222:	4b1a      	ldr	r3, [pc, #104]	; (800428c <MX_TIM2_Init+0x94>)
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8004228:	4b18      	ldr	r3, [pc, #96]	; (800428c <MX_TIM2_Init+0x94>)
 800422a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800422e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004230:	4b16      	ldr	r3, [pc, #88]	; (800428c <MX_TIM2_Init+0x94>)
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <MX_TIM2_Init+0x94>)
 8004238:	2280      	movs	r2, #128	; 0x80
 800423a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800423c:	4813      	ldr	r0, [pc, #76]	; (800428c <MX_TIM2_Init+0x94>)
 800423e:	f002 faf7 	bl	8006830 <HAL_TIM_Base_Init>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004248:	f7fe fb84 	bl	8002954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800424c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004250:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004252:	f107 0308 	add.w	r3, r7, #8
 8004256:	4619      	mov	r1, r3
 8004258:	480c      	ldr	r0, [pc, #48]	; (800428c <MX_TIM2_Init+0x94>)
 800425a:	f002 fd6d 	bl	8006d38 <HAL_TIM_ConfigClockSource>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004264:	f7fe fb76 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004268:	2300      	movs	r3, #0
 800426a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426c:	2300      	movs	r3, #0
 800426e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004270:	463b      	mov	r3, r7
 8004272:	4619      	mov	r1, r3
 8004274:	4805      	ldr	r0, [pc, #20]	; (800428c <MX_TIM2_Init+0x94>)
 8004276:	f003 f915 	bl	80074a4 <HAL_TIMEx_MasterConfigSynchronization>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004280:	f7fe fb68 	bl	8002954 <Error_Handler>
  }

}
 8004284:	bf00      	nop
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000868 	.word	0x20000868

08004290 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a18      	ldr	r2, [pc, #96]	; (8004300 <HAL_TIM_Base_MspInit+0x70>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10e      	bne.n	80042c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	4b17      	ldr	r3, [pc, #92]	; (8004304 <HAL_TIM_Base_MspInit+0x74>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	4a16      	ldr	r2, [pc, #88]	; (8004304 <HAL_TIM_Base_MspInit+0x74>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6453      	str	r3, [r2, #68]	; 0x44
 80042b2:	4b14      	ldr	r3, [pc, #80]	; (8004304 <HAL_TIM_Base_MspInit+0x74>)
 80042b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80042be:	e01a      	b.n	80042f6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c8:	d115      	bne.n	80042f6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <HAL_TIM_Base_MspInit+0x74>)
 80042d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d2:	4a0c      	ldr	r2, [pc, #48]	; (8004304 <HAL_TIM_Base_MspInit+0x74>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6413      	str	r3, [r2, #64]	; 0x40
 80042da:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <HAL_TIM_Base_MspInit+0x74>)
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80042e6:	2200      	movs	r2, #0
 80042e8:	2101      	movs	r1, #1
 80042ea:	201c      	movs	r0, #28
 80042ec:	f000 fdeb 	bl	8004ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80042f0:	201c      	movs	r0, #28
 80042f2:	f000 fe04 	bl	8004efe <HAL_NVIC_EnableIRQ>
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40023800 	.word	0x40023800

08004308 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004310:	f107 030c 	add.w	r3, r7, #12
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	609a      	str	r2, [r3, #8]
 800431c:	60da      	str	r2, [r3, #12]
 800431e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a12      	ldr	r2, [pc, #72]	; (8004370 <HAL_TIM_MspPostInit+0x68>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d11e      	bne.n	8004368 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	4b11      	ldr	r3, [pc, #68]	; (8004374 <HAL_TIM_MspPostInit+0x6c>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	4a10      	ldr	r2, [pc, #64]	; (8004374 <HAL_TIM_MspPostInit+0x6c>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6313      	str	r3, [r2, #48]	; 0x30
 800433a:	4b0e      	ldr	r3, [pc, #56]	; (8004374 <HAL_TIM_MspPostInit+0x6c>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	60bb      	str	r3, [r7, #8]
 8004344:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004346:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800434a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434c:	2302      	movs	r3, #2
 800434e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004358:	2301      	movs	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800435c:	f107 030c 	add.w	r3, r7, #12
 8004360:	4619      	mov	r1, r3
 8004362:	4805      	ldr	r0, [pc, #20]	; (8004378 <HAL_TIM_MspPostInit+0x70>)
 8004364:	f000 fde6 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004368:	bf00      	nop
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40010000 	.word	0x40010000
 8004374:	40023800 	.word	0x40023800
 8004378:	40020000 	.word	0x40020000

0800437c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <MX_USART1_UART_Init+0x4c>)
 8004382:	4a12      	ldr	r2, [pc, #72]	; (80043cc <MX_USART1_UART_Init+0x50>)
 8004384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8004386:	4b10      	ldr	r3, [pc, #64]	; (80043c8 <MX_USART1_UART_Init+0x4c>)
 8004388:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800438c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <MX_USART1_UART_Init+0x4c>)
 8004390:	2200      	movs	r2, #0
 8004392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <MX_USART1_UART_Init+0x4c>)
 8004396:	2200      	movs	r2, #0
 8004398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <MX_USART1_UART_Init+0x4c>)
 800439c:	2200      	movs	r2, #0
 800439e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <MX_USART1_UART_Init+0x4c>)
 80043a2:	220c      	movs	r2, #12
 80043a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <MX_USART1_UART_Init+0x4c>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <MX_USART1_UART_Init+0x4c>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043b2:	4805      	ldr	r0, [pc, #20]	; (80043c8 <MX_USART1_UART_Init+0x4c>)
 80043b4:	f003 f94a 	bl	800764c <HAL_UART_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80043be:	f7fe fac9 	bl	8002954 <Error_Handler>
  }

}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	200008a8 	.word	0x200008a8
 80043cc:	40011000 	.word	0x40011000

080043d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a19      	ldr	r2, [pc, #100]	; (8004454 <HAL_UART_MspInit+0x84>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d12b      	bne.n	800444a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	4b18      	ldr	r3, [pc, #96]	; (8004458 <HAL_UART_MspInit+0x88>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	4a17      	ldr	r2, [pc, #92]	; (8004458 <HAL_UART_MspInit+0x88>)
 80043fc:	f043 0310 	orr.w	r3, r3, #16
 8004400:	6453      	str	r3, [r2, #68]	; 0x44
 8004402:	4b15      	ldr	r3, [pc, #84]	; (8004458 <HAL_UART_MspInit+0x88>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	4b11      	ldr	r3, [pc, #68]	; (8004458 <HAL_UART_MspInit+0x88>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4a10      	ldr	r2, [pc, #64]	; (8004458 <HAL_UART_MspInit+0x88>)
 8004418:	f043 0302 	orr.w	r3, r3, #2
 800441c:	6313      	str	r3, [r2, #48]	; 0x30
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <HAL_UART_MspInit+0x88>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800442a:	23c0      	movs	r3, #192	; 0xc0
 800442c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442e:	2302      	movs	r3, #2
 8004430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004436:	2303      	movs	r3, #3
 8004438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800443a:	2307      	movs	r3, #7
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800443e:	f107 0314 	add.w	r3, r7, #20
 8004442:	4619      	mov	r1, r3
 8004444:	4805      	ldr	r0, [pc, #20]	; (800445c <HAL_UART_MspInit+0x8c>)
 8004446:	f000 fd75 	bl	8004f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800444a:	bf00      	nop
 800444c:	3728      	adds	r7, #40	; 0x28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40011000 	.word	0x40011000
 8004458:	40023800 	.word	0x40023800
 800445c:	40020400 	.word	0x40020400

08004460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004460:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004498 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004464:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004466:	e003      	b.n	8004470 <LoopCopyDataInit>

08004468 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800446a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800446c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800446e:	3104      	adds	r1, #4

08004470 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004470:	480b      	ldr	r0, [pc, #44]	; (80044a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004472:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004474:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004476:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004478:	d3f6      	bcc.n	8004468 <CopyDataInit>
  ldr  r2, =_sbss
 800447a:	4a0b      	ldr	r2, [pc, #44]	; (80044a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800447c:	e002      	b.n	8004484 <LoopFillZerobss>

0800447e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800447e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004480:	f842 3b04 	str.w	r3, [r2], #4

08004484 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004484:	4b09      	ldr	r3, [pc, #36]	; (80044ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004486:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004488:	d3f9      	bcc.n	800447e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800448a:	f7ff fdd9 	bl	8004040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800448e:	f003 fcad 	bl	8007dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004492:	f7fd fd15 	bl	8001ec0 <main>
  bx  lr    
 8004496:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004498:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800449c:	0800c0c8 	.word	0x0800c0c8
  ldr  r0, =_sdata
 80044a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80044a4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80044a8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80044ac:	200008f0 	.word	0x200008f0

080044b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044b0:	e7fe      	b.n	80044b0 <ADC_IRQHandler>
	...

080044b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <HAL_Init+0x40>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0d      	ldr	r2, [pc, #52]	; (80044f4 <HAL_Init+0x40>)
 80044be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_Init+0x40>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_Init+0x40>)
 80044ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044d0:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <HAL_Init+0x40>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a07      	ldr	r2, [pc, #28]	; (80044f4 <HAL_Init+0x40>)
 80044d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044dc:	2003      	movs	r0, #3
 80044de:	f000 fce7 	bl	8004eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044e2:	2002      	movs	r0, #2
 80044e4:	f000 f808 	bl	80044f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044e8:	f7fe ff4a 	bl	8003380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023c00 	.word	0x40023c00

080044f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004500:	4b12      	ldr	r3, [pc, #72]	; (800454c <HAL_InitTick+0x54>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b12      	ldr	r3, [pc, #72]	; (8004550 <HAL_InitTick+0x58>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	4619      	mov	r1, r3
 800450a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800450e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fcff 	bl	8004f1a <HAL_SYSTICK_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e00e      	b.n	8004544 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b0f      	cmp	r3, #15
 800452a:	d80a      	bhi.n	8004542 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800452c:	2200      	movs	r2, #0
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004534:	f000 fcc7 	bl	8004ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004538:	4a06      	ldr	r2, [pc, #24]	; (8004554 <HAL_InitTick+0x5c>)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	e000      	b.n	8004544 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000004 	.word	0x20000004
 8004550:	2000000c 	.word	0x2000000c
 8004554:	20000008 	.word	0x20000008

08004558 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <HAL_IncTick+0x20>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <HAL_IncTick+0x24>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4413      	add	r3, r2
 8004568:	4a04      	ldr	r2, [pc, #16]	; (800457c <HAL_IncTick+0x24>)
 800456a:	6013      	str	r3, [r2, #0]
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	2000000c 	.word	0x2000000c
 800457c:	200008e8 	.word	0x200008e8

08004580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  return uwTick;
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <HAL_GetTick+0x14>)
 8004586:	681b      	ldr	r3, [r3, #0]
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	200008e8 	.word	0x200008e8

08004598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045a0:	f7ff ffee 	bl	8004580 <HAL_GetTick>
 80045a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045b0:	d005      	beq.n	80045be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_Delay+0x40>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045be:	bf00      	nop
 80045c0:	f7ff ffde 	bl	8004580 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d8f7      	bhi.n	80045c0 <HAL_Delay+0x28>
  {
  }
}
 80045d0:	bf00      	nop
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	2000000c 	.word	0x2000000c

080045dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e033      	b.n	800465a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd fb0a 	bl	8001c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 0310 	and.w	r3, r3, #16
 8004616:	2b00      	cmp	r3, #0
 8004618:	d118      	bne.n	800464c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004622:	f023 0302 	bic.w	r3, r3, #2
 8004626:	f043 0202 	orr.w	r2, r3, #2
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa72 	bl	8004b18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
 800464a:	e001      	b.n	8004650 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_ADC_Start+0x1a>
 800467a:	2302      	movs	r3, #2
 800467c:	e08a      	b.n	8004794 <HAL_ADC_Start+0x130>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b01      	cmp	r3, #1
 8004692:	d018      	beq.n	80046c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046a4:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <HAL_ADC_Start+0x13c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a3e      	ldr	r2, [pc, #248]	; (80047a4 <HAL_ADC_Start+0x140>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	0c9a      	lsrs	r2, r3, #18
 80046b0:	4613      	mov	r3, r2
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	4413      	add	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80046b8:	e002      	b.n	80046c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	3b01      	subs	r3, #1
 80046be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f9      	bne.n	80046ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d15e      	bne.n	8004792 <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d007      	beq.n	8004706 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800470e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004712:	d106      	bne.n	8004722 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004718:	f023 0206 	bic.w	r2, r3, #6
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	645a      	str	r2, [r3, #68]	; 0x44
 8004720:	e002      	b.n	8004728 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <HAL_ADC_Start+0x144>)
 8004732:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800473c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10f      	bne.n	800476a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d11c      	bne.n	8004792 <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	e013      	b.n	8004792 <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a0f      	ldr	r2, [pc, #60]	; (80047ac <HAL_ADC_Start+0x148>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d10e      	bne.n	8004792 <HAL_ADC_Start+0x12e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d107      	bne.n	8004792 <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004790:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000004 	.word	0x20000004
 80047a4:	431bde83 	.word	0x431bde83
 80047a8:	40012300 	.word	0x40012300
 80047ac:	40012000 	.word	0x40012000

080047b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047cc:	d113      	bne.n	80047f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80047d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047dc:	d10b      	bne.n	80047f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e05c      	b.n	80048b0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80047f6:	f7ff fec3 	bl	8004580 <HAL_GetTick>
 80047fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047fc:	e01a      	b.n	8004834 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004804:	d016      	beq.n	8004834 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_ADC_PollForConversion+0x6c>
 800480c:	f7ff feb8 	bl	8004580 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d20b      	bcs.n	8004834 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004820:	f043 0204 	orr.w	r2, r3, #4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e03d      	b.n	80048b0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b02      	cmp	r3, #2
 8004840:	d1dd      	bne.n	80047fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f06f 0212 	mvn.w	r2, #18
 800484a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d123      	bne.n	80048ae <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800486a:	2b00      	cmp	r3, #0
 800486c:	d11f      	bne.n	80048ae <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004878:	2b00      	cmp	r3, #0
 800487a:	d006      	beq.n	800488a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004886:	2b00      	cmp	r3, #0
 8004888:	d111      	bne.n	80048ae <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d105      	bne.n	80048ae <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f043 0201 	orr.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
	...

080048d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b085      	sub	sp, #20
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x1c>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e105      	b.n	8004afc <HAL_ADC_ConfigChannel+0x228>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b09      	cmp	r3, #9
 80048fe:	d925      	bls.n	800494c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68d9      	ldr	r1, [r3, #12]
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	b29b      	uxth	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	3b1e      	subs	r3, #30
 8004916:	2207      	movs	r2, #7
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	43da      	mvns	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	400a      	ands	r2, r1
 8004924:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68d9      	ldr	r1, [r3, #12]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	4618      	mov	r0, r3
 8004938:	4603      	mov	r3, r0
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	4403      	add	r3, r0
 800493e:	3b1e      	subs	r3, #30
 8004940:	409a      	lsls	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	60da      	str	r2, [r3, #12]
 800494a:	e022      	b.n	8004992 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6919      	ldr	r1, [r3, #16]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	b29b      	uxth	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	4613      	mov	r3, r2
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	4413      	add	r3, r2
 8004960:	2207      	movs	r2, #7
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43da      	mvns	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	400a      	ands	r2, r1
 800496e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6919      	ldr	r1, [r3, #16]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	4618      	mov	r0, r3
 8004982:	4603      	mov	r3, r0
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4403      	add	r3, r0
 8004988:	409a      	lsls	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	430a      	orrs	r2, r1
 8004990:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b06      	cmp	r3, #6
 8004998:	d824      	bhi.n	80049e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	3b05      	subs	r3, #5
 80049ac:	221f      	movs	r2, #31
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43da      	mvns	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	400a      	ands	r2, r1
 80049ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	4618      	mov	r0, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	3b05      	subs	r3, #5
 80049d6:	fa00 f203 	lsl.w	r2, r0, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	635a      	str	r2, [r3, #52]	; 0x34
 80049e2:	e04c      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d824      	bhi.n	8004a36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	3b23      	subs	r3, #35	; 0x23
 80049fe:	221f      	movs	r2, #31
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43da      	mvns	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	400a      	ands	r2, r1
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	3b23      	subs	r3, #35	; 0x23
 8004a28:	fa00 f203 	lsl.w	r2, r0, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
 8004a34:	e023      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	3b41      	subs	r3, #65	; 0x41
 8004a48:	221f      	movs	r2, #31
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	43da      	mvns	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	400a      	ands	r2, r1
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	4618      	mov	r0, r3
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	3b41      	subs	r3, #65	; 0x41
 8004a72:	fa00 f203 	lsl.w	r2, r0, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a7e:	4b22      	ldr	r3, [pc, #136]	; (8004b08 <HAL_ADC_ConfigChannel+0x234>)
 8004a80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <HAL_ADC_ConfigChannel+0x238>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d109      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x1cc>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b12      	cmp	r3, #18
 8004a92:	d105      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <HAL_ADC_ConfigChannel+0x238>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d123      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x21e>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d003      	beq.n	8004aba <HAL_ADC_ConfigChannel+0x1e6>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b11      	cmp	r3, #17
 8004ab8:	d11b      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d111      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <HAL_ADC_ConfigChannel+0x23c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a10      	ldr	r2, [pc, #64]	; (8004b14 <HAL_ADC_ConfigChannel+0x240>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	0c9a      	lsrs	r2, r3, #18
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ae4:	e002      	b.n	8004aec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f9      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	40012300 	.word	0x40012300
 8004b0c:	40012000 	.word	0x40012000
 8004b10:	20000004 	.word	0x20000004
 8004b14:	431bde83 	.word	0x431bde83

08004b18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b20:	4b79      	ldr	r3, [pc, #484]	; (8004d08 <ADC_Init+0x1f0>)
 8004b22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6859      	ldr	r1, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	021a      	lsls	r2, r3, #8
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6899      	ldr	r1, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	4a58      	ldr	r2, [pc, #352]	; (8004d0c <ADC_Init+0x1f4>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d022      	beq.n	8004bf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6899      	ldr	r1, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6899      	ldr	r1, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	e00f      	b.n	8004c16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 0202 	bic.w	r2, r2, #2
 8004c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6899      	ldr	r1, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	7e1b      	ldrb	r3, [r3, #24]
 8004c30:	005a      	lsls	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01b      	beq.n	8004c7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6859      	ldr	r1, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	035a      	lsls	r2, r3, #13
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	e007      	b.n	8004c8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	051a      	lsls	r2, r3, #20
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6899      	ldr	r1, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cce:	025a      	lsls	r2, r3, #9
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6899      	ldr	r1, [r3, #8]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	029a      	lsls	r2, r3, #10
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]
}
 8004cfc:	bf00      	nop
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40012300 	.word	0x40012300
 8004d0c:	0f000001 	.word	0x0f000001

08004d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <__NVIC_SetPriorityGrouping+0x44>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d42:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <__NVIC_SetPriorityGrouping+0x44>)
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	60d3      	str	r3, [r2, #12]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	e000ed00 	.word	0xe000ed00

08004d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <__NVIC_GetPriorityGrouping+0x18>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	0a1b      	lsrs	r3, r3, #8
 8004d62:	f003 0307 	and.w	r3, r3, #7
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	e000ed00 	.word	0xe000ed00

08004d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	db0b      	blt.n	8004d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	f003 021f 	and.w	r2, r3, #31
 8004d8c:	4907      	ldr	r1, [pc, #28]	; (8004dac <__NVIC_EnableIRQ+0x38>)
 8004d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	2001      	movs	r0, #1
 8004d96:	fa00 f202 	lsl.w	r2, r0, r2
 8004d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	e000e100 	.word	0xe000e100

08004db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	4603      	mov	r3, r0
 8004db8:	6039      	str	r1, [r7, #0]
 8004dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	db0a      	blt.n	8004dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	490c      	ldr	r1, [pc, #48]	; (8004dfc <__NVIC_SetPriority+0x4c>)
 8004dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dce:	0112      	lsls	r2, r2, #4
 8004dd0:	b2d2      	uxtb	r2, r2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dd8:	e00a      	b.n	8004df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4908      	ldr	r1, [pc, #32]	; (8004e00 <__NVIC_SetPriority+0x50>)
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	3b04      	subs	r3, #4
 8004de8:	0112      	lsls	r2, r2, #4
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	440b      	add	r3, r1
 8004dee:	761a      	strb	r2, [r3, #24]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	e000e100 	.word	0xe000e100
 8004e00:	e000ed00 	.word	0xe000ed00

08004e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b089      	sub	sp, #36	; 0x24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f1c3 0307 	rsb	r3, r3, #7
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	bf28      	it	cs
 8004e22:	2304      	movcs	r3, #4
 8004e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	2b06      	cmp	r3, #6
 8004e2c:	d902      	bls.n	8004e34 <NVIC_EncodePriority+0x30>
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3b03      	subs	r3, #3
 8004e32:	e000      	b.n	8004e36 <NVIC_EncodePriority+0x32>
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43da      	mvns	r2, r3
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	401a      	ands	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	fa01 f303 	lsl.w	r3, r1, r3
 8004e56:	43d9      	mvns	r1, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e5c:	4313      	orrs	r3, r2
         );
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3724      	adds	r7, #36	; 0x24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
	...

08004e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e7c:	d301      	bcc.n	8004e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e00f      	b.n	8004ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <SysTick_Config+0x40>)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e8a:	210f      	movs	r1, #15
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e90:	f7ff ff8e 	bl	8004db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e94:	4b05      	ldr	r3, [pc, #20]	; (8004eac <SysTick_Config+0x40>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e9a:	4b04      	ldr	r3, [pc, #16]	; (8004eac <SysTick_Config+0x40>)
 8004e9c:	2207      	movs	r2, #7
 8004e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	e000e010 	.word	0xe000e010

08004eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff ff29 	bl	8004d10 <__NVIC_SetPriorityGrouping>
}
 8004ebe:	bf00      	nop
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	4603      	mov	r3, r0
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ed8:	f7ff ff3e 	bl	8004d58 <__NVIC_GetPriorityGrouping>
 8004edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	6978      	ldr	r0, [r7, #20]
 8004ee4:	f7ff ff8e 	bl	8004e04 <NVIC_EncodePriority>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff ff5d 	bl	8004db0 <__NVIC_SetPriority>
}
 8004ef6:	bf00      	nop
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	4603      	mov	r3, r0
 8004f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f7ff ff31 	bl	8004d74 <__NVIC_EnableIRQ>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7ff ffa2 	bl	8004e6c <SysTick_Config>
 8004f28:	4603      	mov	r3, r0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	e159      	b.n	8005204 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f50:	2201      	movs	r2, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4013      	ands	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	f040 8148 	bne.w	80051fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d00b      	beq.n	8004f8e <HAL_GPIO_Init+0x5a>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d007      	beq.n	8004f8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f82:	2b11      	cmp	r3, #17
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b12      	cmp	r3, #18
 8004f8c:	d130      	bne.n	8004ff0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	2203      	movs	r2, #3
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	f003 0201 	and.w	r2, r3, #1
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	4013      	ands	r3, r2
 8005006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	fa02 f303 	lsl.w	r3, r2, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4313      	orrs	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d003      	beq.n	8005030 <HAL_GPIO_Init+0xfc>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b12      	cmp	r3, #18
 800502e:	d123      	bne.n	8005078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	08da      	lsrs	r2, r3, #3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3208      	adds	r2, #8
 8005038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	220f      	movs	r2, #15
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	08da      	lsrs	r2, r3, #3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3208      	adds	r2, #8
 8005072:	69b9      	ldr	r1, [r7, #24]
 8005074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	2203      	movs	r2, #3
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f003 0203 	and.w	r2, r3, #3
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 80a2 	beq.w	80051fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ba:	2300      	movs	r3, #0
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	4b56      	ldr	r3, [pc, #344]	; (8005218 <HAL_GPIO_Init+0x2e4>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	4a55      	ldr	r2, [pc, #340]	; (8005218 <HAL_GPIO_Init+0x2e4>)
 80050c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050c8:	6453      	str	r3, [r2, #68]	; 0x44
 80050ca:	4b53      	ldr	r3, [pc, #332]	; (8005218 <HAL_GPIO_Init+0x2e4>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050d6:	4a51      	ldr	r2, [pc, #324]	; (800521c <HAL_GPIO_Init+0x2e8>)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	220f      	movs	r2, #15
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a48      	ldr	r2, [pc, #288]	; (8005220 <HAL_GPIO_Init+0x2ec>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d019      	beq.n	8005136 <HAL_GPIO_Init+0x202>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a47      	ldr	r2, [pc, #284]	; (8005224 <HAL_GPIO_Init+0x2f0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <HAL_GPIO_Init+0x1fe>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a46      	ldr	r2, [pc, #280]	; (8005228 <HAL_GPIO_Init+0x2f4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00d      	beq.n	800512e <HAL_GPIO_Init+0x1fa>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a45      	ldr	r2, [pc, #276]	; (800522c <HAL_GPIO_Init+0x2f8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <HAL_GPIO_Init+0x1f6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a44      	ldr	r2, [pc, #272]	; (8005230 <HAL_GPIO_Init+0x2fc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <HAL_GPIO_Init+0x1f2>
 8005122:	2304      	movs	r3, #4
 8005124:	e008      	b.n	8005138 <HAL_GPIO_Init+0x204>
 8005126:	2307      	movs	r3, #7
 8005128:	e006      	b.n	8005138 <HAL_GPIO_Init+0x204>
 800512a:	2303      	movs	r3, #3
 800512c:	e004      	b.n	8005138 <HAL_GPIO_Init+0x204>
 800512e:	2302      	movs	r3, #2
 8005130:	e002      	b.n	8005138 <HAL_GPIO_Init+0x204>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_GPIO_Init+0x204>
 8005136:	2300      	movs	r3, #0
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	f002 0203 	and.w	r2, r2, #3
 800513e:	0092      	lsls	r2, r2, #2
 8005140:	4093      	lsls	r3, r2
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	4313      	orrs	r3, r2
 8005146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005148:	4934      	ldr	r1, [pc, #208]	; (800521c <HAL_GPIO_Init+0x2e8>)
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	089b      	lsrs	r3, r3, #2
 800514e:	3302      	adds	r3, #2
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005156:	4b37      	ldr	r3, [pc, #220]	; (8005234 <HAL_GPIO_Init+0x300>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	43db      	mvns	r3, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4013      	ands	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800517a:	4a2e      	ldr	r2, [pc, #184]	; (8005234 <HAL_GPIO_Init+0x300>)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005180:	4b2c      	ldr	r3, [pc, #176]	; (8005234 <HAL_GPIO_Init+0x300>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	43db      	mvns	r3, r3
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	4013      	ands	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051a4:	4a23      	ldr	r2, [pc, #140]	; (8005234 <HAL_GPIO_Init+0x300>)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051aa:	4b22      	ldr	r3, [pc, #136]	; (8005234 <HAL_GPIO_Init+0x300>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	43db      	mvns	r3, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4013      	ands	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051ce:	4a19      	ldr	r2, [pc, #100]	; (8005234 <HAL_GPIO_Init+0x300>)
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051d4:	4b17      	ldr	r3, [pc, #92]	; (8005234 <HAL_GPIO_Init+0x300>)
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051f8:	4a0e      	ldr	r2, [pc, #56]	; (8005234 <HAL_GPIO_Init+0x300>)
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3301      	adds	r3, #1
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b0f      	cmp	r3, #15
 8005208:	f67f aea2 	bls.w	8004f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800520c:	bf00      	nop
 800520e:	3724      	adds	r7, #36	; 0x24
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40023800 	.word	0x40023800
 800521c:	40013800 	.word	0x40013800
 8005220:	40020000 	.word	0x40020000
 8005224:	40020400 	.word	0x40020400
 8005228:	40020800 	.word	0x40020800
 800522c:	40020c00 	.word	0x40020c00
 8005230:	40021000 	.word	0x40021000
 8005234:	40013c00 	.word	0x40013c00

08005238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	807b      	strh	r3, [r7, #2]
 8005244:	4613      	mov	r3, r2
 8005246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005248:	787b      	ldrb	r3, [r7, #1]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800524e:	887a      	ldrh	r2, [r7, #2]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005254:	e003      	b.n	800525e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005256:	887b      	ldrh	r3, [r7, #2]
 8005258:	041a      	lsls	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	619a      	str	r2, [r3, #24]
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	887b      	ldrh	r3, [r7, #2]
 800527c:	401a      	ands	r2, r3
 800527e:	887b      	ldrh	r3, [r7, #2]
 8005280:	429a      	cmp	r2, r3
 8005282:	d104      	bne.n	800528e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	041a      	lsls	r2, r3, #16
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800528c:	e002      	b.n	8005294 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	619a      	str	r2, [r3, #24]
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e11f      	b.n	80054f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fc fdb2 	bl	8001e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0201 	bic.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005304:	f000 fd18 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8005308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4a7b      	ldr	r2, [pc, #492]	; (80054fc <HAL_I2C_Init+0x25c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d807      	bhi.n	8005324 <HAL_I2C_Init+0x84>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4a7a      	ldr	r2, [pc, #488]	; (8005500 <HAL_I2C_Init+0x260>)
 8005318:	4293      	cmp	r3, r2
 800531a:	bf94      	ite	ls
 800531c:	2301      	movls	r3, #1
 800531e:	2300      	movhi	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	e006      	b.n	8005332 <HAL_I2C_Init+0x92>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4a77      	ldr	r2, [pc, #476]	; (8005504 <HAL_I2C_Init+0x264>)
 8005328:	4293      	cmp	r3, r2
 800532a:	bf94      	ite	ls
 800532c:	2301      	movls	r3, #1
 800532e:	2300      	movhi	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e0db      	b.n	80054f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a72      	ldr	r2, [pc, #456]	; (8005508 <HAL_I2C_Init+0x268>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	0c9b      	lsrs	r3, r3, #18
 8005344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a64      	ldr	r2, [pc, #400]	; (80054fc <HAL_I2C_Init+0x25c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d802      	bhi.n	8005374 <HAL_I2C_Init+0xd4>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	3301      	adds	r3, #1
 8005372:	e009      	b.n	8005388 <HAL_I2C_Init+0xe8>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	4a63      	ldr	r2, [pc, #396]	; (800550c <HAL_I2C_Init+0x26c>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	099b      	lsrs	r3, r3, #6
 8005386:	3301      	adds	r3, #1
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	430b      	orrs	r3, r1
 800538e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800539a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	4956      	ldr	r1, [pc, #344]	; (80054fc <HAL_I2C_Init+0x25c>)
 80053a4:	428b      	cmp	r3, r1
 80053a6:	d80d      	bhi.n	80053c4 <HAL_I2C_Init+0x124>
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1e59      	subs	r1, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80053b6:	3301      	adds	r3, #1
 80053b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053bc:	2b04      	cmp	r3, #4
 80053be:	bf38      	it	cc
 80053c0:	2304      	movcc	r3, #4
 80053c2:	e04f      	b.n	8005464 <HAL_I2C_Init+0x1c4>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d111      	bne.n	80053f0 <HAL_I2C_Init+0x150>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1e58      	subs	r0, r3, #1
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	440b      	add	r3, r1
 80053da:	fbb0 f3f3 	udiv	r3, r0, r3
 80053de:	3301      	adds	r3, #1
 80053e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	e012      	b.n	8005416 <HAL_I2C_Init+0x176>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1e58      	subs	r0, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	0099      	lsls	r1, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	fbb0 f3f3 	udiv	r3, r0, r3
 8005406:	3301      	adds	r3, #1
 8005408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_I2C_Init+0x17e>
 800541a:	2301      	movs	r3, #1
 800541c:	e022      	b.n	8005464 <HAL_I2C_Init+0x1c4>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10e      	bne.n	8005444 <HAL_I2C_Init+0x1a4>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1e58      	subs	r0, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	460b      	mov	r3, r1
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	440b      	add	r3, r1
 8005434:	fbb0 f3f3 	udiv	r3, r0, r3
 8005438:	3301      	adds	r3, #1
 800543a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800543e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005442:	e00f      	b.n	8005464 <HAL_I2C_Init+0x1c4>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	1e58      	subs	r0, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	0099      	lsls	r1, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	fbb0 f3f3 	udiv	r3, r0, r3
 800545a:	3301      	adds	r3, #1
 800545c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	6809      	ldr	r1, [r1, #0]
 8005468:	4313      	orrs	r3, r2
 800546a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69da      	ldr	r2, [r3, #28]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	6911      	ldr	r1, [r2, #16]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	68d2      	ldr	r2, [r2, #12]
 800549e:	4311      	orrs	r1, r2
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6812      	ldr	r2, [r2, #0]
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	000186a0 	.word	0x000186a0
 8005500:	001e847f 	.word	0x001e847f
 8005504:	003d08ff 	.word	0x003d08ff
 8005508:	431bde83 	.word	0x431bde83
 800550c:	10624dd3 	.word	0x10624dd3

08005510 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e25b      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d075      	beq.n	800561a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800552e:	4ba3      	ldr	r3, [pc, #652]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
 8005536:	2b04      	cmp	r3, #4
 8005538:	d00c      	beq.n	8005554 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800553a:	4ba0      	ldr	r3, [pc, #640]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005542:	2b08      	cmp	r3, #8
 8005544:	d112      	bne.n	800556c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005546:	4b9d      	ldr	r3, [pc, #628]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800554e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005552:	d10b      	bne.n	800556c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005554:	4b99      	ldr	r3, [pc, #612]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d05b      	beq.n	8005618 <HAL_RCC_OscConfig+0x108>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d157      	bne.n	8005618 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e236      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005574:	d106      	bne.n	8005584 <HAL_RCC_OscConfig+0x74>
 8005576:	4b91      	ldr	r3, [pc, #580]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a90      	ldr	r2, [pc, #576]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800557c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e01d      	b.n	80055c0 <HAL_RCC_OscConfig+0xb0>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800558c:	d10c      	bne.n	80055a8 <HAL_RCC_OscConfig+0x98>
 800558e:	4b8b      	ldr	r3, [pc, #556]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a8a      	ldr	r2, [pc, #552]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	4b88      	ldr	r3, [pc, #544]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a87      	ldr	r2, [pc, #540]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e00b      	b.n	80055c0 <HAL_RCC_OscConfig+0xb0>
 80055a8:	4b84      	ldr	r3, [pc, #528]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a83      	ldr	r2, [pc, #524]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	4b81      	ldr	r3, [pc, #516]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a80      	ldr	r2, [pc, #512]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d013      	beq.n	80055f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c8:	f7fe ffda 	bl	8004580 <HAL_GetTick>
 80055cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ce:	e008      	b.n	80055e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fe ffd6 	bl	8004580 <HAL_GetTick>
 80055d4:	4602      	mov	r2, r0
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	2b64      	cmp	r3, #100	; 0x64
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e1fb      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e2:	4b76      	ldr	r3, [pc, #472]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d0f0      	beq.n	80055d0 <HAL_RCC_OscConfig+0xc0>
 80055ee:	e014      	b.n	800561a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fe ffc6 	bl	8004580 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f8:	f7fe ffc2 	bl	8004580 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b64      	cmp	r3, #100	; 0x64
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e1e7      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800560a:	4b6c      	ldr	r3, [pc, #432]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0xe8>
 8005616:	e000      	b.n	800561a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	2b00      	cmp	r3, #0
 8005624:	d063      	beq.n	80056ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005626:	4b65      	ldr	r3, [pc, #404]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005632:	4b62      	ldr	r3, [pc, #392]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800563a:	2b08      	cmp	r3, #8
 800563c:	d11c      	bne.n	8005678 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800563e:	4b5f      	ldr	r3, [pc, #380]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d116      	bne.n	8005678 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800564a:	4b5c      	ldr	r3, [pc, #368]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_RCC_OscConfig+0x152>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d001      	beq.n	8005662 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e1bb      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005662:	4b56      	ldr	r3, [pc, #344]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4952      	ldr	r1, [pc, #328]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005672:	4313      	orrs	r3, r2
 8005674:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005676:	e03a      	b.n	80056ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d020      	beq.n	80056c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005680:	4b4f      	ldr	r3, [pc, #316]	; (80057c0 <HAL_RCC_OscConfig+0x2b0>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005686:	f7fe ff7b 	bl	8004580 <HAL_GetTick>
 800568a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800568e:	f7fe ff77 	bl	8004580 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e19c      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056a0:	4b46      	ldr	r3, [pc, #280]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ac:	4b43      	ldr	r3, [pc, #268]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	4940      	ldr	r1, [pc, #256]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	600b      	str	r3, [r1, #0]
 80056c0:	e015      	b.n	80056ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056c2:	4b3f      	ldr	r3, [pc, #252]	; (80057c0 <HAL_RCC_OscConfig+0x2b0>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fe ff5a 	bl	8004580 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056d0:	f7fe ff56 	bl	8004580 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e17b      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056e2:	4b36      	ldr	r3, [pc, #216]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1f0      	bne.n	80056d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0308 	and.w	r3, r3, #8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d030      	beq.n	800575c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d016      	beq.n	8005730 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005702:	4b30      	ldr	r3, [pc, #192]	; (80057c4 <HAL_RCC_OscConfig+0x2b4>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005708:	f7fe ff3a 	bl	8004580 <HAL_GetTick>
 800570c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005710:	f7fe ff36 	bl	8004580 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e15b      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005722:	4b26      	ldr	r3, [pc, #152]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0f0      	beq.n	8005710 <HAL_RCC_OscConfig+0x200>
 800572e:	e015      	b.n	800575c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005730:	4b24      	ldr	r3, [pc, #144]	; (80057c4 <HAL_RCC_OscConfig+0x2b4>)
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005736:	f7fe ff23 	bl	8004580 <HAL_GetTick>
 800573a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800573e:	f7fe ff1f 	bl	8004580 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e144      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005750:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f0      	bne.n	800573e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80a0 	beq.w	80058aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800576e:	4b13      	ldr	r3, [pc, #76]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10f      	bne.n	800579a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	4a0e      	ldr	r2, [pc, #56]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005788:	6413      	str	r3, [r2, #64]	; 0x40
 800578a:	4b0c      	ldr	r3, [pc, #48]	; (80057bc <HAL_RCC_OscConfig+0x2ac>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579a:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <HAL_RCC_OscConfig+0x2b8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d121      	bne.n	80057ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057a6:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <HAL_RCC_OscConfig+0x2b8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a07      	ldr	r2, [pc, #28]	; (80057c8 <HAL_RCC_OscConfig+0x2b8>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b2:	f7fe fee5 	bl	8004580 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b8:	e011      	b.n	80057de <HAL_RCC_OscConfig+0x2ce>
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800
 80057c0:	42470000 	.word	0x42470000
 80057c4:	42470e80 	.word	0x42470e80
 80057c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057cc:	f7fe fed8 	bl	8004580 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e0fd      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057de:	4b81      	ldr	r3, [pc, #516]	; (80059e4 <HAL_RCC_OscConfig+0x4d4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d106      	bne.n	8005800 <HAL_RCC_OscConfig+0x2f0>
 80057f2:	4b7d      	ldr	r3, [pc, #500]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	4a7c      	ldr	r2, [pc, #496]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	6713      	str	r3, [r2, #112]	; 0x70
 80057fe:	e01c      	b.n	800583a <HAL_RCC_OscConfig+0x32a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2b05      	cmp	r3, #5
 8005806:	d10c      	bne.n	8005822 <HAL_RCC_OscConfig+0x312>
 8005808:	4b77      	ldr	r3, [pc, #476]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 800580a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580c:	4a76      	ldr	r2, [pc, #472]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 800580e:	f043 0304 	orr.w	r3, r3, #4
 8005812:	6713      	str	r3, [r2, #112]	; 0x70
 8005814:	4b74      	ldr	r3, [pc, #464]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 8005816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005818:	4a73      	ldr	r2, [pc, #460]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 800581a:	f043 0301 	orr.w	r3, r3, #1
 800581e:	6713      	str	r3, [r2, #112]	; 0x70
 8005820:	e00b      	b.n	800583a <HAL_RCC_OscConfig+0x32a>
 8005822:	4b71      	ldr	r3, [pc, #452]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	4a70      	ldr	r2, [pc, #448]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 8005828:	f023 0301 	bic.w	r3, r3, #1
 800582c:	6713      	str	r3, [r2, #112]	; 0x70
 800582e:	4b6e      	ldr	r3, [pc, #440]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	4a6d      	ldr	r2, [pc, #436]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 8005834:	f023 0304 	bic.w	r3, r3, #4
 8005838:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d015      	beq.n	800586e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005842:	f7fe fe9d 	bl	8004580 <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005848:	e00a      	b.n	8005860 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800584a:	f7fe fe99 	bl	8004580 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	f241 3288 	movw	r2, #5000	; 0x1388
 8005858:	4293      	cmp	r3, r2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e0bc      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005860:	4b61      	ldr	r3, [pc, #388]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ee      	beq.n	800584a <HAL_RCC_OscConfig+0x33a>
 800586c:	e014      	b.n	8005898 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800586e:	f7fe fe87 	bl	8004580 <HAL_GetTick>
 8005872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005874:	e00a      	b.n	800588c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005876:	f7fe fe83 	bl	8004580 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	f241 3288 	movw	r2, #5000	; 0x1388
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e0a6      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800588c:	4b56      	ldr	r3, [pc, #344]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	f003 0302 	and.w	r3, r3, #2
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1ee      	bne.n	8005876 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005898:	7dfb      	ldrb	r3, [r7, #23]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d105      	bne.n	80058aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589e:	4b52      	ldr	r3, [pc, #328]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	4a51      	ldr	r2, [pc, #324]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 80058a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8092 	beq.w	80059d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058b4:	4b4c      	ldr	r3, [pc, #304]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d05c      	beq.n	800597a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d141      	bne.n	800594c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c8:	4b48      	ldr	r3, [pc, #288]	; (80059ec <HAL_RCC_OscConfig+0x4dc>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ce:	f7fe fe57 	bl	8004580 <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d6:	f7fe fe53 	bl	8004580 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e078      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e8:	4b3f      	ldr	r3, [pc, #252]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1f0      	bne.n	80058d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69da      	ldr	r2, [r3, #28]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	019b      	lsls	r3, r3, #6
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	3b01      	subs	r3, #1
 800590e:	041b      	lsls	r3, r3, #16
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	061b      	lsls	r3, r3, #24
 8005918:	4933      	ldr	r1, [pc, #204]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 800591a:	4313      	orrs	r3, r2
 800591c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800591e:	4b33      	ldr	r3, [pc, #204]	; (80059ec <HAL_RCC_OscConfig+0x4dc>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fe fe2c 	bl	8004580 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592c:	f7fe fe28 	bl	8004580 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e04d      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593e:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0x41c>
 800594a:	e045      	b.n	80059d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800594c:	4b27      	ldr	r3, [pc, #156]	; (80059ec <HAL_RCC_OscConfig+0x4dc>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005952:	f7fe fe15 	bl	8004580 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800595a:	f7fe fe11 	bl	8004580 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e036      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800596c:	4b1e      	ldr	r3, [pc, #120]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1f0      	bne.n	800595a <HAL_RCC_OscConfig+0x44a>
 8005978:	e02e      	b.n	80059d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e029      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005986:	4b18      	ldr	r3, [pc, #96]	; (80059e8 <HAL_RCC_OscConfig+0x4d8>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	429a      	cmp	r2, r3
 8005998:	d11c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d115      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059ae:	4013      	ands	r3, r2
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d10d      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d106      	bne.n	80059d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e000      	b.n	80059da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40007000 	.word	0x40007000
 80059e8:	40023800 	.word	0x40023800
 80059ec:	42470060 	.word	0x42470060

080059f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e0cc      	b.n	8005b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a04:	4b68      	ldr	r3, [pc, #416]	; (8005ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	683a      	ldr	r2, [r7, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d90c      	bls.n	8005a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a12:	4b65      	ldr	r3, [pc, #404]	; (8005ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a1a:	4b63      	ldr	r3, [pc, #396]	; (8005ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d001      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e0b8      	b.n	8005b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d020      	beq.n	8005a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0304 	and.w	r3, r3, #4
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a44:	4b59      	ldr	r3, [pc, #356]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	4a58      	ldr	r2, [pc, #352]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a5c:	4b53      	ldr	r3, [pc, #332]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	4a52      	ldr	r2, [pc, #328]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a68:	4b50      	ldr	r3, [pc, #320]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	494d      	ldr	r1, [pc, #308]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d044      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d107      	bne.n	8005a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a8e:	4b47      	ldr	r3, [pc, #284]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d119      	bne.n	8005ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e07f      	b.n	8005b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d003      	beq.n	8005aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d107      	bne.n	8005abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aae:	4b3f      	ldr	r3, [pc, #252]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d109      	bne.n	8005ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e06f      	b.n	8005b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005abe:	4b3b      	ldr	r3, [pc, #236]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e067      	b.n	8005b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ace:	4b37      	ldr	r3, [pc, #220]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f023 0203 	bic.w	r2, r3, #3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4934      	ldr	r1, [pc, #208]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ae0:	f7fe fd4e 	bl	8004580 <HAL_GetTick>
 8005ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae6:	e00a      	b.n	8005afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae8:	f7fe fd4a 	bl	8004580 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e04f      	b.n	8005b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	4b2b      	ldr	r3, [pc, #172]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 020c 	and.w	r2, r3, #12
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d1eb      	bne.n	8005ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b10:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 030f 	and.w	r3, r3, #15
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d20c      	bcs.n	8005b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1e:	4b22      	ldr	r3, [pc, #136]	; (8005ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b26:	4b20      	ldr	r3, [pc, #128]	; (8005ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d001      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e032      	b.n	8005b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b44:	4b19      	ldr	r3, [pc, #100]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4916      	ldr	r1, [pc, #88]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d009      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b62:	4b12      	ldr	r3, [pc, #72]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	490e      	ldr	r1, [pc, #56]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b76:	f000 f821 	bl	8005bbc <HAL_RCC_GetSysClockFreq>
 8005b7a:	4601      	mov	r1, r0
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b88:	5cd3      	ldrb	r3, [r2, r3]
 8005b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8005b8e:	4a09      	ldr	r2, [pc, #36]	; (8005bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b92:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fcae 	bl	80044f8 <HAL_InitTick>

  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40023c00 	.word	0x40023c00
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	0800bc20 	.word	0x0800bc20
 8005bb4:	20000004 	.word	0x20000004
 8005bb8:	20000008 	.word	0x20000008

08005bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bd2:	4b50      	ldr	r3, [pc, #320]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 030c 	and.w	r3, r3, #12
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d007      	beq.n	8005bee <HAL_RCC_GetSysClockFreq+0x32>
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d008      	beq.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x38>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f040 808d 	bne.w	8005d02 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005be8:	4b4b      	ldr	r3, [pc, #300]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005bea:	60bb      	str	r3, [r7, #8]
       break;
 8005bec:	e08c      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bee:	4b4b      	ldr	r3, [pc, #300]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x160>)
 8005bf0:	60bb      	str	r3, [r7, #8]
      break;
 8005bf2:	e089      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bf4:	4b47      	ldr	r3, [pc, #284]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bfc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bfe:	4b45      	ldr	r3, [pc, #276]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d023      	beq.n	8005c52 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c0a:	4b42      	ldr	r3, [pc, #264]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	099b      	lsrs	r3, r3, #6
 8005c10:	f04f 0400 	mov.w	r4, #0
 8005c14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	ea03 0501 	and.w	r5, r3, r1
 8005c20:	ea04 0602 	and.w	r6, r4, r2
 8005c24:	4a3d      	ldr	r2, [pc, #244]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c26:	fb02 f106 	mul.w	r1, r2, r6
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	fb02 f205 	mul.w	r2, r2, r5
 8005c30:	440a      	add	r2, r1
 8005c32:	493a      	ldr	r1, [pc, #232]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x160>)
 8005c34:	fba5 0101 	umull	r0, r1, r5, r1
 8005c38:	1853      	adds	r3, r2, r1
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f04f 0400 	mov.w	r4, #0
 8005c42:	461a      	mov	r2, r3
 8005c44:	4623      	mov	r3, r4
 8005c46:	f7fb f807 	bl	8000c58 <__aeabi_uldivmod>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	e049      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c52:	4b30      	ldr	r3, [pc, #192]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	099b      	lsrs	r3, r3, #6
 8005c58:	f04f 0400 	mov.w	r4, #0
 8005c5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	ea03 0501 	and.w	r5, r3, r1
 8005c68:	ea04 0602 	and.w	r6, r4, r2
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4632      	mov	r2, r6
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	f04f 0400 	mov.w	r4, #0
 8005c78:	0154      	lsls	r4, r2, #5
 8005c7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c7e:	014b      	lsls	r3, r1, #5
 8005c80:	4619      	mov	r1, r3
 8005c82:	4622      	mov	r2, r4
 8005c84:	1b49      	subs	r1, r1, r5
 8005c86:	eb62 0206 	sbc.w	r2, r2, r6
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	f04f 0400 	mov.w	r4, #0
 8005c92:	0194      	lsls	r4, r2, #6
 8005c94:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c98:	018b      	lsls	r3, r1, #6
 8005c9a:	1a5b      	subs	r3, r3, r1
 8005c9c:	eb64 0402 	sbc.w	r4, r4, r2
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	00e2      	lsls	r2, r4, #3
 8005caa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005cae:	00d9      	lsls	r1, r3, #3
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4614      	mov	r4, r2
 8005cb4:	195b      	adds	r3, r3, r5
 8005cb6:	eb44 0406 	adc.w	r4, r4, r6
 8005cba:	f04f 0100 	mov.w	r1, #0
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	02a2      	lsls	r2, r4, #10
 8005cc4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005cc8:	0299      	lsls	r1, r3, #10
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	4618      	mov	r0, r3
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f04f 0400 	mov.w	r4, #0
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4623      	mov	r3, r4
 8005cdc:	f7fa ffbc 	bl	8000c58 <__aeabi_uldivmod>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	0c1b      	lsrs	r3, r3, #16
 8005cec:	f003 0303 	and.w	r3, r3, #3
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	60bb      	str	r3, [r7, #8]
      break;
 8005d00:	e002      	b.n	8005d08 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005d04:	60bb      	str	r3, [r7, #8]
      break;
 8005d06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d08:	68bb      	ldr	r3, [r7, #8]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40023800 	.word	0x40023800
 8005d18:	00f42400 	.word	0x00f42400
 8005d1c:	017d7840 	.word	0x017d7840

08005d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20000004 	.word	0x20000004

08005d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d3c:	f7ff fff0 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d40:	4601      	mov	r1, r0
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0a9b      	lsrs	r3, r3, #10
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4a03      	ldr	r2, [pc, #12]	; (8005d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d4e:	5cd3      	ldrb	r3, [r2, r3]
 8005d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	0800bc30 	.word	0x0800bc30

08005d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d64:	f7ff ffdc 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d68:	4601      	mov	r1, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	0b5b      	lsrs	r3, r3, #13
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4a03      	ldr	r2, [pc, #12]	; (8005d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d76:	5cd3      	ldrb	r3, [r2, r3]
 8005d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	0800bc30 	.word	0x0800bc30

08005d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e056      	b.n	8005e48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7fd fa31 	bl	800321c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	69db      	ldr	r3, [r3, #28]
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	ea42 0103 	orr.w	r1, r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	0c1b      	lsrs	r3, r3, #16
 8005e18:	f003 0104 	and.w	r1, r3, #4
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69da      	ldr	r2, [r3, #28]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_SPI_Transmit+0x22>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e11e      	b.n	80060b0 <HAL_SPI_Transmit+0x260>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7a:	f7fe fb81 	bl	8004580 <HAL_GetTick>
 8005e7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d002      	beq.n	8005e96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e90:	2302      	movs	r3, #2
 8005e92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e94:	e103      	b.n	800609e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_SPI_Transmit+0x52>
 8005e9c:	88fb      	ldrh	r3, [r7, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ea6:	e0fa      	b.n	800609e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2203      	movs	r2, #3
 8005eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	88fa      	ldrh	r2, [r7, #6]
 8005ec0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	88fa      	ldrh	r2, [r7, #6]
 8005ec6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eee:	d107      	bne.n	8005f00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005efe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0a:	2b40      	cmp	r3, #64	; 0x40
 8005f0c:	d007      	beq.n	8005f1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f26:	d14b      	bne.n	8005fc0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_SPI_Transmit+0xe6>
 8005f30:	8afb      	ldrh	r3, [r7, #22]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d13e      	bne.n	8005fb4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	1c9a      	adds	r2, r3, #2
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f5a:	e02b      	b.n	8005fb4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d112      	bne.n	8005f90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	881a      	ldrh	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	1c9a      	adds	r2, r3, #2
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f8e:	e011      	b.n	8005fb4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f90:	f7fe faf6 	bl	8004580 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d803      	bhi.n	8005fa8 <HAL_SPI_Transmit+0x158>
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fa6:	d102      	bne.n	8005fae <HAL_SPI_Transmit+0x15e>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fb2:	e074      	b.n	800609e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1ce      	bne.n	8005f5c <HAL_SPI_Transmit+0x10c>
 8005fbe:	e04c      	b.n	800605a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d002      	beq.n	8005fce <HAL_SPI_Transmit+0x17e>
 8005fc8:	8afb      	ldrh	r3, [r7, #22]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d140      	bne.n	8006050 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	330c      	adds	r3, #12
 8005fd8:	7812      	ldrb	r2, [r2, #0]
 8005fda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ff4:	e02c      	b.n	8006050 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d113      	bne.n	800602c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	330c      	adds	r3, #12
 800600e:	7812      	ldrb	r2, [r2, #0]
 8006010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b01      	subs	r3, #1
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	86da      	strh	r2, [r3, #54]	; 0x36
 800602a:	e011      	b.n	8006050 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800602c:	f7fe faa8 	bl	8004580 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d803      	bhi.n	8006044 <HAL_SPI_Transmit+0x1f4>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006042:	d102      	bne.n	800604a <HAL_SPI_Transmit+0x1fa>
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800604e:	e026      	b.n	800609e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1cd      	bne.n	8005ff6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	6839      	ldr	r1, [r7, #0]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 fba4 	bl	80067ac <SPI_EndRxTxTransaction>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2220      	movs	r2, #32
 800606e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10a      	bne.n	800608e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006078:	2300      	movs	r3, #0
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	613b      	str	r3, [r7, #16]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	613b      	str	r3, [r7, #16]
 800608c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	77fb      	strb	r3, [r7, #31]
 800609a:	e000      	b.n	800609e <HAL_SPI_Transmit+0x24e>
  }

error:
 800609c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	4613      	mov	r3, r2
 80060c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d4:	d112      	bne.n	80060fc <HAL_SPI_Receive+0x44>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10e      	bne.n	80060fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2204      	movs	r2, #4
 80060e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80060e6:	88fa      	ldrh	r2, [r7, #6]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 f8e9 	bl	80062ca <HAL_SPI_TransmitReceive>
 80060f8:	4603      	mov	r3, r0
 80060fa:	e0e2      	b.n	80062c2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_SPI_Receive+0x52>
 8006106:	2302      	movs	r3, #2
 8006108:	e0db      	b.n	80062c2 <HAL_SPI_Receive+0x20a>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006112:	f7fe fa35 	bl	8004580 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	d002      	beq.n	800612a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006124:	2302      	movs	r3, #2
 8006126:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006128:	e0c2      	b.n	80062b0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <HAL_SPI_Receive+0x7e>
 8006130:	88fb      	ldrh	r3, [r7, #6]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	75fb      	strb	r3, [r7, #23]
    goto error;
 800613a:	e0b9      	b.n	80062b0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2204      	movs	r2, #4
 8006140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006182:	d107      	bne.n	8006194 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006192:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d007      	beq.n	80061b2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d162      	bne.n	8006280 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80061ba:	e02e      	b.n	800621a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d115      	bne.n	80061f6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f103 020c 	add.w	r2, r3, #12
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	7812      	ldrb	r2, [r2, #0]
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061f4:	e011      	b.n	800621a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061f6:	f7fe f9c3 	bl	8004580 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d803      	bhi.n	800620e <HAL_SPI_Receive+0x156>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800620c:	d102      	bne.n	8006214 <HAL_SPI_Receive+0x15c>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d102      	bne.n	800621a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006218:	e04a      	b.n	80062b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800621e:	b29b      	uxth	r3, r3
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1cb      	bne.n	80061bc <HAL_SPI_Receive+0x104>
 8006224:	e031      	b.n	800628a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b01      	cmp	r3, #1
 8006232:	d113      	bne.n	800625c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	b292      	uxth	r2, r2
 8006240:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006250:	b29b      	uxth	r3, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	87da      	strh	r2, [r3, #62]	; 0x3e
 800625a:	e011      	b.n	8006280 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800625c:	f7fe f990 	bl	8004580 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d803      	bhi.n	8006274 <HAL_SPI_Receive+0x1bc>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006272:	d102      	bne.n	800627a <HAL_SPI_Receive+0x1c2>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800627e:	e017      	b.n	80062b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1cd      	bne.n	8006226 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 fa27 	bl	80066e2 <SPI_EndRxTransaction>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2220      	movs	r2, #32
 800629e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	75fb      	strb	r3, [r7, #23]
 80062ac:	e000      	b.n	80062b0 <HAL_SPI_Receive+0x1f8>
  }

error :
 80062ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b08c      	sub	sp, #48	; 0x30
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062d8:	2301      	movs	r3, #1
 80062da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062dc:	2300      	movs	r3, #0
 80062de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_SPI_TransmitReceive+0x26>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e18a      	b.n	8006606 <HAL_SPI_TransmitReceive+0x33c>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062f8:	f7fe f942 	bl	8004580 <HAL_GetTick>
 80062fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800630e:	887b      	ldrh	r3, [r7, #2]
 8006310:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006316:	2b01      	cmp	r3, #1
 8006318:	d00f      	beq.n	800633a <HAL_SPI_TransmitReceive+0x70>
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006320:	d107      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d103      	bne.n	8006332 <HAL_SPI_TransmitReceive+0x68>
 800632a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800632e:	2b04      	cmp	r3, #4
 8006330:	d003      	beq.n	800633a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006332:	2302      	movs	r3, #2
 8006334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006338:	e15b      	b.n	80065f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_SPI_TransmitReceive+0x82>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <HAL_SPI_TransmitReceive+0x82>
 8006346:	887b      	ldrh	r3, [r7, #2]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006352:	e14e      	b.n	80065f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b04      	cmp	r3, #4
 800635e:	d003      	beq.n	8006368 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2205      	movs	r2, #5
 8006364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	887a      	ldrh	r2, [r7, #2]
 8006378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	887a      	ldrh	r2, [r7, #2]
 800637e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	887a      	ldrh	r2, [r7, #2]
 800638a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	887a      	ldrh	r2, [r7, #2]
 8006390:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a8:	2b40      	cmp	r3, #64	; 0x40
 80063aa:	d007      	beq.n	80063bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c4:	d178      	bne.n	80064b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x10a>
 80063ce:	8b7b      	ldrh	r3, [r7, #26]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d166      	bne.n	80064a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	881a      	ldrh	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	1c9a      	adds	r2, r3, #2
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063f8:	e053      	b.n	80064a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b02      	cmp	r3, #2
 8006406:	d11b      	bne.n	8006440 <HAL_SPI_TransmitReceive+0x176>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d016      	beq.n	8006440 <HAL_SPI_TransmitReceive+0x176>
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d113      	bne.n	8006440 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	881a      	ldrh	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	1c9a      	adds	r2, r3, #2
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b01      	cmp	r3, #1
 800644c:	d119      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x1b8>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d014      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006462:	b292      	uxth	r2, r2
 8006464:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800647e:	2301      	movs	r3, #1
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006482:	f7fe f87d 	bl	8004580 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800648e:	429a      	cmp	r2, r3
 8006490:	d807      	bhi.n	80064a2 <HAL_SPI_TransmitReceive+0x1d8>
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006498:	d003      	beq.n	80064a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064a0:	e0a7      	b.n	80065f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1a6      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x130>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1a1      	bne.n	80063fa <HAL_SPI_TransmitReceive+0x130>
 80064b6:	e07c      	b.n	80065b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x1fc>
 80064c0:	8b7b      	ldrh	r3, [r7, #26]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d16b      	bne.n	800659e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	7812      	ldrb	r2, [r2, #0]
 80064d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	3b01      	subs	r3, #1
 80064e6:	b29a      	uxth	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ec:	e057      	b.n	800659e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 0302 	and.w	r3, r3, #2
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d11c      	bne.n	8006536 <HAL_SPI_TransmitReceive+0x26c>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d017      	beq.n	8006536 <HAL_SPI_TransmitReceive+0x26c>
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d114      	bne.n	8006536 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	7812      	ldrb	r2, [r2, #0]
 8006518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b01      	cmp	r3, #1
 8006542:	d119      	bne.n	8006578 <HAL_SPI_TransmitReceive+0x2ae>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006548:	b29b      	uxth	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d014      	beq.n	8006578 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	b2d2      	uxtb	r2, r2
 800655a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006574:	2301      	movs	r3, #1
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006578:	f7fe f802 	bl	8004580 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006584:	429a      	cmp	r2, r3
 8006586:	d803      	bhi.n	8006590 <HAL_SPI_TransmitReceive+0x2c6>
 8006588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800658e:	d102      	bne.n	8006596 <HAL_SPI_TransmitReceive+0x2cc>
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800659c:	e029      	b.n	80065f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1a2      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x224>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d19d      	bne.n	80064ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f8f8 	bl	80067ac <SPI_EndRxTxTransaction>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d006      	beq.n	80065d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2220      	movs	r2, #32
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80065ce:	e010      	b.n	80065f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10b      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	e000      	b.n	80065f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80065f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006606:	4618      	mov	r0, r3
 8006608:	3730      	adds	r7, #48	; 0x30
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b084      	sub	sp, #16
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	4613      	mov	r3, r2
 800661c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800661e:	e04c      	b.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006626:	d048      	beq.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006628:	f7fd ffaa 	bl	8004580 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d902      	bls.n	800663e <SPI_WaitFlagStateUntilTimeout+0x30>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d13d      	bne.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800664c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006656:	d111      	bne.n	800667c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006660:	d004      	beq.n	800666c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666a:	d107      	bne.n	800667c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006684:	d10f      	bne.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e00f      	b.n	80066da <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4013      	ands	r3, r2
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d1a3      	bne.n	8006620 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b086      	sub	sp, #24
 80066e6:	af02      	add	r7, sp, #8
 80066e8:	60f8      	str	r0, [r7, #12]
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f6:	d111      	bne.n	800671c <SPI_EndRxTransaction+0x3a>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006700:	d004      	beq.n	800670c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800670a:	d107      	bne.n	800671c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800671a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006724:	d12a      	bne.n	800677c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672e:	d012      	beq.n	8006756 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2200      	movs	r2, #0
 8006738:	2180      	movs	r1, #128	; 0x80
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f7ff ff67 	bl	800660e <SPI_WaitFlagStateUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d02d      	beq.n	80067a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674a:	f043 0220 	orr.w	r2, r3, #32
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e026      	b.n	80067a4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2200      	movs	r2, #0
 800675e:	2101      	movs	r1, #1
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff ff54 	bl	800660e <SPI_WaitFlagStateUntilTimeout>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01a      	beq.n	80067a2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006770:	f043 0220 	orr.w	r2, r3, #32
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e013      	b.n	80067a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2200      	movs	r2, #0
 8006784:	2101      	movs	r1, #1
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f7ff ff41 	bl	800660e <SPI_WaitFlagStateUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	f043 0220 	orr.w	r2, r3, #32
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e000      	b.n	80067a4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067b8:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <SPI_EndRxTxTransaction+0x7c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <SPI_EndRxTxTransaction+0x80>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	0d5b      	lsrs	r3, r3, #21
 80067c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d6:	d112      	bne.n	80067fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff ff13 	bl	800660e <SPI_WaitFlagStateUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e00f      	b.n	800681e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3b01      	subs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d0f2      	beq.n	80067fe <SPI_EndRxTxTransaction+0x52>
 8006818:	e000      	b.n	800681c <SPI_EndRxTxTransaction+0x70>
        break;
 800681a:	bf00      	nop
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000004 	.word	0x20000004
 800682c:	165e9f81 	.word	0x165e9f81

08006830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e01d      	b.n	800687e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fd fd1a 	bl	8004290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f000 fb4c 	bl	8006f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006886:	b480      	push	{r7}
 8006888:	b085      	sub	sp, #20
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f042 0201 	orr.w	r2, r2, #1
 800689c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b06      	cmp	r3, #6
 80068ae:	d007      	beq.n	80068c0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e01d      	b.n	800691c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 f815 	bl	8006924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f000 fafd 	bl	8006f0c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2201      	movs	r2, #1
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fd84 	bl	8007458 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a10      	ldr	r2, [pc, #64]	; (8006998 <HAL_TIM_PWM_Start+0x60>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d107      	bne.n	800696a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b06      	cmp	r3, #6
 800697a:	d007      	beq.n	800698c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000

0800699c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d122      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d11b      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0202 	mvn.w	r2, #2
 80069c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fa75 	bl	8006ece <HAL_TIM_IC_CaptureCallback>
 80069e4:	e005      	b.n	80069f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa67 	bl	8006eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fa78 	bl	8006ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0304 	and.w	r3, r3, #4
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d122      	bne.n	8006a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d11b      	bne.n	8006a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0204 	mvn.w	r2, #4
 8006a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fa4b 	bl	8006ece <HAL_TIM_IC_CaptureCallback>
 8006a38:	e005      	b.n	8006a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa3d 	bl	8006eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fa4e 	bl	8006ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b08      	cmp	r3, #8
 8006a58:	d122      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d11b      	bne.n	8006aa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0208 	mvn.w	r2, #8
 8006a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2204      	movs	r2, #4
 8006a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa21 	bl	8006ece <HAL_TIM_IC_CaptureCallback>
 8006a8c:	e005      	b.n	8006a9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa13 	bl	8006eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fa24 	bl	8006ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f003 0310 	and.w	r3, r3, #16
 8006aaa:	2b10      	cmp	r3, #16
 8006aac:	d122      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	f003 0310 	and.w	r3, r3, #16
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d11b      	bne.n	8006af4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f06f 0210 	mvn.w	r2, #16
 8006ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2208      	movs	r2, #8
 8006aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f9f7 	bl	8006ece <HAL_TIM_IC_CaptureCallback>
 8006ae0:	e005      	b.n	8006aee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f9e9 	bl	8006eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f9fa 	bl	8006ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d10e      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d107      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f06f 0201 	mvn.w	r2, #1
 8006b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f9c3 	bl	8006ea6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2a:	2b80      	cmp	r3, #128	; 0x80
 8006b2c:	d10e      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b38:	2b80      	cmp	r3, #128	; 0x80
 8006b3a:	d107      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fd76 	bl	8007638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b56:	2b40      	cmp	r3, #64	; 0x40
 8006b58:	d10e      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b64:	2b40      	cmp	r3, #64	; 0x40
 8006b66:	d107      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 f9bf 	bl	8006ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d10e      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0320 	and.w	r3, r3, #32
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d107      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0220 	mvn.w	r2, #32
 8006b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fd40 	bl	8007624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e0b4      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b0c      	cmp	r3, #12
 8006bda:	f200 809f 	bhi.w	8006d1c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006c19 	.word	0x08006c19
 8006be8:	08006d1d 	.word	0x08006d1d
 8006bec:	08006d1d 	.word	0x08006d1d
 8006bf0:	08006d1d 	.word	0x08006d1d
 8006bf4:	08006c59 	.word	0x08006c59
 8006bf8:	08006d1d 	.word	0x08006d1d
 8006bfc:	08006d1d 	.word	0x08006d1d
 8006c00:	08006d1d 	.word	0x08006d1d
 8006c04:	08006c9b 	.word	0x08006c9b
 8006c08:	08006d1d 	.word	0x08006d1d
 8006c0c:	08006d1d 	.word	0x08006d1d
 8006c10:	08006d1d 	.word	0x08006d1d
 8006c14:	08006cdb 	.word	0x08006cdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 f9f4 	bl	800700c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0208 	orr.w	r2, r2, #8
 8006c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0204 	bic.w	r2, r2, #4
 8006c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6999      	ldr	r1, [r3, #24]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	691a      	ldr	r2, [r3, #16]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	619a      	str	r2, [r3, #24]
      break;
 8006c56:	e062      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fa3a 	bl	80070d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6999      	ldr	r1, [r3, #24]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	021a      	lsls	r2, r3, #8
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	619a      	str	r2, [r3, #24]
      break;
 8006c98:	e041      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fa85 	bl	80071b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0208 	orr.w	r2, r2, #8
 8006cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0204 	bic.w	r2, r2, #4
 8006cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69d9      	ldr	r1, [r3, #28]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	61da      	str	r2, [r3, #28]
      break;
 8006cd8:	e021      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 facf 	bl	8007284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69da      	ldr	r2, [r3, #28]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69d9      	ldr	r1, [r3, #28]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	021a      	lsls	r2, r3, #8
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	61da      	str	r2, [r3, #28]
      break;
 8006d1a:	e000      	b.n	8006d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006d1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_TIM_ConfigClockSource+0x18>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e0a6      	b.n	8006e9e <HAL_TIM_ConfigClockSource+0x166>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	d067      	beq.n	8006e58 <HAL_TIM_ConfigClockSource+0x120>
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d80b      	bhi.n	8006da4 <HAL_TIM_ConfigClockSource+0x6c>
 8006d8c:	2b10      	cmp	r3, #16
 8006d8e:	d073      	beq.n	8006e78 <HAL_TIM_ConfigClockSource+0x140>
 8006d90:	2b10      	cmp	r3, #16
 8006d92:	d802      	bhi.n	8006d9a <HAL_TIM_ConfigClockSource+0x62>
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d06f      	beq.n	8006e78 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d98:	e078      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d9a:	2b20      	cmp	r3, #32
 8006d9c:	d06c      	beq.n	8006e78 <HAL_TIM_ConfigClockSource+0x140>
 8006d9e:	2b30      	cmp	r3, #48	; 0x30
 8006da0:	d06a      	beq.n	8006e78 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006da2:	e073      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006da4:	2b70      	cmp	r3, #112	; 0x70
 8006da6:	d00d      	beq.n	8006dc4 <HAL_TIM_ConfigClockSource+0x8c>
 8006da8:	2b70      	cmp	r3, #112	; 0x70
 8006daa:	d804      	bhi.n	8006db6 <HAL_TIM_ConfigClockSource+0x7e>
 8006dac:	2b50      	cmp	r3, #80	; 0x50
 8006dae:	d033      	beq.n	8006e18 <HAL_TIM_ConfigClockSource+0xe0>
 8006db0:	2b60      	cmp	r3, #96	; 0x60
 8006db2:	d041      	beq.n	8006e38 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006db4:	e06a      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dba:	d066      	beq.n	8006e8a <HAL_TIM_ConfigClockSource+0x152>
 8006dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dc0:	d017      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006dc2:	e063      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6818      	ldr	r0, [r3, #0]
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	6899      	ldr	r1, [r3, #8]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f000 fb20 	bl	8007418 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006de6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	609a      	str	r2, [r3, #8]
      break;
 8006df0:	e04c      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	6899      	ldr	r1, [r3, #8]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f000 fb09 	bl	8007418 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689a      	ldr	r2, [r3, #8]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e14:	609a      	str	r2, [r3, #8]
      break;
 8006e16:	e039      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	6859      	ldr	r1, [r3, #4]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	461a      	mov	r2, r3
 8006e26:	f000 fa7d 	bl	8007324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2150      	movs	r1, #80	; 0x50
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fad6 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006e36:	e029      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	6859      	ldr	r1, [r3, #4]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	461a      	mov	r2, r3
 8006e46:	f000 fa9c 	bl	8007382 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2160      	movs	r1, #96	; 0x60
 8006e50:	4618      	mov	r0, r3
 8006e52:	f000 fac6 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006e56:	e019      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6818      	ldr	r0, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	6859      	ldr	r1, [r3, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	461a      	mov	r2, r3
 8006e66:	f000 fa5d 	bl	8007324 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2140      	movs	r1, #64	; 0x40
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fab6 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006e76:	e009      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	4610      	mov	r0, r2
 8006e84:	f000 faad 	bl	80073e2 <TIM_ITRx_SetConfig>
      break;
 8006e88:	e000      	b.n	8006e8c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b083      	sub	sp, #12
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ed6:	bf00      	nop
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006efe:	bf00      	nop
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a34      	ldr	r2, [pc, #208]	; (8006ff0 <TIM_Base_SetConfig+0xe4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d00f      	beq.n	8006f44 <TIM_Base_SetConfig+0x38>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2a:	d00b      	beq.n	8006f44 <TIM_Base_SetConfig+0x38>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a31      	ldr	r2, [pc, #196]	; (8006ff4 <TIM_Base_SetConfig+0xe8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d007      	beq.n	8006f44 <TIM_Base_SetConfig+0x38>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <TIM_Base_SetConfig+0xec>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d003      	beq.n	8006f44 <TIM_Base_SetConfig+0x38>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a2f      	ldr	r2, [pc, #188]	; (8006ffc <TIM_Base_SetConfig+0xf0>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d108      	bne.n	8006f56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a25      	ldr	r2, [pc, #148]	; (8006ff0 <TIM_Base_SetConfig+0xe4>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01b      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f64:	d017      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a22      	ldr	r2, [pc, #136]	; (8006ff4 <TIM_Base_SetConfig+0xe8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a21      	ldr	r2, [pc, #132]	; (8006ff8 <TIM_Base_SetConfig+0xec>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00f      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <TIM_Base_SetConfig+0xf0>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00b      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1f      	ldr	r2, [pc, #124]	; (8007000 <TIM_Base_SetConfig+0xf4>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d007      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1e      	ldr	r2, [pc, #120]	; (8007004 <TIM_Base_SetConfig+0xf8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_Base_SetConfig+0x8a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <TIM_Base_SetConfig+0xfc>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d108      	bne.n	8006fa8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	695b      	ldr	r3, [r3, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <TIM_Base_SetConfig+0xe4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d103      	bne.n	8006fdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	615a      	str	r2, [r3, #20]
}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40000400 	.word	0x40000400
 8006ff8:	40000800 	.word	0x40000800
 8006ffc:	40000c00 	.word	0x40000c00
 8007000:	40014000 	.word	0x40014000
 8007004:	40014400 	.word	0x40014400
 8007008:	40014800 	.word	0x40014800

0800700c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800700c:	b480      	push	{r7}
 800700e:	b087      	sub	sp, #28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f023 0201 	bic.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0303 	bic.w	r3, r3, #3
 8007042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f023 0302 	bic.w	r3, r3, #2
 8007054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a1c      	ldr	r2, [pc, #112]	; (80070d4 <TIM_OC1_SetConfig+0xc8>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d10c      	bne.n	8007082 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0308 	bic.w	r3, r3, #8
 800706e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f023 0304 	bic.w	r3, r3, #4
 8007080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a13      	ldr	r2, [pc, #76]	; (80070d4 <TIM_OC1_SetConfig+0xc8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d111      	bne.n	80070ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	621a      	str	r2, [r3, #32]
}
 80070c8:	bf00      	nop
 80070ca:	371c      	adds	r7, #28
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	40010000 	.word	0x40010000

080070d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f023 0210 	bic.w	r2, r3, #16
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0320 	bic.w	r3, r3, #32
 8007122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a1e      	ldr	r2, [pc, #120]	; (80071ac <TIM_OC2_SetConfig+0xd4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d10d      	bne.n	8007154 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800713e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	011b      	lsls	r3, r3, #4
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a15      	ldr	r2, [pc, #84]	; (80071ac <TIM_OC2_SetConfig+0xd4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d113      	bne.n	8007184 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007162:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800716a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	621a      	str	r2, [r3, #32]
}
 800719e:	bf00      	nop
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40010000 	.word	0x40010000

080071b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0303 	bic.w	r3, r3, #3
 80071e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	697a      	ldr	r2, [r7, #20]
 8007202:	4313      	orrs	r3, r2
 8007204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <TIM_OC3_SetConfig+0xd0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d10d      	bne.n	800722a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	021b      	lsls	r3, r3, #8
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a14      	ldr	r2, [pc, #80]	; (8007280 <TIM_OC3_SetConfig+0xd0>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d113      	bne.n	800725a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	011b      	lsls	r3, r3, #4
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4313      	orrs	r3, r2
 8007258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	697a      	ldr	r2, [r7, #20]
 8007272:	621a      	str	r2, [r3, #32]
}
 8007274:	bf00      	nop
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	40010000 	.word	0x40010000

08007284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	031b      	lsls	r3, r3, #12
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a10      	ldr	r2, [pc, #64]	; (8007320 <TIM_OC4_SetConfig+0x9c>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d109      	bne.n	80072f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	019b      	lsls	r3, r3, #6
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40010000 	.word	0x40010000

08007324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6a1b      	ldr	r3, [r3, #32]
 8007334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	f023 0201 	bic.w	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800734e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	693a      	ldr	r2, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f023 030a 	bic.w	r3, r3, #10
 8007360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4313      	orrs	r3, r2
 8007368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007382:	b480      	push	{r7}
 8007384:	b087      	sub	sp, #28
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	f023 0210 	bic.w	r2, r3, #16
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	031b      	lsls	r3, r3, #12
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073fa:	683a      	ldr	r2, [r7, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	f043 0307 	orr.w	r3, r3, #7
 8007404:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007432:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	021a      	lsls	r2, r3, #8
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	431a      	orrs	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	4313      	orrs	r3, r2
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	4313      	orrs	r3, r2
 8007444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	609a      	str	r2, [r3, #8]
}
 800744c:	bf00      	nop
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f003 031f 	and.w	r3, r3, #31
 800746a:	2201      	movs	r2, #1
 800746c:	fa02 f303 	lsl.w	r3, r2, r3
 8007470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1a      	ldr	r2, [r3, #32]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	43db      	mvns	r3, r3
 800747a:	401a      	ands	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a1a      	ldr	r2, [r3, #32]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	6879      	ldr	r1, [r7, #4]
 800748c:	fa01 f303 	lsl.w	r3, r1, r3
 8007490:	431a      	orrs	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	621a      	str	r2, [r3, #32]
}
 8007496:	bf00      	nop
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
	...

080074a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d101      	bne.n	80074bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e050      	b.n	800755e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a1c      	ldr	r2, [pc, #112]	; (800756c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d018      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007508:	d013      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a18      	ldr	r2, [pc, #96]	; (8007570 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d00e      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a16      	ldr	r2, [pc, #88]	; (8007574 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d009      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a15      	ldr	r2, [pc, #84]	; (8007578 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d004      	beq.n	8007532 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a13      	ldr	r2, [pc, #76]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10c      	bne.n	800754c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	4313      	orrs	r3, r2
 8007542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40010000 	.word	0x40010000
 8007570:	40000400 	.word	0x40000400
 8007574:	40000800 	.word	0x40000800
 8007578:	40000c00 	.word	0x40000c00
 800757c:	40014000 	.word	0x40014000

08007580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007598:	2302      	movs	r3, #2
 800759a:	e03d      	b.n	8007618 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e03f      	b.n	80076de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fc feac 	bl	80043d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2224      	movs	r2, #36	; 0x24
 800767c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800768e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f829 	bl	80076e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	695a      	ldr	r2, [r3, #20]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800772a:	f023 030c 	bic.w	r3, r3, #12
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	68f9      	ldr	r1, [r7, #12]
 8007734:	430b      	orrs	r3, r1
 8007736:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	699a      	ldr	r2, [r3, #24]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	430a      	orrs	r2, r1
 800774c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	69db      	ldr	r3, [r3, #28]
 8007752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007756:	f040 818b 	bne.w	8007a70 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4ac1      	ldr	r2, [pc, #772]	; (8007a64 <UART_SetConfig+0x37c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d005      	beq.n	8007770 <UART_SetConfig+0x88>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4abf      	ldr	r2, [pc, #764]	; (8007a68 <UART_SetConfig+0x380>)
 800776a:	4293      	cmp	r3, r2
 800776c:	f040 80bd 	bne.w	80078ea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007770:	f7fe faf6 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 8007774:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	461d      	mov	r5, r3
 800777a:	f04f 0600 	mov.w	r6, #0
 800777e:	46a8      	mov	r8, r5
 8007780:	46b1      	mov	r9, r6
 8007782:	eb18 0308 	adds.w	r3, r8, r8
 8007786:	eb49 0409 	adc.w	r4, r9, r9
 800778a:	4698      	mov	r8, r3
 800778c:	46a1      	mov	r9, r4
 800778e:	eb18 0805 	adds.w	r8, r8, r5
 8007792:	eb49 0906 	adc.w	r9, r9, r6
 8007796:	f04f 0100 	mov.w	r1, #0
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80077a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80077a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80077aa:	4688      	mov	r8, r1
 80077ac:	4691      	mov	r9, r2
 80077ae:	eb18 0005 	adds.w	r0, r8, r5
 80077b2:	eb49 0106 	adc.w	r1, r9, r6
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	461d      	mov	r5, r3
 80077bc:	f04f 0600 	mov.w	r6, #0
 80077c0:	196b      	adds	r3, r5, r5
 80077c2:	eb46 0406 	adc.w	r4, r6, r6
 80077c6:	461a      	mov	r2, r3
 80077c8:	4623      	mov	r3, r4
 80077ca:	f7f9 fa45 	bl	8000c58 <__aeabi_uldivmod>
 80077ce:	4603      	mov	r3, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	461a      	mov	r2, r3
 80077d4:	4ba5      	ldr	r3, [pc, #660]	; (8007a6c <UART_SetConfig+0x384>)
 80077d6:	fba3 2302 	umull	r2, r3, r3, r2
 80077da:	095b      	lsrs	r3, r3, #5
 80077dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	461d      	mov	r5, r3
 80077e4:	f04f 0600 	mov.w	r6, #0
 80077e8:	46a9      	mov	r9, r5
 80077ea:	46b2      	mov	sl, r6
 80077ec:	eb19 0309 	adds.w	r3, r9, r9
 80077f0:	eb4a 040a 	adc.w	r4, sl, sl
 80077f4:	4699      	mov	r9, r3
 80077f6:	46a2      	mov	sl, r4
 80077f8:	eb19 0905 	adds.w	r9, r9, r5
 80077fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007800:	f04f 0100 	mov.w	r1, #0
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800780c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007810:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007814:	4689      	mov	r9, r1
 8007816:	4692      	mov	sl, r2
 8007818:	eb19 0005 	adds.w	r0, r9, r5
 800781c:	eb4a 0106 	adc.w	r1, sl, r6
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	461d      	mov	r5, r3
 8007826:	f04f 0600 	mov.w	r6, #0
 800782a:	196b      	adds	r3, r5, r5
 800782c:	eb46 0406 	adc.w	r4, r6, r6
 8007830:	461a      	mov	r2, r3
 8007832:	4623      	mov	r3, r4
 8007834:	f7f9 fa10 	bl	8000c58 <__aeabi_uldivmod>
 8007838:	4603      	mov	r3, r0
 800783a:	460c      	mov	r4, r1
 800783c:	461a      	mov	r2, r3
 800783e:	4b8b      	ldr	r3, [pc, #556]	; (8007a6c <UART_SetConfig+0x384>)
 8007840:	fba3 1302 	umull	r1, r3, r3, r2
 8007844:	095b      	lsrs	r3, r3, #5
 8007846:	2164      	movs	r1, #100	; 0x64
 8007848:	fb01 f303 	mul.w	r3, r1, r3
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	3332      	adds	r3, #50	; 0x32
 8007852:	4a86      	ldr	r2, [pc, #536]	; (8007a6c <UART_SetConfig+0x384>)
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007860:	4498      	add	r8, r3
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	461d      	mov	r5, r3
 8007866:	f04f 0600 	mov.w	r6, #0
 800786a:	46a9      	mov	r9, r5
 800786c:	46b2      	mov	sl, r6
 800786e:	eb19 0309 	adds.w	r3, r9, r9
 8007872:	eb4a 040a 	adc.w	r4, sl, sl
 8007876:	4699      	mov	r9, r3
 8007878:	46a2      	mov	sl, r4
 800787a:	eb19 0905 	adds.w	r9, r9, r5
 800787e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007882:	f04f 0100 	mov.w	r1, #0
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800788e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007892:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007896:	4689      	mov	r9, r1
 8007898:	4692      	mov	sl, r2
 800789a:	eb19 0005 	adds.w	r0, r9, r5
 800789e:	eb4a 0106 	adc.w	r1, sl, r6
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	461d      	mov	r5, r3
 80078a8:	f04f 0600 	mov.w	r6, #0
 80078ac:	196b      	adds	r3, r5, r5
 80078ae:	eb46 0406 	adc.w	r4, r6, r6
 80078b2:	461a      	mov	r2, r3
 80078b4:	4623      	mov	r3, r4
 80078b6:	f7f9 f9cf 	bl	8000c58 <__aeabi_uldivmod>
 80078ba:	4603      	mov	r3, r0
 80078bc:	460c      	mov	r4, r1
 80078be:	461a      	mov	r2, r3
 80078c0:	4b6a      	ldr	r3, [pc, #424]	; (8007a6c <UART_SetConfig+0x384>)
 80078c2:	fba3 1302 	umull	r1, r3, r3, r2
 80078c6:	095b      	lsrs	r3, r3, #5
 80078c8:	2164      	movs	r1, #100	; 0x64
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	3332      	adds	r3, #50	; 0x32
 80078d4:	4a65      	ldr	r2, [pc, #404]	; (8007a6c <UART_SetConfig+0x384>)
 80078d6:	fba2 2303 	umull	r2, r3, r2, r3
 80078da:	095b      	lsrs	r3, r3, #5
 80078dc:	f003 0207 	and.w	r2, r3, #7
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4442      	add	r2, r8
 80078e6:	609a      	str	r2, [r3, #8]
 80078e8:	e26f      	b.n	8007dca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078ea:	f7fe fa25 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 80078ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	461d      	mov	r5, r3
 80078f4:	f04f 0600 	mov.w	r6, #0
 80078f8:	46a8      	mov	r8, r5
 80078fa:	46b1      	mov	r9, r6
 80078fc:	eb18 0308 	adds.w	r3, r8, r8
 8007900:	eb49 0409 	adc.w	r4, r9, r9
 8007904:	4698      	mov	r8, r3
 8007906:	46a1      	mov	r9, r4
 8007908:	eb18 0805 	adds.w	r8, r8, r5
 800790c:	eb49 0906 	adc.w	r9, r9, r6
 8007910:	f04f 0100 	mov.w	r1, #0
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800791c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007920:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007924:	4688      	mov	r8, r1
 8007926:	4691      	mov	r9, r2
 8007928:	eb18 0005 	adds.w	r0, r8, r5
 800792c:	eb49 0106 	adc.w	r1, r9, r6
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	461d      	mov	r5, r3
 8007936:	f04f 0600 	mov.w	r6, #0
 800793a:	196b      	adds	r3, r5, r5
 800793c:	eb46 0406 	adc.w	r4, r6, r6
 8007940:	461a      	mov	r2, r3
 8007942:	4623      	mov	r3, r4
 8007944:	f7f9 f988 	bl	8000c58 <__aeabi_uldivmod>
 8007948:	4603      	mov	r3, r0
 800794a:	460c      	mov	r4, r1
 800794c:	461a      	mov	r2, r3
 800794e:	4b47      	ldr	r3, [pc, #284]	; (8007a6c <UART_SetConfig+0x384>)
 8007950:	fba3 2302 	umull	r2, r3, r3, r2
 8007954:	095b      	lsrs	r3, r3, #5
 8007956:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	461d      	mov	r5, r3
 800795e:	f04f 0600 	mov.w	r6, #0
 8007962:	46a9      	mov	r9, r5
 8007964:	46b2      	mov	sl, r6
 8007966:	eb19 0309 	adds.w	r3, r9, r9
 800796a:	eb4a 040a 	adc.w	r4, sl, sl
 800796e:	4699      	mov	r9, r3
 8007970:	46a2      	mov	sl, r4
 8007972:	eb19 0905 	adds.w	r9, r9, r5
 8007976:	eb4a 0a06 	adc.w	sl, sl, r6
 800797a:	f04f 0100 	mov.w	r1, #0
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007986:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800798a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800798e:	4689      	mov	r9, r1
 8007990:	4692      	mov	sl, r2
 8007992:	eb19 0005 	adds.w	r0, r9, r5
 8007996:	eb4a 0106 	adc.w	r1, sl, r6
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	461d      	mov	r5, r3
 80079a0:	f04f 0600 	mov.w	r6, #0
 80079a4:	196b      	adds	r3, r5, r5
 80079a6:	eb46 0406 	adc.w	r4, r6, r6
 80079aa:	461a      	mov	r2, r3
 80079ac:	4623      	mov	r3, r4
 80079ae:	f7f9 f953 	bl	8000c58 <__aeabi_uldivmod>
 80079b2:	4603      	mov	r3, r0
 80079b4:	460c      	mov	r4, r1
 80079b6:	461a      	mov	r2, r3
 80079b8:	4b2c      	ldr	r3, [pc, #176]	; (8007a6c <UART_SetConfig+0x384>)
 80079ba:	fba3 1302 	umull	r1, r3, r3, r2
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	2164      	movs	r1, #100	; 0x64
 80079c2:	fb01 f303 	mul.w	r3, r1, r3
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	3332      	adds	r3, #50	; 0x32
 80079cc:	4a27      	ldr	r2, [pc, #156]	; (8007a6c <UART_SetConfig+0x384>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80079da:	4498      	add	r8, r3
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	461d      	mov	r5, r3
 80079e0:	f04f 0600 	mov.w	r6, #0
 80079e4:	46a9      	mov	r9, r5
 80079e6:	46b2      	mov	sl, r6
 80079e8:	eb19 0309 	adds.w	r3, r9, r9
 80079ec:	eb4a 040a 	adc.w	r4, sl, sl
 80079f0:	4699      	mov	r9, r3
 80079f2:	46a2      	mov	sl, r4
 80079f4:	eb19 0905 	adds.w	r9, r9, r5
 80079f8:	eb4a 0a06 	adc.w	sl, sl, r6
 80079fc:	f04f 0100 	mov.w	r1, #0
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007a10:	4689      	mov	r9, r1
 8007a12:	4692      	mov	sl, r2
 8007a14:	eb19 0005 	adds.w	r0, r9, r5
 8007a18:	eb4a 0106 	adc.w	r1, sl, r6
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	461d      	mov	r5, r3
 8007a22:	f04f 0600 	mov.w	r6, #0
 8007a26:	196b      	adds	r3, r5, r5
 8007a28:	eb46 0406 	adc.w	r4, r6, r6
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4623      	mov	r3, r4
 8007a30:	f7f9 f912 	bl	8000c58 <__aeabi_uldivmod>
 8007a34:	4603      	mov	r3, r0
 8007a36:	460c      	mov	r4, r1
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4b0c      	ldr	r3, [pc, #48]	; (8007a6c <UART_SetConfig+0x384>)
 8007a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	2164      	movs	r1, #100	; 0x64
 8007a44:	fb01 f303 	mul.w	r3, r1, r3
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	3332      	adds	r3, #50	; 0x32
 8007a4e:	4a07      	ldr	r2, [pc, #28]	; (8007a6c <UART_SetConfig+0x384>)
 8007a50:	fba2 2303 	umull	r2, r3, r2, r3
 8007a54:	095b      	lsrs	r3, r3, #5
 8007a56:	f003 0207 	and.w	r2, r3, #7
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4442      	add	r2, r8
 8007a60:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007a62:	e1b2      	b.n	8007dca <UART_SetConfig+0x6e2>
 8007a64:	40011000 	.word	0x40011000
 8007a68:	40011400 	.word	0x40011400
 8007a6c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4ad7      	ldr	r2, [pc, #860]	; (8007dd4 <UART_SetConfig+0x6ec>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d005      	beq.n	8007a86 <UART_SetConfig+0x39e>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4ad6      	ldr	r2, [pc, #856]	; (8007dd8 <UART_SetConfig+0x6f0>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	f040 80d1 	bne.w	8007c28 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a86:	f7fe f96b 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 8007a8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	469a      	mov	sl, r3
 8007a90:	f04f 0b00 	mov.w	fp, #0
 8007a94:	46d0      	mov	r8, sl
 8007a96:	46d9      	mov	r9, fp
 8007a98:	eb18 0308 	adds.w	r3, r8, r8
 8007a9c:	eb49 0409 	adc.w	r4, r9, r9
 8007aa0:	4698      	mov	r8, r3
 8007aa2:	46a1      	mov	r9, r4
 8007aa4:	eb18 080a 	adds.w	r8, r8, sl
 8007aa8:	eb49 090b 	adc.w	r9, r9, fp
 8007aac:	f04f 0100 	mov.w	r1, #0
 8007ab0:	f04f 0200 	mov.w	r2, #0
 8007ab4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007ab8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007abc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ac0:	4688      	mov	r8, r1
 8007ac2:	4691      	mov	r9, r2
 8007ac4:	eb1a 0508 	adds.w	r5, sl, r8
 8007ac8:	eb4b 0609 	adc.w	r6, fp, r9
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	f04f 0300 	mov.w	r3, #0
 8007ada:	f04f 0400 	mov.w	r4, #0
 8007ade:	0094      	lsls	r4, r2, #2
 8007ae0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ae4:	008b      	lsls	r3, r1, #2
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	4623      	mov	r3, r4
 8007aea:	4628      	mov	r0, r5
 8007aec:	4631      	mov	r1, r6
 8007aee:	f7f9 f8b3 	bl	8000c58 <__aeabi_uldivmod>
 8007af2:	4603      	mov	r3, r0
 8007af4:	460c      	mov	r4, r1
 8007af6:	461a      	mov	r2, r3
 8007af8:	4bb8      	ldr	r3, [pc, #736]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007afa:	fba3 2302 	umull	r2, r3, r3, r2
 8007afe:	095b      	lsrs	r3, r3, #5
 8007b00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	469b      	mov	fp, r3
 8007b08:	f04f 0c00 	mov.w	ip, #0
 8007b0c:	46d9      	mov	r9, fp
 8007b0e:	46e2      	mov	sl, ip
 8007b10:	eb19 0309 	adds.w	r3, r9, r9
 8007b14:	eb4a 040a 	adc.w	r4, sl, sl
 8007b18:	4699      	mov	r9, r3
 8007b1a:	46a2      	mov	sl, r4
 8007b1c:	eb19 090b 	adds.w	r9, r9, fp
 8007b20:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007b24:	f04f 0100 	mov.w	r1, #0
 8007b28:	f04f 0200 	mov.w	r2, #0
 8007b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b38:	4689      	mov	r9, r1
 8007b3a:	4692      	mov	sl, r2
 8007b3c:	eb1b 0509 	adds.w	r5, fp, r9
 8007b40:	eb4c 060a 	adc.w	r6, ip, sl
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f04f 0200 	mov.w	r2, #0
 8007b4e:	f04f 0300 	mov.w	r3, #0
 8007b52:	f04f 0400 	mov.w	r4, #0
 8007b56:	0094      	lsls	r4, r2, #2
 8007b58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007b5c:	008b      	lsls	r3, r1, #2
 8007b5e:	461a      	mov	r2, r3
 8007b60:	4623      	mov	r3, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	4631      	mov	r1, r6
 8007b66:	f7f9 f877 	bl	8000c58 <__aeabi_uldivmod>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4b9a      	ldr	r3, [pc, #616]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007b72:	fba3 1302 	umull	r1, r3, r3, r2
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	2164      	movs	r1, #100	; 0x64
 8007b7a:	fb01 f303 	mul.w	r3, r1, r3
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	3332      	adds	r3, #50	; 0x32
 8007b84:	4a95      	ldr	r2, [pc, #596]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007b86:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b90:	4498      	add	r8, r3
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	469b      	mov	fp, r3
 8007b96:	f04f 0c00 	mov.w	ip, #0
 8007b9a:	46d9      	mov	r9, fp
 8007b9c:	46e2      	mov	sl, ip
 8007b9e:	eb19 0309 	adds.w	r3, r9, r9
 8007ba2:	eb4a 040a 	adc.w	r4, sl, sl
 8007ba6:	4699      	mov	r9, r3
 8007ba8:	46a2      	mov	sl, r4
 8007baa:	eb19 090b 	adds.w	r9, r9, fp
 8007bae:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007bb2:	f04f 0100 	mov.w	r1, #0
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bbe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007bc2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007bc6:	4689      	mov	r9, r1
 8007bc8:	4692      	mov	sl, r2
 8007bca:	eb1b 0509 	adds.w	r5, fp, r9
 8007bce:	eb4c 060a 	adc.w	r6, ip, sl
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	f04f 0200 	mov.w	r2, #0
 8007bdc:	f04f 0300 	mov.w	r3, #0
 8007be0:	f04f 0400 	mov.w	r4, #0
 8007be4:	0094      	lsls	r4, r2, #2
 8007be6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007bea:	008b      	lsls	r3, r1, #2
 8007bec:	461a      	mov	r2, r3
 8007bee:	4623      	mov	r3, r4
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	f7f9 f830 	bl	8000c58 <__aeabi_uldivmod>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	460c      	mov	r4, r1
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	4b77      	ldr	r3, [pc, #476]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007c00:	fba3 1302 	umull	r1, r3, r3, r2
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	2164      	movs	r1, #100	; 0x64
 8007c08:	fb01 f303 	mul.w	r3, r1, r3
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	3332      	adds	r3, #50	; 0x32
 8007c12:	4a72      	ldr	r2, [pc, #456]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	f003 020f 	and.w	r2, r3, #15
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4442      	add	r2, r8
 8007c24:	609a      	str	r2, [r3, #8]
 8007c26:	e0d0      	b.n	8007dca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c28:	f7fe f886 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 8007c2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	469a      	mov	sl, r3
 8007c32:	f04f 0b00 	mov.w	fp, #0
 8007c36:	46d0      	mov	r8, sl
 8007c38:	46d9      	mov	r9, fp
 8007c3a:	eb18 0308 	adds.w	r3, r8, r8
 8007c3e:	eb49 0409 	adc.w	r4, r9, r9
 8007c42:	4698      	mov	r8, r3
 8007c44:	46a1      	mov	r9, r4
 8007c46:	eb18 080a 	adds.w	r8, r8, sl
 8007c4a:	eb49 090b 	adc.w	r9, r9, fp
 8007c4e:	f04f 0100 	mov.w	r1, #0
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c62:	4688      	mov	r8, r1
 8007c64:	4691      	mov	r9, r2
 8007c66:	eb1a 0508 	adds.w	r5, sl, r8
 8007c6a:	eb4b 0609 	adc.w	r6, fp, r9
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	4619      	mov	r1, r3
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	f04f 0400 	mov.w	r4, #0
 8007c80:	0094      	lsls	r4, r2, #2
 8007c82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007c86:	008b      	lsls	r3, r1, #2
 8007c88:	461a      	mov	r2, r3
 8007c8a:	4623      	mov	r3, r4
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	4631      	mov	r1, r6
 8007c90:	f7f8 ffe2 	bl	8000c58 <__aeabi_uldivmod>
 8007c94:	4603      	mov	r3, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4b50      	ldr	r3, [pc, #320]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	469b      	mov	fp, r3
 8007caa:	f04f 0c00 	mov.w	ip, #0
 8007cae:	46d9      	mov	r9, fp
 8007cb0:	46e2      	mov	sl, ip
 8007cb2:	eb19 0309 	adds.w	r3, r9, r9
 8007cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8007cba:	4699      	mov	r9, r3
 8007cbc:	46a2      	mov	sl, r4
 8007cbe:	eb19 090b 	adds.w	r9, r9, fp
 8007cc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007cc6:	f04f 0100 	mov.w	r1, #0
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cda:	4689      	mov	r9, r1
 8007cdc:	4692      	mov	sl, r2
 8007cde:	eb1b 0509 	adds.w	r5, fp, r9
 8007ce2:	eb4c 060a 	adc.w	r6, ip, sl
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	4619      	mov	r1, r3
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	f04f 0300 	mov.w	r3, #0
 8007cf4:	f04f 0400 	mov.w	r4, #0
 8007cf8:	0094      	lsls	r4, r2, #2
 8007cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007cfe:	008b      	lsls	r3, r1, #2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4623      	mov	r3, r4
 8007d04:	4628      	mov	r0, r5
 8007d06:	4631      	mov	r1, r6
 8007d08:	f7f8 ffa6 	bl	8000c58 <__aeabi_uldivmod>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	461a      	mov	r2, r3
 8007d12:	4b32      	ldr	r3, [pc, #200]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007d14:	fba3 1302 	umull	r1, r3, r3, r2
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	2164      	movs	r1, #100	; 0x64
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	3332      	adds	r3, #50	; 0x32
 8007d26:	4a2d      	ldr	r2, [pc, #180]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007d28:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2c:	095b      	lsrs	r3, r3, #5
 8007d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d32:	4498      	add	r8, r3
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	469b      	mov	fp, r3
 8007d38:	f04f 0c00 	mov.w	ip, #0
 8007d3c:	46d9      	mov	r9, fp
 8007d3e:	46e2      	mov	sl, ip
 8007d40:	eb19 0309 	adds.w	r3, r9, r9
 8007d44:	eb4a 040a 	adc.w	r4, sl, sl
 8007d48:	4699      	mov	r9, r3
 8007d4a:	46a2      	mov	sl, r4
 8007d4c:	eb19 090b 	adds.w	r9, r9, fp
 8007d50:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007d54:	f04f 0100 	mov.w	r1, #0
 8007d58:	f04f 0200 	mov.w	r2, #0
 8007d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007d64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007d68:	4689      	mov	r9, r1
 8007d6a:	4692      	mov	sl, r2
 8007d6c:	eb1b 0509 	adds.w	r5, fp, r9
 8007d70:	eb4c 060a 	adc.w	r6, ip, sl
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4619      	mov	r1, r3
 8007d7a:	f04f 0200 	mov.w	r2, #0
 8007d7e:	f04f 0300 	mov.w	r3, #0
 8007d82:	f04f 0400 	mov.w	r4, #0
 8007d86:	0094      	lsls	r4, r2, #2
 8007d88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d8c:	008b      	lsls	r3, r1, #2
 8007d8e:	461a      	mov	r2, r3
 8007d90:	4623      	mov	r3, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	4631      	mov	r1, r6
 8007d96:	f7f8 ff5f 	bl	8000c58 <__aeabi_uldivmod>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4b0e      	ldr	r3, [pc, #56]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007da2:	fba3 1302 	umull	r1, r3, r3, r2
 8007da6:	095b      	lsrs	r3, r3, #5
 8007da8:	2164      	movs	r1, #100	; 0x64
 8007daa:	fb01 f303 	mul.w	r3, r1, r3
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	011b      	lsls	r3, r3, #4
 8007db2:	3332      	adds	r3, #50	; 0x32
 8007db4:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <UART_SetConfig+0x6f4>)
 8007db6:	fba2 2303 	umull	r2, r3, r2, r3
 8007dba:	095b      	lsrs	r3, r3, #5
 8007dbc:	f003 020f 	and.w	r2, r3, #15
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4442      	add	r2, r8
 8007dc6:	609a      	str	r2, [r3, #8]
}
 8007dc8:	e7ff      	b.n	8007dca <UART_SetConfig+0x6e2>
 8007dca:	bf00      	nop
 8007dcc:	3714      	adds	r7, #20
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	40011000 	.word	0x40011000
 8007dd8:	40011400 	.word	0x40011400
 8007ddc:	51eb851f 	.word	0x51eb851f

08007de0 <__errno>:
 8007de0:	4b01      	ldr	r3, [pc, #4]	; (8007de8 <__errno+0x8>)
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	20000010 	.word	0x20000010

08007dec <__libc_init_array>:
 8007dec:	b570      	push	{r4, r5, r6, lr}
 8007dee:	4e0d      	ldr	r6, [pc, #52]	; (8007e24 <__libc_init_array+0x38>)
 8007df0:	4c0d      	ldr	r4, [pc, #52]	; (8007e28 <__libc_init_array+0x3c>)
 8007df2:	1ba4      	subs	r4, r4, r6
 8007df4:	10a4      	asrs	r4, r4, #2
 8007df6:	2500      	movs	r5, #0
 8007df8:	42a5      	cmp	r5, r4
 8007dfa:	d109      	bne.n	8007e10 <__libc_init_array+0x24>
 8007dfc:	4e0b      	ldr	r6, [pc, #44]	; (8007e2c <__libc_init_array+0x40>)
 8007dfe:	4c0c      	ldr	r4, [pc, #48]	; (8007e30 <__libc_init_array+0x44>)
 8007e00:	f003 fd68 	bl	800b8d4 <_init>
 8007e04:	1ba4      	subs	r4, r4, r6
 8007e06:	10a4      	asrs	r4, r4, #2
 8007e08:	2500      	movs	r5, #0
 8007e0a:	42a5      	cmp	r5, r4
 8007e0c:	d105      	bne.n	8007e1a <__libc_init_array+0x2e>
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e14:	4798      	blx	r3
 8007e16:	3501      	adds	r5, #1
 8007e18:	e7ee      	b.n	8007df8 <__libc_init_array+0xc>
 8007e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e1e:	4798      	blx	r3
 8007e20:	3501      	adds	r5, #1
 8007e22:	e7f2      	b.n	8007e0a <__libc_init_array+0x1e>
 8007e24:	0800c0c0 	.word	0x0800c0c0
 8007e28:	0800c0c0 	.word	0x0800c0c0
 8007e2c:	0800c0c0 	.word	0x0800c0c0
 8007e30:	0800c0c4 	.word	0x0800c0c4

08007e34 <memcpy>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	1e43      	subs	r3, r0, #1
 8007e38:	440a      	add	r2, r1
 8007e3a:	4291      	cmp	r1, r2
 8007e3c:	d100      	bne.n	8007e40 <memcpy+0xc>
 8007e3e:	bd10      	pop	{r4, pc}
 8007e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e48:	e7f7      	b.n	8007e3a <memcpy+0x6>

08007e4a <memset>:
 8007e4a:	4402      	add	r2, r0
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d100      	bne.n	8007e54 <memset+0xa>
 8007e52:	4770      	bx	lr
 8007e54:	f803 1b01 	strb.w	r1, [r3], #1
 8007e58:	e7f9      	b.n	8007e4e <memset+0x4>

08007e5a <__cvt>:
 8007e5a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5e:	ec55 4b10 	vmov	r4, r5, d0
 8007e62:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007e64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	460e      	mov	r6, r1
 8007e6c:	4691      	mov	r9, r2
 8007e6e:	4619      	mov	r1, r3
 8007e70:	bfb8      	it	lt
 8007e72:	4622      	movlt	r2, r4
 8007e74:	462b      	mov	r3, r5
 8007e76:	f027 0720 	bic.w	r7, r7, #32
 8007e7a:	bfbb      	ittet	lt
 8007e7c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e80:	461d      	movlt	r5, r3
 8007e82:	2300      	movge	r3, #0
 8007e84:	232d      	movlt	r3, #45	; 0x2d
 8007e86:	bfb8      	it	lt
 8007e88:	4614      	movlt	r4, r2
 8007e8a:	2f46      	cmp	r7, #70	; 0x46
 8007e8c:	700b      	strb	r3, [r1, #0]
 8007e8e:	d004      	beq.n	8007e9a <__cvt+0x40>
 8007e90:	2f45      	cmp	r7, #69	; 0x45
 8007e92:	d100      	bne.n	8007e96 <__cvt+0x3c>
 8007e94:	3601      	adds	r6, #1
 8007e96:	2102      	movs	r1, #2
 8007e98:	e000      	b.n	8007e9c <__cvt+0x42>
 8007e9a:	2103      	movs	r1, #3
 8007e9c:	ab03      	add	r3, sp, #12
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	ab02      	add	r3, sp, #8
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	4632      	mov	r2, r6
 8007ea6:	4653      	mov	r3, sl
 8007ea8:	ec45 4b10 	vmov	d0, r4, r5
 8007eac:	f000 fce0 	bl	8008870 <_dtoa_r>
 8007eb0:	2f47      	cmp	r7, #71	; 0x47
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	d102      	bne.n	8007ebc <__cvt+0x62>
 8007eb6:	f019 0f01 	tst.w	r9, #1
 8007eba:	d026      	beq.n	8007f0a <__cvt+0xb0>
 8007ebc:	2f46      	cmp	r7, #70	; 0x46
 8007ebe:	eb08 0906 	add.w	r9, r8, r6
 8007ec2:	d111      	bne.n	8007ee8 <__cvt+0x8e>
 8007ec4:	f898 3000 	ldrb.w	r3, [r8]
 8007ec8:	2b30      	cmp	r3, #48	; 0x30
 8007eca:	d10a      	bne.n	8007ee2 <__cvt+0x88>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2300      	movs	r3, #0
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	f7f8 fe00 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ed8:	b918      	cbnz	r0, 8007ee2 <__cvt+0x88>
 8007eda:	f1c6 0601 	rsb	r6, r6, #1
 8007ede:	f8ca 6000 	str.w	r6, [sl]
 8007ee2:	f8da 3000 	ldr.w	r3, [sl]
 8007ee6:	4499      	add	r9, r3
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2300      	movs	r3, #0
 8007eec:	4620      	mov	r0, r4
 8007eee:	4629      	mov	r1, r5
 8007ef0:	f7f8 fdf2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ef4:	b938      	cbnz	r0, 8007f06 <__cvt+0xac>
 8007ef6:	2230      	movs	r2, #48	; 0x30
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	454b      	cmp	r3, r9
 8007efc:	d205      	bcs.n	8007f0a <__cvt+0xb0>
 8007efe:	1c59      	adds	r1, r3, #1
 8007f00:	9103      	str	r1, [sp, #12]
 8007f02:	701a      	strb	r2, [r3, #0]
 8007f04:	e7f8      	b.n	8007ef8 <__cvt+0x9e>
 8007f06:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f0e:	eba3 0308 	sub.w	r3, r3, r8
 8007f12:	4640      	mov	r0, r8
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	b004      	add	sp, #16
 8007f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007f1c <__exponent>:
 8007f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	4604      	mov	r4, r0
 8007f22:	bfba      	itte	lt
 8007f24:	4249      	neglt	r1, r1
 8007f26:	232d      	movlt	r3, #45	; 0x2d
 8007f28:	232b      	movge	r3, #43	; 0x2b
 8007f2a:	2909      	cmp	r1, #9
 8007f2c:	f804 2b02 	strb.w	r2, [r4], #2
 8007f30:	7043      	strb	r3, [r0, #1]
 8007f32:	dd20      	ble.n	8007f76 <__exponent+0x5a>
 8007f34:	f10d 0307 	add.w	r3, sp, #7
 8007f38:	461f      	mov	r7, r3
 8007f3a:	260a      	movs	r6, #10
 8007f3c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f40:	fb06 1115 	mls	r1, r6, r5, r1
 8007f44:	3130      	adds	r1, #48	; 0x30
 8007f46:	2d09      	cmp	r5, #9
 8007f48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f4c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007f50:	4629      	mov	r1, r5
 8007f52:	dc09      	bgt.n	8007f68 <__exponent+0x4c>
 8007f54:	3130      	adds	r1, #48	; 0x30
 8007f56:	3b02      	subs	r3, #2
 8007f58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f5c:	42bb      	cmp	r3, r7
 8007f5e:	4622      	mov	r2, r4
 8007f60:	d304      	bcc.n	8007f6c <__exponent+0x50>
 8007f62:	1a10      	subs	r0, r2, r0
 8007f64:	b003      	add	sp, #12
 8007f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f68:	4613      	mov	r3, r2
 8007f6a:	e7e7      	b.n	8007f3c <__exponent+0x20>
 8007f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f70:	f804 2b01 	strb.w	r2, [r4], #1
 8007f74:	e7f2      	b.n	8007f5c <__exponent+0x40>
 8007f76:	2330      	movs	r3, #48	; 0x30
 8007f78:	4419      	add	r1, r3
 8007f7a:	7083      	strb	r3, [r0, #2]
 8007f7c:	1d02      	adds	r2, r0, #4
 8007f7e:	70c1      	strb	r1, [r0, #3]
 8007f80:	e7ef      	b.n	8007f62 <__exponent+0x46>
	...

08007f84 <_printf_float>:
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	b08d      	sub	sp, #52	; 0x34
 8007f8a:	460c      	mov	r4, r1
 8007f8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007f90:	4616      	mov	r6, r2
 8007f92:	461f      	mov	r7, r3
 8007f94:	4605      	mov	r5, r0
 8007f96:	f001 fa23 	bl	80093e0 <_localeconv_r>
 8007f9a:	6803      	ldr	r3, [r0, #0]
 8007f9c:	9304      	str	r3, [sp, #16]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7f8 f91e 	bl	80001e0 <strlen>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	930a      	str	r3, [sp, #40]	; 0x28
 8007fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8007fac:	9005      	str	r0, [sp, #20]
 8007fae:	3307      	adds	r3, #7
 8007fb0:	f023 0307 	bic.w	r3, r3, #7
 8007fb4:	f103 0208 	add.w	r2, r3, #8
 8007fb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007fbc:	f8d4 b000 	ldr.w	fp, [r4]
 8007fc0:	f8c8 2000 	str.w	r2, [r8]
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007fcc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007fd0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fd4:	9307      	str	r3, [sp, #28]
 8007fd6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fde:	4ba7      	ldr	r3, [pc, #668]	; (800827c <_printf_float+0x2f8>)
 8007fe0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fe4:	f7f8 fdaa 	bl	8000b3c <__aeabi_dcmpun>
 8007fe8:	bb70      	cbnz	r0, 8008048 <_printf_float+0xc4>
 8007fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fee:	4ba3      	ldr	r3, [pc, #652]	; (800827c <_printf_float+0x2f8>)
 8007ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ff4:	f7f8 fd84 	bl	8000b00 <__aeabi_dcmple>
 8007ff8:	bb30      	cbnz	r0, 8008048 <_printf_float+0xc4>
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4640      	mov	r0, r8
 8008000:	4649      	mov	r1, r9
 8008002:	f7f8 fd73 	bl	8000aec <__aeabi_dcmplt>
 8008006:	b110      	cbz	r0, 800800e <_printf_float+0x8a>
 8008008:	232d      	movs	r3, #45	; 0x2d
 800800a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800800e:	4a9c      	ldr	r2, [pc, #624]	; (8008280 <_printf_float+0x2fc>)
 8008010:	4b9c      	ldr	r3, [pc, #624]	; (8008284 <_printf_float+0x300>)
 8008012:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008016:	bf8c      	ite	hi
 8008018:	4690      	movhi	r8, r2
 800801a:	4698      	movls	r8, r3
 800801c:	2303      	movs	r3, #3
 800801e:	f02b 0204 	bic.w	r2, fp, #4
 8008022:	6123      	str	r3, [r4, #16]
 8008024:	6022      	str	r2, [r4, #0]
 8008026:	f04f 0900 	mov.w	r9, #0
 800802a:	9700      	str	r7, [sp, #0]
 800802c:	4633      	mov	r3, r6
 800802e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f000 f9e6 	bl	8008404 <_printf_common>
 8008038:	3001      	adds	r0, #1
 800803a:	f040 808d 	bne.w	8008158 <_printf_float+0x1d4>
 800803e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008042:	b00d      	add	sp, #52	; 0x34
 8008044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008048:	4642      	mov	r2, r8
 800804a:	464b      	mov	r3, r9
 800804c:	4640      	mov	r0, r8
 800804e:	4649      	mov	r1, r9
 8008050:	f7f8 fd74 	bl	8000b3c <__aeabi_dcmpun>
 8008054:	b110      	cbz	r0, 800805c <_printf_float+0xd8>
 8008056:	4a8c      	ldr	r2, [pc, #560]	; (8008288 <_printf_float+0x304>)
 8008058:	4b8c      	ldr	r3, [pc, #560]	; (800828c <_printf_float+0x308>)
 800805a:	e7da      	b.n	8008012 <_printf_float+0x8e>
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	1c4b      	adds	r3, r1, #1
 8008060:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008064:	a80a      	add	r0, sp, #40	; 0x28
 8008066:	d13e      	bne.n	80080e6 <_printf_float+0x162>
 8008068:	2306      	movs	r3, #6
 800806a:	6063      	str	r3, [r4, #4]
 800806c:	2300      	movs	r3, #0
 800806e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008072:	ab09      	add	r3, sp, #36	; 0x24
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	ec49 8b10 	vmov	d0, r8, r9
 800807a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800807e:	6022      	str	r2, [r4, #0]
 8008080:	f8cd a004 	str.w	sl, [sp, #4]
 8008084:	6861      	ldr	r1, [r4, #4]
 8008086:	4628      	mov	r0, r5
 8008088:	f7ff fee7 	bl	8007e5a <__cvt>
 800808c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008090:	2b47      	cmp	r3, #71	; 0x47
 8008092:	4680      	mov	r8, r0
 8008094:	d109      	bne.n	80080aa <_printf_float+0x126>
 8008096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008098:	1cd8      	adds	r0, r3, #3
 800809a:	db02      	blt.n	80080a2 <_printf_float+0x11e>
 800809c:	6862      	ldr	r2, [r4, #4]
 800809e:	4293      	cmp	r3, r2
 80080a0:	dd47      	ble.n	8008132 <_printf_float+0x1ae>
 80080a2:	f1aa 0a02 	sub.w	sl, sl, #2
 80080a6:	fa5f fa8a 	uxtb.w	sl, sl
 80080aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80080ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080b0:	d824      	bhi.n	80080fc <_printf_float+0x178>
 80080b2:	3901      	subs	r1, #1
 80080b4:	4652      	mov	r2, sl
 80080b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080ba:	9109      	str	r1, [sp, #36]	; 0x24
 80080bc:	f7ff ff2e 	bl	8007f1c <__exponent>
 80080c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080c2:	1813      	adds	r3, r2, r0
 80080c4:	2a01      	cmp	r2, #1
 80080c6:	4681      	mov	r9, r0
 80080c8:	6123      	str	r3, [r4, #16]
 80080ca:	dc02      	bgt.n	80080d2 <_printf_float+0x14e>
 80080cc:	6822      	ldr	r2, [r4, #0]
 80080ce:	07d1      	lsls	r1, r2, #31
 80080d0:	d501      	bpl.n	80080d6 <_printf_float+0x152>
 80080d2:	3301      	adds	r3, #1
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0a5      	beq.n	800802a <_printf_float+0xa6>
 80080de:	232d      	movs	r3, #45	; 0x2d
 80080e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080e4:	e7a1      	b.n	800802a <_printf_float+0xa6>
 80080e6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80080ea:	f000 8177 	beq.w	80083dc <_printf_float+0x458>
 80080ee:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80080f2:	d1bb      	bne.n	800806c <_printf_float+0xe8>
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d1b9      	bne.n	800806c <_printf_float+0xe8>
 80080f8:	2301      	movs	r3, #1
 80080fa:	e7b6      	b.n	800806a <_printf_float+0xe6>
 80080fc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008100:	d119      	bne.n	8008136 <_printf_float+0x1b2>
 8008102:	2900      	cmp	r1, #0
 8008104:	6863      	ldr	r3, [r4, #4]
 8008106:	dd0c      	ble.n	8008122 <_printf_float+0x19e>
 8008108:	6121      	str	r1, [r4, #16]
 800810a:	b913      	cbnz	r3, 8008112 <_printf_float+0x18e>
 800810c:	6822      	ldr	r2, [r4, #0]
 800810e:	07d2      	lsls	r2, r2, #31
 8008110:	d502      	bpl.n	8008118 <_printf_float+0x194>
 8008112:	3301      	adds	r3, #1
 8008114:	440b      	add	r3, r1
 8008116:	6123      	str	r3, [r4, #16]
 8008118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811a:	65a3      	str	r3, [r4, #88]	; 0x58
 800811c:	f04f 0900 	mov.w	r9, #0
 8008120:	e7d9      	b.n	80080d6 <_printf_float+0x152>
 8008122:	b913      	cbnz	r3, 800812a <_printf_float+0x1a6>
 8008124:	6822      	ldr	r2, [r4, #0]
 8008126:	07d0      	lsls	r0, r2, #31
 8008128:	d501      	bpl.n	800812e <_printf_float+0x1aa>
 800812a:	3302      	adds	r3, #2
 800812c:	e7f3      	b.n	8008116 <_printf_float+0x192>
 800812e:	2301      	movs	r3, #1
 8008130:	e7f1      	b.n	8008116 <_printf_float+0x192>
 8008132:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008136:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800813a:	4293      	cmp	r3, r2
 800813c:	db05      	blt.n	800814a <_printf_float+0x1c6>
 800813e:	6822      	ldr	r2, [r4, #0]
 8008140:	6123      	str	r3, [r4, #16]
 8008142:	07d1      	lsls	r1, r2, #31
 8008144:	d5e8      	bpl.n	8008118 <_printf_float+0x194>
 8008146:	3301      	adds	r3, #1
 8008148:	e7e5      	b.n	8008116 <_printf_float+0x192>
 800814a:	2b00      	cmp	r3, #0
 800814c:	bfd4      	ite	le
 800814e:	f1c3 0302 	rsble	r3, r3, #2
 8008152:	2301      	movgt	r3, #1
 8008154:	4413      	add	r3, r2
 8008156:	e7de      	b.n	8008116 <_printf_float+0x192>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	055a      	lsls	r2, r3, #21
 800815c:	d407      	bmi.n	800816e <_printf_float+0x1ea>
 800815e:	6923      	ldr	r3, [r4, #16]
 8008160:	4642      	mov	r2, r8
 8008162:	4631      	mov	r1, r6
 8008164:	4628      	mov	r0, r5
 8008166:	47b8      	blx	r7
 8008168:	3001      	adds	r0, #1
 800816a:	d12b      	bne.n	80081c4 <_printf_float+0x240>
 800816c:	e767      	b.n	800803e <_printf_float+0xba>
 800816e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008172:	f240 80dc 	bls.w	800832e <_printf_float+0x3aa>
 8008176:	2200      	movs	r2, #0
 8008178:	2300      	movs	r3, #0
 800817a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800817e:	f7f8 fcab 	bl	8000ad8 <__aeabi_dcmpeq>
 8008182:	2800      	cmp	r0, #0
 8008184:	d033      	beq.n	80081ee <_printf_float+0x26a>
 8008186:	2301      	movs	r3, #1
 8008188:	4a41      	ldr	r2, [pc, #260]	; (8008290 <_printf_float+0x30c>)
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	f43f af54 	beq.w	800803e <_printf_float+0xba>
 8008196:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800819a:	429a      	cmp	r2, r3
 800819c:	db02      	blt.n	80081a4 <_printf_float+0x220>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	07d8      	lsls	r0, r3, #31
 80081a2:	d50f      	bpl.n	80081c4 <_printf_float+0x240>
 80081a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081a8:	4631      	mov	r1, r6
 80081aa:	4628      	mov	r0, r5
 80081ac:	47b8      	blx	r7
 80081ae:	3001      	adds	r0, #1
 80081b0:	f43f af45 	beq.w	800803e <_printf_float+0xba>
 80081b4:	f04f 0800 	mov.w	r8, #0
 80081b8:	f104 091a 	add.w	r9, r4, #26
 80081bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081be:	3b01      	subs	r3, #1
 80081c0:	4543      	cmp	r3, r8
 80081c2:	dc09      	bgt.n	80081d8 <_printf_float+0x254>
 80081c4:	6823      	ldr	r3, [r4, #0]
 80081c6:	079b      	lsls	r3, r3, #30
 80081c8:	f100 8103 	bmi.w	80083d2 <_printf_float+0x44e>
 80081cc:	68e0      	ldr	r0, [r4, #12]
 80081ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d0:	4298      	cmp	r0, r3
 80081d2:	bfb8      	it	lt
 80081d4:	4618      	movlt	r0, r3
 80081d6:	e734      	b.n	8008042 <_printf_float+0xbe>
 80081d8:	2301      	movs	r3, #1
 80081da:	464a      	mov	r2, r9
 80081dc:	4631      	mov	r1, r6
 80081de:	4628      	mov	r0, r5
 80081e0:	47b8      	blx	r7
 80081e2:	3001      	adds	r0, #1
 80081e4:	f43f af2b 	beq.w	800803e <_printf_float+0xba>
 80081e8:	f108 0801 	add.w	r8, r8, #1
 80081ec:	e7e6      	b.n	80081bc <_printf_float+0x238>
 80081ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	dc2b      	bgt.n	800824c <_printf_float+0x2c8>
 80081f4:	2301      	movs	r3, #1
 80081f6:	4a26      	ldr	r2, [pc, #152]	; (8008290 <_printf_float+0x30c>)
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f af1d 	beq.w	800803e <_printf_float+0xba>
 8008204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008206:	b923      	cbnz	r3, 8008212 <_printf_float+0x28e>
 8008208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800820a:	b913      	cbnz	r3, 8008212 <_printf_float+0x28e>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	07d9      	lsls	r1, r3, #31
 8008210:	d5d8      	bpl.n	80081c4 <_printf_float+0x240>
 8008212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008216:	4631      	mov	r1, r6
 8008218:	4628      	mov	r0, r5
 800821a:	47b8      	blx	r7
 800821c:	3001      	adds	r0, #1
 800821e:	f43f af0e 	beq.w	800803e <_printf_float+0xba>
 8008222:	f04f 0900 	mov.w	r9, #0
 8008226:	f104 0a1a 	add.w	sl, r4, #26
 800822a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822c:	425b      	negs	r3, r3
 800822e:	454b      	cmp	r3, r9
 8008230:	dc01      	bgt.n	8008236 <_printf_float+0x2b2>
 8008232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008234:	e794      	b.n	8008160 <_printf_float+0x1dc>
 8008236:	2301      	movs	r3, #1
 8008238:	4652      	mov	r2, sl
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	47b8      	blx	r7
 8008240:	3001      	adds	r0, #1
 8008242:	f43f aefc 	beq.w	800803e <_printf_float+0xba>
 8008246:	f109 0901 	add.w	r9, r9, #1
 800824a:	e7ee      	b.n	800822a <_printf_float+0x2a6>
 800824c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800824e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008250:	429a      	cmp	r2, r3
 8008252:	bfa8      	it	ge
 8008254:	461a      	movge	r2, r3
 8008256:	2a00      	cmp	r2, #0
 8008258:	4691      	mov	r9, r2
 800825a:	dd07      	ble.n	800826c <_printf_float+0x2e8>
 800825c:	4613      	mov	r3, r2
 800825e:	4631      	mov	r1, r6
 8008260:	4642      	mov	r2, r8
 8008262:	4628      	mov	r0, r5
 8008264:	47b8      	blx	r7
 8008266:	3001      	adds	r0, #1
 8008268:	f43f aee9 	beq.w	800803e <_printf_float+0xba>
 800826c:	f104 031a 	add.w	r3, r4, #26
 8008270:	f04f 0b00 	mov.w	fp, #0
 8008274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008278:	9306      	str	r3, [sp, #24]
 800827a:	e015      	b.n	80082a8 <_printf_float+0x324>
 800827c:	7fefffff 	.word	0x7fefffff
 8008280:	0800bc3c 	.word	0x0800bc3c
 8008284:	0800bc38 	.word	0x0800bc38
 8008288:	0800bc44 	.word	0x0800bc44
 800828c:	0800bc40 	.word	0x0800bc40
 8008290:	0800bc48 	.word	0x0800bc48
 8008294:	2301      	movs	r3, #1
 8008296:	9a06      	ldr	r2, [sp, #24]
 8008298:	4631      	mov	r1, r6
 800829a:	4628      	mov	r0, r5
 800829c:	47b8      	blx	r7
 800829e:	3001      	adds	r0, #1
 80082a0:	f43f aecd 	beq.w	800803e <_printf_float+0xba>
 80082a4:	f10b 0b01 	add.w	fp, fp, #1
 80082a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80082ac:	ebaa 0309 	sub.w	r3, sl, r9
 80082b0:	455b      	cmp	r3, fp
 80082b2:	dcef      	bgt.n	8008294 <_printf_float+0x310>
 80082b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082b8:	429a      	cmp	r2, r3
 80082ba:	44d0      	add	r8, sl
 80082bc:	db15      	blt.n	80082ea <_printf_float+0x366>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	07da      	lsls	r2, r3, #31
 80082c2:	d412      	bmi.n	80082ea <_printf_float+0x366>
 80082c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082c8:	eba3 020a 	sub.w	r2, r3, sl
 80082cc:	eba3 0a01 	sub.w	sl, r3, r1
 80082d0:	4592      	cmp	sl, r2
 80082d2:	bfa8      	it	ge
 80082d4:	4692      	movge	sl, r2
 80082d6:	f1ba 0f00 	cmp.w	sl, #0
 80082da:	dc0e      	bgt.n	80082fa <_printf_float+0x376>
 80082dc:	f04f 0800 	mov.w	r8, #0
 80082e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082e4:	f104 091a 	add.w	r9, r4, #26
 80082e8:	e019      	b.n	800831e <_printf_float+0x39a>
 80082ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	d1e5      	bne.n	80082c4 <_printf_float+0x340>
 80082f8:	e6a1      	b.n	800803e <_printf_float+0xba>
 80082fa:	4653      	mov	r3, sl
 80082fc:	4642      	mov	r2, r8
 80082fe:	4631      	mov	r1, r6
 8008300:	4628      	mov	r0, r5
 8008302:	47b8      	blx	r7
 8008304:	3001      	adds	r0, #1
 8008306:	d1e9      	bne.n	80082dc <_printf_float+0x358>
 8008308:	e699      	b.n	800803e <_printf_float+0xba>
 800830a:	2301      	movs	r3, #1
 800830c:	464a      	mov	r2, r9
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	47b8      	blx	r7
 8008314:	3001      	adds	r0, #1
 8008316:	f43f ae92 	beq.w	800803e <_printf_float+0xba>
 800831a:	f108 0801 	add.w	r8, r8, #1
 800831e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008322:	1a9b      	subs	r3, r3, r2
 8008324:	eba3 030a 	sub.w	r3, r3, sl
 8008328:	4543      	cmp	r3, r8
 800832a:	dcee      	bgt.n	800830a <_printf_float+0x386>
 800832c:	e74a      	b.n	80081c4 <_printf_float+0x240>
 800832e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008330:	2a01      	cmp	r2, #1
 8008332:	dc01      	bgt.n	8008338 <_printf_float+0x3b4>
 8008334:	07db      	lsls	r3, r3, #31
 8008336:	d53a      	bpl.n	80083ae <_printf_float+0x42a>
 8008338:	2301      	movs	r3, #1
 800833a:	4642      	mov	r2, r8
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f ae7b 	beq.w	800803e <_printf_float+0xba>
 8008348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800834c:	4631      	mov	r1, r6
 800834e:	4628      	mov	r0, r5
 8008350:	47b8      	blx	r7
 8008352:	3001      	adds	r0, #1
 8008354:	f108 0801 	add.w	r8, r8, #1
 8008358:	f43f ae71 	beq.w	800803e <_printf_float+0xba>
 800835c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800835e:	2200      	movs	r2, #0
 8008360:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8008364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008368:	2300      	movs	r3, #0
 800836a:	f7f8 fbb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800836e:	b9c8      	cbnz	r0, 80083a4 <_printf_float+0x420>
 8008370:	4653      	mov	r3, sl
 8008372:	4642      	mov	r2, r8
 8008374:	4631      	mov	r1, r6
 8008376:	4628      	mov	r0, r5
 8008378:	47b8      	blx	r7
 800837a:	3001      	adds	r0, #1
 800837c:	d10e      	bne.n	800839c <_printf_float+0x418>
 800837e:	e65e      	b.n	800803e <_printf_float+0xba>
 8008380:	2301      	movs	r3, #1
 8008382:	4652      	mov	r2, sl
 8008384:	4631      	mov	r1, r6
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	f43f ae57 	beq.w	800803e <_printf_float+0xba>
 8008390:	f108 0801 	add.w	r8, r8, #1
 8008394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008396:	3b01      	subs	r3, #1
 8008398:	4543      	cmp	r3, r8
 800839a:	dcf1      	bgt.n	8008380 <_printf_float+0x3fc>
 800839c:	464b      	mov	r3, r9
 800839e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083a2:	e6de      	b.n	8008162 <_printf_float+0x1de>
 80083a4:	f04f 0800 	mov.w	r8, #0
 80083a8:	f104 0a1a 	add.w	sl, r4, #26
 80083ac:	e7f2      	b.n	8008394 <_printf_float+0x410>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7df      	b.n	8008372 <_printf_float+0x3ee>
 80083b2:	2301      	movs	r3, #1
 80083b4:	464a      	mov	r2, r9
 80083b6:	4631      	mov	r1, r6
 80083b8:	4628      	mov	r0, r5
 80083ba:	47b8      	blx	r7
 80083bc:	3001      	adds	r0, #1
 80083be:	f43f ae3e 	beq.w	800803e <_printf_float+0xba>
 80083c2:	f108 0801 	add.w	r8, r8, #1
 80083c6:	68e3      	ldr	r3, [r4, #12]
 80083c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083ca:	1a9b      	subs	r3, r3, r2
 80083cc:	4543      	cmp	r3, r8
 80083ce:	dcf0      	bgt.n	80083b2 <_printf_float+0x42e>
 80083d0:	e6fc      	b.n	80081cc <_printf_float+0x248>
 80083d2:	f04f 0800 	mov.w	r8, #0
 80083d6:	f104 0919 	add.w	r9, r4, #25
 80083da:	e7f4      	b.n	80083c6 <_printf_float+0x442>
 80083dc:	2900      	cmp	r1, #0
 80083de:	f43f ae8b 	beq.w	80080f8 <_printf_float+0x174>
 80083e2:	2300      	movs	r3, #0
 80083e4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80083e8:	ab09      	add	r3, sp, #36	; 0x24
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	ec49 8b10 	vmov	d0, r8, r9
 80083f0:	6022      	str	r2, [r4, #0]
 80083f2:	f8cd a004 	str.w	sl, [sp, #4]
 80083f6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083fa:	4628      	mov	r0, r5
 80083fc:	f7ff fd2d 	bl	8007e5a <__cvt>
 8008400:	4680      	mov	r8, r0
 8008402:	e648      	b.n	8008096 <_printf_float+0x112>

08008404 <_printf_common>:
 8008404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008408:	4691      	mov	r9, r2
 800840a:	461f      	mov	r7, r3
 800840c:	688a      	ldr	r2, [r1, #8]
 800840e:	690b      	ldr	r3, [r1, #16]
 8008410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008414:	4293      	cmp	r3, r2
 8008416:	bfb8      	it	lt
 8008418:	4613      	movlt	r3, r2
 800841a:	f8c9 3000 	str.w	r3, [r9]
 800841e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008422:	4606      	mov	r6, r0
 8008424:	460c      	mov	r4, r1
 8008426:	b112      	cbz	r2, 800842e <_printf_common+0x2a>
 8008428:	3301      	adds	r3, #1
 800842a:	f8c9 3000 	str.w	r3, [r9]
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	0699      	lsls	r1, r3, #26
 8008432:	bf42      	ittt	mi
 8008434:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008438:	3302      	addmi	r3, #2
 800843a:	f8c9 3000 	strmi.w	r3, [r9]
 800843e:	6825      	ldr	r5, [r4, #0]
 8008440:	f015 0506 	ands.w	r5, r5, #6
 8008444:	d107      	bne.n	8008456 <_printf_common+0x52>
 8008446:	f104 0a19 	add.w	sl, r4, #25
 800844a:	68e3      	ldr	r3, [r4, #12]
 800844c:	f8d9 2000 	ldr.w	r2, [r9]
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	42ab      	cmp	r3, r5
 8008454:	dc28      	bgt.n	80084a8 <_printf_common+0xa4>
 8008456:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	3300      	adds	r3, #0
 800845e:	bf18      	it	ne
 8008460:	2301      	movne	r3, #1
 8008462:	0692      	lsls	r2, r2, #26
 8008464:	d42d      	bmi.n	80084c2 <_printf_common+0xbe>
 8008466:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800846a:	4639      	mov	r1, r7
 800846c:	4630      	mov	r0, r6
 800846e:	47c0      	blx	r8
 8008470:	3001      	adds	r0, #1
 8008472:	d020      	beq.n	80084b6 <_printf_common+0xb2>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	68e5      	ldr	r5, [r4, #12]
 8008478:	f8d9 2000 	ldr.w	r2, [r9]
 800847c:	f003 0306 	and.w	r3, r3, #6
 8008480:	2b04      	cmp	r3, #4
 8008482:	bf08      	it	eq
 8008484:	1aad      	subeq	r5, r5, r2
 8008486:	68a3      	ldr	r3, [r4, #8]
 8008488:	6922      	ldr	r2, [r4, #16]
 800848a:	bf0c      	ite	eq
 800848c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008490:	2500      	movne	r5, #0
 8008492:	4293      	cmp	r3, r2
 8008494:	bfc4      	itt	gt
 8008496:	1a9b      	subgt	r3, r3, r2
 8008498:	18ed      	addgt	r5, r5, r3
 800849a:	f04f 0900 	mov.w	r9, #0
 800849e:	341a      	adds	r4, #26
 80084a0:	454d      	cmp	r5, r9
 80084a2:	d11a      	bne.n	80084da <_printf_common+0xd6>
 80084a4:	2000      	movs	r0, #0
 80084a6:	e008      	b.n	80084ba <_printf_common+0xb6>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4652      	mov	r2, sl
 80084ac:	4639      	mov	r1, r7
 80084ae:	4630      	mov	r0, r6
 80084b0:	47c0      	blx	r8
 80084b2:	3001      	adds	r0, #1
 80084b4:	d103      	bne.n	80084be <_printf_common+0xba>
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084be:	3501      	adds	r5, #1
 80084c0:	e7c3      	b.n	800844a <_printf_common+0x46>
 80084c2:	18e1      	adds	r1, r4, r3
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	2030      	movs	r0, #48	; 0x30
 80084c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084cc:	4422      	add	r2, r4
 80084ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084d6:	3302      	adds	r3, #2
 80084d8:	e7c5      	b.n	8008466 <_printf_common+0x62>
 80084da:	2301      	movs	r3, #1
 80084dc:	4622      	mov	r2, r4
 80084de:	4639      	mov	r1, r7
 80084e0:	4630      	mov	r0, r6
 80084e2:	47c0      	blx	r8
 80084e4:	3001      	adds	r0, #1
 80084e6:	d0e6      	beq.n	80084b6 <_printf_common+0xb2>
 80084e8:	f109 0901 	add.w	r9, r9, #1
 80084ec:	e7d8      	b.n	80084a0 <_printf_common+0x9c>
	...

080084f0 <_printf_i>:
 80084f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084f4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80084f8:	460c      	mov	r4, r1
 80084fa:	7e09      	ldrb	r1, [r1, #24]
 80084fc:	b085      	sub	sp, #20
 80084fe:	296e      	cmp	r1, #110	; 0x6e
 8008500:	4617      	mov	r7, r2
 8008502:	4606      	mov	r6, r0
 8008504:	4698      	mov	r8, r3
 8008506:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008508:	f000 80b3 	beq.w	8008672 <_printf_i+0x182>
 800850c:	d822      	bhi.n	8008554 <_printf_i+0x64>
 800850e:	2963      	cmp	r1, #99	; 0x63
 8008510:	d036      	beq.n	8008580 <_printf_i+0x90>
 8008512:	d80a      	bhi.n	800852a <_printf_i+0x3a>
 8008514:	2900      	cmp	r1, #0
 8008516:	f000 80b9 	beq.w	800868c <_printf_i+0x19c>
 800851a:	2958      	cmp	r1, #88	; 0x58
 800851c:	f000 8083 	beq.w	8008626 <_printf_i+0x136>
 8008520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008524:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008528:	e032      	b.n	8008590 <_printf_i+0xa0>
 800852a:	2964      	cmp	r1, #100	; 0x64
 800852c:	d001      	beq.n	8008532 <_printf_i+0x42>
 800852e:	2969      	cmp	r1, #105	; 0x69
 8008530:	d1f6      	bne.n	8008520 <_printf_i+0x30>
 8008532:	6820      	ldr	r0, [r4, #0]
 8008534:	6813      	ldr	r3, [r2, #0]
 8008536:	0605      	lsls	r5, r0, #24
 8008538:	f103 0104 	add.w	r1, r3, #4
 800853c:	d52a      	bpl.n	8008594 <_printf_i+0xa4>
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6011      	str	r1, [r2, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	da03      	bge.n	800854e <_printf_i+0x5e>
 8008546:	222d      	movs	r2, #45	; 0x2d
 8008548:	425b      	negs	r3, r3
 800854a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800854e:	486f      	ldr	r0, [pc, #444]	; (800870c <_printf_i+0x21c>)
 8008550:	220a      	movs	r2, #10
 8008552:	e039      	b.n	80085c8 <_printf_i+0xd8>
 8008554:	2973      	cmp	r1, #115	; 0x73
 8008556:	f000 809d 	beq.w	8008694 <_printf_i+0x1a4>
 800855a:	d808      	bhi.n	800856e <_printf_i+0x7e>
 800855c:	296f      	cmp	r1, #111	; 0x6f
 800855e:	d020      	beq.n	80085a2 <_printf_i+0xb2>
 8008560:	2970      	cmp	r1, #112	; 0x70
 8008562:	d1dd      	bne.n	8008520 <_printf_i+0x30>
 8008564:	6823      	ldr	r3, [r4, #0]
 8008566:	f043 0320 	orr.w	r3, r3, #32
 800856a:	6023      	str	r3, [r4, #0]
 800856c:	e003      	b.n	8008576 <_printf_i+0x86>
 800856e:	2975      	cmp	r1, #117	; 0x75
 8008570:	d017      	beq.n	80085a2 <_printf_i+0xb2>
 8008572:	2978      	cmp	r1, #120	; 0x78
 8008574:	d1d4      	bne.n	8008520 <_printf_i+0x30>
 8008576:	2378      	movs	r3, #120	; 0x78
 8008578:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800857c:	4864      	ldr	r0, [pc, #400]	; (8008710 <_printf_i+0x220>)
 800857e:	e055      	b.n	800862c <_printf_i+0x13c>
 8008580:	6813      	ldr	r3, [r2, #0]
 8008582:	1d19      	adds	r1, r3, #4
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6011      	str	r1, [r2, #0]
 8008588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800858c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008590:	2301      	movs	r3, #1
 8008592:	e08c      	b.n	80086ae <_printf_i+0x1be>
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6011      	str	r1, [r2, #0]
 8008598:	f010 0f40 	tst.w	r0, #64	; 0x40
 800859c:	bf18      	it	ne
 800859e:	b21b      	sxthne	r3, r3
 80085a0:	e7cf      	b.n	8008542 <_printf_i+0x52>
 80085a2:	6813      	ldr	r3, [r2, #0]
 80085a4:	6825      	ldr	r5, [r4, #0]
 80085a6:	1d18      	adds	r0, r3, #4
 80085a8:	6010      	str	r0, [r2, #0]
 80085aa:	0628      	lsls	r0, r5, #24
 80085ac:	d501      	bpl.n	80085b2 <_printf_i+0xc2>
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	e002      	b.n	80085b8 <_printf_i+0xc8>
 80085b2:	0668      	lsls	r0, r5, #25
 80085b4:	d5fb      	bpl.n	80085ae <_printf_i+0xbe>
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	4854      	ldr	r0, [pc, #336]	; (800870c <_printf_i+0x21c>)
 80085ba:	296f      	cmp	r1, #111	; 0x6f
 80085bc:	bf14      	ite	ne
 80085be:	220a      	movne	r2, #10
 80085c0:	2208      	moveq	r2, #8
 80085c2:	2100      	movs	r1, #0
 80085c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085c8:	6865      	ldr	r5, [r4, #4]
 80085ca:	60a5      	str	r5, [r4, #8]
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	f2c0 8095 	blt.w	80086fc <_printf_i+0x20c>
 80085d2:	6821      	ldr	r1, [r4, #0]
 80085d4:	f021 0104 	bic.w	r1, r1, #4
 80085d8:	6021      	str	r1, [r4, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d13d      	bne.n	800865a <_printf_i+0x16a>
 80085de:	2d00      	cmp	r5, #0
 80085e0:	f040 808e 	bne.w	8008700 <_printf_i+0x210>
 80085e4:	4665      	mov	r5, ip
 80085e6:	2a08      	cmp	r2, #8
 80085e8:	d10b      	bne.n	8008602 <_printf_i+0x112>
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	07db      	lsls	r3, r3, #31
 80085ee:	d508      	bpl.n	8008602 <_printf_i+0x112>
 80085f0:	6923      	ldr	r3, [r4, #16]
 80085f2:	6862      	ldr	r2, [r4, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	bfde      	ittt	le
 80085f8:	2330      	movle	r3, #48	; 0x30
 80085fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085fe:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008602:	ebac 0305 	sub.w	r3, ip, r5
 8008606:	6123      	str	r3, [r4, #16]
 8008608:	f8cd 8000 	str.w	r8, [sp]
 800860c:	463b      	mov	r3, r7
 800860e:	aa03      	add	r2, sp, #12
 8008610:	4621      	mov	r1, r4
 8008612:	4630      	mov	r0, r6
 8008614:	f7ff fef6 	bl	8008404 <_printf_common>
 8008618:	3001      	adds	r0, #1
 800861a:	d14d      	bne.n	80086b8 <_printf_i+0x1c8>
 800861c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008620:	b005      	add	sp, #20
 8008622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008626:	4839      	ldr	r0, [pc, #228]	; (800870c <_printf_i+0x21c>)
 8008628:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800862c:	6813      	ldr	r3, [r2, #0]
 800862e:	6821      	ldr	r1, [r4, #0]
 8008630:	1d1d      	adds	r5, r3, #4
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6015      	str	r5, [r2, #0]
 8008636:	060a      	lsls	r2, r1, #24
 8008638:	d50b      	bpl.n	8008652 <_printf_i+0x162>
 800863a:	07ca      	lsls	r2, r1, #31
 800863c:	bf44      	itt	mi
 800863e:	f041 0120 	orrmi.w	r1, r1, #32
 8008642:	6021      	strmi	r1, [r4, #0]
 8008644:	b91b      	cbnz	r3, 800864e <_printf_i+0x15e>
 8008646:	6822      	ldr	r2, [r4, #0]
 8008648:	f022 0220 	bic.w	r2, r2, #32
 800864c:	6022      	str	r2, [r4, #0]
 800864e:	2210      	movs	r2, #16
 8008650:	e7b7      	b.n	80085c2 <_printf_i+0xd2>
 8008652:	064d      	lsls	r5, r1, #25
 8008654:	bf48      	it	mi
 8008656:	b29b      	uxthmi	r3, r3
 8008658:	e7ef      	b.n	800863a <_printf_i+0x14a>
 800865a:	4665      	mov	r5, ip
 800865c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008660:	fb02 3311 	mls	r3, r2, r1, r3
 8008664:	5cc3      	ldrb	r3, [r0, r3]
 8008666:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800866a:	460b      	mov	r3, r1
 800866c:	2900      	cmp	r1, #0
 800866e:	d1f5      	bne.n	800865c <_printf_i+0x16c>
 8008670:	e7b9      	b.n	80085e6 <_printf_i+0xf6>
 8008672:	6813      	ldr	r3, [r2, #0]
 8008674:	6825      	ldr	r5, [r4, #0]
 8008676:	6961      	ldr	r1, [r4, #20]
 8008678:	1d18      	adds	r0, r3, #4
 800867a:	6010      	str	r0, [r2, #0]
 800867c:	0628      	lsls	r0, r5, #24
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	d501      	bpl.n	8008686 <_printf_i+0x196>
 8008682:	6019      	str	r1, [r3, #0]
 8008684:	e002      	b.n	800868c <_printf_i+0x19c>
 8008686:	066a      	lsls	r2, r5, #25
 8008688:	d5fb      	bpl.n	8008682 <_printf_i+0x192>
 800868a:	8019      	strh	r1, [r3, #0]
 800868c:	2300      	movs	r3, #0
 800868e:	6123      	str	r3, [r4, #16]
 8008690:	4665      	mov	r5, ip
 8008692:	e7b9      	b.n	8008608 <_printf_i+0x118>
 8008694:	6813      	ldr	r3, [r2, #0]
 8008696:	1d19      	adds	r1, r3, #4
 8008698:	6011      	str	r1, [r2, #0]
 800869a:	681d      	ldr	r5, [r3, #0]
 800869c:	6862      	ldr	r2, [r4, #4]
 800869e:	2100      	movs	r1, #0
 80086a0:	4628      	mov	r0, r5
 80086a2:	f7f7 fda5 	bl	80001f0 <memchr>
 80086a6:	b108      	cbz	r0, 80086ac <_printf_i+0x1bc>
 80086a8:	1b40      	subs	r0, r0, r5
 80086aa:	6060      	str	r0, [r4, #4]
 80086ac:	6863      	ldr	r3, [r4, #4]
 80086ae:	6123      	str	r3, [r4, #16]
 80086b0:	2300      	movs	r3, #0
 80086b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b6:	e7a7      	b.n	8008608 <_printf_i+0x118>
 80086b8:	6923      	ldr	r3, [r4, #16]
 80086ba:	462a      	mov	r2, r5
 80086bc:	4639      	mov	r1, r7
 80086be:	4630      	mov	r0, r6
 80086c0:	47c0      	blx	r8
 80086c2:	3001      	adds	r0, #1
 80086c4:	d0aa      	beq.n	800861c <_printf_i+0x12c>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	079b      	lsls	r3, r3, #30
 80086ca:	d413      	bmi.n	80086f4 <_printf_i+0x204>
 80086cc:	68e0      	ldr	r0, [r4, #12]
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	4298      	cmp	r0, r3
 80086d2:	bfb8      	it	lt
 80086d4:	4618      	movlt	r0, r3
 80086d6:	e7a3      	b.n	8008620 <_printf_i+0x130>
 80086d8:	2301      	movs	r3, #1
 80086da:	464a      	mov	r2, r9
 80086dc:	4639      	mov	r1, r7
 80086de:	4630      	mov	r0, r6
 80086e0:	47c0      	blx	r8
 80086e2:	3001      	adds	r0, #1
 80086e4:	d09a      	beq.n	800861c <_printf_i+0x12c>
 80086e6:	3501      	adds	r5, #1
 80086e8:	68e3      	ldr	r3, [r4, #12]
 80086ea:	9a03      	ldr	r2, [sp, #12]
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	42ab      	cmp	r3, r5
 80086f0:	dcf2      	bgt.n	80086d8 <_printf_i+0x1e8>
 80086f2:	e7eb      	b.n	80086cc <_printf_i+0x1dc>
 80086f4:	2500      	movs	r5, #0
 80086f6:	f104 0919 	add.w	r9, r4, #25
 80086fa:	e7f5      	b.n	80086e8 <_printf_i+0x1f8>
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d1ac      	bne.n	800865a <_printf_i+0x16a>
 8008700:	7803      	ldrb	r3, [r0, #0]
 8008702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008706:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800870a:	e76c      	b.n	80085e6 <_printf_i+0xf6>
 800870c:	0800bc4a 	.word	0x0800bc4a
 8008710:	0800bc5b 	.word	0x0800bc5b

08008714 <siprintf>:
 8008714:	b40e      	push	{r1, r2, r3}
 8008716:	b500      	push	{lr}
 8008718:	b09c      	sub	sp, #112	; 0x70
 800871a:	ab1d      	add	r3, sp, #116	; 0x74
 800871c:	9002      	str	r0, [sp, #8]
 800871e:	9006      	str	r0, [sp, #24]
 8008720:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008724:	4809      	ldr	r0, [pc, #36]	; (800874c <siprintf+0x38>)
 8008726:	9107      	str	r1, [sp, #28]
 8008728:	9104      	str	r1, [sp, #16]
 800872a:	4909      	ldr	r1, [pc, #36]	; (8008750 <siprintf+0x3c>)
 800872c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008730:	9105      	str	r1, [sp, #20]
 8008732:	6800      	ldr	r0, [r0, #0]
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	a902      	add	r1, sp, #8
 8008738:	f001 fa54 	bl	8009be4 <_svfiprintf_r>
 800873c:	9b02      	ldr	r3, [sp, #8]
 800873e:	2200      	movs	r2, #0
 8008740:	701a      	strb	r2, [r3, #0]
 8008742:	b01c      	add	sp, #112	; 0x70
 8008744:	f85d eb04 	ldr.w	lr, [sp], #4
 8008748:	b003      	add	sp, #12
 800874a:	4770      	bx	lr
 800874c:	20000010 	.word	0x20000010
 8008750:	ffff0208 	.word	0xffff0208

08008754 <quorem>:
 8008754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	6903      	ldr	r3, [r0, #16]
 800875a:	690c      	ldr	r4, [r1, #16]
 800875c:	42a3      	cmp	r3, r4
 800875e:	4680      	mov	r8, r0
 8008760:	f2c0 8082 	blt.w	8008868 <quorem+0x114>
 8008764:	3c01      	subs	r4, #1
 8008766:	f101 0714 	add.w	r7, r1, #20
 800876a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800876e:	f100 0614 	add.w	r6, r0, #20
 8008772:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008776:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800877a:	eb06 030c 	add.w	r3, r6, ip
 800877e:	3501      	adds	r5, #1
 8008780:	eb07 090c 	add.w	r9, r7, ip
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	fbb0 f5f5 	udiv	r5, r0, r5
 800878a:	b395      	cbz	r5, 80087f2 <quorem+0x9e>
 800878c:	f04f 0a00 	mov.w	sl, #0
 8008790:	4638      	mov	r0, r7
 8008792:	46b6      	mov	lr, r6
 8008794:	46d3      	mov	fp, sl
 8008796:	f850 2b04 	ldr.w	r2, [r0], #4
 800879a:	b293      	uxth	r3, r2
 800879c:	fb05 a303 	mla	r3, r5, r3, sl
 80087a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	ebab 0303 	sub.w	r3, fp, r3
 80087aa:	0c12      	lsrs	r2, r2, #16
 80087ac:	f8de b000 	ldr.w	fp, [lr]
 80087b0:	fb05 a202 	mla	r2, r5, r2, sl
 80087b4:	fa13 f38b 	uxtah	r3, r3, fp
 80087b8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80087bc:	fa1f fb82 	uxth.w	fp, r2
 80087c0:	f8de 2000 	ldr.w	r2, [lr]
 80087c4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80087c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087d2:	4581      	cmp	r9, r0
 80087d4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80087d8:	f84e 3b04 	str.w	r3, [lr], #4
 80087dc:	d2db      	bcs.n	8008796 <quorem+0x42>
 80087de:	f856 300c 	ldr.w	r3, [r6, ip]
 80087e2:	b933      	cbnz	r3, 80087f2 <quorem+0x9e>
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	3b04      	subs	r3, #4
 80087e8:	429e      	cmp	r6, r3
 80087ea:	461a      	mov	r2, r3
 80087ec:	d330      	bcc.n	8008850 <quorem+0xfc>
 80087ee:	f8c8 4010 	str.w	r4, [r8, #16]
 80087f2:	4640      	mov	r0, r8
 80087f4:	f001 f820 	bl	8009838 <__mcmp>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	db25      	blt.n	8008848 <quorem+0xf4>
 80087fc:	3501      	adds	r5, #1
 80087fe:	4630      	mov	r0, r6
 8008800:	f04f 0c00 	mov.w	ip, #0
 8008804:	f857 2b04 	ldr.w	r2, [r7], #4
 8008808:	f8d0 e000 	ldr.w	lr, [r0]
 800880c:	b293      	uxth	r3, r2
 800880e:	ebac 0303 	sub.w	r3, ip, r3
 8008812:	0c12      	lsrs	r2, r2, #16
 8008814:	fa13 f38e 	uxtah	r3, r3, lr
 8008818:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800881c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008820:	b29b      	uxth	r3, r3
 8008822:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008826:	45b9      	cmp	r9, r7
 8008828:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800882c:	f840 3b04 	str.w	r3, [r0], #4
 8008830:	d2e8      	bcs.n	8008804 <quorem+0xb0>
 8008832:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008836:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800883a:	b92a      	cbnz	r2, 8008848 <quorem+0xf4>
 800883c:	3b04      	subs	r3, #4
 800883e:	429e      	cmp	r6, r3
 8008840:	461a      	mov	r2, r3
 8008842:	d30b      	bcc.n	800885c <quorem+0x108>
 8008844:	f8c8 4010 	str.w	r4, [r8, #16]
 8008848:	4628      	mov	r0, r5
 800884a:	b003      	add	sp, #12
 800884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008850:	6812      	ldr	r2, [r2, #0]
 8008852:	3b04      	subs	r3, #4
 8008854:	2a00      	cmp	r2, #0
 8008856:	d1ca      	bne.n	80087ee <quorem+0x9a>
 8008858:	3c01      	subs	r4, #1
 800885a:	e7c5      	b.n	80087e8 <quorem+0x94>
 800885c:	6812      	ldr	r2, [r2, #0]
 800885e:	3b04      	subs	r3, #4
 8008860:	2a00      	cmp	r2, #0
 8008862:	d1ef      	bne.n	8008844 <quorem+0xf0>
 8008864:	3c01      	subs	r4, #1
 8008866:	e7ea      	b.n	800883e <quorem+0xea>
 8008868:	2000      	movs	r0, #0
 800886a:	e7ee      	b.n	800884a <quorem+0xf6>
 800886c:	0000      	movs	r0, r0
	...

08008870 <_dtoa_r>:
 8008870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008874:	ec57 6b10 	vmov	r6, r7, d0
 8008878:	b097      	sub	sp, #92	; 0x5c
 800887a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800887c:	9106      	str	r1, [sp, #24]
 800887e:	4604      	mov	r4, r0
 8008880:	920b      	str	r2, [sp, #44]	; 0x2c
 8008882:	9312      	str	r3, [sp, #72]	; 0x48
 8008884:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008888:	e9cd 6700 	strd	r6, r7, [sp]
 800888c:	b93d      	cbnz	r5, 800889e <_dtoa_r+0x2e>
 800888e:	2010      	movs	r0, #16
 8008890:	f000 fdb4 	bl	80093fc <malloc>
 8008894:	6260      	str	r0, [r4, #36]	; 0x24
 8008896:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800889a:	6005      	str	r5, [r0, #0]
 800889c:	60c5      	str	r5, [r0, #12]
 800889e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088a0:	6819      	ldr	r1, [r3, #0]
 80088a2:	b151      	cbz	r1, 80088ba <_dtoa_r+0x4a>
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	604a      	str	r2, [r1, #4]
 80088a8:	2301      	movs	r3, #1
 80088aa:	4093      	lsls	r3, r2
 80088ac:	608b      	str	r3, [r1, #8]
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 fde0 	bl	8009474 <_Bfree>
 80088b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088b6:	2200      	movs	r2, #0
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	1e3b      	subs	r3, r7, #0
 80088bc:	bfbb      	ittet	lt
 80088be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80088c2:	9301      	strlt	r3, [sp, #4]
 80088c4:	2300      	movge	r3, #0
 80088c6:	2201      	movlt	r2, #1
 80088c8:	bfac      	ite	ge
 80088ca:	f8c8 3000 	strge.w	r3, [r8]
 80088ce:	f8c8 2000 	strlt.w	r2, [r8]
 80088d2:	4baf      	ldr	r3, [pc, #700]	; (8008b90 <_dtoa_r+0x320>)
 80088d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80088d8:	ea33 0308 	bics.w	r3, r3, r8
 80088dc:	d114      	bne.n	8008908 <_dtoa_r+0x98>
 80088de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	9b00      	ldr	r3, [sp, #0]
 80088e8:	b923      	cbnz	r3, 80088f4 <_dtoa_r+0x84>
 80088ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f000 8542 	beq.w	8009378 <_dtoa_r+0xb08>
 80088f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008ba4 <_dtoa_r+0x334>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	f000 8544 	beq.w	8009388 <_dtoa_r+0xb18>
 8008900:	f10b 0303 	add.w	r3, fp, #3
 8008904:	f000 bd3e 	b.w	8009384 <_dtoa_r+0xb14>
 8008908:	e9dd 6700 	ldrd	r6, r7, [sp]
 800890c:	2200      	movs	r2, #0
 800890e:	2300      	movs	r3, #0
 8008910:	4630      	mov	r0, r6
 8008912:	4639      	mov	r1, r7
 8008914:	f7f8 f8e0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008918:	4681      	mov	r9, r0
 800891a:	b168      	cbz	r0, 8008938 <_dtoa_r+0xc8>
 800891c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800891e:	2301      	movs	r3, #1
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 8524 	beq.w	8009372 <_dtoa_r+0xb02>
 800892a:	4b9a      	ldr	r3, [pc, #616]	; (8008b94 <_dtoa_r+0x324>)
 800892c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800892e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008932:	6013      	str	r3, [r2, #0]
 8008934:	f000 bd28 	b.w	8009388 <_dtoa_r+0xb18>
 8008938:	aa14      	add	r2, sp, #80	; 0x50
 800893a:	a915      	add	r1, sp, #84	; 0x54
 800893c:	ec47 6b10 	vmov	d0, r6, r7
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fff0 	bl	8009926 <__d2b>
 8008946:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800894a:	9004      	str	r0, [sp, #16]
 800894c:	2d00      	cmp	r5, #0
 800894e:	d07c      	beq.n	8008a4a <_dtoa_r+0x1da>
 8008950:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008954:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008958:	46b2      	mov	sl, r6
 800895a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800895e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008962:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008966:	2200      	movs	r2, #0
 8008968:	4b8b      	ldr	r3, [pc, #556]	; (8008b98 <_dtoa_r+0x328>)
 800896a:	4650      	mov	r0, sl
 800896c:	4659      	mov	r1, fp
 800896e:	f7f7 fc93 	bl	8000298 <__aeabi_dsub>
 8008972:	a381      	add	r3, pc, #516	; (adr r3, 8008b78 <_dtoa_r+0x308>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fe46 	bl	8000608 <__aeabi_dmul>
 800897c:	a380      	add	r3, pc, #512	; (adr r3, 8008b80 <_dtoa_r+0x310>)
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f7f7 fc8b 	bl	800029c <__adddf3>
 8008986:	4606      	mov	r6, r0
 8008988:	4628      	mov	r0, r5
 800898a:	460f      	mov	r7, r1
 800898c:	f7f7 fdd2 	bl	8000534 <__aeabi_i2d>
 8008990:	a37d      	add	r3, pc, #500	; (adr r3, 8008b88 <_dtoa_r+0x318>)
 8008992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008996:	f7f7 fe37 	bl	8000608 <__aeabi_dmul>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4630      	mov	r0, r6
 80089a0:	4639      	mov	r1, r7
 80089a2:	f7f7 fc7b 	bl	800029c <__adddf3>
 80089a6:	4606      	mov	r6, r0
 80089a8:	460f      	mov	r7, r1
 80089aa:	f7f8 f8dd 	bl	8000b68 <__aeabi_d2iz>
 80089ae:	2200      	movs	r2, #0
 80089b0:	4682      	mov	sl, r0
 80089b2:	2300      	movs	r3, #0
 80089b4:	4630      	mov	r0, r6
 80089b6:	4639      	mov	r1, r7
 80089b8:	f7f8 f898 	bl	8000aec <__aeabi_dcmplt>
 80089bc:	b148      	cbz	r0, 80089d2 <_dtoa_r+0x162>
 80089be:	4650      	mov	r0, sl
 80089c0:	f7f7 fdb8 	bl	8000534 <__aeabi_i2d>
 80089c4:	4632      	mov	r2, r6
 80089c6:	463b      	mov	r3, r7
 80089c8:	f7f8 f886 	bl	8000ad8 <__aeabi_dcmpeq>
 80089cc:	b908      	cbnz	r0, 80089d2 <_dtoa_r+0x162>
 80089ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80089d2:	f1ba 0f16 	cmp.w	sl, #22
 80089d6:	d859      	bhi.n	8008a8c <_dtoa_r+0x21c>
 80089d8:	4970      	ldr	r1, [pc, #448]	; (8008b9c <_dtoa_r+0x32c>)
 80089da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80089de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089e6:	f7f8 f89f 	bl	8000b28 <__aeabi_dcmpgt>
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d050      	beq.n	8008a90 <_dtoa_r+0x220>
 80089ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80089f2:	2300      	movs	r3, #0
 80089f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80089f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80089f8:	1b5d      	subs	r5, r3, r5
 80089fa:	f1b5 0801 	subs.w	r8, r5, #1
 80089fe:	bf49      	itett	mi
 8008a00:	f1c5 0301 	rsbmi	r3, r5, #1
 8008a04:	2300      	movpl	r3, #0
 8008a06:	9305      	strmi	r3, [sp, #20]
 8008a08:	f04f 0800 	movmi.w	r8, #0
 8008a0c:	bf58      	it	pl
 8008a0e:	9305      	strpl	r3, [sp, #20]
 8008a10:	f1ba 0f00 	cmp.w	sl, #0
 8008a14:	db3e      	blt.n	8008a94 <_dtoa_r+0x224>
 8008a16:	2300      	movs	r3, #0
 8008a18:	44d0      	add	r8, sl
 8008a1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008a1e:	9307      	str	r3, [sp, #28]
 8008a20:	9b06      	ldr	r3, [sp, #24]
 8008a22:	2b09      	cmp	r3, #9
 8008a24:	f200 8090 	bhi.w	8008b48 <_dtoa_r+0x2d8>
 8008a28:	2b05      	cmp	r3, #5
 8008a2a:	bfc4      	itt	gt
 8008a2c:	3b04      	subgt	r3, #4
 8008a2e:	9306      	strgt	r3, [sp, #24]
 8008a30:	9b06      	ldr	r3, [sp, #24]
 8008a32:	f1a3 0302 	sub.w	r3, r3, #2
 8008a36:	bfcc      	ite	gt
 8008a38:	2500      	movgt	r5, #0
 8008a3a:	2501      	movle	r5, #1
 8008a3c:	2b03      	cmp	r3, #3
 8008a3e:	f200 808f 	bhi.w	8008b60 <_dtoa_r+0x2f0>
 8008a42:	e8df f003 	tbb	[pc, r3]
 8008a46:	7f7d      	.short	0x7f7d
 8008a48:	7131      	.short	0x7131
 8008a4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008a4e:	441d      	add	r5, r3
 8008a50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008a54:	2820      	cmp	r0, #32
 8008a56:	dd13      	ble.n	8008a80 <_dtoa_r+0x210>
 8008a58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008a5c:	9b00      	ldr	r3, [sp, #0]
 8008a5e:	fa08 f800 	lsl.w	r8, r8, r0
 8008a62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008a66:	fa23 f000 	lsr.w	r0, r3, r0
 8008a6a:	ea48 0000 	orr.w	r0, r8, r0
 8008a6e:	f7f7 fd51 	bl	8000514 <__aeabi_ui2d>
 8008a72:	2301      	movs	r3, #1
 8008a74:	4682      	mov	sl, r0
 8008a76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008a7a:	3d01      	subs	r5, #1
 8008a7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a7e:	e772      	b.n	8008966 <_dtoa_r+0xf6>
 8008a80:	9b00      	ldr	r3, [sp, #0]
 8008a82:	f1c0 0020 	rsb	r0, r0, #32
 8008a86:	fa03 f000 	lsl.w	r0, r3, r0
 8008a8a:	e7f0      	b.n	8008a6e <_dtoa_r+0x1fe>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e7b1      	b.n	80089f4 <_dtoa_r+0x184>
 8008a90:	900f      	str	r0, [sp, #60]	; 0x3c
 8008a92:	e7b0      	b.n	80089f6 <_dtoa_r+0x186>
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	eba3 030a 	sub.w	r3, r3, sl
 8008a9a:	9305      	str	r3, [sp, #20]
 8008a9c:	f1ca 0300 	rsb	r3, sl, #0
 8008aa0:	9307      	str	r3, [sp, #28]
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	930e      	str	r3, [sp, #56]	; 0x38
 8008aa6:	e7bb      	b.n	8008a20 <_dtoa_r+0x1b0>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8008aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd59      	ble.n	8008b66 <_dtoa_r+0x2f6>
 8008ab2:	9302      	str	r3, [sp, #8]
 8008ab4:	4699      	mov	r9, r3
 8008ab6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008ab8:	2200      	movs	r2, #0
 8008aba:	6072      	str	r2, [r6, #4]
 8008abc:	2204      	movs	r2, #4
 8008abe:	f102 0014 	add.w	r0, r2, #20
 8008ac2:	4298      	cmp	r0, r3
 8008ac4:	6871      	ldr	r1, [r6, #4]
 8008ac6:	d953      	bls.n	8008b70 <_dtoa_r+0x300>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 fc9f 	bl	800940c <_Balloc>
 8008ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad0:	6030      	str	r0, [r6, #0]
 8008ad2:	f1b9 0f0e 	cmp.w	r9, #14
 8008ad6:	f8d3 b000 	ldr.w	fp, [r3]
 8008ada:	f200 80e6 	bhi.w	8008caa <_dtoa_r+0x43a>
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	f000 80e3 	beq.w	8008caa <_dtoa_r+0x43a>
 8008ae4:	ed9d 7b00 	vldr	d7, [sp]
 8008ae8:	f1ba 0f00 	cmp.w	sl, #0
 8008aec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008af0:	dd74      	ble.n	8008bdc <_dtoa_r+0x36c>
 8008af2:	4a2a      	ldr	r2, [pc, #168]	; (8008b9c <_dtoa_r+0x32c>)
 8008af4:	f00a 030f 	and.w	r3, sl, #15
 8008af8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008afc:	ed93 7b00 	vldr	d7, [r3]
 8008b00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008b04:	06f0      	lsls	r0, r6, #27
 8008b06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008b0a:	d565      	bpl.n	8008bd8 <_dtoa_r+0x368>
 8008b0c:	4b24      	ldr	r3, [pc, #144]	; (8008ba0 <_dtoa_r+0x330>)
 8008b0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008b12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b16:	f7f7 fea1 	bl	800085c <__aeabi_ddiv>
 8008b1a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b1e:	f006 060f 	and.w	r6, r6, #15
 8008b22:	2503      	movs	r5, #3
 8008b24:	4f1e      	ldr	r7, [pc, #120]	; (8008ba0 <_dtoa_r+0x330>)
 8008b26:	e04c      	b.n	8008bc2 <_dtoa_r+0x352>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b2e:	4453      	add	r3, sl
 8008b30:	f103 0901 	add.w	r9, r3, #1
 8008b34:	9302      	str	r3, [sp, #8]
 8008b36:	464b      	mov	r3, r9
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	bfb8      	it	lt
 8008b3c:	2301      	movlt	r3, #1
 8008b3e:	e7ba      	b.n	8008ab6 <_dtoa_r+0x246>
 8008b40:	2300      	movs	r3, #0
 8008b42:	e7b2      	b.n	8008aaa <_dtoa_r+0x23a>
 8008b44:	2300      	movs	r3, #0
 8008b46:	e7f0      	b.n	8008b2a <_dtoa_r+0x2ba>
 8008b48:	2501      	movs	r5, #1
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9306      	str	r3, [sp, #24]
 8008b4e:	950a      	str	r5, [sp, #40]	; 0x28
 8008b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b54:	9302      	str	r3, [sp, #8]
 8008b56:	4699      	mov	r9, r3
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2312      	movs	r3, #18
 8008b5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008b5e:	e7aa      	b.n	8008ab6 <_dtoa_r+0x246>
 8008b60:	2301      	movs	r3, #1
 8008b62:	930a      	str	r3, [sp, #40]	; 0x28
 8008b64:	e7f4      	b.n	8008b50 <_dtoa_r+0x2e0>
 8008b66:	2301      	movs	r3, #1
 8008b68:	9302      	str	r3, [sp, #8]
 8008b6a:	4699      	mov	r9, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	e7f5      	b.n	8008b5c <_dtoa_r+0x2ec>
 8008b70:	3101      	adds	r1, #1
 8008b72:	6071      	str	r1, [r6, #4]
 8008b74:	0052      	lsls	r2, r2, #1
 8008b76:	e7a2      	b.n	8008abe <_dtoa_r+0x24e>
 8008b78:	636f4361 	.word	0x636f4361
 8008b7c:	3fd287a7 	.word	0x3fd287a7
 8008b80:	8b60c8b3 	.word	0x8b60c8b3
 8008b84:	3fc68a28 	.word	0x3fc68a28
 8008b88:	509f79fb 	.word	0x509f79fb
 8008b8c:	3fd34413 	.word	0x3fd34413
 8008b90:	7ff00000 	.word	0x7ff00000
 8008b94:	0800bc49 	.word	0x0800bc49
 8008b98:	3ff80000 	.word	0x3ff80000
 8008b9c:	0800bca8 	.word	0x0800bca8
 8008ba0:	0800bc80 	.word	0x0800bc80
 8008ba4:	0800bc75 	.word	0x0800bc75
 8008ba8:	07f1      	lsls	r1, r6, #31
 8008baa:	d508      	bpl.n	8008bbe <_dtoa_r+0x34e>
 8008bac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bb4:	f7f7 fd28 	bl	8000608 <__aeabi_dmul>
 8008bb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	1076      	asrs	r6, r6, #1
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d1f0      	bne.n	8008ba8 <_dtoa_r+0x338>
 8008bc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008bca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bce:	f7f7 fe45 	bl	800085c <__aeabi_ddiv>
 8008bd2:	e9cd 0100 	strd	r0, r1, [sp]
 8008bd6:	e01a      	b.n	8008c0e <_dtoa_r+0x39e>
 8008bd8:	2502      	movs	r5, #2
 8008bda:	e7a3      	b.n	8008b24 <_dtoa_r+0x2b4>
 8008bdc:	f000 80a0 	beq.w	8008d20 <_dtoa_r+0x4b0>
 8008be0:	f1ca 0600 	rsb	r6, sl, #0
 8008be4:	4b9f      	ldr	r3, [pc, #636]	; (8008e64 <_dtoa_r+0x5f4>)
 8008be6:	4fa0      	ldr	r7, [pc, #640]	; (8008e68 <_dtoa_r+0x5f8>)
 8008be8:	f006 020f 	and.w	r2, r6, #15
 8008bec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008bf8:	f7f7 fd06 	bl	8000608 <__aeabi_dmul>
 8008bfc:	e9cd 0100 	strd	r0, r1, [sp]
 8008c00:	1136      	asrs	r6, r6, #4
 8008c02:	2300      	movs	r3, #0
 8008c04:	2502      	movs	r5, #2
 8008c06:	2e00      	cmp	r6, #0
 8008c08:	d17f      	bne.n	8008d0a <_dtoa_r+0x49a>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e1      	bne.n	8008bd2 <_dtoa_r+0x362>
 8008c0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 8087 	beq.w	8008d24 <_dtoa_r+0x4b4>
 8008c16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4b93      	ldr	r3, [pc, #588]	; (8008e6c <_dtoa_r+0x5fc>)
 8008c1e:	4630      	mov	r0, r6
 8008c20:	4639      	mov	r1, r7
 8008c22:	f7f7 ff63 	bl	8000aec <__aeabi_dcmplt>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	d07c      	beq.n	8008d24 <_dtoa_r+0x4b4>
 8008c2a:	f1b9 0f00 	cmp.w	r9, #0
 8008c2e:	d079      	beq.n	8008d24 <_dtoa_r+0x4b4>
 8008c30:	9b02      	ldr	r3, [sp, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	dd35      	ble.n	8008ca2 <_dtoa_r+0x432>
 8008c36:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008c3a:	9308      	str	r3, [sp, #32]
 8008c3c:	4639      	mov	r1, r7
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4b8b      	ldr	r3, [pc, #556]	; (8008e70 <_dtoa_r+0x600>)
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7f7 fce0 	bl	8000608 <__aeabi_dmul>
 8008c48:	e9cd 0100 	strd	r0, r1, [sp]
 8008c4c:	9f02      	ldr	r7, [sp, #8]
 8008c4e:	3501      	adds	r5, #1
 8008c50:	4628      	mov	r0, r5
 8008c52:	f7f7 fc6f 	bl	8000534 <__aeabi_i2d>
 8008c56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c5a:	f7f7 fcd5 	bl	8000608 <__aeabi_dmul>
 8008c5e:	2200      	movs	r2, #0
 8008c60:	4b84      	ldr	r3, [pc, #528]	; (8008e74 <_dtoa_r+0x604>)
 8008c62:	f7f7 fb1b 	bl	800029c <__adddf3>
 8008c66:	4605      	mov	r5, r0
 8008c68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008c6c:	2f00      	cmp	r7, #0
 8008c6e:	d15d      	bne.n	8008d2c <_dtoa_r+0x4bc>
 8008c70:	2200      	movs	r2, #0
 8008c72:	4b81      	ldr	r3, [pc, #516]	; (8008e78 <_dtoa_r+0x608>)
 8008c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c78:	f7f7 fb0e 	bl	8000298 <__aeabi_dsub>
 8008c7c:	462a      	mov	r2, r5
 8008c7e:	4633      	mov	r3, r6
 8008c80:	e9cd 0100 	strd	r0, r1, [sp]
 8008c84:	f7f7 ff50 	bl	8000b28 <__aeabi_dcmpgt>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	f040 8288 	bne.w	800919e <_dtoa_r+0x92e>
 8008c8e:	462a      	mov	r2, r5
 8008c90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008c94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c98:	f7f7 ff28 	bl	8000aec <__aeabi_dcmplt>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	f040 827c 	bne.w	800919a <_dtoa_r+0x92a>
 8008ca2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ca6:	e9cd 2300 	strd	r2, r3, [sp]
 8008caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f2c0 8150 	blt.w	8008f52 <_dtoa_r+0x6e2>
 8008cb2:	f1ba 0f0e 	cmp.w	sl, #14
 8008cb6:	f300 814c 	bgt.w	8008f52 <_dtoa_r+0x6e2>
 8008cba:	4b6a      	ldr	r3, [pc, #424]	; (8008e64 <_dtoa_r+0x5f4>)
 8008cbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008cc0:	ed93 7b00 	vldr	d7, [r3]
 8008cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ccc:	f280 80d8 	bge.w	8008e80 <_dtoa_r+0x610>
 8008cd0:	f1b9 0f00 	cmp.w	r9, #0
 8008cd4:	f300 80d4 	bgt.w	8008e80 <_dtoa_r+0x610>
 8008cd8:	f040 825e 	bne.w	8009198 <_dtoa_r+0x928>
 8008cdc:	2200      	movs	r2, #0
 8008cde:	4b66      	ldr	r3, [pc, #408]	; (8008e78 <_dtoa_r+0x608>)
 8008ce0:	ec51 0b17 	vmov	r0, r1, d7
 8008ce4:	f7f7 fc90 	bl	8000608 <__aeabi_dmul>
 8008ce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cec:	f7f7 ff12 	bl	8000b14 <__aeabi_dcmpge>
 8008cf0:	464f      	mov	r7, r9
 8008cf2:	464e      	mov	r6, r9
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	f040 8234 	bne.w	8009162 <_dtoa_r+0x8f2>
 8008cfa:	2331      	movs	r3, #49	; 0x31
 8008cfc:	f10b 0501 	add.w	r5, fp, #1
 8008d00:	f88b 3000 	strb.w	r3, [fp]
 8008d04:	f10a 0a01 	add.w	sl, sl, #1
 8008d08:	e22f      	b.n	800916a <_dtoa_r+0x8fa>
 8008d0a:	07f2      	lsls	r2, r6, #31
 8008d0c:	d505      	bpl.n	8008d1a <_dtoa_r+0x4aa>
 8008d0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d12:	f7f7 fc79 	bl	8000608 <__aeabi_dmul>
 8008d16:	3501      	adds	r5, #1
 8008d18:	2301      	movs	r3, #1
 8008d1a:	1076      	asrs	r6, r6, #1
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	e772      	b.n	8008c06 <_dtoa_r+0x396>
 8008d20:	2502      	movs	r5, #2
 8008d22:	e774      	b.n	8008c0e <_dtoa_r+0x39e>
 8008d24:	f8cd a020 	str.w	sl, [sp, #32]
 8008d28:	464f      	mov	r7, r9
 8008d2a:	e791      	b.n	8008c50 <_dtoa_r+0x3e0>
 8008d2c:	4b4d      	ldr	r3, [pc, #308]	; (8008e64 <_dtoa_r+0x5f4>)
 8008d2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d047      	beq.n	8008dcc <_dtoa_r+0x55c>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	2000      	movs	r0, #0
 8008d42:	494e      	ldr	r1, [pc, #312]	; (8008e7c <_dtoa_r+0x60c>)
 8008d44:	f7f7 fd8a 	bl	800085c <__aeabi_ddiv>
 8008d48:	462a      	mov	r2, r5
 8008d4a:	4633      	mov	r3, r6
 8008d4c:	f7f7 faa4 	bl	8000298 <__aeabi_dsub>
 8008d50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008d54:	465d      	mov	r5, fp
 8008d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d5a:	f7f7 ff05 	bl	8000b68 <__aeabi_d2iz>
 8008d5e:	4606      	mov	r6, r0
 8008d60:	f7f7 fbe8 	bl	8000534 <__aeabi_i2d>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d6c:	f7f7 fa94 	bl	8000298 <__aeabi_dsub>
 8008d70:	3630      	adds	r6, #48	; 0x30
 8008d72:	f805 6b01 	strb.w	r6, [r5], #1
 8008d76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d7a:	e9cd 0100 	strd	r0, r1, [sp]
 8008d7e:	f7f7 feb5 	bl	8000aec <__aeabi_dcmplt>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d163      	bne.n	8008e4e <_dtoa_r+0x5de>
 8008d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d8a:	2000      	movs	r0, #0
 8008d8c:	4937      	ldr	r1, [pc, #220]	; (8008e6c <_dtoa_r+0x5fc>)
 8008d8e:	f7f7 fa83 	bl	8000298 <__aeabi_dsub>
 8008d92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d96:	f7f7 fea9 	bl	8000aec <__aeabi_dcmplt>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	f040 80b7 	bne.w	8008f0e <_dtoa_r+0x69e>
 8008da0:	eba5 030b 	sub.w	r3, r5, fp
 8008da4:	429f      	cmp	r7, r3
 8008da6:	f77f af7c 	ble.w	8008ca2 <_dtoa_r+0x432>
 8008daa:	2200      	movs	r2, #0
 8008dac:	4b30      	ldr	r3, [pc, #192]	; (8008e70 <_dtoa_r+0x600>)
 8008dae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008db2:	f7f7 fc29 	bl	8000608 <__aeabi_dmul>
 8008db6:	2200      	movs	r2, #0
 8008db8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008dbc:	4b2c      	ldr	r3, [pc, #176]	; (8008e70 <_dtoa_r+0x600>)
 8008dbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dc2:	f7f7 fc21 	bl	8000608 <__aeabi_dmul>
 8008dc6:	e9cd 0100 	strd	r0, r1, [sp]
 8008dca:	e7c4      	b.n	8008d56 <_dtoa_r+0x4e6>
 8008dcc:	462a      	mov	r2, r5
 8008dce:	4633      	mov	r3, r6
 8008dd0:	f7f7 fc1a 	bl	8000608 <__aeabi_dmul>
 8008dd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008dd8:	eb0b 0507 	add.w	r5, fp, r7
 8008ddc:	465e      	mov	r6, fp
 8008dde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008de2:	f7f7 fec1 	bl	8000b68 <__aeabi_d2iz>
 8008de6:	4607      	mov	r7, r0
 8008de8:	f7f7 fba4 	bl	8000534 <__aeabi_i2d>
 8008dec:	3730      	adds	r7, #48	; 0x30
 8008dee:	4602      	mov	r2, r0
 8008df0:	460b      	mov	r3, r1
 8008df2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008df6:	f7f7 fa4f 	bl	8000298 <__aeabi_dsub>
 8008dfa:	f806 7b01 	strb.w	r7, [r6], #1
 8008dfe:	42ae      	cmp	r6, r5
 8008e00:	e9cd 0100 	strd	r0, r1, [sp]
 8008e04:	f04f 0200 	mov.w	r2, #0
 8008e08:	d126      	bne.n	8008e58 <_dtoa_r+0x5e8>
 8008e0a:	4b1c      	ldr	r3, [pc, #112]	; (8008e7c <_dtoa_r+0x60c>)
 8008e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e10:	f7f7 fa44 	bl	800029c <__adddf3>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e1c:	f7f7 fe84 	bl	8000b28 <__aeabi_dcmpgt>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d174      	bne.n	8008f0e <_dtoa_r+0x69e>
 8008e24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e28:	2000      	movs	r0, #0
 8008e2a:	4914      	ldr	r1, [pc, #80]	; (8008e7c <_dtoa_r+0x60c>)
 8008e2c:	f7f7 fa34 	bl	8000298 <__aeabi_dsub>
 8008e30:	4602      	mov	r2, r0
 8008e32:	460b      	mov	r3, r1
 8008e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e38:	f7f7 fe58 	bl	8000aec <__aeabi_dcmplt>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f43f af30 	beq.w	8008ca2 <_dtoa_r+0x432>
 8008e42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008e46:	2b30      	cmp	r3, #48	; 0x30
 8008e48:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008e4c:	d002      	beq.n	8008e54 <_dtoa_r+0x5e4>
 8008e4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e52:	e04a      	b.n	8008eea <_dtoa_r+0x67a>
 8008e54:	4615      	mov	r5, r2
 8008e56:	e7f4      	b.n	8008e42 <_dtoa_r+0x5d2>
 8008e58:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <_dtoa_r+0x600>)
 8008e5a:	f7f7 fbd5 	bl	8000608 <__aeabi_dmul>
 8008e5e:	e9cd 0100 	strd	r0, r1, [sp]
 8008e62:	e7bc      	b.n	8008dde <_dtoa_r+0x56e>
 8008e64:	0800bca8 	.word	0x0800bca8
 8008e68:	0800bc80 	.word	0x0800bc80
 8008e6c:	3ff00000 	.word	0x3ff00000
 8008e70:	40240000 	.word	0x40240000
 8008e74:	401c0000 	.word	0x401c0000
 8008e78:	40140000 	.word	0x40140000
 8008e7c:	3fe00000 	.word	0x3fe00000
 8008e80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e84:	465d      	mov	r5, fp
 8008e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	f7f7 fce5 	bl	800085c <__aeabi_ddiv>
 8008e92:	f7f7 fe69 	bl	8000b68 <__aeabi_d2iz>
 8008e96:	4680      	mov	r8, r0
 8008e98:	f7f7 fb4c 	bl	8000534 <__aeabi_i2d>
 8008e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ea0:	f7f7 fbb2 	bl	8000608 <__aeabi_dmul>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	4639      	mov	r1, r7
 8008eac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008eb0:	f7f7 f9f2 	bl	8000298 <__aeabi_dsub>
 8008eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8008eb8:	eba5 060b 	sub.w	r6, r5, fp
 8008ebc:	45b1      	cmp	r9, r6
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	d139      	bne.n	8008f38 <_dtoa_r+0x6c8>
 8008ec4:	f7f7 f9ea 	bl	800029c <__adddf3>
 8008ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ecc:	4606      	mov	r6, r0
 8008ece:	460f      	mov	r7, r1
 8008ed0:	f7f7 fe2a 	bl	8000b28 <__aeabi_dcmpgt>
 8008ed4:	b9c8      	cbnz	r0, 8008f0a <_dtoa_r+0x69a>
 8008ed6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eda:	4630      	mov	r0, r6
 8008edc:	4639      	mov	r1, r7
 8008ede:	f7f7 fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ee2:	b110      	cbz	r0, 8008eea <_dtoa_r+0x67a>
 8008ee4:	f018 0f01 	tst.w	r8, #1
 8008ee8:	d10f      	bne.n	8008f0a <_dtoa_r+0x69a>
 8008eea:	9904      	ldr	r1, [sp, #16]
 8008eec:	4620      	mov	r0, r4
 8008eee:	f000 fac1 	bl	8009474 <_Bfree>
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ef6:	702b      	strb	r3, [r5, #0]
 8008ef8:	f10a 0301 	add.w	r3, sl, #1
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8241 	beq.w	8009388 <_dtoa_r+0xb18>
 8008f06:	601d      	str	r5, [r3, #0]
 8008f08:	e23e      	b.n	8009388 <_dtoa_r+0xb18>
 8008f0a:	f8cd a020 	str.w	sl, [sp, #32]
 8008f0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f12:	2a39      	cmp	r2, #57	; 0x39
 8008f14:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008f18:	d108      	bne.n	8008f2c <_dtoa_r+0x6bc>
 8008f1a:	459b      	cmp	fp, r3
 8008f1c:	d10a      	bne.n	8008f34 <_dtoa_r+0x6c4>
 8008f1e:	9b08      	ldr	r3, [sp, #32]
 8008f20:	3301      	adds	r3, #1
 8008f22:	9308      	str	r3, [sp, #32]
 8008f24:	2330      	movs	r3, #48	; 0x30
 8008f26:	f88b 3000 	strb.w	r3, [fp]
 8008f2a:	465b      	mov	r3, fp
 8008f2c:	781a      	ldrb	r2, [r3, #0]
 8008f2e:	3201      	adds	r2, #1
 8008f30:	701a      	strb	r2, [r3, #0]
 8008f32:	e78c      	b.n	8008e4e <_dtoa_r+0x5de>
 8008f34:	461d      	mov	r5, r3
 8008f36:	e7ea      	b.n	8008f0e <_dtoa_r+0x69e>
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4b9b      	ldr	r3, [pc, #620]	; (80091a8 <_dtoa_r+0x938>)
 8008f3c:	f7f7 fb64 	bl	8000608 <__aeabi_dmul>
 8008f40:	2200      	movs	r2, #0
 8008f42:	2300      	movs	r3, #0
 8008f44:	4606      	mov	r6, r0
 8008f46:	460f      	mov	r7, r1
 8008f48:	f7f7 fdc6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d09a      	beq.n	8008e86 <_dtoa_r+0x616>
 8008f50:	e7cb      	b.n	8008eea <_dtoa_r+0x67a>
 8008f52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	f000 808b 	beq.w	8009070 <_dtoa_r+0x800>
 8008f5a:	9a06      	ldr	r2, [sp, #24]
 8008f5c:	2a01      	cmp	r2, #1
 8008f5e:	dc6e      	bgt.n	800903e <_dtoa_r+0x7ce>
 8008f60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f62:	2a00      	cmp	r2, #0
 8008f64:	d067      	beq.n	8009036 <_dtoa_r+0x7c6>
 8008f66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008f6a:	9f07      	ldr	r7, [sp, #28]
 8008f6c:	9d05      	ldr	r5, [sp, #20]
 8008f6e:	9a05      	ldr	r2, [sp, #20]
 8008f70:	2101      	movs	r1, #1
 8008f72:	441a      	add	r2, r3
 8008f74:	4620      	mov	r0, r4
 8008f76:	9205      	str	r2, [sp, #20]
 8008f78:	4498      	add	r8, r3
 8008f7a:	f000 fb1b 	bl	80095b4 <__i2b>
 8008f7e:	4606      	mov	r6, r0
 8008f80:	2d00      	cmp	r5, #0
 8008f82:	dd0c      	ble.n	8008f9e <_dtoa_r+0x72e>
 8008f84:	f1b8 0f00 	cmp.w	r8, #0
 8008f88:	dd09      	ble.n	8008f9e <_dtoa_r+0x72e>
 8008f8a:	4545      	cmp	r5, r8
 8008f8c:	9a05      	ldr	r2, [sp, #20]
 8008f8e:	462b      	mov	r3, r5
 8008f90:	bfa8      	it	ge
 8008f92:	4643      	movge	r3, r8
 8008f94:	1ad2      	subs	r2, r2, r3
 8008f96:	9205      	str	r2, [sp, #20]
 8008f98:	1aed      	subs	r5, r5, r3
 8008f9a:	eba8 0803 	sub.w	r8, r8, r3
 8008f9e:	9b07      	ldr	r3, [sp, #28]
 8008fa0:	b1eb      	cbz	r3, 8008fde <_dtoa_r+0x76e>
 8008fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d067      	beq.n	8009078 <_dtoa_r+0x808>
 8008fa8:	b18f      	cbz	r7, 8008fce <_dtoa_r+0x75e>
 8008faa:	4631      	mov	r1, r6
 8008fac:	463a      	mov	r2, r7
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f000 fba0 	bl	80096f4 <__pow5mult>
 8008fb4:	9a04      	ldr	r2, [sp, #16]
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	4606      	mov	r6, r0
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 fb03 	bl	80095c6 <__multiply>
 8008fc0:	9904      	ldr	r1, [sp, #16]
 8008fc2:	9008      	str	r0, [sp, #32]
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 fa55 	bl	8009474 <_Bfree>
 8008fca:	9b08      	ldr	r3, [sp, #32]
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	9b07      	ldr	r3, [sp, #28]
 8008fd0:	1bda      	subs	r2, r3, r7
 8008fd2:	d004      	beq.n	8008fde <_dtoa_r+0x76e>
 8008fd4:	9904      	ldr	r1, [sp, #16]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	f000 fb8c 	bl	80096f4 <__pow5mult>
 8008fdc:	9004      	str	r0, [sp, #16]
 8008fde:	2101      	movs	r1, #1
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 fae7 	bl	80095b4 <__i2b>
 8008fe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fe8:	4607      	mov	r7, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 81d0 	beq.w	8009390 <_dtoa_r+0xb20>
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	4601      	mov	r1, r0
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f000 fb7d 	bl	80096f4 <__pow5mult>
 8008ffa:	9b06      	ldr	r3, [sp, #24]
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	4607      	mov	r7, r0
 8009000:	dc40      	bgt.n	8009084 <_dtoa_r+0x814>
 8009002:	9b00      	ldr	r3, [sp, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d139      	bne.n	800907c <_dtoa_r+0x80c>
 8009008:	9b01      	ldr	r3, [sp, #4]
 800900a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800900e:	2b00      	cmp	r3, #0
 8009010:	d136      	bne.n	8009080 <_dtoa_r+0x810>
 8009012:	9b01      	ldr	r3, [sp, #4]
 8009014:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009018:	0d1b      	lsrs	r3, r3, #20
 800901a:	051b      	lsls	r3, r3, #20
 800901c:	b12b      	cbz	r3, 800902a <_dtoa_r+0x7ba>
 800901e:	9b05      	ldr	r3, [sp, #20]
 8009020:	3301      	adds	r3, #1
 8009022:	9305      	str	r3, [sp, #20]
 8009024:	f108 0801 	add.w	r8, r8, #1
 8009028:	2301      	movs	r3, #1
 800902a:	9307      	str	r3, [sp, #28]
 800902c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800902e:	2b00      	cmp	r3, #0
 8009030:	d12a      	bne.n	8009088 <_dtoa_r+0x818>
 8009032:	2001      	movs	r0, #1
 8009034:	e030      	b.n	8009098 <_dtoa_r+0x828>
 8009036:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009038:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800903c:	e795      	b.n	8008f6a <_dtoa_r+0x6fa>
 800903e:	9b07      	ldr	r3, [sp, #28]
 8009040:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8009044:	42bb      	cmp	r3, r7
 8009046:	bfbf      	itttt	lt
 8009048:	9b07      	ldrlt	r3, [sp, #28]
 800904a:	9707      	strlt	r7, [sp, #28]
 800904c:	1afa      	sublt	r2, r7, r3
 800904e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009050:	bfbb      	ittet	lt
 8009052:	189b      	addlt	r3, r3, r2
 8009054:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009056:	1bdf      	subge	r7, r3, r7
 8009058:	2700      	movlt	r7, #0
 800905a:	f1b9 0f00 	cmp.w	r9, #0
 800905e:	bfb5      	itete	lt
 8009060:	9b05      	ldrlt	r3, [sp, #20]
 8009062:	9d05      	ldrge	r5, [sp, #20]
 8009064:	eba3 0509 	sublt.w	r5, r3, r9
 8009068:	464b      	movge	r3, r9
 800906a:	bfb8      	it	lt
 800906c:	2300      	movlt	r3, #0
 800906e:	e77e      	b.n	8008f6e <_dtoa_r+0x6fe>
 8009070:	9f07      	ldr	r7, [sp, #28]
 8009072:	9d05      	ldr	r5, [sp, #20]
 8009074:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009076:	e783      	b.n	8008f80 <_dtoa_r+0x710>
 8009078:	9a07      	ldr	r2, [sp, #28]
 800907a:	e7ab      	b.n	8008fd4 <_dtoa_r+0x764>
 800907c:	2300      	movs	r3, #0
 800907e:	e7d4      	b.n	800902a <_dtoa_r+0x7ba>
 8009080:	9b00      	ldr	r3, [sp, #0]
 8009082:	e7d2      	b.n	800902a <_dtoa_r+0x7ba>
 8009084:	2300      	movs	r3, #0
 8009086:	9307      	str	r3, [sp, #28]
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800908e:	6918      	ldr	r0, [r3, #16]
 8009090:	f000 fa42 	bl	8009518 <__hi0bits>
 8009094:	f1c0 0020 	rsb	r0, r0, #32
 8009098:	4440      	add	r0, r8
 800909a:	f010 001f 	ands.w	r0, r0, #31
 800909e:	d047      	beq.n	8009130 <_dtoa_r+0x8c0>
 80090a0:	f1c0 0320 	rsb	r3, r0, #32
 80090a4:	2b04      	cmp	r3, #4
 80090a6:	dd3b      	ble.n	8009120 <_dtoa_r+0x8b0>
 80090a8:	9b05      	ldr	r3, [sp, #20]
 80090aa:	f1c0 001c 	rsb	r0, r0, #28
 80090ae:	4403      	add	r3, r0
 80090b0:	9305      	str	r3, [sp, #20]
 80090b2:	4405      	add	r5, r0
 80090b4:	4480      	add	r8, r0
 80090b6:	9b05      	ldr	r3, [sp, #20]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	dd05      	ble.n	80090c8 <_dtoa_r+0x858>
 80090bc:	461a      	mov	r2, r3
 80090be:	9904      	ldr	r1, [sp, #16]
 80090c0:	4620      	mov	r0, r4
 80090c2:	f000 fb65 	bl	8009790 <__lshift>
 80090c6:	9004      	str	r0, [sp, #16]
 80090c8:	f1b8 0f00 	cmp.w	r8, #0
 80090cc:	dd05      	ble.n	80090da <_dtoa_r+0x86a>
 80090ce:	4639      	mov	r1, r7
 80090d0:	4642      	mov	r2, r8
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 fb5c 	bl	8009790 <__lshift>
 80090d8:	4607      	mov	r7, r0
 80090da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090dc:	b353      	cbz	r3, 8009134 <_dtoa_r+0x8c4>
 80090de:	4639      	mov	r1, r7
 80090e0:	9804      	ldr	r0, [sp, #16]
 80090e2:	f000 fba9 	bl	8009838 <__mcmp>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	da24      	bge.n	8009134 <_dtoa_r+0x8c4>
 80090ea:	2300      	movs	r3, #0
 80090ec:	220a      	movs	r2, #10
 80090ee:	9904      	ldr	r1, [sp, #16]
 80090f0:	4620      	mov	r0, r4
 80090f2:	f000 f9d6 	bl	80094a2 <__multadd>
 80090f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f8:	9004      	str	r0, [sp, #16]
 80090fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 814d 	beq.w	800939e <_dtoa_r+0xb2e>
 8009104:	2300      	movs	r3, #0
 8009106:	4631      	mov	r1, r6
 8009108:	220a      	movs	r2, #10
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f9c9 	bl	80094a2 <__multadd>
 8009110:	9b02      	ldr	r3, [sp, #8]
 8009112:	2b00      	cmp	r3, #0
 8009114:	4606      	mov	r6, r0
 8009116:	dc4f      	bgt.n	80091b8 <_dtoa_r+0x948>
 8009118:	9b06      	ldr	r3, [sp, #24]
 800911a:	2b02      	cmp	r3, #2
 800911c:	dd4c      	ble.n	80091b8 <_dtoa_r+0x948>
 800911e:	e011      	b.n	8009144 <_dtoa_r+0x8d4>
 8009120:	d0c9      	beq.n	80090b6 <_dtoa_r+0x846>
 8009122:	9a05      	ldr	r2, [sp, #20]
 8009124:	331c      	adds	r3, #28
 8009126:	441a      	add	r2, r3
 8009128:	9205      	str	r2, [sp, #20]
 800912a:	441d      	add	r5, r3
 800912c:	4498      	add	r8, r3
 800912e:	e7c2      	b.n	80090b6 <_dtoa_r+0x846>
 8009130:	4603      	mov	r3, r0
 8009132:	e7f6      	b.n	8009122 <_dtoa_r+0x8b2>
 8009134:	f1b9 0f00 	cmp.w	r9, #0
 8009138:	dc38      	bgt.n	80091ac <_dtoa_r+0x93c>
 800913a:	9b06      	ldr	r3, [sp, #24]
 800913c:	2b02      	cmp	r3, #2
 800913e:	dd35      	ble.n	80091ac <_dtoa_r+0x93c>
 8009140:	f8cd 9008 	str.w	r9, [sp, #8]
 8009144:	9b02      	ldr	r3, [sp, #8]
 8009146:	b963      	cbnz	r3, 8009162 <_dtoa_r+0x8f2>
 8009148:	4639      	mov	r1, r7
 800914a:	2205      	movs	r2, #5
 800914c:	4620      	mov	r0, r4
 800914e:	f000 f9a8 	bl	80094a2 <__multadd>
 8009152:	4601      	mov	r1, r0
 8009154:	4607      	mov	r7, r0
 8009156:	9804      	ldr	r0, [sp, #16]
 8009158:	f000 fb6e 	bl	8009838 <__mcmp>
 800915c:	2800      	cmp	r0, #0
 800915e:	f73f adcc 	bgt.w	8008cfa <_dtoa_r+0x48a>
 8009162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009164:	465d      	mov	r5, fp
 8009166:	ea6f 0a03 	mvn.w	sl, r3
 800916a:	f04f 0900 	mov.w	r9, #0
 800916e:	4639      	mov	r1, r7
 8009170:	4620      	mov	r0, r4
 8009172:	f000 f97f 	bl	8009474 <_Bfree>
 8009176:	2e00      	cmp	r6, #0
 8009178:	f43f aeb7 	beq.w	8008eea <_dtoa_r+0x67a>
 800917c:	f1b9 0f00 	cmp.w	r9, #0
 8009180:	d005      	beq.n	800918e <_dtoa_r+0x91e>
 8009182:	45b1      	cmp	r9, r6
 8009184:	d003      	beq.n	800918e <_dtoa_r+0x91e>
 8009186:	4649      	mov	r1, r9
 8009188:	4620      	mov	r0, r4
 800918a:	f000 f973 	bl	8009474 <_Bfree>
 800918e:	4631      	mov	r1, r6
 8009190:	4620      	mov	r0, r4
 8009192:	f000 f96f 	bl	8009474 <_Bfree>
 8009196:	e6a8      	b.n	8008eea <_dtoa_r+0x67a>
 8009198:	2700      	movs	r7, #0
 800919a:	463e      	mov	r6, r7
 800919c:	e7e1      	b.n	8009162 <_dtoa_r+0x8f2>
 800919e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80091a2:	463e      	mov	r6, r7
 80091a4:	e5a9      	b.n	8008cfa <_dtoa_r+0x48a>
 80091a6:	bf00      	nop
 80091a8:	40240000 	.word	0x40240000
 80091ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 80fa 	beq.w	80093ac <_dtoa_r+0xb3c>
 80091b8:	2d00      	cmp	r5, #0
 80091ba:	dd05      	ble.n	80091c8 <_dtoa_r+0x958>
 80091bc:	4631      	mov	r1, r6
 80091be:	462a      	mov	r2, r5
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 fae5 	bl	8009790 <__lshift>
 80091c6:	4606      	mov	r6, r0
 80091c8:	9b07      	ldr	r3, [sp, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d04c      	beq.n	8009268 <_dtoa_r+0x9f8>
 80091ce:	6871      	ldr	r1, [r6, #4]
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 f91b 	bl	800940c <_Balloc>
 80091d6:	6932      	ldr	r2, [r6, #16]
 80091d8:	3202      	adds	r2, #2
 80091da:	4605      	mov	r5, r0
 80091dc:	0092      	lsls	r2, r2, #2
 80091de:	f106 010c 	add.w	r1, r6, #12
 80091e2:	300c      	adds	r0, #12
 80091e4:	f7fe fe26 	bl	8007e34 <memcpy>
 80091e8:	2201      	movs	r2, #1
 80091ea:	4629      	mov	r1, r5
 80091ec:	4620      	mov	r0, r4
 80091ee:	f000 facf 	bl	8009790 <__lshift>
 80091f2:	9b00      	ldr	r3, [sp, #0]
 80091f4:	f8cd b014 	str.w	fp, [sp, #20]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	46b1      	mov	r9, r6
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	4606      	mov	r6, r0
 8009202:	4639      	mov	r1, r7
 8009204:	9804      	ldr	r0, [sp, #16]
 8009206:	f7ff faa5 	bl	8008754 <quorem>
 800920a:	4649      	mov	r1, r9
 800920c:	4605      	mov	r5, r0
 800920e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009212:	9804      	ldr	r0, [sp, #16]
 8009214:	f000 fb10 	bl	8009838 <__mcmp>
 8009218:	4632      	mov	r2, r6
 800921a:	9000      	str	r0, [sp, #0]
 800921c:	4639      	mov	r1, r7
 800921e:	4620      	mov	r0, r4
 8009220:	f000 fb24 	bl	800986c <__mdiff>
 8009224:	68c3      	ldr	r3, [r0, #12]
 8009226:	4602      	mov	r2, r0
 8009228:	bb03      	cbnz	r3, 800926c <_dtoa_r+0x9fc>
 800922a:	4601      	mov	r1, r0
 800922c:	9008      	str	r0, [sp, #32]
 800922e:	9804      	ldr	r0, [sp, #16]
 8009230:	f000 fb02 	bl	8009838 <__mcmp>
 8009234:	9a08      	ldr	r2, [sp, #32]
 8009236:	4603      	mov	r3, r0
 8009238:	4611      	mov	r1, r2
 800923a:	4620      	mov	r0, r4
 800923c:	9308      	str	r3, [sp, #32]
 800923e:	f000 f919 	bl	8009474 <_Bfree>
 8009242:	9b08      	ldr	r3, [sp, #32]
 8009244:	b9a3      	cbnz	r3, 8009270 <_dtoa_r+0xa00>
 8009246:	9a06      	ldr	r2, [sp, #24]
 8009248:	b992      	cbnz	r2, 8009270 <_dtoa_r+0xa00>
 800924a:	9a07      	ldr	r2, [sp, #28]
 800924c:	b982      	cbnz	r2, 8009270 <_dtoa_r+0xa00>
 800924e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009252:	d029      	beq.n	80092a8 <_dtoa_r+0xa38>
 8009254:	9b00      	ldr	r3, [sp, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	dd01      	ble.n	800925e <_dtoa_r+0x9ee>
 800925a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800925e:	9b05      	ldr	r3, [sp, #20]
 8009260:	1c5d      	adds	r5, r3, #1
 8009262:	f883 8000 	strb.w	r8, [r3]
 8009266:	e782      	b.n	800916e <_dtoa_r+0x8fe>
 8009268:	4630      	mov	r0, r6
 800926a:	e7c2      	b.n	80091f2 <_dtoa_r+0x982>
 800926c:	2301      	movs	r3, #1
 800926e:	e7e3      	b.n	8009238 <_dtoa_r+0x9c8>
 8009270:	9a00      	ldr	r2, [sp, #0]
 8009272:	2a00      	cmp	r2, #0
 8009274:	db04      	blt.n	8009280 <_dtoa_r+0xa10>
 8009276:	d125      	bne.n	80092c4 <_dtoa_r+0xa54>
 8009278:	9a06      	ldr	r2, [sp, #24]
 800927a:	bb1a      	cbnz	r2, 80092c4 <_dtoa_r+0xa54>
 800927c:	9a07      	ldr	r2, [sp, #28]
 800927e:	bb0a      	cbnz	r2, 80092c4 <_dtoa_r+0xa54>
 8009280:	2b00      	cmp	r3, #0
 8009282:	ddec      	ble.n	800925e <_dtoa_r+0x9ee>
 8009284:	2201      	movs	r2, #1
 8009286:	9904      	ldr	r1, [sp, #16]
 8009288:	4620      	mov	r0, r4
 800928a:	f000 fa81 	bl	8009790 <__lshift>
 800928e:	4639      	mov	r1, r7
 8009290:	9004      	str	r0, [sp, #16]
 8009292:	f000 fad1 	bl	8009838 <__mcmp>
 8009296:	2800      	cmp	r0, #0
 8009298:	dc03      	bgt.n	80092a2 <_dtoa_r+0xa32>
 800929a:	d1e0      	bne.n	800925e <_dtoa_r+0x9ee>
 800929c:	f018 0f01 	tst.w	r8, #1
 80092a0:	d0dd      	beq.n	800925e <_dtoa_r+0x9ee>
 80092a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092a6:	d1d8      	bne.n	800925a <_dtoa_r+0x9ea>
 80092a8:	9b05      	ldr	r3, [sp, #20]
 80092aa:	9a05      	ldr	r2, [sp, #20]
 80092ac:	1c5d      	adds	r5, r3, #1
 80092ae:	2339      	movs	r3, #57	; 0x39
 80092b0:	7013      	strb	r3, [r2, #0]
 80092b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092b6:	2b39      	cmp	r3, #57	; 0x39
 80092b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80092bc:	d04f      	beq.n	800935e <_dtoa_r+0xaee>
 80092be:	3301      	adds	r3, #1
 80092c0:	7013      	strb	r3, [r2, #0]
 80092c2:	e754      	b.n	800916e <_dtoa_r+0x8fe>
 80092c4:	9a05      	ldr	r2, [sp, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f102 0501 	add.w	r5, r2, #1
 80092cc:	dd06      	ble.n	80092dc <_dtoa_r+0xa6c>
 80092ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80092d2:	d0e9      	beq.n	80092a8 <_dtoa_r+0xa38>
 80092d4:	f108 0801 	add.w	r8, r8, #1
 80092d8:	9b05      	ldr	r3, [sp, #20]
 80092da:	e7c2      	b.n	8009262 <_dtoa_r+0x9f2>
 80092dc:	9a02      	ldr	r2, [sp, #8]
 80092de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80092e2:	eba5 030b 	sub.w	r3, r5, fp
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d021      	beq.n	800932e <_dtoa_r+0xabe>
 80092ea:	2300      	movs	r3, #0
 80092ec:	220a      	movs	r2, #10
 80092ee:	9904      	ldr	r1, [sp, #16]
 80092f0:	4620      	mov	r0, r4
 80092f2:	f000 f8d6 	bl	80094a2 <__multadd>
 80092f6:	45b1      	cmp	r9, r6
 80092f8:	9004      	str	r0, [sp, #16]
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	f04f 020a 	mov.w	r2, #10
 8009302:	4649      	mov	r1, r9
 8009304:	4620      	mov	r0, r4
 8009306:	d105      	bne.n	8009314 <_dtoa_r+0xaa4>
 8009308:	f000 f8cb 	bl	80094a2 <__multadd>
 800930c:	4681      	mov	r9, r0
 800930e:	4606      	mov	r6, r0
 8009310:	9505      	str	r5, [sp, #20]
 8009312:	e776      	b.n	8009202 <_dtoa_r+0x992>
 8009314:	f000 f8c5 	bl	80094a2 <__multadd>
 8009318:	4631      	mov	r1, r6
 800931a:	4681      	mov	r9, r0
 800931c:	2300      	movs	r3, #0
 800931e:	220a      	movs	r2, #10
 8009320:	4620      	mov	r0, r4
 8009322:	f000 f8be 	bl	80094a2 <__multadd>
 8009326:	4606      	mov	r6, r0
 8009328:	e7f2      	b.n	8009310 <_dtoa_r+0xaa0>
 800932a:	f04f 0900 	mov.w	r9, #0
 800932e:	2201      	movs	r2, #1
 8009330:	9904      	ldr	r1, [sp, #16]
 8009332:	4620      	mov	r0, r4
 8009334:	f000 fa2c 	bl	8009790 <__lshift>
 8009338:	4639      	mov	r1, r7
 800933a:	9004      	str	r0, [sp, #16]
 800933c:	f000 fa7c 	bl	8009838 <__mcmp>
 8009340:	2800      	cmp	r0, #0
 8009342:	dcb6      	bgt.n	80092b2 <_dtoa_r+0xa42>
 8009344:	d102      	bne.n	800934c <_dtoa_r+0xadc>
 8009346:	f018 0f01 	tst.w	r8, #1
 800934a:	d1b2      	bne.n	80092b2 <_dtoa_r+0xa42>
 800934c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009350:	2b30      	cmp	r3, #48	; 0x30
 8009352:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009356:	f47f af0a 	bne.w	800916e <_dtoa_r+0x8fe>
 800935a:	4615      	mov	r5, r2
 800935c:	e7f6      	b.n	800934c <_dtoa_r+0xadc>
 800935e:	4593      	cmp	fp, r2
 8009360:	d105      	bne.n	800936e <_dtoa_r+0xafe>
 8009362:	2331      	movs	r3, #49	; 0x31
 8009364:	f10a 0a01 	add.w	sl, sl, #1
 8009368:	f88b 3000 	strb.w	r3, [fp]
 800936c:	e6ff      	b.n	800916e <_dtoa_r+0x8fe>
 800936e:	4615      	mov	r5, r2
 8009370:	e79f      	b.n	80092b2 <_dtoa_r+0xa42>
 8009372:	f8df b064 	ldr.w	fp, [pc, #100]	; 80093d8 <_dtoa_r+0xb68>
 8009376:	e007      	b.n	8009388 <_dtoa_r+0xb18>
 8009378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800937a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80093dc <_dtoa_r+0xb6c>
 800937e:	b11b      	cbz	r3, 8009388 <_dtoa_r+0xb18>
 8009380:	f10b 0308 	add.w	r3, fp, #8
 8009384:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	4658      	mov	r0, fp
 800938a:	b017      	add	sp, #92	; 0x5c
 800938c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009390:	9b06      	ldr	r3, [sp, #24]
 8009392:	2b01      	cmp	r3, #1
 8009394:	f77f ae35 	ble.w	8009002 <_dtoa_r+0x792>
 8009398:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800939a:	9307      	str	r3, [sp, #28]
 800939c:	e649      	b.n	8009032 <_dtoa_r+0x7c2>
 800939e:	9b02      	ldr	r3, [sp, #8]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	dc03      	bgt.n	80093ac <_dtoa_r+0xb3c>
 80093a4:	9b06      	ldr	r3, [sp, #24]
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	f73f aecc 	bgt.w	8009144 <_dtoa_r+0x8d4>
 80093ac:	465d      	mov	r5, fp
 80093ae:	4639      	mov	r1, r7
 80093b0:	9804      	ldr	r0, [sp, #16]
 80093b2:	f7ff f9cf 	bl	8008754 <quorem>
 80093b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80093ba:	f805 8b01 	strb.w	r8, [r5], #1
 80093be:	9a02      	ldr	r2, [sp, #8]
 80093c0:	eba5 030b 	sub.w	r3, r5, fp
 80093c4:	429a      	cmp	r2, r3
 80093c6:	ddb0      	ble.n	800932a <_dtoa_r+0xaba>
 80093c8:	2300      	movs	r3, #0
 80093ca:	220a      	movs	r2, #10
 80093cc:	9904      	ldr	r1, [sp, #16]
 80093ce:	4620      	mov	r0, r4
 80093d0:	f000 f867 	bl	80094a2 <__multadd>
 80093d4:	9004      	str	r0, [sp, #16]
 80093d6:	e7ea      	b.n	80093ae <_dtoa_r+0xb3e>
 80093d8:	0800bc48 	.word	0x0800bc48
 80093dc:	0800bc6c 	.word	0x0800bc6c

080093e0 <_localeconv_r>:
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <_localeconv_r+0x14>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6a18      	ldr	r0, [r3, #32]
 80093e6:	4b04      	ldr	r3, [pc, #16]	; (80093f8 <_localeconv_r+0x18>)
 80093e8:	2800      	cmp	r0, #0
 80093ea:	bf08      	it	eq
 80093ec:	4618      	moveq	r0, r3
 80093ee:	30f0      	adds	r0, #240	; 0xf0
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20000010 	.word	0x20000010
 80093f8:	20000074 	.word	0x20000074

080093fc <malloc>:
 80093fc:	4b02      	ldr	r3, [pc, #8]	; (8009408 <malloc+0xc>)
 80093fe:	4601      	mov	r1, r0
 8009400:	6818      	ldr	r0, [r3, #0]
 8009402:	f000 bb3b 	b.w	8009a7c <_malloc_r>
 8009406:	bf00      	nop
 8009408:	20000010 	.word	0x20000010

0800940c <_Balloc>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009410:	4604      	mov	r4, r0
 8009412:	460e      	mov	r6, r1
 8009414:	b93d      	cbnz	r5, 8009426 <_Balloc+0x1a>
 8009416:	2010      	movs	r0, #16
 8009418:	f7ff fff0 	bl	80093fc <malloc>
 800941c:	6260      	str	r0, [r4, #36]	; 0x24
 800941e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009422:	6005      	str	r5, [r0, #0]
 8009424:	60c5      	str	r5, [r0, #12]
 8009426:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009428:	68eb      	ldr	r3, [r5, #12]
 800942a:	b183      	cbz	r3, 800944e <_Balloc+0x42>
 800942c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009434:	b9b8      	cbnz	r0, 8009466 <_Balloc+0x5a>
 8009436:	2101      	movs	r1, #1
 8009438:	fa01 f506 	lsl.w	r5, r1, r6
 800943c:	1d6a      	adds	r2, r5, #5
 800943e:	0092      	lsls	r2, r2, #2
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fabf 	bl	80099c4 <_calloc_r>
 8009446:	b160      	cbz	r0, 8009462 <_Balloc+0x56>
 8009448:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800944c:	e00e      	b.n	800946c <_Balloc+0x60>
 800944e:	2221      	movs	r2, #33	; 0x21
 8009450:	2104      	movs	r1, #4
 8009452:	4620      	mov	r0, r4
 8009454:	f000 fab6 	bl	80099c4 <_calloc_r>
 8009458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800945a:	60e8      	str	r0, [r5, #12]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e4      	bne.n	800942c <_Balloc+0x20>
 8009462:	2000      	movs	r0, #0
 8009464:	bd70      	pop	{r4, r5, r6, pc}
 8009466:	6802      	ldr	r2, [r0, #0]
 8009468:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800946c:	2300      	movs	r3, #0
 800946e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009472:	e7f7      	b.n	8009464 <_Balloc+0x58>

08009474 <_Bfree>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009478:	4606      	mov	r6, r0
 800947a:	460d      	mov	r5, r1
 800947c:	b93c      	cbnz	r4, 800948e <_Bfree+0x1a>
 800947e:	2010      	movs	r0, #16
 8009480:	f7ff ffbc 	bl	80093fc <malloc>
 8009484:	6270      	str	r0, [r6, #36]	; 0x24
 8009486:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800948a:	6004      	str	r4, [r0, #0]
 800948c:	60c4      	str	r4, [r0, #12]
 800948e:	b13d      	cbz	r5, 80094a0 <_Bfree+0x2c>
 8009490:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009492:	686a      	ldr	r2, [r5, #4]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800949a:	6029      	str	r1, [r5, #0]
 800949c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80094a0:	bd70      	pop	{r4, r5, r6, pc}

080094a2 <__multadd>:
 80094a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094a6:	690d      	ldr	r5, [r1, #16]
 80094a8:	461f      	mov	r7, r3
 80094aa:	4606      	mov	r6, r0
 80094ac:	460c      	mov	r4, r1
 80094ae:	f101 0c14 	add.w	ip, r1, #20
 80094b2:	2300      	movs	r3, #0
 80094b4:	f8dc 0000 	ldr.w	r0, [ip]
 80094b8:	b281      	uxth	r1, r0
 80094ba:	fb02 7101 	mla	r1, r2, r1, r7
 80094be:	0c0f      	lsrs	r7, r1, #16
 80094c0:	0c00      	lsrs	r0, r0, #16
 80094c2:	fb02 7000 	mla	r0, r2, r0, r7
 80094c6:	b289      	uxth	r1, r1
 80094c8:	3301      	adds	r3, #1
 80094ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80094ce:	429d      	cmp	r5, r3
 80094d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80094d4:	f84c 1b04 	str.w	r1, [ip], #4
 80094d8:	dcec      	bgt.n	80094b4 <__multadd+0x12>
 80094da:	b1d7      	cbz	r7, 8009512 <__multadd+0x70>
 80094dc:	68a3      	ldr	r3, [r4, #8]
 80094de:	42ab      	cmp	r3, r5
 80094e0:	dc12      	bgt.n	8009508 <__multadd+0x66>
 80094e2:	6861      	ldr	r1, [r4, #4]
 80094e4:	4630      	mov	r0, r6
 80094e6:	3101      	adds	r1, #1
 80094e8:	f7ff ff90 	bl	800940c <_Balloc>
 80094ec:	6922      	ldr	r2, [r4, #16]
 80094ee:	3202      	adds	r2, #2
 80094f0:	f104 010c 	add.w	r1, r4, #12
 80094f4:	4680      	mov	r8, r0
 80094f6:	0092      	lsls	r2, r2, #2
 80094f8:	300c      	adds	r0, #12
 80094fa:	f7fe fc9b 	bl	8007e34 <memcpy>
 80094fe:	4621      	mov	r1, r4
 8009500:	4630      	mov	r0, r6
 8009502:	f7ff ffb7 	bl	8009474 <_Bfree>
 8009506:	4644      	mov	r4, r8
 8009508:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800950c:	3501      	adds	r5, #1
 800950e:	615f      	str	r7, [r3, #20]
 8009510:	6125      	str	r5, [r4, #16]
 8009512:	4620      	mov	r0, r4
 8009514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009518 <__hi0bits>:
 8009518:	0c02      	lsrs	r2, r0, #16
 800951a:	0412      	lsls	r2, r2, #16
 800951c:	4603      	mov	r3, r0
 800951e:	b9b2      	cbnz	r2, 800954e <__hi0bits+0x36>
 8009520:	0403      	lsls	r3, r0, #16
 8009522:	2010      	movs	r0, #16
 8009524:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009528:	bf04      	itt	eq
 800952a:	021b      	lsleq	r3, r3, #8
 800952c:	3008      	addeq	r0, #8
 800952e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009532:	bf04      	itt	eq
 8009534:	011b      	lsleq	r3, r3, #4
 8009536:	3004      	addeq	r0, #4
 8009538:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800953c:	bf04      	itt	eq
 800953e:	009b      	lsleq	r3, r3, #2
 8009540:	3002      	addeq	r0, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	db06      	blt.n	8009554 <__hi0bits+0x3c>
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	d503      	bpl.n	8009552 <__hi0bits+0x3a>
 800954a:	3001      	adds	r0, #1
 800954c:	4770      	bx	lr
 800954e:	2000      	movs	r0, #0
 8009550:	e7e8      	b.n	8009524 <__hi0bits+0xc>
 8009552:	2020      	movs	r0, #32
 8009554:	4770      	bx	lr

08009556 <__lo0bits>:
 8009556:	6803      	ldr	r3, [r0, #0]
 8009558:	f013 0207 	ands.w	r2, r3, #7
 800955c:	4601      	mov	r1, r0
 800955e:	d00b      	beq.n	8009578 <__lo0bits+0x22>
 8009560:	07da      	lsls	r2, r3, #31
 8009562:	d423      	bmi.n	80095ac <__lo0bits+0x56>
 8009564:	0798      	lsls	r0, r3, #30
 8009566:	bf49      	itett	mi
 8009568:	085b      	lsrmi	r3, r3, #1
 800956a:	089b      	lsrpl	r3, r3, #2
 800956c:	2001      	movmi	r0, #1
 800956e:	600b      	strmi	r3, [r1, #0]
 8009570:	bf5c      	itt	pl
 8009572:	600b      	strpl	r3, [r1, #0]
 8009574:	2002      	movpl	r0, #2
 8009576:	4770      	bx	lr
 8009578:	b298      	uxth	r0, r3
 800957a:	b9a8      	cbnz	r0, 80095a8 <__lo0bits+0x52>
 800957c:	0c1b      	lsrs	r3, r3, #16
 800957e:	2010      	movs	r0, #16
 8009580:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009584:	bf04      	itt	eq
 8009586:	0a1b      	lsreq	r3, r3, #8
 8009588:	3008      	addeq	r0, #8
 800958a:	071a      	lsls	r2, r3, #28
 800958c:	bf04      	itt	eq
 800958e:	091b      	lsreq	r3, r3, #4
 8009590:	3004      	addeq	r0, #4
 8009592:	079a      	lsls	r2, r3, #30
 8009594:	bf04      	itt	eq
 8009596:	089b      	lsreq	r3, r3, #2
 8009598:	3002      	addeq	r0, #2
 800959a:	07da      	lsls	r2, r3, #31
 800959c:	d402      	bmi.n	80095a4 <__lo0bits+0x4e>
 800959e:	085b      	lsrs	r3, r3, #1
 80095a0:	d006      	beq.n	80095b0 <__lo0bits+0x5a>
 80095a2:	3001      	adds	r0, #1
 80095a4:	600b      	str	r3, [r1, #0]
 80095a6:	4770      	bx	lr
 80095a8:	4610      	mov	r0, r2
 80095aa:	e7e9      	b.n	8009580 <__lo0bits+0x2a>
 80095ac:	2000      	movs	r0, #0
 80095ae:	4770      	bx	lr
 80095b0:	2020      	movs	r0, #32
 80095b2:	4770      	bx	lr

080095b4 <__i2b>:
 80095b4:	b510      	push	{r4, lr}
 80095b6:	460c      	mov	r4, r1
 80095b8:	2101      	movs	r1, #1
 80095ba:	f7ff ff27 	bl	800940c <_Balloc>
 80095be:	2201      	movs	r2, #1
 80095c0:	6144      	str	r4, [r0, #20]
 80095c2:	6102      	str	r2, [r0, #16]
 80095c4:	bd10      	pop	{r4, pc}

080095c6 <__multiply>:
 80095c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	4614      	mov	r4, r2
 80095cc:	690a      	ldr	r2, [r1, #16]
 80095ce:	6923      	ldr	r3, [r4, #16]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	bfb8      	it	lt
 80095d4:	460b      	movlt	r3, r1
 80095d6:	4688      	mov	r8, r1
 80095d8:	bfbc      	itt	lt
 80095da:	46a0      	movlt	r8, r4
 80095dc:	461c      	movlt	r4, r3
 80095de:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095e2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80095e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095ee:	eb07 0609 	add.w	r6, r7, r9
 80095f2:	42b3      	cmp	r3, r6
 80095f4:	bfb8      	it	lt
 80095f6:	3101      	addlt	r1, #1
 80095f8:	f7ff ff08 	bl	800940c <_Balloc>
 80095fc:	f100 0514 	add.w	r5, r0, #20
 8009600:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009604:	462b      	mov	r3, r5
 8009606:	2200      	movs	r2, #0
 8009608:	4573      	cmp	r3, lr
 800960a:	d316      	bcc.n	800963a <__multiply+0x74>
 800960c:	f104 0214 	add.w	r2, r4, #20
 8009610:	f108 0114 	add.w	r1, r8, #20
 8009614:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009618:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	9b00      	ldr	r3, [sp, #0]
 8009620:	9201      	str	r2, [sp, #4]
 8009622:	4293      	cmp	r3, r2
 8009624:	d80c      	bhi.n	8009640 <__multiply+0x7a>
 8009626:	2e00      	cmp	r6, #0
 8009628:	dd03      	ble.n	8009632 <__multiply+0x6c>
 800962a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800962e:	2b00      	cmp	r3, #0
 8009630:	d05d      	beq.n	80096ee <__multiply+0x128>
 8009632:	6106      	str	r6, [r0, #16]
 8009634:	b003      	add	sp, #12
 8009636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963a:	f843 2b04 	str.w	r2, [r3], #4
 800963e:	e7e3      	b.n	8009608 <__multiply+0x42>
 8009640:	f8b2 b000 	ldrh.w	fp, [r2]
 8009644:	f1bb 0f00 	cmp.w	fp, #0
 8009648:	d023      	beq.n	8009692 <__multiply+0xcc>
 800964a:	4689      	mov	r9, r1
 800964c:	46ac      	mov	ip, r5
 800964e:	f04f 0800 	mov.w	r8, #0
 8009652:	f859 4b04 	ldr.w	r4, [r9], #4
 8009656:	f8dc a000 	ldr.w	sl, [ip]
 800965a:	b2a3      	uxth	r3, r4
 800965c:	fa1f fa8a 	uxth.w	sl, sl
 8009660:	fb0b a303 	mla	r3, fp, r3, sl
 8009664:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009668:	f8dc 4000 	ldr.w	r4, [ip]
 800966c:	4443      	add	r3, r8
 800966e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009672:	fb0b 840a 	mla	r4, fp, sl, r8
 8009676:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800967a:	46e2      	mov	sl, ip
 800967c:	b29b      	uxth	r3, r3
 800967e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009682:	454f      	cmp	r7, r9
 8009684:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009688:	f84a 3b04 	str.w	r3, [sl], #4
 800968c:	d82b      	bhi.n	80096e6 <__multiply+0x120>
 800968e:	f8cc 8004 	str.w	r8, [ip, #4]
 8009692:	9b01      	ldr	r3, [sp, #4]
 8009694:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009698:	3204      	adds	r2, #4
 800969a:	f1ba 0f00 	cmp.w	sl, #0
 800969e:	d020      	beq.n	80096e2 <__multiply+0x11c>
 80096a0:	682b      	ldr	r3, [r5, #0]
 80096a2:	4689      	mov	r9, r1
 80096a4:	46a8      	mov	r8, r5
 80096a6:	f04f 0b00 	mov.w	fp, #0
 80096aa:	f8b9 c000 	ldrh.w	ip, [r9]
 80096ae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80096b2:	fb0a 440c 	mla	r4, sl, ip, r4
 80096b6:	445c      	add	r4, fp
 80096b8:	46c4      	mov	ip, r8
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80096c0:	f84c 3b04 	str.w	r3, [ip], #4
 80096c4:	f859 3b04 	ldr.w	r3, [r9], #4
 80096c8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80096cc:	0c1b      	lsrs	r3, r3, #16
 80096ce:	fb0a b303 	mla	r3, sl, r3, fp
 80096d2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80096d6:	454f      	cmp	r7, r9
 80096d8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80096dc:	d805      	bhi.n	80096ea <__multiply+0x124>
 80096de:	f8c8 3004 	str.w	r3, [r8, #4]
 80096e2:	3504      	adds	r5, #4
 80096e4:	e79b      	b.n	800961e <__multiply+0x58>
 80096e6:	46d4      	mov	ip, sl
 80096e8:	e7b3      	b.n	8009652 <__multiply+0x8c>
 80096ea:	46e0      	mov	r8, ip
 80096ec:	e7dd      	b.n	80096aa <__multiply+0xe4>
 80096ee:	3e01      	subs	r6, #1
 80096f0:	e799      	b.n	8009626 <__multiply+0x60>
	...

080096f4 <__pow5mult>:
 80096f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096f8:	4615      	mov	r5, r2
 80096fa:	f012 0203 	ands.w	r2, r2, #3
 80096fe:	4606      	mov	r6, r0
 8009700:	460f      	mov	r7, r1
 8009702:	d007      	beq.n	8009714 <__pow5mult+0x20>
 8009704:	3a01      	subs	r2, #1
 8009706:	4c21      	ldr	r4, [pc, #132]	; (800978c <__pow5mult+0x98>)
 8009708:	2300      	movs	r3, #0
 800970a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800970e:	f7ff fec8 	bl	80094a2 <__multadd>
 8009712:	4607      	mov	r7, r0
 8009714:	10ad      	asrs	r5, r5, #2
 8009716:	d035      	beq.n	8009784 <__pow5mult+0x90>
 8009718:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800971a:	b93c      	cbnz	r4, 800972c <__pow5mult+0x38>
 800971c:	2010      	movs	r0, #16
 800971e:	f7ff fe6d 	bl	80093fc <malloc>
 8009722:	6270      	str	r0, [r6, #36]	; 0x24
 8009724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009728:	6004      	str	r4, [r0, #0]
 800972a:	60c4      	str	r4, [r0, #12]
 800972c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009734:	b94c      	cbnz	r4, 800974a <__pow5mult+0x56>
 8009736:	f240 2171 	movw	r1, #625	; 0x271
 800973a:	4630      	mov	r0, r6
 800973c:	f7ff ff3a 	bl	80095b4 <__i2b>
 8009740:	2300      	movs	r3, #0
 8009742:	f8c8 0008 	str.w	r0, [r8, #8]
 8009746:	4604      	mov	r4, r0
 8009748:	6003      	str	r3, [r0, #0]
 800974a:	f04f 0800 	mov.w	r8, #0
 800974e:	07eb      	lsls	r3, r5, #31
 8009750:	d50a      	bpl.n	8009768 <__pow5mult+0x74>
 8009752:	4639      	mov	r1, r7
 8009754:	4622      	mov	r2, r4
 8009756:	4630      	mov	r0, r6
 8009758:	f7ff ff35 	bl	80095c6 <__multiply>
 800975c:	4639      	mov	r1, r7
 800975e:	4681      	mov	r9, r0
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff fe87 	bl	8009474 <_Bfree>
 8009766:	464f      	mov	r7, r9
 8009768:	106d      	asrs	r5, r5, #1
 800976a:	d00b      	beq.n	8009784 <__pow5mult+0x90>
 800976c:	6820      	ldr	r0, [r4, #0]
 800976e:	b938      	cbnz	r0, 8009780 <__pow5mult+0x8c>
 8009770:	4622      	mov	r2, r4
 8009772:	4621      	mov	r1, r4
 8009774:	4630      	mov	r0, r6
 8009776:	f7ff ff26 	bl	80095c6 <__multiply>
 800977a:	6020      	str	r0, [r4, #0]
 800977c:	f8c0 8000 	str.w	r8, [r0]
 8009780:	4604      	mov	r4, r0
 8009782:	e7e4      	b.n	800974e <__pow5mult+0x5a>
 8009784:	4638      	mov	r0, r7
 8009786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978a:	bf00      	nop
 800978c:	0800bd70 	.word	0x0800bd70

08009790 <__lshift>:
 8009790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009794:	460c      	mov	r4, r1
 8009796:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800979a:	6923      	ldr	r3, [r4, #16]
 800979c:	6849      	ldr	r1, [r1, #4]
 800979e:	eb0a 0903 	add.w	r9, sl, r3
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	4607      	mov	r7, r0
 80097a6:	4616      	mov	r6, r2
 80097a8:	f109 0501 	add.w	r5, r9, #1
 80097ac:	42ab      	cmp	r3, r5
 80097ae:	db32      	blt.n	8009816 <__lshift+0x86>
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff fe2b 	bl	800940c <_Balloc>
 80097b6:	2300      	movs	r3, #0
 80097b8:	4680      	mov	r8, r0
 80097ba:	f100 0114 	add.w	r1, r0, #20
 80097be:	461a      	mov	r2, r3
 80097c0:	4553      	cmp	r3, sl
 80097c2:	db2b      	blt.n	800981c <__lshift+0x8c>
 80097c4:	6920      	ldr	r0, [r4, #16]
 80097c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097ca:	f104 0314 	add.w	r3, r4, #20
 80097ce:	f016 021f 	ands.w	r2, r6, #31
 80097d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097da:	d025      	beq.n	8009828 <__lshift+0x98>
 80097dc:	f1c2 0e20 	rsb	lr, r2, #32
 80097e0:	2000      	movs	r0, #0
 80097e2:	681e      	ldr	r6, [r3, #0]
 80097e4:	468a      	mov	sl, r1
 80097e6:	4096      	lsls	r6, r2
 80097e8:	4330      	orrs	r0, r6
 80097ea:	f84a 0b04 	str.w	r0, [sl], #4
 80097ee:	f853 0b04 	ldr.w	r0, [r3], #4
 80097f2:	459c      	cmp	ip, r3
 80097f4:	fa20 f00e 	lsr.w	r0, r0, lr
 80097f8:	d814      	bhi.n	8009824 <__lshift+0x94>
 80097fa:	6048      	str	r0, [r1, #4]
 80097fc:	b108      	cbz	r0, 8009802 <__lshift+0x72>
 80097fe:	f109 0502 	add.w	r5, r9, #2
 8009802:	3d01      	subs	r5, #1
 8009804:	4638      	mov	r0, r7
 8009806:	f8c8 5010 	str.w	r5, [r8, #16]
 800980a:	4621      	mov	r1, r4
 800980c:	f7ff fe32 	bl	8009474 <_Bfree>
 8009810:	4640      	mov	r0, r8
 8009812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009816:	3101      	adds	r1, #1
 8009818:	005b      	lsls	r3, r3, #1
 800981a:	e7c7      	b.n	80097ac <__lshift+0x1c>
 800981c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009820:	3301      	adds	r3, #1
 8009822:	e7cd      	b.n	80097c0 <__lshift+0x30>
 8009824:	4651      	mov	r1, sl
 8009826:	e7dc      	b.n	80097e2 <__lshift+0x52>
 8009828:	3904      	subs	r1, #4
 800982a:	f853 2b04 	ldr.w	r2, [r3], #4
 800982e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009832:	459c      	cmp	ip, r3
 8009834:	d8f9      	bhi.n	800982a <__lshift+0x9a>
 8009836:	e7e4      	b.n	8009802 <__lshift+0x72>

08009838 <__mcmp>:
 8009838:	6903      	ldr	r3, [r0, #16]
 800983a:	690a      	ldr	r2, [r1, #16]
 800983c:	1a9b      	subs	r3, r3, r2
 800983e:	b530      	push	{r4, r5, lr}
 8009840:	d10c      	bne.n	800985c <__mcmp+0x24>
 8009842:	0092      	lsls	r2, r2, #2
 8009844:	3014      	adds	r0, #20
 8009846:	3114      	adds	r1, #20
 8009848:	1884      	adds	r4, r0, r2
 800984a:	4411      	add	r1, r2
 800984c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009850:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009854:	4295      	cmp	r5, r2
 8009856:	d003      	beq.n	8009860 <__mcmp+0x28>
 8009858:	d305      	bcc.n	8009866 <__mcmp+0x2e>
 800985a:	2301      	movs	r3, #1
 800985c:	4618      	mov	r0, r3
 800985e:	bd30      	pop	{r4, r5, pc}
 8009860:	42a0      	cmp	r0, r4
 8009862:	d3f3      	bcc.n	800984c <__mcmp+0x14>
 8009864:	e7fa      	b.n	800985c <__mcmp+0x24>
 8009866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800986a:	e7f7      	b.n	800985c <__mcmp+0x24>

0800986c <__mdiff>:
 800986c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009870:	460d      	mov	r5, r1
 8009872:	4607      	mov	r7, r0
 8009874:	4611      	mov	r1, r2
 8009876:	4628      	mov	r0, r5
 8009878:	4614      	mov	r4, r2
 800987a:	f7ff ffdd 	bl	8009838 <__mcmp>
 800987e:	1e06      	subs	r6, r0, #0
 8009880:	d108      	bne.n	8009894 <__mdiff+0x28>
 8009882:	4631      	mov	r1, r6
 8009884:	4638      	mov	r0, r7
 8009886:	f7ff fdc1 	bl	800940c <_Balloc>
 800988a:	2301      	movs	r3, #1
 800988c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009894:	bfa4      	itt	ge
 8009896:	4623      	movge	r3, r4
 8009898:	462c      	movge	r4, r5
 800989a:	4638      	mov	r0, r7
 800989c:	6861      	ldr	r1, [r4, #4]
 800989e:	bfa6      	itte	ge
 80098a0:	461d      	movge	r5, r3
 80098a2:	2600      	movge	r6, #0
 80098a4:	2601      	movlt	r6, #1
 80098a6:	f7ff fdb1 	bl	800940c <_Balloc>
 80098aa:	692b      	ldr	r3, [r5, #16]
 80098ac:	60c6      	str	r6, [r0, #12]
 80098ae:	6926      	ldr	r6, [r4, #16]
 80098b0:	f105 0914 	add.w	r9, r5, #20
 80098b4:	f104 0214 	add.w	r2, r4, #20
 80098b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80098bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80098c0:	f100 0514 	add.w	r5, r0, #20
 80098c4:	f04f 0e00 	mov.w	lr, #0
 80098c8:	f852 ab04 	ldr.w	sl, [r2], #4
 80098cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80098d0:	fa1e f18a 	uxtah	r1, lr, sl
 80098d4:	b2a3      	uxth	r3, r4
 80098d6:	1ac9      	subs	r1, r1, r3
 80098d8:	0c23      	lsrs	r3, r4, #16
 80098da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80098de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80098e2:	b289      	uxth	r1, r1
 80098e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80098e8:	45c8      	cmp	r8, r9
 80098ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80098ee:	4694      	mov	ip, r2
 80098f0:	f845 3b04 	str.w	r3, [r5], #4
 80098f4:	d8e8      	bhi.n	80098c8 <__mdiff+0x5c>
 80098f6:	45bc      	cmp	ip, r7
 80098f8:	d304      	bcc.n	8009904 <__mdiff+0x98>
 80098fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80098fe:	b183      	cbz	r3, 8009922 <__mdiff+0xb6>
 8009900:	6106      	str	r6, [r0, #16]
 8009902:	e7c5      	b.n	8009890 <__mdiff+0x24>
 8009904:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009908:	fa1e f381 	uxtah	r3, lr, r1
 800990c:	141a      	asrs	r2, r3, #16
 800990e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009912:	b29b      	uxth	r3, r3
 8009914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009918:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800991c:	f845 3b04 	str.w	r3, [r5], #4
 8009920:	e7e9      	b.n	80098f6 <__mdiff+0x8a>
 8009922:	3e01      	subs	r6, #1
 8009924:	e7e9      	b.n	80098fa <__mdiff+0x8e>

08009926 <__d2b>:
 8009926:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800992a:	460e      	mov	r6, r1
 800992c:	2101      	movs	r1, #1
 800992e:	ec59 8b10 	vmov	r8, r9, d0
 8009932:	4615      	mov	r5, r2
 8009934:	f7ff fd6a 	bl	800940c <_Balloc>
 8009938:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800993c:	4607      	mov	r7, r0
 800993e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009942:	bb34      	cbnz	r4, 8009992 <__d2b+0x6c>
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	f1b8 0300 	subs.w	r3, r8, #0
 800994a:	d027      	beq.n	800999c <__d2b+0x76>
 800994c:	a802      	add	r0, sp, #8
 800994e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009952:	f7ff fe00 	bl	8009556 <__lo0bits>
 8009956:	9900      	ldr	r1, [sp, #0]
 8009958:	b1f0      	cbz	r0, 8009998 <__d2b+0x72>
 800995a:	9a01      	ldr	r2, [sp, #4]
 800995c:	f1c0 0320 	rsb	r3, r0, #32
 8009960:	fa02 f303 	lsl.w	r3, r2, r3
 8009964:	430b      	orrs	r3, r1
 8009966:	40c2      	lsrs	r2, r0
 8009968:	617b      	str	r3, [r7, #20]
 800996a:	9201      	str	r2, [sp, #4]
 800996c:	9b01      	ldr	r3, [sp, #4]
 800996e:	61bb      	str	r3, [r7, #24]
 8009970:	2b00      	cmp	r3, #0
 8009972:	bf14      	ite	ne
 8009974:	2102      	movne	r1, #2
 8009976:	2101      	moveq	r1, #1
 8009978:	6139      	str	r1, [r7, #16]
 800997a:	b1c4      	cbz	r4, 80099ae <__d2b+0x88>
 800997c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009980:	4404      	add	r4, r0
 8009982:	6034      	str	r4, [r6, #0]
 8009984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009988:	6028      	str	r0, [r5, #0]
 800998a:	4638      	mov	r0, r7
 800998c:	b003      	add	sp, #12
 800998e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009996:	e7d5      	b.n	8009944 <__d2b+0x1e>
 8009998:	6179      	str	r1, [r7, #20]
 800999a:	e7e7      	b.n	800996c <__d2b+0x46>
 800999c:	a801      	add	r0, sp, #4
 800999e:	f7ff fdda 	bl	8009556 <__lo0bits>
 80099a2:	9b01      	ldr	r3, [sp, #4]
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	2101      	movs	r1, #1
 80099a8:	6139      	str	r1, [r7, #16]
 80099aa:	3020      	adds	r0, #32
 80099ac:	e7e5      	b.n	800997a <__d2b+0x54>
 80099ae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80099b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099b6:	6030      	str	r0, [r6, #0]
 80099b8:	6918      	ldr	r0, [r3, #16]
 80099ba:	f7ff fdad 	bl	8009518 <__hi0bits>
 80099be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80099c2:	e7e1      	b.n	8009988 <__d2b+0x62>

080099c4 <_calloc_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	fb02 f401 	mul.w	r4, r2, r1
 80099ca:	4621      	mov	r1, r4
 80099cc:	f000 f856 	bl	8009a7c <_malloc_r>
 80099d0:	4605      	mov	r5, r0
 80099d2:	b118      	cbz	r0, 80099dc <_calloc_r+0x18>
 80099d4:	4622      	mov	r2, r4
 80099d6:	2100      	movs	r1, #0
 80099d8:	f7fe fa37 	bl	8007e4a <memset>
 80099dc:	4628      	mov	r0, r5
 80099de:	bd38      	pop	{r3, r4, r5, pc}

080099e0 <_free_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4605      	mov	r5, r0
 80099e4:	2900      	cmp	r1, #0
 80099e6:	d045      	beq.n	8009a74 <_free_r+0x94>
 80099e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099ec:	1f0c      	subs	r4, r1, #4
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	bfb8      	it	lt
 80099f2:	18e4      	addlt	r4, r4, r3
 80099f4:	f000 fa29 	bl	8009e4a <__malloc_lock>
 80099f8:	4a1f      	ldr	r2, [pc, #124]	; (8009a78 <_free_r+0x98>)
 80099fa:	6813      	ldr	r3, [r2, #0]
 80099fc:	4610      	mov	r0, r2
 80099fe:	b933      	cbnz	r3, 8009a0e <_free_r+0x2e>
 8009a00:	6063      	str	r3, [r4, #4]
 8009a02:	6014      	str	r4, [r2, #0]
 8009a04:	4628      	mov	r0, r5
 8009a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a0a:	f000 ba1f 	b.w	8009e4c <__malloc_unlock>
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	d90c      	bls.n	8009a2c <_free_r+0x4c>
 8009a12:	6821      	ldr	r1, [r4, #0]
 8009a14:	1862      	adds	r2, r4, r1
 8009a16:	4293      	cmp	r3, r2
 8009a18:	bf04      	itt	eq
 8009a1a:	681a      	ldreq	r2, [r3, #0]
 8009a1c:	685b      	ldreq	r3, [r3, #4]
 8009a1e:	6063      	str	r3, [r4, #4]
 8009a20:	bf04      	itt	eq
 8009a22:	1852      	addeq	r2, r2, r1
 8009a24:	6022      	streq	r2, [r4, #0]
 8009a26:	6004      	str	r4, [r0, #0]
 8009a28:	e7ec      	b.n	8009a04 <_free_r+0x24>
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	b10a      	cbz	r2, 8009a34 <_free_r+0x54>
 8009a30:	42a2      	cmp	r2, r4
 8009a32:	d9fa      	bls.n	8009a2a <_free_r+0x4a>
 8009a34:	6819      	ldr	r1, [r3, #0]
 8009a36:	1858      	adds	r0, r3, r1
 8009a38:	42a0      	cmp	r0, r4
 8009a3a:	d10b      	bne.n	8009a54 <_free_r+0x74>
 8009a3c:	6820      	ldr	r0, [r4, #0]
 8009a3e:	4401      	add	r1, r0
 8009a40:	1858      	adds	r0, r3, r1
 8009a42:	4282      	cmp	r2, r0
 8009a44:	6019      	str	r1, [r3, #0]
 8009a46:	d1dd      	bne.n	8009a04 <_free_r+0x24>
 8009a48:	6810      	ldr	r0, [r2, #0]
 8009a4a:	6852      	ldr	r2, [r2, #4]
 8009a4c:	605a      	str	r2, [r3, #4]
 8009a4e:	4401      	add	r1, r0
 8009a50:	6019      	str	r1, [r3, #0]
 8009a52:	e7d7      	b.n	8009a04 <_free_r+0x24>
 8009a54:	d902      	bls.n	8009a5c <_free_r+0x7c>
 8009a56:	230c      	movs	r3, #12
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	e7d3      	b.n	8009a04 <_free_r+0x24>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	1821      	adds	r1, r4, r0
 8009a60:	428a      	cmp	r2, r1
 8009a62:	bf04      	itt	eq
 8009a64:	6811      	ldreq	r1, [r2, #0]
 8009a66:	6852      	ldreq	r2, [r2, #4]
 8009a68:	6062      	str	r2, [r4, #4]
 8009a6a:	bf04      	itt	eq
 8009a6c:	1809      	addeq	r1, r1, r0
 8009a6e:	6021      	streq	r1, [r4, #0]
 8009a70:	605c      	str	r4, [r3, #4]
 8009a72:	e7c7      	b.n	8009a04 <_free_r+0x24>
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	2000023c 	.word	0x2000023c

08009a7c <_malloc_r>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	1ccd      	adds	r5, r1, #3
 8009a80:	f025 0503 	bic.w	r5, r5, #3
 8009a84:	3508      	adds	r5, #8
 8009a86:	2d0c      	cmp	r5, #12
 8009a88:	bf38      	it	cc
 8009a8a:	250c      	movcc	r5, #12
 8009a8c:	2d00      	cmp	r5, #0
 8009a8e:	4606      	mov	r6, r0
 8009a90:	db01      	blt.n	8009a96 <_malloc_r+0x1a>
 8009a92:	42a9      	cmp	r1, r5
 8009a94:	d903      	bls.n	8009a9e <_malloc_r+0x22>
 8009a96:	230c      	movs	r3, #12
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	f000 f9d4 	bl	8009e4a <__malloc_lock>
 8009aa2:	4a21      	ldr	r2, [pc, #132]	; (8009b28 <_malloc_r+0xac>)
 8009aa4:	6814      	ldr	r4, [r2, #0]
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	b991      	cbnz	r1, 8009ad0 <_malloc_r+0x54>
 8009aaa:	4c20      	ldr	r4, [pc, #128]	; (8009b2c <_malloc_r+0xb0>)
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	b91b      	cbnz	r3, 8009ab8 <_malloc_r+0x3c>
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f000 f98f 	bl	8009dd4 <_sbrk_r>
 8009ab6:	6020      	str	r0, [r4, #0]
 8009ab8:	4629      	mov	r1, r5
 8009aba:	4630      	mov	r0, r6
 8009abc:	f000 f98a 	bl	8009dd4 <_sbrk_r>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d124      	bne.n	8009b0e <_malloc_r+0x92>
 8009ac4:	230c      	movs	r3, #12
 8009ac6:	6033      	str	r3, [r6, #0]
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f000 f9bf 	bl	8009e4c <__malloc_unlock>
 8009ace:	e7e4      	b.n	8009a9a <_malloc_r+0x1e>
 8009ad0:	680b      	ldr	r3, [r1, #0]
 8009ad2:	1b5b      	subs	r3, r3, r5
 8009ad4:	d418      	bmi.n	8009b08 <_malloc_r+0x8c>
 8009ad6:	2b0b      	cmp	r3, #11
 8009ad8:	d90f      	bls.n	8009afa <_malloc_r+0x7e>
 8009ada:	600b      	str	r3, [r1, #0]
 8009adc:	50cd      	str	r5, [r1, r3]
 8009ade:	18cc      	adds	r4, r1, r3
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	f000 f9b3 	bl	8009e4c <__malloc_unlock>
 8009ae6:	f104 000b 	add.w	r0, r4, #11
 8009aea:	1d23      	adds	r3, r4, #4
 8009aec:	f020 0007 	bic.w	r0, r0, #7
 8009af0:	1ac3      	subs	r3, r0, r3
 8009af2:	d0d3      	beq.n	8009a9c <_malloc_r+0x20>
 8009af4:	425a      	negs	r2, r3
 8009af6:	50e2      	str	r2, [r4, r3]
 8009af8:	e7d0      	b.n	8009a9c <_malloc_r+0x20>
 8009afa:	428c      	cmp	r4, r1
 8009afc:	684b      	ldr	r3, [r1, #4]
 8009afe:	bf16      	itet	ne
 8009b00:	6063      	strne	r3, [r4, #4]
 8009b02:	6013      	streq	r3, [r2, #0]
 8009b04:	460c      	movne	r4, r1
 8009b06:	e7eb      	b.n	8009ae0 <_malloc_r+0x64>
 8009b08:	460c      	mov	r4, r1
 8009b0a:	6849      	ldr	r1, [r1, #4]
 8009b0c:	e7cc      	b.n	8009aa8 <_malloc_r+0x2c>
 8009b0e:	1cc4      	adds	r4, r0, #3
 8009b10:	f024 0403 	bic.w	r4, r4, #3
 8009b14:	42a0      	cmp	r0, r4
 8009b16:	d005      	beq.n	8009b24 <_malloc_r+0xa8>
 8009b18:	1a21      	subs	r1, r4, r0
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f000 f95a 	bl	8009dd4 <_sbrk_r>
 8009b20:	3001      	adds	r0, #1
 8009b22:	d0cf      	beq.n	8009ac4 <_malloc_r+0x48>
 8009b24:	6025      	str	r5, [r4, #0]
 8009b26:	e7db      	b.n	8009ae0 <_malloc_r+0x64>
 8009b28:	2000023c 	.word	0x2000023c
 8009b2c:	20000240 	.word	0x20000240

08009b30 <__ssputs_r>:
 8009b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b34:	688e      	ldr	r6, [r1, #8]
 8009b36:	429e      	cmp	r6, r3
 8009b38:	4682      	mov	sl, r0
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	4690      	mov	r8, r2
 8009b3e:	4699      	mov	r9, r3
 8009b40:	d837      	bhi.n	8009bb2 <__ssputs_r+0x82>
 8009b42:	898a      	ldrh	r2, [r1, #12]
 8009b44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b48:	d031      	beq.n	8009bae <__ssputs_r+0x7e>
 8009b4a:	6825      	ldr	r5, [r4, #0]
 8009b4c:	6909      	ldr	r1, [r1, #16]
 8009b4e:	1a6f      	subs	r7, r5, r1
 8009b50:	6965      	ldr	r5, [r4, #20]
 8009b52:	2302      	movs	r3, #2
 8009b54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b58:	fb95 f5f3 	sdiv	r5, r5, r3
 8009b5c:	f109 0301 	add.w	r3, r9, #1
 8009b60:	443b      	add	r3, r7
 8009b62:	429d      	cmp	r5, r3
 8009b64:	bf38      	it	cc
 8009b66:	461d      	movcc	r5, r3
 8009b68:	0553      	lsls	r3, r2, #21
 8009b6a:	d530      	bpl.n	8009bce <__ssputs_r+0x9e>
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7ff ff85 	bl	8009a7c <_malloc_r>
 8009b72:	4606      	mov	r6, r0
 8009b74:	b950      	cbnz	r0, 8009b8c <__ssputs_r+0x5c>
 8009b76:	230c      	movs	r3, #12
 8009b78:	f8ca 3000 	str.w	r3, [sl]
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b82:	81a3      	strh	r3, [r4, #12]
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8c:	463a      	mov	r2, r7
 8009b8e:	6921      	ldr	r1, [r4, #16]
 8009b90:	f7fe f950 	bl	8007e34 <memcpy>
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b9e:	81a3      	strh	r3, [r4, #12]
 8009ba0:	6126      	str	r6, [r4, #16]
 8009ba2:	6165      	str	r5, [r4, #20]
 8009ba4:	443e      	add	r6, r7
 8009ba6:	1bed      	subs	r5, r5, r7
 8009ba8:	6026      	str	r6, [r4, #0]
 8009baa:	60a5      	str	r5, [r4, #8]
 8009bac:	464e      	mov	r6, r9
 8009bae:	454e      	cmp	r6, r9
 8009bb0:	d900      	bls.n	8009bb4 <__ssputs_r+0x84>
 8009bb2:	464e      	mov	r6, r9
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	4641      	mov	r1, r8
 8009bb8:	6820      	ldr	r0, [r4, #0]
 8009bba:	f000 f92d 	bl	8009e18 <memmove>
 8009bbe:	68a3      	ldr	r3, [r4, #8]
 8009bc0:	1b9b      	subs	r3, r3, r6
 8009bc2:	60a3      	str	r3, [r4, #8]
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	441e      	add	r6, r3
 8009bc8:	6026      	str	r6, [r4, #0]
 8009bca:	2000      	movs	r0, #0
 8009bcc:	e7dc      	b.n	8009b88 <__ssputs_r+0x58>
 8009bce:	462a      	mov	r2, r5
 8009bd0:	f000 f93d 	bl	8009e4e <_realloc_r>
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d1e2      	bne.n	8009ba0 <__ssputs_r+0x70>
 8009bda:	6921      	ldr	r1, [r4, #16]
 8009bdc:	4650      	mov	r0, sl
 8009bde:	f7ff feff 	bl	80099e0 <_free_r>
 8009be2:	e7c8      	b.n	8009b76 <__ssputs_r+0x46>

08009be4 <_svfiprintf_r>:
 8009be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be8:	461d      	mov	r5, r3
 8009bea:	898b      	ldrh	r3, [r1, #12]
 8009bec:	061f      	lsls	r7, r3, #24
 8009bee:	b09d      	sub	sp, #116	; 0x74
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	460c      	mov	r4, r1
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	d50f      	bpl.n	8009c18 <_svfiprintf_r+0x34>
 8009bf8:	690b      	ldr	r3, [r1, #16]
 8009bfa:	b96b      	cbnz	r3, 8009c18 <_svfiprintf_r+0x34>
 8009bfc:	2140      	movs	r1, #64	; 0x40
 8009bfe:	f7ff ff3d 	bl	8009a7c <_malloc_r>
 8009c02:	6020      	str	r0, [r4, #0]
 8009c04:	6120      	str	r0, [r4, #16]
 8009c06:	b928      	cbnz	r0, 8009c14 <_svfiprintf_r+0x30>
 8009c08:	230c      	movs	r3, #12
 8009c0a:	f8c8 3000 	str.w	r3, [r8]
 8009c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c12:	e0c8      	b.n	8009da6 <_svfiprintf_r+0x1c2>
 8009c14:	2340      	movs	r3, #64	; 0x40
 8009c16:	6163      	str	r3, [r4, #20]
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c1c:	2320      	movs	r3, #32
 8009c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c22:	2330      	movs	r3, #48	; 0x30
 8009c24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c28:	9503      	str	r5, [sp, #12]
 8009c2a:	f04f 0b01 	mov.w	fp, #1
 8009c2e:	4637      	mov	r7, r6
 8009c30:	463d      	mov	r5, r7
 8009c32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009c36:	b10b      	cbz	r3, 8009c3c <_svfiprintf_r+0x58>
 8009c38:	2b25      	cmp	r3, #37	; 0x25
 8009c3a:	d13e      	bne.n	8009cba <_svfiprintf_r+0xd6>
 8009c3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009c40:	d00b      	beq.n	8009c5a <_svfiprintf_r+0x76>
 8009c42:	4653      	mov	r3, sl
 8009c44:	4632      	mov	r2, r6
 8009c46:	4621      	mov	r1, r4
 8009c48:	4640      	mov	r0, r8
 8009c4a:	f7ff ff71 	bl	8009b30 <__ssputs_r>
 8009c4e:	3001      	adds	r0, #1
 8009c50:	f000 80a4 	beq.w	8009d9c <_svfiprintf_r+0x1b8>
 8009c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c56:	4453      	add	r3, sl
 8009c58:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5a:	783b      	ldrb	r3, [r7, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 809d 	beq.w	8009d9c <_svfiprintf_r+0x1b8>
 8009c62:	2300      	movs	r3, #0
 8009c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c6c:	9304      	str	r3, [sp, #16]
 8009c6e:	9307      	str	r3, [sp, #28]
 8009c70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c74:	931a      	str	r3, [sp, #104]	; 0x68
 8009c76:	462f      	mov	r7, r5
 8009c78:	2205      	movs	r2, #5
 8009c7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009c7e:	4850      	ldr	r0, [pc, #320]	; (8009dc0 <_svfiprintf_r+0x1dc>)
 8009c80:	f7f6 fab6 	bl	80001f0 <memchr>
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	b9d0      	cbnz	r0, 8009cbe <_svfiprintf_r+0xda>
 8009c88:	06d9      	lsls	r1, r3, #27
 8009c8a:	bf44      	itt	mi
 8009c8c:	2220      	movmi	r2, #32
 8009c8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c92:	071a      	lsls	r2, r3, #28
 8009c94:	bf44      	itt	mi
 8009c96:	222b      	movmi	r2, #43	; 0x2b
 8009c98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009c9c:	782a      	ldrb	r2, [r5, #0]
 8009c9e:	2a2a      	cmp	r2, #42	; 0x2a
 8009ca0:	d015      	beq.n	8009cce <_svfiprintf_r+0xea>
 8009ca2:	9a07      	ldr	r2, [sp, #28]
 8009ca4:	462f      	mov	r7, r5
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	250a      	movs	r5, #10
 8009caa:	4639      	mov	r1, r7
 8009cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cb0:	3b30      	subs	r3, #48	; 0x30
 8009cb2:	2b09      	cmp	r3, #9
 8009cb4:	d94d      	bls.n	8009d52 <_svfiprintf_r+0x16e>
 8009cb6:	b1b8      	cbz	r0, 8009ce8 <_svfiprintf_r+0x104>
 8009cb8:	e00f      	b.n	8009cda <_svfiprintf_r+0xf6>
 8009cba:	462f      	mov	r7, r5
 8009cbc:	e7b8      	b.n	8009c30 <_svfiprintf_r+0x4c>
 8009cbe:	4a40      	ldr	r2, [pc, #256]	; (8009dc0 <_svfiprintf_r+0x1dc>)
 8009cc0:	1a80      	subs	r0, r0, r2
 8009cc2:	fa0b f000 	lsl.w	r0, fp, r0
 8009cc6:	4318      	orrs	r0, r3
 8009cc8:	9004      	str	r0, [sp, #16]
 8009cca:	463d      	mov	r5, r7
 8009ccc:	e7d3      	b.n	8009c76 <_svfiprintf_r+0x92>
 8009cce:	9a03      	ldr	r2, [sp, #12]
 8009cd0:	1d11      	adds	r1, r2, #4
 8009cd2:	6812      	ldr	r2, [r2, #0]
 8009cd4:	9103      	str	r1, [sp, #12]
 8009cd6:	2a00      	cmp	r2, #0
 8009cd8:	db01      	blt.n	8009cde <_svfiprintf_r+0xfa>
 8009cda:	9207      	str	r2, [sp, #28]
 8009cdc:	e004      	b.n	8009ce8 <_svfiprintf_r+0x104>
 8009cde:	4252      	negs	r2, r2
 8009ce0:	f043 0302 	orr.w	r3, r3, #2
 8009ce4:	9207      	str	r2, [sp, #28]
 8009ce6:	9304      	str	r3, [sp, #16]
 8009ce8:	783b      	ldrb	r3, [r7, #0]
 8009cea:	2b2e      	cmp	r3, #46	; 0x2e
 8009cec:	d10c      	bne.n	8009d08 <_svfiprintf_r+0x124>
 8009cee:	787b      	ldrb	r3, [r7, #1]
 8009cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cf2:	d133      	bne.n	8009d5c <_svfiprintf_r+0x178>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	1d1a      	adds	r2, r3, #4
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	9203      	str	r2, [sp, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	bfb8      	it	lt
 8009d00:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009d04:	3702      	adds	r7, #2
 8009d06:	9305      	str	r3, [sp, #20]
 8009d08:	4d2e      	ldr	r5, [pc, #184]	; (8009dc4 <_svfiprintf_r+0x1e0>)
 8009d0a:	7839      	ldrb	r1, [r7, #0]
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	4628      	mov	r0, r5
 8009d10:	f7f6 fa6e 	bl	80001f0 <memchr>
 8009d14:	b138      	cbz	r0, 8009d26 <_svfiprintf_r+0x142>
 8009d16:	2340      	movs	r3, #64	; 0x40
 8009d18:	1b40      	subs	r0, r0, r5
 8009d1a:	fa03 f000 	lsl.w	r0, r3, r0
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	4303      	orrs	r3, r0
 8009d22:	3701      	adds	r7, #1
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	7839      	ldrb	r1, [r7, #0]
 8009d28:	4827      	ldr	r0, [pc, #156]	; (8009dc8 <_svfiprintf_r+0x1e4>)
 8009d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d2e:	2206      	movs	r2, #6
 8009d30:	1c7e      	adds	r6, r7, #1
 8009d32:	f7f6 fa5d 	bl	80001f0 <memchr>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d038      	beq.n	8009dac <_svfiprintf_r+0x1c8>
 8009d3a:	4b24      	ldr	r3, [pc, #144]	; (8009dcc <_svfiprintf_r+0x1e8>)
 8009d3c:	bb13      	cbnz	r3, 8009d84 <_svfiprintf_r+0x1a0>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	3307      	adds	r3, #7
 8009d42:	f023 0307 	bic.w	r3, r3, #7
 8009d46:	3308      	adds	r3, #8
 8009d48:	9303      	str	r3, [sp, #12]
 8009d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d4c:	444b      	add	r3, r9
 8009d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d50:	e76d      	b.n	8009c2e <_svfiprintf_r+0x4a>
 8009d52:	fb05 3202 	mla	r2, r5, r2, r3
 8009d56:	2001      	movs	r0, #1
 8009d58:	460f      	mov	r7, r1
 8009d5a:	e7a6      	b.n	8009caa <_svfiprintf_r+0xc6>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	3701      	adds	r7, #1
 8009d60:	9305      	str	r3, [sp, #20]
 8009d62:	4619      	mov	r1, r3
 8009d64:	250a      	movs	r5, #10
 8009d66:	4638      	mov	r0, r7
 8009d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d6c:	3a30      	subs	r2, #48	; 0x30
 8009d6e:	2a09      	cmp	r2, #9
 8009d70:	d903      	bls.n	8009d7a <_svfiprintf_r+0x196>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0c8      	beq.n	8009d08 <_svfiprintf_r+0x124>
 8009d76:	9105      	str	r1, [sp, #20]
 8009d78:	e7c6      	b.n	8009d08 <_svfiprintf_r+0x124>
 8009d7a:	fb05 2101 	mla	r1, r5, r1, r2
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4607      	mov	r7, r0
 8009d82:	e7f0      	b.n	8009d66 <_svfiprintf_r+0x182>
 8009d84:	ab03      	add	r3, sp, #12
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	4622      	mov	r2, r4
 8009d8a:	4b11      	ldr	r3, [pc, #68]	; (8009dd0 <_svfiprintf_r+0x1ec>)
 8009d8c:	a904      	add	r1, sp, #16
 8009d8e:	4640      	mov	r0, r8
 8009d90:	f7fe f8f8 	bl	8007f84 <_printf_float>
 8009d94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009d98:	4681      	mov	r9, r0
 8009d9a:	d1d6      	bne.n	8009d4a <_svfiprintf_r+0x166>
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	065b      	lsls	r3, r3, #25
 8009da0:	f53f af35 	bmi.w	8009c0e <_svfiprintf_r+0x2a>
 8009da4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009da6:	b01d      	add	sp, #116	; 0x74
 8009da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dac:	ab03      	add	r3, sp, #12
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	4622      	mov	r2, r4
 8009db2:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <_svfiprintf_r+0x1ec>)
 8009db4:	a904      	add	r1, sp, #16
 8009db6:	4640      	mov	r0, r8
 8009db8:	f7fe fb9a 	bl	80084f0 <_printf_i>
 8009dbc:	e7ea      	b.n	8009d94 <_svfiprintf_r+0x1b0>
 8009dbe:	bf00      	nop
 8009dc0:	0800bd7c 	.word	0x0800bd7c
 8009dc4:	0800bd82 	.word	0x0800bd82
 8009dc8:	0800bd86 	.word	0x0800bd86
 8009dcc:	08007f85 	.word	0x08007f85
 8009dd0:	08009b31 	.word	0x08009b31

08009dd4 <_sbrk_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4c06      	ldr	r4, [pc, #24]	; (8009df0 <_sbrk_r+0x1c>)
 8009dd8:	2300      	movs	r3, #0
 8009dda:	4605      	mov	r5, r0
 8009ddc:	4608      	mov	r0, r1
 8009dde:	6023      	str	r3, [r4, #0]
 8009de0:	f7fa f902 	bl	8003fe8 <_sbrk>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_sbrk_r+0x1a>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_sbrk_r+0x1a>
 8009dec:	602b      	str	r3, [r5, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	200008ec 	.word	0x200008ec

08009df4 <__ascii_mbtowc>:
 8009df4:	b082      	sub	sp, #8
 8009df6:	b901      	cbnz	r1, 8009dfa <__ascii_mbtowc+0x6>
 8009df8:	a901      	add	r1, sp, #4
 8009dfa:	b142      	cbz	r2, 8009e0e <__ascii_mbtowc+0x1a>
 8009dfc:	b14b      	cbz	r3, 8009e12 <__ascii_mbtowc+0x1e>
 8009dfe:	7813      	ldrb	r3, [r2, #0]
 8009e00:	600b      	str	r3, [r1, #0]
 8009e02:	7812      	ldrb	r2, [r2, #0]
 8009e04:	1c10      	adds	r0, r2, #0
 8009e06:	bf18      	it	ne
 8009e08:	2001      	movne	r0, #1
 8009e0a:	b002      	add	sp, #8
 8009e0c:	4770      	bx	lr
 8009e0e:	4610      	mov	r0, r2
 8009e10:	e7fb      	b.n	8009e0a <__ascii_mbtowc+0x16>
 8009e12:	f06f 0001 	mvn.w	r0, #1
 8009e16:	e7f8      	b.n	8009e0a <__ascii_mbtowc+0x16>

08009e18 <memmove>:
 8009e18:	4288      	cmp	r0, r1
 8009e1a:	b510      	push	{r4, lr}
 8009e1c:	eb01 0302 	add.w	r3, r1, r2
 8009e20:	d807      	bhi.n	8009e32 <memmove+0x1a>
 8009e22:	1e42      	subs	r2, r0, #1
 8009e24:	4299      	cmp	r1, r3
 8009e26:	d00a      	beq.n	8009e3e <memmove+0x26>
 8009e28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e2c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e30:	e7f8      	b.n	8009e24 <memmove+0xc>
 8009e32:	4283      	cmp	r3, r0
 8009e34:	d9f5      	bls.n	8009e22 <memmove+0xa>
 8009e36:	1881      	adds	r1, r0, r2
 8009e38:	1ad2      	subs	r2, r2, r3
 8009e3a:	42d3      	cmn	r3, r2
 8009e3c:	d100      	bne.n	8009e40 <memmove+0x28>
 8009e3e:	bd10      	pop	{r4, pc}
 8009e40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e44:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e48:	e7f7      	b.n	8009e3a <memmove+0x22>

08009e4a <__malloc_lock>:
 8009e4a:	4770      	bx	lr

08009e4c <__malloc_unlock>:
 8009e4c:	4770      	bx	lr

08009e4e <_realloc_r>:
 8009e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e50:	4607      	mov	r7, r0
 8009e52:	4614      	mov	r4, r2
 8009e54:	460e      	mov	r6, r1
 8009e56:	b921      	cbnz	r1, 8009e62 <_realloc_r+0x14>
 8009e58:	4611      	mov	r1, r2
 8009e5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e5e:	f7ff be0d 	b.w	8009a7c <_malloc_r>
 8009e62:	b922      	cbnz	r2, 8009e6e <_realloc_r+0x20>
 8009e64:	f7ff fdbc 	bl	80099e0 <_free_r>
 8009e68:	4625      	mov	r5, r4
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6e:	f000 f821 	bl	8009eb4 <_malloc_usable_size_r>
 8009e72:	42a0      	cmp	r0, r4
 8009e74:	d20f      	bcs.n	8009e96 <_realloc_r+0x48>
 8009e76:	4621      	mov	r1, r4
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f7ff fdff 	bl	8009a7c <_malloc_r>
 8009e7e:	4605      	mov	r5, r0
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d0f2      	beq.n	8009e6a <_realloc_r+0x1c>
 8009e84:	4631      	mov	r1, r6
 8009e86:	4622      	mov	r2, r4
 8009e88:	f7fd ffd4 	bl	8007e34 <memcpy>
 8009e8c:	4631      	mov	r1, r6
 8009e8e:	4638      	mov	r0, r7
 8009e90:	f7ff fda6 	bl	80099e0 <_free_r>
 8009e94:	e7e9      	b.n	8009e6a <_realloc_r+0x1c>
 8009e96:	4635      	mov	r5, r6
 8009e98:	e7e7      	b.n	8009e6a <_realloc_r+0x1c>

08009e9a <__ascii_wctomb>:
 8009e9a:	b149      	cbz	r1, 8009eb0 <__ascii_wctomb+0x16>
 8009e9c:	2aff      	cmp	r2, #255	; 0xff
 8009e9e:	bf85      	ittet	hi
 8009ea0:	238a      	movhi	r3, #138	; 0x8a
 8009ea2:	6003      	strhi	r3, [r0, #0]
 8009ea4:	700a      	strbls	r2, [r1, #0]
 8009ea6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009eaa:	bf98      	it	ls
 8009eac:	2001      	movls	r0, #1
 8009eae:	4770      	bx	lr
 8009eb0:	4608      	mov	r0, r1
 8009eb2:	4770      	bx	lr

08009eb4 <_malloc_usable_size_r>:
 8009eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb8:	1f18      	subs	r0, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	bfbc      	itt	lt
 8009ebe:	580b      	ldrlt	r3, [r1, r0]
 8009ec0:	18c0      	addlt	r0, r0, r3
 8009ec2:	4770      	bx	lr
 8009ec4:	0000      	movs	r0, r0
	...

08009ec8 <atan>:
 8009ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	ec55 4b10 	vmov	r4, r5, d0
 8009ed0:	4bc3      	ldr	r3, [pc, #780]	; (800a1e0 <atan+0x318>)
 8009ed2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ed6:	429e      	cmp	r6, r3
 8009ed8:	46ab      	mov	fp, r5
 8009eda:	dd18      	ble.n	8009f0e <atan+0x46>
 8009edc:	4bc1      	ldr	r3, [pc, #772]	; (800a1e4 <atan+0x31c>)
 8009ede:	429e      	cmp	r6, r3
 8009ee0:	dc01      	bgt.n	8009ee6 <atan+0x1e>
 8009ee2:	d109      	bne.n	8009ef8 <atan+0x30>
 8009ee4:	b144      	cbz	r4, 8009ef8 <atan+0x30>
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	462b      	mov	r3, r5
 8009eea:	4620      	mov	r0, r4
 8009eec:	4629      	mov	r1, r5
 8009eee:	f7f6 f9d5 	bl	800029c <__adddf3>
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	460d      	mov	r5, r1
 8009ef6:	e006      	b.n	8009f06 <atan+0x3e>
 8009ef8:	f1bb 0f00 	cmp.w	fp, #0
 8009efc:	f340 8131 	ble.w	800a162 <atan+0x29a>
 8009f00:	a59b      	add	r5, pc, #620	; (adr r5, 800a170 <atan+0x2a8>)
 8009f02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009f06:	ec45 4b10 	vmov	d0, r4, r5
 8009f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0e:	4bb6      	ldr	r3, [pc, #728]	; (800a1e8 <atan+0x320>)
 8009f10:	429e      	cmp	r6, r3
 8009f12:	dc14      	bgt.n	8009f3e <atan+0x76>
 8009f14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009f18:	429e      	cmp	r6, r3
 8009f1a:	dc0d      	bgt.n	8009f38 <atan+0x70>
 8009f1c:	a396      	add	r3, pc, #600	; (adr r3, 800a178 <atan+0x2b0>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	ee10 0a10 	vmov	r0, s0
 8009f26:	4629      	mov	r1, r5
 8009f28:	f7f6 f9b8 	bl	800029c <__adddf3>
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	4baf      	ldr	r3, [pc, #700]	; (800a1ec <atan+0x324>)
 8009f30:	f7f6 fdfa 	bl	8000b28 <__aeabi_dcmpgt>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d1e6      	bne.n	8009f06 <atan+0x3e>
 8009f38:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009f3c:	e02b      	b.n	8009f96 <atan+0xce>
 8009f3e:	f000 f9a7 	bl	800a290 <fabs>
 8009f42:	4bab      	ldr	r3, [pc, #684]	; (800a1f0 <atan+0x328>)
 8009f44:	429e      	cmp	r6, r3
 8009f46:	ec55 4b10 	vmov	r4, r5, d0
 8009f4a:	f300 80bf 	bgt.w	800a0cc <atan+0x204>
 8009f4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009f52:	429e      	cmp	r6, r3
 8009f54:	f300 80a0 	bgt.w	800a098 <atan+0x1d0>
 8009f58:	ee10 2a10 	vmov	r2, s0
 8009f5c:	ee10 0a10 	vmov	r0, s0
 8009f60:	462b      	mov	r3, r5
 8009f62:	4629      	mov	r1, r5
 8009f64:	f7f6 f99a 	bl	800029c <__adddf3>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	4ba0      	ldr	r3, [pc, #640]	; (800a1ec <atan+0x324>)
 8009f6c:	f7f6 f994 	bl	8000298 <__aeabi_dsub>
 8009f70:	2200      	movs	r2, #0
 8009f72:	4606      	mov	r6, r0
 8009f74:	460f      	mov	r7, r1
 8009f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	f7f6 f98d 	bl	800029c <__adddf3>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4630      	mov	r0, r6
 8009f88:	4639      	mov	r1, r7
 8009f8a:	f7f6 fc67 	bl	800085c <__aeabi_ddiv>
 8009f8e:	f04f 0a00 	mov.w	sl, #0
 8009f92:	4604      	mov	r4, r0
 8009f94:	460d      	mov	r5, r1
 8009f96:	4622      	mov	r2, r4
 8009f98:	462b      	mov	r3, r5
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7f6 fb33 	bl	8000608 <__aeabi_dmul>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4689      	mov	r9, r1
 8009faa:	f7f6 fb2d 	bl	8000608 <__aeabi_dmul>
 8009fae:	a374      	add	r3, pc, #464	; (adr r3, 800a180 <atan+0x2b8>)
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	460f      	mov	r7, r1
 8009fb8:	f7f6 fb26 	bl	8000608 <__aeabi_dmul>
 8009fbc:	a372      	add	r3, pc, #456	; (adr r3, 800a188 <atan+0x2c0>)
 8009fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc2:	f7f6 f96b 	bl	800029c <__adddf3>
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	463b      	mov	r3, r7
 8009fca:	f7f6 fb1d 	bl	8000608 <__aeabi_dmul>
 8009fce:	a370      	add	r3, pc, #448	; (adr r3, 800a190 <atan+0x2c8>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 f962 	bl	800029c <__adddf3>
 8009fd8:	4632      	mov	r2, r6
 8009fda:	463b      	mov	r3, r7
 8009fdc:	f7f6 fb14 	bl	8000608 <__aeabi_dmul>
 8009fe0:	a36d      	add	r3, pc, #436	; (adr r3, 800a198 <atan+0x2d0>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f7f6 f959 	bl	800029c <__adddf3>
 8009fea:	4632      	mov	r2, r6
 8009fec:	463b      	mov	r3, r7
 8009fee:	f7f6 fb0b 	bl	8000608 <__aeabi_dmul>
 8009ff2:	a36b      	add	r3, pc, #428	; (adr r3, 800a1a0 <atan+0x2d8>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	f7f6 f950 	bl	800029c <__adddf3>
 8009ffc:	4632      	mov	r2, r6
 8009ffe:	463b      	mov	r3, r7
 800a000:	f7f6 fb02 	bl	8000608 <__aeabi_dmul>
 800a004:	a368      	add	r3, pc, #416	; (adr r3, 800a1a8 <atan+0x2e0>)
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	f7f6 f947 	bl	800029c <__adddf3>
 800a00e:	4642      	mov	r2, r8
 800a010:	464b      	mov	r3, r9
 800a012:	f7f6 faf9 	bl	8000608 <__aeabi_dmul>
 800a016:	a366      	add	r3, pc, #408	; (adr r3, 800a1b0 <atan+0x2e8>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	4680      	mov	r8, r0
 800a01e:	4689      	mov	r9, r1
 800a020:	4630      	mov	r0, r6
 800a022:	4639      	mov	r1, r7
 800a024:	f7f6 faf0 	bl	8000608 <__aeabi_dmul>
 800a028:	a363      	add	r3, pc, #396	; (adr r3, 800a1b8 <atan+0x2f0>)
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	f7f6 f933 	bl	8000298 <__aeabi_dsub>
 800a032:	4632      	mov	r2, r6
 800a034:	463b      	mov	r3, r7
 800a036:	f7f6 fae7 	bl	8000608 <__aeabi_dmul>
 800a03a:	a361      	add	r3, pc, #388	; (adr r3, 800a1c0 <atan+0x2f8>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	f7f6 f92a 	bl	8000298 <__aeabi_dsub>
 800a044:	4632      	mov	r2, r6
 800a046:	463b      	mov	r3, r7
 800a048:	f7f6 fade 	bl	8000608 <__aeabi_dmul>
 800a04c:	a35e      	add	r3, pc, #376	; (adr r3, 800a1c8 <atan+0x300>)
 800a04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a052:	f7f6 f921 	bl	8000298 <__aeabi_dsub>
 800a056:	4632      	mov	r2, r6
 800a058:	463b      	mov	r3, r7
 800a05a:	f7f6 fad5 	bl	8000608 <__aeabi_dmul>
 800a05e:	a35c      	add	r3, pc, #368	; (adr r3, 800a1d0 <atan+0x308>)
 800a060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a064:	f7f6 f918 	bl	8000298 <__aeabi_dsub>
 800a068:	4632      	mov	r2, r6
 800a06a:	463b      	mov	r3, r7
 800a06c:	f7f6 facc 	bl	8000608 <__aeabi_dmul>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4640      	mov	r0, r8
 800a076:	4649      	mov	r1, r9
 800a078:	f7f6 f910 	bl	800029c <__adddf3>
 800a07c:	4622      	mov	r2, r4
 800a07e:	462b      	mov	r3, r5
 800a080:	f7f6 fac2 	bl	8000608 <__aeabi_dmul>
 800a084:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a088:	4602      	mov	r2, r0
 800a08a:	460b      	mov	r3, r1
 800a08c:	d14b      	bne.n	800a126 <atan+0x25e>
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 f901 	bl	8000298 <__aeabi_dsub>
 800a096:	e72c      	b.n	8009ef2 <atan+0x2a>
 800a098:	ee10 0a10 	vmov	r0, s0
 800a09c:	2200      	movs	r2, #0
 800a09e:	4b53      	ldr	r3, [pc, #332]	; (800a1ec <atan+0x324>)
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7f6 f8f9 	bl	8000298 <__aeabi_dsub>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	460f      	mov	r7, r1
 800a0ac:	4b4f      	ldr	r3, [pc, #316]	; (800a1ec <atan+0x324>)
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	f7f6 f8f3 	bl	800029c <__adddf3>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 fbcd 	bl	800085c <__aeabi_ddiv>
 800a0c2:	f04f 0a01 	mov.w	sl, #1
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	e764      	b.n	8009f96 <atan+0xce>
 800a0cc:	4b49      	ldr	r3, [pc, #292]	; (800a1f4 <atan+0x32c>)
 800a0ce:	429e      	cmp	r6, r3
 800a0d0:	dc1d      	bgt.n	800a10e <atan+0x246>
 800a0d2:	ee10 0a10 	vmov	r0, s0
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	4b47      	ldr	r3, [pc, #284]	; (800a1f8 <atan+0x330>)
 800a0da:	4629      	mov	r1, r5
 800a0dc:	f7f6 f8dc 	bl	8000298 <__aeabi_dsub>
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	4606      	mov	r6, r0
 800a0e4:	460f      	mov	r7, r1
 800a0e6:	4b44      	ldr	r3, [pc, #272]	; (800a1f8 <atan+0x330>)
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	f7f6 fa8c 	bl	8000608 <__aeabi_dmul>
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	4b3e      	ldr	r3, [pc, #248]	; (800a1ec <atan+0x324>)
 800a0f4:	f7f6 f8d2 	bl	800029c <__adddf3>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	4639      	mov	r1, r7
 800a100:	f7f6 fbac 	bl	800085c <__aeabi_ddiv>
 800a104:	f04f 0a02 	mov.w	sl, #2
 800a108:	4604      	mov	r4, r0
 800a10a:	460d      	mov	r5, r1
 800a10c:	e743      	b.n	8009f96 <atan+0xce>
 800a10e:	462b      	mov	r3, r5
 800a110:	ee10 2a10 	vmov	r2, s0
 800a114:	2000      	movs	r0, #0
 800a116:	4939      	ldr	r1, [pc, #228]	; (800a1fc <atan+0x334>)
 800a118:	f7f6 fba0 	bl	800085c <__aeabi_ddiv>
 800a11c:	f04f 0a03 	mov.w	sl, #3
 800a120:	4604      	mov	r4, r0
 800a122:	460d      	mov	r5, r1
 800a124:	e737      	b.n	8009f96 <atan+0xce>
 800a126:	4b36      	ldr	r3, [pc, #216]	; (800a200 <atan+0x338>)
 800a128:	4e36      	ldr	r6, [pc, #216]	; (800a204 <atan+0x33c>)
 800a12a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800a12e:	4456      	add	r6, sl
 800a130:	449a      	add	sl, r3
 800a132:	e9da 2300 	ldrd	r2, r3, [sl]
 800a136:	f7f6 f8af 	bl	8000298 <__aeabi_dsub>
 800a13a:	4622      	mov	r2, r4
 800a13c:	462b      	mov	r3, r5
 800a13e:	f7f6 f8ab 	bl	8000298 <__aeabi_dsub>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a14a:	f7f6 f8a5 	bl	8000298 <__aeabi_dsub>
 800a14e:	f1bb 0f00 	cmp.w	fp, #0
 800a152:	4604      	mov	r4, r0
 800a154:	460d      	mov	r5, r1
 800a156:	f6bf aed6 	bge.w	8009f06 <atan+0x3e>
 800a15a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a15e:	461d      	mov	r5, r3
 800a160:	e6d1      	b.n	8009f06 <atan+0x3e>
 800a162:	a51d      	add	r5, pc, #116	; (adr r5, 800a1d8 <atan+0x310>)
 800a164:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a168:	e6cd      	b.n	8009f06 <atan+0x3e>
 800a16a:	bf00      	nop
 800a16c:	f3af 8000 	nop.w
 800a170:	54442d18 	.word	0x54442d18
 800a174:	3ff921fb 	.word	0x3ff921fb
 800a178:	8800759c 	.word	0x8800759c
 800a17c:	7e37e43c 	.word	0x7e37e43c
 800a180:	e322da11 	.word	0xe322da11
 800a184:	3f90ad3a 	.word	0x3f90ad3a
 800a188:	24760deb 	.word	0x24760deb
 800a18c:	3fa97b4b 	.word	0x3fa97b4b
 800a190:	a0d03d51 	.word	0xa0d03d51
 800a194:	3fb10d66 	.word	0x3fb10d66
 800a198:	c54c206e 	.word	0xc54c206e
 800a19c:	3fb745cd 	.word	0x3fb745cd
 800a1a0:	920083ff 	.word	0x920083ff
 800a1a4:	3fc24924 	.word	0x3fc24924
 800a1a8:	5555550d 	.word	0x5555550d
 800a1ac:	3fd55555 	.word	0x3fd55555
 800a1b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a1b4:	bfa2b444 	.word	0xbfa2b444
 800a1b8:	52defd9a 	.word	0x52defd9a
 800a1bc:	3fadde2d 	.word	0x3fadde2d
 800a1c0:	af749a6d 	.word	0xaf749a6d
 800a1c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a1c8:	fe231671 	.word	0xfe231671
 800a1cc:	3fbc71c6 	.word	0x3fbc71c6
 800a1d0:	9998ebc4 	.word	0x9998ebc4
 800a1d4:	3fc99999 	.word	0x3fc99999
 800a1d8:	54442d18 	.word	0x54442d18
 800a1dc:	bff921fb 	.word	0xbff921fb
 800a1e0:	440fffff 	.word	0x440fffff
 800a1e4:	7ff00000 	.word	0x7ff00000
 800a1e8:	3fdbffff 	.word	0x3fdbffff
 800a1ec:	3ff00000 	.word	0x3ff00000
 800a1f0:	3ff2ffff 	.word	0x3ff2ffff
 800a1f4:	40037fff 	.word	0x40037fff
 800a1f8:	3ff80000 	.word	0x3ff80000
 800a1fc:	bff00000 	.word	0xbff00000
 800a200:	0800beb8 	.word	0x0800beb8
 800a204:	0800be98 	.word	0x0800be98

0800a208 <cos>:
 800a208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a20a:	ec51 0b10 	vmov	r0, r1, d0
 800a20e:	4a1e      	ldr	r2, [pc, #120]	; (800a288 <cos+0x80>)
 800a210:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a214:	4293      	cmp	r3, r2
 800a216:	dc06      	bgt.n	800a226 <cos+0x1e>
 800a218:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800a280 <cos+0x78>
 800a21c:	f000 fbbc 	bl	800a998 <__kernel_cos>
 800a220:	ec51 0b10 	vmov	r0, r1, d0
 800a224:	e007      	b.n	800a236 <cos+0x2e>
 800a226:	4a19      	ldr	r2, [pc, #100]	; (800a28c <cos+0x84>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	dd09      	ble.n	800a240 <cos+0x38>
 800a22c:	ee10 2a10 	vmov	r2, s0
 800a230:	460b      	mov	r3, r1
 800a232:	f7f6 f831 	bl	8000298 <__aeabi_dsub>
 800a236:	ec41 0b10 	vmov	d0, r0, r1
 800a23a:	b005      	add	sp, #20
 800a23c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a240:	4668      	mov	r0, sp
 800a242:	f000 f905 	bl	800a450 <__ieee754_rem_pio2>
 800a246:	f000 0003 	and.w	r0, r0, #3
 800a24a:	2801      	cmp	r0, #1
 800a24c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a250:	ed9d 0b00 	vldr	d0, [sp]
 800a254:	d007      	beq.n	800a266 <cos+0x5e>
 800a256:	2802      	cmp	r0, #2
 800a258:	d00e      	beq.n	800a278 <cos+0x70>
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d0de      	beq.n	800a21c <cos+0x14>
 800a25e:	2001      	movs	r0, #1
 800a260:	f000 ffa2 	bl	800b1a8 <__kernel_sin>
 800a264:	e7dc      	b.n	800a220 <cos+0x18>
 800a266:	f000 ff9f 	bl	800b1a8 <__kernel_sin>
 800a26a:	ec53 2b10 	vmov	r2, r3, d0
 800a26e:	ee10 0a10 	vmov	r0, s0
 800a272:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a276:	e7de      	b.n	800a236 <cos+0x2e>
 800a278:	f000 fb8e 	bl	800a998 <__kernel_cos>
 800a27c:	e7f5      	b.n	800a26a <cos+0x62>
 800a27e:	bf00      	nop
	...
 800a288:	3fe921fb 	.word	0x3fe921fb
 800a28c:	7fefffff 	.word	0x7fefffff

0800a290 <fabs>:
 800a290:	ec51 0b10 	vmov	r0, r1, d0
 800a294:	ee10 2a10 	vmov	r2, s0
 800a298:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a29c:	ec43 2b10 	vmov	d0, r2, r3
 800a2a0:	4770      	bx	lr
 800a2a2:	0000      	movs	r0, r0
 800a2a4:	0000      	movs	r0, r0
	...

0800a2a8 <sin>:
 800a2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2aa:	ec51 0b10 	vmov	r0, r1, d0
 800a2ae:	4a20      	ldr	r2, [pc, #128]	; (800a330 <sin+0x88>)
 800a2b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	dc07      	bgt.n	800a2c8 <sin+0x20>
 800a2b8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800a328 <sin+0x80>
 800a2bc:	2000      	movs	r0, #0
 800a2be:	f000 ff73 	bl	800b1a8 <__kernel_sin>
 800a2c2:	ec51 0b10 	vmov	r0, r1, d0
 800a2c6:	e007      	b.n	800a2d8 <sin+0x30>
 800a2c8:	4a1a      	ldr	r2, [pc, #104]	; (800a334 <sin+0x8c>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	dd09      	ble.n	800a2e2 <sin+0x3a>
 800a2ce:	ee10 2a10 	vmov	r2, s0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	f7f5 ffe0 	bl	8000298 <__aeabi_dsub>
 800a2d8:	ec41 0b10 	vmov	d0, r0, r1
 800a2dc:	b005      	add	sp, #20
 800a2de:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2e2:	4668      	mov	r0, sp
 800a2e4:	f000 f8b4 	bl	800a450 <__ieee754_rem_pio2>
 800a2e8:	f000 0003 	and.w	r0, r0, #3
 800a2ec:	2801      	cmp	r0, #1
 800a2ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2f2:	ed9d 0b00 	vldr	d0, [sp]
 800a2f6:	d004      	beq.n	800a302 <sin+0x5a>
 800a2f8:	2802      	cmp	r0, #2
 800a2fa:	d005      	beq.n	800a308 <sin+0x60>
 800a2fc:	b970      	cbnz	r0, 800a31c <sin+0x74>
 800a2fe:	2001      	movs	r0, #1
 800a300:	e7dd      	b.n	800a2be <sin+0x16>
 800a302:	f000 fb49 	bl	800a998 <__kernel_cos>
 800a306:	e7dc      	b.n	800a2c2 <sin+0x1a>
 800a308:	2001      	movs	r0, #1
 800a30a:	f000 ff4d 	bl	800b1a8 <__kernel_sin>
 800a30e:	ec53 2b10 	vmov	r2, r3, d0
 800a312:	ee10 0a10 	vmov	r0, s0
 800a316:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a31a:	e7dd      	b.n	800a2d8 <sin+0x30>
 800a31c:	f000 fb3c 	bl	800a998 <__kernel_cos>
 800a320:	e7f5      	b.n	800a30e <sin+0x66>
 800a322:	bf00      	nop
 800a324:	f3af 8000 	nop.w
	...
 800a330:	3fe921fb 	.word	0x3fe921fb
 800a334:	7fefffff 	.word	0x7fefffff

0800a338 <tan>:
 800a338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a33a:	ec51 0b10 	vmov	r0, r1, d0
 800a33e:	4a14      	ldr	r2, [pc, #80]	; (800a390 <tan+0x58>)
 800a340:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a344:	4293      	cmp	r3, r2
 800a346:	dc05      	bgt.n	800a354 <tan+0x1c>
 800a348:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800a388 <tan+0x50>
 800a34c:	2001      	movs	r0, #1
 800a34e:	f000 ffe7 	bl	800b320 <__kernel_tan>
 800a352:	e009      	b.n	800a368 <tan+0x30>
 800a354:	4a0f      	ldr	r2, [pc, #60]	; (800a394 <tan+0x5c>)
 800a356:	4293      	cmp	r3, r2
 800a358:	dd09      	ble.n	800a36e <tan+0x36>
 800a35a:	ee10 2a10 	vmov	r2, s0
 800a35e:	460b      	mov	r3, r1
 800a360:	f7f5 ff9a 	bl	8000298 <__aeabi_dsub>
 800a364:	ec41 0b10 	vmov	d0, r0, r1
 800a368:	b005      	add	sp, #20
 800a36a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a36e:	4668      	mov	r0, sp
 800a370:	f000 f86e 	bl	800a450 <__ieee754_rem_pio2>
 800a374:	0040      	lsls	r0, r0, #1
 800a376:	f000 0002 	and.w	r0, r0, #2
 800a37a:	f1c0 0001 	rsb	r0, r0, #1
 800a37e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a382:	ed9d 0b00 	vldr	d0, [sp]
 800a386:	e7e2      	b.n	800a34e <tan+0x16>
	...
 800a390:	3fe921fb 	.word	0x3fe921fb
 800a394:	7fefffff 	.word	0x7fefffff

0800a398 <sqrt>:
 800a398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a39c:	ed2d 8b02 	vpush	{d8}
 800a3a0:	b08b      	sub	sp, #44	; 0x2c
 800a3a2:	ec55 4b10 	vmov	r4, r5, d0
 800a3a6:	f000 fa45 	bl	800a834 <__ieee754_sqrt>
 800a3aa:	4b26      	ldr	r3, [pc, #152]	; (800a444 <sqrt+0xac>)
 800a3ac:	eeb0 8a40 	vmov.f32	s16, s0
 800a3b0:	eef0 8a60 	vmov.f32	s17, s1
 800a3b4:	f993 6000 	ldrsb.w	r6, [r3]
 800a3b8:	1c73      	adds	r3, r6, #1
 800a3ba:	d02a      	beq.n	800a412 <sqrt+0x7a>
 800a3bc:	4622      	mov	r2, r4
 800a3be:	462b      	mov	r3, r5
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	f7f6 fbba 	bl	8000b3c <__aeabi_dcmpun>
 800a3c8:	4607      	mov	r7, r0
 800a3ca:	bb10      	cbnz	r0, 800a412 <sqrt+0x7a>
 800a3cc:	f04f 0800 	mov.w	r8, #0
 800a3d0:	f04f 0900 	mov.w	r9, #0
 800a3d4:	4642      	mov	r2, r8
 800a3d6:	464b      	mov	r3, r9
 800a3d8:	4620      	mov	r0, r4
 800a3da:	4629      	mov	r1, r5
 800a3dc:	f7f6 fb86 	bl	8000aec <__aeabi_dcmplt>
 800a3e0:	b1b8      	cbz	r0, 800a412 <sqrt+0x7a>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	4b18      	ldr	r3, [pc, #96]	; (800a448 <sqrt+0xb0>)
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	9708      	str	r7, [sp, #32]
 800a3ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a3f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a3f4:	b9b6      	cbnz	r6, 800a424 <sqrt+0x8c>
 800a3f6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a3fa:	4668      	mov	r0, sp
 800a3fc:	f001 f9e0 	bl	800b7c0 <matherr>
 800a400:	b1d0      	cbz	r0, 800a438 <sqrt+0xa0>
 800a402:	9b08      	ldr	r3, [sp, #32]
 800a404:	b11b      	cbz	r3, 800a40e <sqrt+0x76>
 800a406:	f7fd fceb 	bl	8007de0 <__errno>
 800a40a:	9b08      	ldr	r3, [sp, #32]
 800a40c:	6003      	str	r3, [r0, #0]
 800a40e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a412:	eeb0 0a48 	vmov.f32	s0, s16
 800a416:	eef0 0a68 	vmov.f32	s1, s17
 800a41a:	b00b      	add	sp, #44	; 0x2c
 800a41c:	ecbd 8b02 	vpop	{d8}
 800a420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a424:	4642      	mov	r2, r8
 800a426:	464b      	mov	r3, r9
 800a428:	4640      	mov	r0, r8
 800a42a:	4649      	mov	r1, r9
 800a42c:	f7f6 fa16 	bl	800085c <__aeabi_ddiv>
 800a430:	2e02      	cmp	r6, #2
 800a432:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a436:	d1e0      	bne.n	800a3fa <sqrt+0x62>
 800a438:	f7fd fcd2 	bl	8007de0 <__errno>
 800a43c:	2321      	movs	r3, #33	; 0x21
 800a43e:	6003      	str	r3, [r0, #0]
 800a440:	e7df      	b.n	800a402 <sqrt+0x6a>
 800a442:	bf00      	nop
 800a444:	200001e0 	.word	0x200001e0
 800a448:	0800bed8 	.word	0x0800bed8
 800a44c:	00000000 	.word	0x00000000

0800a450 <__ieee754_rem_pio2>:
 800a450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a454:	ec57 6b10 	vmov	r6, r7, d0
 800a458:	4bc3      	ldr	r3, [pc, #780]	; (800a768 <__ieee754_rem_pio2+0x318>)
 800a45a:	b08d      	sub	sp, #52	; 0x34
 800a45c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a460:	4598      	cmp	r8, r3
 800a462:	4604      	mov	r4, r0
 800a464:	9704      	str	r7, [sp, #16]
 800a466:	dc07      	bgt.n	800a478 <__ieee754_rem_pio2+0x28>
 800a468:	2200      	movs	r2, #0
 800a46a:	2300      	movs	r3, #0
 800a46c:	ed84 0b00 	vstr	d0, [r4]
 800a470:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a474:	2500      	movs	r5, #0
 800a476:	e027      	b.n	800a4c8 <__ieee754_rem_pio2+0x78>
 800a478:	4bbc      	ldr	r3, [pc, #752]	; (800a76c <__ieee754_rem_pio2+0x31c>)
 800a47a:	4598      	cmp	r8, r3
 800a47c:	dc75      	bgt.n	800a56a <__ieee754_rem_pio2+0x11a>
 800a47e:	9b04      	ldr	r3, [sp, #16]
 800a480:	4dbb      	ldr	r5, [pc, #748]	; (800a770 <__ieee754_rem_pio2+0x320>)
 800a482:	2b00      	cmp	r3, #0
 800a484:	ee10 0a10 	vmov	r0, s0
 800a488:	a3a9      	add	r3, pc, #676	; (adr r3, 800a730 <__ieee754_rem_pio2+0x2e0>)
 800a48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48e:	4639      	mov	r1, r7
 800a490:	dd36      	ble.n	800a500 <__ieee754_rem_pio2+0xb0>
 800a492:	f7f5 ff01 	bl	8000298 <__aeabi_dsub>
 800a496:	45a8      	cmp	r8, r5
 800a498:	4606      	mov	r6, r0
 800a49a:	460f      	mov	r7, r1
 800a49c:	d018      	beq.n	800a4d0 <__ieee754_rem_pio2+0x80>
 800a49e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a738 <__ieee754_rem_pio2+0x2e8>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	f7f5 fef8 	bl	8000298 <__aeabi_dsub>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	e9c4 2300 	strd	r2, r3, [r4]
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	4639      	mov	r1, r7
 800a4b4:	f7f5 fef0 	bl	8000298 <__aeabi_dsub>
 800a4b8:	a39f      	add	r3, pc, #636	; (adr r3, 800a738 <__ieee754_rem_pio2+0x2e8>)
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	f7f5 feeb 	bl	8000298 <__aeabi_dsub>
 800a4c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a4c6:	2501      	movs	r5, #1
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	b00d      	add	sp, #52	; 0x34
 800a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d0:	a39b      	add	r3, pc, #620	; (adr r3, 800a740 <__ieee754_rem_pio2+0x2f0>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f5 fedf 	bl	8000298 <__aeabi_dsub>
 800a4da:	a39b      	add	r3, pc, #620	; (adr r3, 800a748 <__ieee754_rem_pio2+0x2f8>)
 800a4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	460f      	mov	r7, r1
 800a4e4:	f7f5 fed8 	bl	8000298 <__aeabi_dsub>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	e9c4 2300 	strd	r2, r3, [r4]
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f5 fed0 	bl	8000298 <__aeabi_dsub>
 800a4f8:	a393      	add	r3, pc, #588	; (adr r3, 800a748 <__ieee754_rem_pio2+0x2f8>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	e7de      	b.n	800a4be <__ieee754_rem_pio2+0x6e>
 800a500:	f7f5 fecc 	bl	800029c <__adddf3>
 800a504:	45a8      	cmp	r8, r5
 800a506:	4606      	mov	r6, r0
 800a508:	460f      	mov	r7, r1
 800a50a:	d016      	beq.n	800a53a <__ieee754_rem_pio2+0xea>
 800a50c:	a38a      	add	r3, pc, #552	; (adr r3, 800a738 <__ieee754_rem_pio2+0x2e8>)
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f7f5 fec3 	bl	800029c <__adddf3>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	e9c4 2300 	strd	r2, r3, [r4]
 800a51e:	4630      	mov	r0, r6
 800a520:	4639      	mov	r1, r7
 800a522:	f7f5 feb9 	bl	8000298 <__aeabi_dsub>
 800a526:	a384      	add	r3, pc, #528	; (adr r3, 800a738 <__ieee754_rem_pio2+0x2e8>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f7f5 feb6 	bl	800029c <__adddf3>
 800a530:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a534:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a538:	e7c6      	b.n	800a4c8 <__ieee754_rem_pio2+0x78>
 800a53a:	a381      	add	r3, pc, #516	; (adr r3, 800a740 <__ieee754_rem_pio2+0x2f0>)
 800a53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a540:	f7f5 feac 	bl	800029c <__adddf3>
 800a544:	a380      	add	r3, pc, #512	; (adr r3, 800a748 <__ieee754_rem_pio2+0x2f8>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	4606      	mov	r6, r0
 800a54c:	460f      	mov	r7, r1
 800a54e:	f7f5 fea5 	bl	800029c <__adddf3>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	e9c4 2300 	strd	r2, r3, [r4]
 800a55a:	4630      	mov	r0, r6
 800a55c:	4639      	mov	r1, r7
 800a55e:	f7f5 fe9b 	bl	8000298 <__aeabi_dsub>
 800a562:	a379      	add	r3, pc, #484	; (adr r3, 800a748 <__ieee754_rem_pio2+0x2f8>)
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	e7e0      	b.n	800a52c <__ieee754_rem_pio2+0xdc>
 800a56a:	4b82      	ldr	r3, [pc, #520]	; (800a774 <__ieee754_rem_pio2+0x324>)
 800a56c:	4598      	cmp	r8, r3
 800a56e:	f300 80d0 	bgt.w	800a712 <__ieee754_rem_pio2+0x2c2>
 800a572:	f7ff fe8d 	bl	800a290 <fabs>
 800a576:	ec57 6b10 	vmov	r6, r7, d0
 800a57a:	ee10 0a10 	vmov	r0, s0
 800a57e:	a374      	add	r3, pc, #464	; (adr r3, 800a750 <__ieee754_rem_pio2+0x300>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	4639      	mov	r1, r7
 800a586:	f7f6 f83f 	bl	8000608 <__aeabi_dmul>
 800a58a:	2200      	movs	r2, #0
 800a58c:	4b7a      	ldr	r3, [pc, #488]	; (800a778 <__ieee754_rem_pio2+0x328>)
 800a58e:	f7f5 fe85 	bl	800029c <__adddf3>
 800a592:	f7f6 fae9 	bl	8000b68 <__aeabi_d2iz>
 800a596:	4605      	mov	r5, r0
 800a598:	f7f5 ffcc 	bl	8000534 <__aeabi_i2d>
 800a59c:	a364      	add	r3, pc, #400	; (adr r3, 800a730 <__ieee754_rem_pio2+0x2e0>)
 800a59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a6:	f7f6 f82f 	bl	8000608 <__aeabi_dmul>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	f7f5 fe71 	bl	8000298 <__aeabi_dsub>
 800a5b6:	a360      	add	r3, pc, #384	; (adr r3, 800a738 <__ieee754_rem_pio2+0x2e8>)
 800a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5bc:	4682      	mov	sl, r0
 800a5be:	468b      	mov	fp, r1
 800a5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c4:	f7f6 f820 	bl	8000608 <__aeabi_dmul>
 800a5c8:	2d1f      	cmp	r5, #31
 800a5ca:	4606      	mov	r6, r0
 800a5cc:	460f      	mov	r7, r1
 800a5ce:	dc0c      	bgt.n	800a5ea <__ieee754_rem_pio2+0x19a>
 800a5d0:	1e6a      	subs	r2, r5, #1
 800a5d2:	4b6a      	ldr	r3, [pc, #424]	; (800a77c <__ieee754_rem_pio2+0x32c>)
 800a5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5d8:	4543      	cmp	r3, r8
 800a5da:	d006      	beq.n	800a5ea <__ieee754_rem_pio2+0x19a>
 800a5dc:	4632      	mov	r2, r6
 800a5de:	463b      	mov	r3, r7
 800a5e0:	4650      	mov	r0, sl
 800a5e2:	4659      	mov	r1, fp
 800a5e4:	f7f5 fe58 	bl	8000298 <__aeabi_dsub>
 800a5e8:	e00e      	b.n	800a608 <__ieee754_rem_pio2+0x1b8>
 800a5ea:	4632      	mov	r2, r6
 800a5ec:	463b      	mov	r3, r7
 800a5ee:	4650      	mov	r0, sl
 800a5f0:	4659      	mov	r1, fp
 800a5f2:	f7f5 fe51 	bl	8000298 <__aeabi_dsub>
 800a5f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a5fa:	9305      	str	r3, [sp, #20]
 800a5fc:	9a05      	ldr	r2, [sp, #20]
 800a5fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	2b10      	cmp	r3, #16
 800a606:	dc02      	bgt.n	800a60e <__ieee754_rem_pio2+0x1be>
 800a608:	e9c4 0100 	strd	r0, r1, [r4]
 800a60c:	e039      	b.n	800a682 <__ieee754_rem_pio2+0x232>
 800a60e:	a34c      	add	r3, pc, #304	; (adr r3, 800a740 <__ieee754_rem_pio2+0x2f0>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a618:	f7f5 fff6 	bl	8000608 <__aeabi_dmul>
 800a61c:	4606      	mov	r6, r0
 800a61e:	460f      	mov	r7, r1
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4650      	mov	r0, sl
 800a626:	4659      	mov	r1, fp
 800a628:	f7f5 fe36 	bl	8000298 <__aeabi_dsub>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4680      	mov	r8, r0
 800a632:	4689      	mov	r9, r1
 800a634:	4650      	mov	r0, sl
 800a636:	4659      	mov	r1, fp
 800a638:	f7f5 fe2e 	bl	8000298 <__aeabi_dsub>
 800a63c:	4632      	mov	r2, r6
 800a63e:	463b      	mov	r3, r7
 800a640:	f7f5 fe2a 	bl	8000298 <__aeabi_dsub>
 800a644:	a340      	add	r3, pc, #256	; (adr r3, 800a748 <__ieee754_rem_pio2+0x2f8>)
 800a646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64a:	4606      	mov	r6, r0
 800a64c:	460f      	mov	r7, r1
 800a64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a652:	f7f5 ffd9 	bl	8000608 <__aeabi_dmul>
 800a656:	4632      	mov	r2, r6
 800a658:	463b      	mov	r3, r7
 800a65a:	f7f5 fe1d 	bl	8000298 <__aeabi_dsub>
 800a65e:	4602      	mov	r2, r0
 800a660:	460b      	mov	r3, r1
 800a662:	4606      	mov	r6, r0
 800a664:	460f      	mov	r7, r1
 800a666:	4640      	mov	r0, r8
 800a668:	4649      	mov	r1, r9
 800a66a:	f7f5 fe15 	bl	8000298 <__aeabi_dsub>
 800a66e:	9a05      	ldr	r2, [sp, #20]
 800a670:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	2b31      	cmp	r3, #49	; 0x31
 800a678:	dc20      	bgt.n	800a6bc <__ieee754_rem_pio2+0x26c>
 800a67a:	e9c4 0100 	strd	r0, r1, [r4]
 800a67e:	46c2      	mov	sl, r8
 800a680:	46cb      	mov	fp, r9
 800a682:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a686:	4650      	mov	r0, sl
 800a688:	4642      	mov	r2, r8
 800a68a:	464b      	mov	r3, r9
 800a68c:	4659      	mov	r1, fp
 800a68e:	f7f5 fe03 	bl	8000298 <__aeabi_dsub>
 800a692:	463b      	mov	r3, r7
 800a694:	4632      	mov	r2, r6
 800a696:	f7f5 fdff 	bl	8000298 <__aeabi_dsub>
 800a69a:	9b04      	ldr	r3, [sp, #16]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a6a2:	f6bf af11 	bge.w	800a4c8 <__ieee754_rem_pio2+0x78>
 800a6a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a6aa:	6063      	str	r3, [r4, #4]
 800a6ac:	f8c4 8000 	str.w	r8, [r4]
 800a6b0:	60a0      	str	r0, [r4, #8]
 800a6b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6b6:	60e3      	str	r3, [r4, #12]
 800a6b8:	426d      	negs	r5, r5
 800a6ba:	e705      	b.n	800a4c8 <__ieee754_rem_pio2+0x78>
 800a6bc:	a326      	add	r3, pc, #152	; (adr r3, 800a758 <__ieee754_rem_pio2+0x308>)
 800a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6c6:	f7f5 ff9f 	bl	8000608 <__aeabi_dmul>
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	460f      	mov	r7, r1
 800a6ce:	4602      	mov	r2, r0
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	f7f5 fddf 	bl	8000298 <__aeabi_dsub>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4682      	mov	sl, r0
 800a6e0:	468b      	mov	fp, r1
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	f7f5 fdd7 	bl	8000298 <__aeabi_dsub>
 800a6ea:	4632      	mov	r2, r6
 800a6ec:	463b      	mov	r3, r7
 800a6ee:	f7f5 fdd3 	bl	8000298 <__aeabi_dsub>
 800a6f2:	a31b      	add	r3, pc, #108	; (adr r3, 800a760 <__ieee754_rem_pio2+0x310>)
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	460f      	mov	r7, r1
 800a6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a700:	f7f5 ff82 	bl	8000608 <__aeabi_dmul>
 800a704:	4632      	mov	r2, r6
 800a706:	463b      	mov	r3, r7
 800a708:	f7f5 fdc6 	bl	8000298 <__aeabi_dsub>
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	e764      	b.n	800a5dc <__ieee754_rem_pio2+0x18c>
 800a712:	4b1b      	ldr	r3, [pc, #108]	; (800a780 <__ieee754_rem_pio2+0x330>)
 800a714:	4598      	cmp	r8, r3
 800a716:	dd35      	ble.n	800a784 <__ieee754_rem_pio2+0x334>
 800a718:	ee10 2a10 	vmov	r2, s0
 800a71c:	463b      	mov	r3, r7
 800a71e:	4630      	mov	r0, r6
 800a720:	4639      	mov	r1, r7
 800a722:	f7f5 fdb9 	bl	8000298 <__aeabi_dsub>
 800a726:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a72a:	e9c4 0100 	strd	r0, r1, [r4]
 800a72e:	e6a1      	b.n	800a474 <__ieee754_rem_pio2+0x24>
 800a730:	54400000 	.word	0x54400000
 800a734:	3ff921fb 	.word	0x3ff921fb
 800a738:	1a626331 	.word	0x1a626331
 800a73c:	3dd0b461 	.word	0x3dd0b461
 800a740:	1a600000 	.word	0x1a600000
 800a744:	3dd0b461 	.word	0x3dd0b461
 800a748:	2e037073 	.word	0x2e037073
 800a74c:	3ba3198a 	.word	0x3ba3198a
 800a750:	6dc9c883 	.word	0x6dc9c883
 800a754:	3fe45f30 	.word	0x3fe45f30
 800a758:	2e000000 	.word	0x2e000000
 800a75c:	3ba3198a 	.word	0x3ba3198a
 800a760:	252049c1 	.word	0x252049c1
 800a764:	397b839a 	.word	0x397b839a
 800a768:	3fe921fb 	.word	0x3fe921fb
 800a76c:	4002d97b 	.word	0x4002d97b
 800a770:	3ff921fb 	.word	0x3ff921fb
 800a774:	413921fb 	.word	0x413921fb
 800a778:	3fe00000 	.word	0x3fe00000
 800a77c:	0800bee0 	.word	0x0800bee0
 800a780:	7fefffff 	.word	0x7fefffff
 800a784:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a788:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a78c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a790:	4630      	mov	r0, r6
 800a792:	460f      	mov	r7, r1
 800a794:	f7f6 f9e8 	bl	8000b68 <__aeabi_d2iz>
 800a798:	f7f5 fecc 	bl	8000534 <__aeabi_i2d>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7a8:	f7f5 fd76 	bl	8000298 <__aeabi_dsub>
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	4b1f      	ldr	r3, [pc, #124]	; (800a82c <__ieee754_rem_pio2+0x3dc>)
 800a7b0:	f7f5 ff2a 	bl	8000608 <__aeabi_dmul>
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	f7f6 f9d6 	bl	8000b68 <__aeabi_d2iz>
 800a7bc:	f7f5 feba 	bl	8000534 <__aeabi_i2d>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	4639      	mov	r1, r7
 800a7c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a7cc:	f7f5 fd64 	bl	8000298 <__aeabi_dsub>
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4b16      	ldr	r3, [pc, #88]	; (800a82c <__ieee754_rem_pio2+0x3dc>)
 800a7d4:	f7f5 ff18 	bl	8000608 <__aeabi_dmul>
 800a7d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a7dc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a7e0:	f04f 0803 	mov.w	r8, #3
 800a7e4:	2600      	movs	r6, #0
 800a7e6:	2700      	movs	r7, #0
 800a7e8:	4632      	mov	r2, r6
 800a7ea:	463b      	mov	r3, r7
 800a7ec:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a7f0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800a7f4:	f7f6 f970 	bl	8000ad8 <__aeabi_dcmpeq>
 800a7f8:	b9b0      	cbnz	r0, 800a828 <__ieee754_rem_pio2+0x3d8>
 800a7fa:	4b0d      	ldr	r3, [pc, #52]	; (800a830 <__ieee754_rem_pio2+0x3e0>)
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	2302      	movs	r3, #2
 800a800:	9300      	str	r3, [sp, #0]
 800a802:	462a      	mov	r2, r5
 800a804:	4643      	mov	r3, r8
 800a806:	4621      	mov	r1, r4
 800a808:	a806      	add	r0, sp, #24
 800a80a:	f000 f98d 	bl	800ab28 <__kernel_rem_pio2>
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	4605      	mov	r5, r0
 800a814:	f6bf ae58 	bge.w	800a4c8 <__ieee754_rem_pio2+0x78>
 800a818:	6863      	ldr	r3, [r4, #4]
 800a81a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a81e:	6063      	str	r3, [r4, #4]
 800a820:	68e3      	ldr	r3, [r4, #12]
 800a822:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a826:	e746      	b.n	800a6b6 <__ieee754_rem_pio2+0x266>
 800a828:	46d0      	mov	r8, sl
 800a82a:	e7dd      	b.n	800a7e8 <__ieee754_rem_pio2+0x398>
 800a82c:	41700000 	.word	0x41700000
 800a830:	0800bf60 	.word	0x0800bf60

0800a834 <__ieee754_sqrt>:
 800a834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a838:	4955      	ldr	r1, [pc, #340]	; (800a990 <__ieee754_sqrt+0x15c>)
 800a83a:	ec55 4b10 	vmov	r4, r5, d0
 800a83e:	43a9      	bics	r1, r5
 800a840:	462b      	mov	r3, r5
 800a842:	462a      	mov	r2, r5
 800a844:	d112      	bne.n	800a86c <__ieee754_sqrt+0x38>
 800a846:	ee10 2a10 	vmov	r2, s0
 800a84a:	ee10 0a10 	vmov	r0, s0
 800a84e:	4629      	mov	r1, r5
 800a850:	f7f5 feda 	bl	8000608 <__aeabi_dmul>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	4620      	mov	r0, r4
 800a85a:	4629      	mov	r1, r5
 800a85c:	f7f5 fd1e 	bl	800029c <__adddf3>
 800a860:	4604      	mov	r4, r0
 800a862:	460d      	mov	r5, r1
 800a864:	ec45 4b10 	vmov	d0, r4, r5
 800a868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a86c:	2d00      	cmp	r5, #0
 800a86e:	ee10 0a10 	vmov	r0, s0
 800a872:	4621      	mov	r1, r4
 800a874:	dc0f      	bgt.n	800a896 <__ieee754_sqrt+0x62>
 800a876:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a87a:	4330      	orrs	r0, r6
 800a87c:	d0f2      	beq.n	800a864 <__ieee754_sqrt+0x30>
 800a87e:	b155      	cbz	r5, 800a896 <__ieee754_sqrt+0x62>
 800a880:	ee10 2a10 	vmov	r2, s0
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f5 fd06 	bl	8000298 <__aeabi_dsub>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	f7f5 ffe4 	bl	800085c <__aeabi_ddiv>
 800a894:	e7e4      	b.n	800a860 <__ieee754_sqrt+0x2c>
 800a896:	151b      	asrs	r3, r3, #20
 800a898:	d073      	beq.n	800a982 <__ieee754_sqrt+0x14e>
 800a89a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a89e:	07dd      	lsls	r5, r3, #31
 800a8a0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a8a4:	bf48      	it	mi
 800a8a6:	0fc8      	lsrmi	r0, r1, #31
 800a8a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a8ac:	bf44      	itt	mi
 800a8ae:	0049      	lslmi	r1, r1, #1
 800a8b0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a8b4:	2500      	movs	r5, #0
 800a8b6:	1058      	asrs	r0, r3, #1
 800a8b8:	0fcb      	lsrs	r3, r1, #31
 800a8ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a8be:	0049      	lsls	r1, r1, #1
 800a8c0:	2316      	movs	r3, #22
 800a8c2:	462c      	mov	r4, r5
 800a8c4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a8c8:	19a7      	adds	r7, r4, r6
 800a8ca:	4297      	cmp	r7, r2
 800a8cc:	bfde      	ittt	le
 800a8ce:	19bc      	addle	r4, r7, r6
 800a8d0:	1bd2      	suble	r2, r2, r7
 800a8d2:	19ad      	addle	r5, r5, r6
 800a8d4:	0fcf      	lsrs	r7, r1, #31
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a8dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a8e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a8e4:	d1f0      	bne.n	800a8c8 <__ieee754_sqrt+0x94>
 800a8e6:	f04f 0c20 	mov.w	ip, #32
 800a8ea:	469e      	mov	lr, r3
 800a8ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a8f0:	42a2      	cmp	r2, r4
 800a8f2:	eb06 070e 	add.w	r7, r6, lr
 800a8f6:	dc02      	bgt.n	800a8fe <__ieee754_sqrt+0xca>
 800a8f8:	d112      	bne.n	800a920 <__ieee754_sqrt+0xec>
 800a8fa:	428f      	cmp	r7, r1
 800a8fc:	d810      	bhi.n	800a920 <__ieee754_sqrt+0xec>
 800a8fe:	2f00      	cmp	r7, #0
 800a900:	eb07 0e06 	add.w	lr, r7, r6
 800a904:	da42      	bge.n	800a98c <__ieee754_sqrt+0x158>
 800a906:	f1be 0f00 	cmp.w	lr, #0
 800a90a:	db3f      	blt.n	800a98c <__ieee754_sqrt+0x158>
 800a90c:	f104 0801 	add.w	r8, r4, #1
 800a910:	1b12      	subs	r2, r2, r4
 800a912:	428f      	cmp	r7, r1
 800a914:	bf88      	it	hi
 800a916:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a91a:	1bc9      	subs	r1, r1, r7
 800a91c:	4433      	add	r3, r6
 800a91e:	4644      	mov	r4, r8
 800a920:	0052      	lsls	r2, r2, #1
 800a922:	f1bc 0c01 	subs.w	ip, ip, #1
 800a926:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a92a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a92e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a932:	d1dd      	bne.n	800a8f0 <__ieee754_sqrt+0xbc>
 800a934:	430a      	orrs	r2, r1
 800a936:	d006      	beq.n	800a946 <__ieee754_sqrt+0x112>
 800a938:	1c5c      	adds	r4, r3, #1
 800a93a:	bf13      	iteet	ne
 800a93c:	3301      	addne	r3, #1
 800a93e:	3501      	addeq	r5, #1
 800a940:	4663      	moveq	r3, ip
 800a942:	f023 0301 	bicne.w	r3, r3, #1
 800a946:	106a      	asrs	r2, r5, #1
 800a948:	085b      	lsrs	r3, r3, #1
 800a94a:	07e9      	lsls	r1, r5, #31
 800a94c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a950:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a954:	bf48      	it	mi
 800a956:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a95a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a95e:	461c      	mov	r4, r3
 800a960:	e780      	b.n	800a864 <__ieee754_sqrt+0x30>
 800a962:	0aca      	lsrs	r2, r1, #11
 800a964:	3815      	subs	r0, #21
 800a966:	0549      	lsls	r1, r1, #21
 800a968:	2a00      	cmp	r2, #0
 800a96a:	d0fa      	beq.n	800a962 <__ieee754_sqrt+0x12e>
 800a96c:	02d6      	lsls	r6, r2, #11
 800a96e:	d50a      	bpl.n	800a986 <__ieee754_sqrt+0x152>
 800a970:	f1c3 0420 	rsb	r4, r3, #32
 800a974:	fa21 f404 	lsr.w	r4, r1, r4
 800a978:	1e5d      	subs	r5, r3, #1
 800a97a:	4099      	lsls	r1, r3
 800a97c:	4322      	orrs	r2, r4
 800a97e:	1b43      	subs	r3, r0, r5
 800a980:	e78b      	b.n	800a89a <__ieee754_sqrt+0x66>
 800a982:	4618      	mov	r0, r3
 800a984:	e7f0      	b.n	800a968 <__ieee754_sqrt+0x134>
 800a986:	0052      	lsls	r2, r2, #1
 800a988:	3301      	adds	r3, #1
 800a98a:	e7ef      	b.n	800a96c <__ieee754_sqrt+0x138>
 800a98c:	46a0      	mov	r8, r4
 800a98e:	e7bf      	b.n	800a910 <__ieee754_sqrt+0xdc>
 800a990:	7ff00000 	.word	0x7ff00000
 800a994:	00000000 	.word	0x00000000

0800a998 <__kernel_cos>:
 800a998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99c:	ec59 8b10 	vmov	r8, r9, d0
 800a9a0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a9a4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a9a8:	ed2d 8b02 	vpush	{d8}
 800a9ac:	eeb0 8a41 	vmov.f32	s16, s2
 800a9b0:	eef0 8a61 	vmov.f32	s17, s3
 800a9b4:	da07      	bge.n	800a9c6 <__kernel_cos+0x2e>
 800a9b6:	ee10 0a10 	vmov	r0, s0
 800a9ba:	4649      	mov	r1, r9
 800a9bc:	f7f6 f8d4 	bl	8000b68 <__aeabi_d2iz>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	f000 8089 	beq.w	800aad8 <__kernel_cos+0x140>
 800a9c6:	4642      	mov	r2, r8
 800a9c8:	464b      	mov	r3, r9
 800a9ca:	4640      	mov	r0, r8
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	f7f5 fe1b 	bl	8000608 <__aeabi_dmul>
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4b4e      	ldr	r3, [pc, #312]	; (800ab10 <__kernel_cos+0x178>)
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	460d      	mov	r5, r1
 800a9da:	f7f5 fe15 	bl	8000608 <__aeabi_dmul>
 800a9de:	a340      	add	r3, pc, #256	; (adr r3, 800aae0 <__kernel_cos+0x148>)
 800a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e4:	4682      	mov	sl, r0
 800a9e6:	468b      	mov	fp, r1
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	f7f5 fe0c 	bl	8000608 <__aeabi_dmul>
 800a9f0:	a33d      	add	r3, pc, #244	; (adr r3, 800aae8 <__kernel_cos+0x150>)
 800a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f6:	f7f5 fc51 	bl	800029c <__adddf3>
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	f7f5 fe03 	bl	8000608 <__aeabi_dmul>
 800aa02:	a33b      	add	r3, pc, #236	; (adr r3, 800aaf0 <__kernel_cos+0x158>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fc46 	bl	8000298 <__aeabi_dsub>
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	462b      	mov	r3, r5
 800aa10:	f7f5 fdfa 	bl	8000608 <__aeabi_dmul>
 800aa14:	a338      	add	r3, pc, #224	; (adr r3, 800aaf8 <__kernel_cos+0x160>)
 800aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1a:	f7f5 fc3f 	bl	800029c <__adddf3>
 800aa1e:	4622      	mov	r2, r4
 800aa20:	462b      	mov	r3, r5
 800aa22:	f7f5 fdf1 	bl	8000608 <__aeabi_dmul>
 800aa26:	a336      	add	r3, pc, #216	; (adr r3, 800ab00 <__kernel_cos+0x168>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	f7f5 fc34 	bl	8000298 <__aeabi_dsub>
 800aa30:	4622      	mov	r2, r4
 800aa32:	462b      	mov	r3, r5
 800aa34:	f7f5 fde8 	bl	8000608 <__aeabi_dmul>
 800aa38:	a333      	add	r3, pc, #204	; (adr r3, 800ab08 <__kernel_cos+0x170>)
 800aa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3e:	f7f5 fc2d 	bl	800029c <__adddf3>
 800aa42:	4622      	mov	r2, r4
 800aa44:	462b      	mov	r3, r5
 800aa46:	f7f5 fddf 	bl	8000608 <__aeabi_dmul>
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	462b      	mov	r3, r5
 800aa4e:	f7f5 fddb 	bl	8000608 <__aeabi_dmul>
 800aa52:	ec53 2b18 	vmov	r2, r3, d8
 800aa56:	4604      	mov	r4, r0
 800aa58:	460d      	mov	r5, r1
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	f7f5 fdd3 	bl	8000608 <__aeabi_dmul>
 800aa62:	460b      	mov	r3, r1
 800aa64:	4602      	mov	r2, r0
 800aa66:	4629      	mov	r1, r5
 800aa68:	4620      	mov	r0, r4
 800aa6a:	f7f5 fc15 	bl	8000298 <__aeabi_dsub>
 800aa6e:	4b29      	ldr	r3, [pc, #164]	; (800ab14 <__kernel_cos+0x17c>)
 800aa70:	429e      	cmp	r6, r3
 800aa72:	4680      	mov	r8, r0
 800aa74:	4689      	mov	r9, r1
 800aa76:	dc11      	bgt.n	800aa9c <__kernel_cos+0x104>
 800aa78:	4602      	mov	r2, r0
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	4650      	mov	r0, sl
 800aa7e:	4659      	mov	r1, fp
 800aa80:	f7f5 fc0a 	bl	8000298 <__aeabi_dsub>
 800aa84:	460b      	mov	r3, r1
 800aa86:	4924      	ldr	r1, [pc, #144]	; (800ab18 <__kernel_cos+0x180>)
 800aa88:	4602      	mov	r2, r0
 800aa8a:	2000      	movs	r0, #0
 800aa8c:	f7f5 fc04 	bl	8000298 <__aeabi_dsub>
 800aa90:	ecbd 8b02 	vpop	{d8}
 800aa94:	ec41 0b10 	vmov	d0, r0, r1
 800aa98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa9c:	4b1f      	ldr	r3, [pc, #124]	; (800ab1c <__kernel_cos+0x184>)
 800aa9e:	491e      	ldr	r1, [pc, #120]	; (800ab18 <__kernel_cos+0x180>)
 800aaa0:	429e      	cmp	r6, r3
 800aaa2:	bfcc      	ite	gt
 800aaa4:	4d1e      	ldrgt	r5, [pc, #120]	; (800ab20 <__kernel_cos+0x188>)
 800aaa6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800aaaa:	2400      	movs	r4, #0
 800aaac:	4622      	mov	r2, r4
 800aaae:	462b      	mov	r3, r5
 800aab0:	2000      	movs	r0, #0
 800aab2:	f7f5 fbf1 	bl	8000298 <__aeabi_dsub>
 800aab6:	4622      	mov	r2, r4
 800aab8:	4606      	mov	r6, r0
 800aaba:	460f      	mov	r7, r1
 800aabc:	462b      	mov	r3, r5
 800aabe:	4650      	mov	r0, sl
 800aac0:	4659      	mov	r1, fp
 800aac2:	f7f5 fbe9 	bl	8000298 <__aeabi_dsub>
 800aac6:	4642      	mov	r2, r8
 800aac8:	464b      	mov	r3, r9
 800aaca:	f7f5 fbe5 	bl	8000298 <__aeabi_dsub>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4630      	mov	r0, r6
 800aad4:	4639      	mov	r1, r7
 800aad6:	e7d9      	b.n	800aa8c <__kernel_cos+0xf4>
 800aad8:	2000      	movs	r0, #0
 800aada:	490f      	ldr	r1, [pc, #60]	; (800ab18 <__kernel_cos+0x180>)
 800aadc:	e7d8      	b.n	800aa90 <__kernel_cos+0xf8>
 800aade:	bf00      	nop
 800aae0:	be8838d4 	.word	0xbe8838d4
 800aae4:	bda8fae9 	.word	0xbda8fae9
 800aae8:	bdb4b1c4 	.word	0xbdb4b1c4
 800aaec:	3e21ee9e 	.word	0x3e21ee9e
 800aaf0:	809c52ad 	.word	0x809c52ad
 800aaf4:	3e927e4f 	.word	0x3e927e4f
 800aaf8:	19cb1590 	.word	0x19cb1590
 800aafc:	3efa01a0 	.word	0x3efa01a0
 800ab00:	16c15177 	.word	0x16c15177
 800ab04:	3f56c16c 	.word	0x3f56c16c
 800ab08:	5555554c 	.word	0x5555554c
 800ab0c:	3fa55555 	.word	0x3fa55555
 800ab10:	3fe00000 	.word	0x3fe00000
 800ab14:	3fd33332 	.word	0x3fd33332
 800ab18:	3ff00000 	.word	0x3ff00000
 800ab1c:	3fe90000 	.word	0x3fe90000
 800ab20:	3fd20000 	.word	0x3fd20000
 800ab24:	00000000 	.word	0x00000000

0800ab28 <__kernel_rem_pio2>:
 800ab28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab2c:	ed2d 8b02 	vpush	{d8}
 800ab30:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ab34:	1ed4      	subs	r4, r2, #3
 800ab36:	9308      	str	r3, [sp, #32]
 800ab38:	9101      	str	r1, [sp, #4]
 800ab3a:	4bc5      	ldr	r3, [pc, #788]	; (800ae50 <__kernel_rem_pio2+0x328>)
 800ab3c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ab3e:	9009      	str	r0, [sp, #36]	; 0x24
 800ab40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab44:	9304      	str	r3, [sp, #16]
 800ab46:	9b08      	ldr	r3, [sp, #32]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	9307      	str	r3, [sp, #28]
 800ab4c:	2318      	movs	r3, #24
 800ab4e:	fb94 f4f3 	sdiv	r4, r4, r3
 800ab52:	f06f 0317 	mvn.w	r3, #23
 800ab56:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ab5a:	fb04 3303 	mla	r3, r4, r3, r3
 800ab5e:	eb03 0a02 	add.w	sl, r3, r2
 800ab62:	9b04      	ldr	r3, [sp, #16]
 800ab64:	9a07      	ldr	r2, [sp, #28]
 800ab66:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ae40 <__kernel_rem_pio2+0x318>
 800ab6a:	eb03 0802 	add.w	r8, r3, r2
 800ab6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ab70:	1aa7      	subs	r7, r4, r2
 800ab72:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ab76:	ae22      	add	r6, sp, #136	; 0x88
 800ab78:	2500      	movs	r5, #0
 800ab7a:	4545      	cmp	r5, r8
 800ab7c:	dd13      	ble.n	800aba6 <__kernel_rem_pio2+0x7e>
 800ab7e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800ae40 <__kernel_rem_pio2+0x318>
 800ab82:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ab86:	2600      	movs	r6, #0
 800ab88:	9b04      	ldr	r3, [sp, #16]
 800ab8a:	429e      	cmp	r6, r3
 800ab8c:	dc32      	bgt.n	800abf4 <__kernel_rem_pio2+0xcc>
 800ab8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab90:	9302      	str	r3, [sp, #8]
 800ab92:	9b08      	ldr	r3, [sp, #32]
 800ab94:	199d      	adds	r5, r3, r6
 800ab96:	ab22      	add	r3, sp, #136	; 0x88
 800ab98:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ab9c:	9306      	str	r3, [sp, #24]
 800ab9e:	ec59 8b18 	vmov	r8, r9, d8
 800aba2:	2700      	movs	r7, #0
 800aba4:	e01f      	b.n	800abe6 <__kernel_rem_pio2+0xbe>
 800aba6:	42ef      	cmn	r7, r5
 800aba8:	d407      	bmi.n	800abba <__kernel_rem_pio2+0x92>
 800abaa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800abae:	f7f5 fcc1 	bl	8000534 <__aeabi_i2d>
 800abb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800abb6:	3501      	adds	r5, #1
 800abb8:	e7df      	b.n	800ab7a <__kernel_rem_pio2+0x52>
 800abba:	ec51 0b18 	vmov	r0, r1, d8
 800abbe:	e7f8      	b.n	800abb2 <__kernel_rem_pio2+0x8a>
 800abc0:	9906      	ldr	r1, [sp, #24]
 800abc2:	9d02      	ldr	r5, [sp, #8]
 800abc4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800abc8:	9106      	str	r1, [sp, #24]
 800abca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800abce:	9502      	str	r5, [sp, #8]
 800abd0:	f7f5 fd1a 	bl	8000608 <__aeabi_dmul>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4640      	mov	r0, r8
 800abda:	4649      	mov	r1, r9
 800abdc:	f7f5 fb5e 	bl	800029c <__adddf3>
 800abe0:	3701      	adds	r7, #1
 800abe2:	4680      	mov	r8, r0
 800abe4:	4689      	mov	r9, r1
 800abe6:	9b07      	ldr	r3, [sp, #28]
 800abe8:	429f      	cmp	r7, r3
 800abea:	dde9      	ble.n	800abc0 <__kernel_rem_pio2+0x98>
 800abec:	e8eb 8902 	strd	r8, r9, [fp], #8
 800abf0:	3601      	adds	r6, #1
 800abf2:	e7c9      	b.n	800ab88 <__kernel_rem_pio2+0x60>
 800abf4:	9b04      	ldr	r3, [sp, #16]
 800abf6:	aa0e      	add	r2, sp, #56	; 0x38
 800abf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abfc:	930c      	str	r3, [sp, #48]	; 0x30
 800abfe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ac00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac04:	9c04      	ldr	r4, [sp, #16]
 800ac06:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac08:	ab9a      	add	r3, sp, #616	; 0x268
 800ac0a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800ac0e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac12:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ac16:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800ac1a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800ac1e:	ab9a      	add	r3, sp, #616	; 0x268
 800ac20:	445b      	add	r3, fp
 800ac22:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800ac26:	2500      	movs	r5, #0
 800ac28:	1b63      	subs	r3, r4, r5
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	dc78      	bgt.n	800ad20 <__kernel_rem_pio2+0x1f8>
 800ac2e:	4650      	mov	r0, sl
 800ac30:	ec49 8b10 	vmov	d0, r8, r9
 800ac34:	f000 fdc8 	bl	800b7c8 <scalbn>
 800ac38:	ec57 6b10 	vmov	r6, r7, d0
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ac42:	ee10 0a10 	vmov	r0, s0
 800ac46:	4639      	mov	r1, r7
 800ac48:	f7f5 fcde 	bl	8000608 <__aeabi_dmul>
 800ac4c:	ec41 0b10 	vmov	d0, r0, r1
 800ac50:	f000 fd32 	bl	800b6b8 <floor>
 800ac54:	2200      	movs	r2, #0
 800ac56:	ec51 0b10 	vmov	r0, r1, d0
 800ac5a:	4b7e      	ldr	r3, [pc, #504]	; (800ae54 <__kernel_rem_pio2+0x32c>)
 800ac5c:	f7f5 fcd4 	bl	8000608 <__aeabi_dmul>
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	4630      	mov	r0, r6
 800ac66:	4639      	mov	r1, r7
 800ac68:	f7f5 fb16 	bl	8000298 <__aeabi_dsub>
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	4606      	mov	r6, r0
 800ac70:	f7f5 ff7a 	bl	8000b68 <__aeabi_d2iz>
 800ac74:	9006      	str	r0, [sp, #24]
 800ac76:	f7f5 fc5d 	bl	8000534 <__aeabi_i2d>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4630      	mov	r0, r6
 800ac80:	4639      	mov	r1, r7
 800ac82:	f7f5 fb09 	bl	8000298 <__aeabi_dsub>
 800ac86:	f1ba 0f00 	cmp.w	sl, #0
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	dd6c      	ble.n	800ad6a <__kernel_rem_pio2+0x242>
 800ac90:	1e62      	subs	r2, r4, #1
 800ac92:	ab0e      	add	r3, sp, #56	; 0x38
 800ac94:	f1ca 0118 	rsb	r1, sl, #24
 800ac98:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ac9c:	9d06      	ldr	r5, [sp, #24]
 800ac9e:	fa40 f301 	asr.w	r3, r0, r1
 800aca2:	441d      	add	r5, r3
 800aca4:	408b      	lsls	r3, r1
 800aca6:	1ac0      	subs	r0, r0, r3
 800aca8:	ab0e      	add	r3, sp, #56	; 0x38
 800acaa:	9506      	str	r5, [sp, #24]
 800acac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800acb0:	f1ca 0317 	rsb	r3, sl, #23
 800acb4:	fa40 f303 	asr.w	r3, r0, r3
 800acb8:	9302      	str	r3, [sp, #8]
 800acba:	9b02      	ldr	r3, [sp, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	dd62      	ble.n	800ad86 <__kernel_rem_pio2+0x25e>
 800acc0:	9b06      	ldr	r3, [sp, #24]
 800acc2:	2200      	movs	r2, #0
 800acc4:	3301      	adds	r3, #1
 800acc6:	9306      	str	r3, [sp, #24]
 800acc8:	4615      	mov	r5, r2
 800acca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800acce:	4294      	cmp	r4, r2
 800acd0:	f300 8095 	bgt.w	800adfe <__kernel_rem_pio2+0x2d6>
 800acd4:	f1ba 0f00 	cmp.w	sl, #0
 800acd8:	dd07      	ble.n	800acea <__kernel_rem_pio2+0x1c2>
 800acda:	f1ba 0f01 	cmp.w	sl, #1
 800acde:	f000 80a2 	beq.w	800ae26 <__kernel_rem_pio2+0x2fe>
 800ace2:	f1ba 0f02 	cmp.w	sl, #2
 800ace6:	f000 80c1 	beq.w	800ae6c <__kernel_rem_pio2+0x344>
 800acea:	9b02      	ldr	r3, [sp, #8]
 800acec:	2b02      	cmp	r3, #2
 800acee:	d14a      	bne.n	800ad86 <__kernel_rem_pio2+0x25e>
 800acf0:	4632      	mov	r2, r6
 800acf2:	463b      	mov	r3, r7
 800acf4:	2000      	movs	r0, #0
 800acf6:	4958      	ldr	r1, [pc, #352]	; (800ae58 <__kernel_rem_pio2+0x330>)
 800acf8:	f7f5 face 	bl	8000298 <__aeabi_dsub>
 800acfc:	4606      	mov	r6, r0
 800acfe:	460f      	mov	r7, r1
 800ad00:	2d00      	cmp	r5, #0
 800ad02:	d040      	beq.n	800ad86 <__kernel_rem_pio2+0x25e>
 800ad04:	4650      	mov	r0, sl
 800ad06:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ae48 <__kernel_rem_pio2+0x320>
 800ad0a:	f000 fd5d 	bl	800b7c8 <scalbn>
 800ad0e:	4630      	mov	r0, r6
 800ad10:	4639      	mov	r1, r7
 800ad12:	ec53 2b10 	vmov	r2, r3, d0
 800ad16:	f7f5 fabf 	bl	8000298 <__aeabi_dsub>
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	460f      	mov	r7, r1
 800ad1e:	e032      	b.n	800ad86 <__kernel_rem_pio2+0x25e>
 800ad20:	2200      	movs	r2, #0
 800ad22:	4b4e      	ldr	r3, [pc, #312]	; (800ae5c <__kernel_rem_pio2+0x334>)
 800ad24:	4640      	mov	r0, r8
 800ad26:	4649      	mov	r1, r9
 800ad28:	f7f5 fc6e 	bl	8000608 <__aeabi_dmul>
 800ad2c:	f7f5 ff1c 	bl	8000b68 <__aeabi_d2iz>
 800ad30:	f7f5 fc00 	bl	8000534 <__aeabi_i2d>
 800ad34:	2200      	movs	r2, #0
 800ad36:	4b4a      	ldr	r3, [pc, #296]	; (800ae60 <__kernel_rem_pio2+0x338>)
 800ad38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad3c:	f7f5 fc64 	bl	8000608 <__aeabi_dmul>
 800ad40:	4602      	mov	r2, r0
 800ad42:	460b      	mov	r3, r1
 800ad44:	4640      	mov	r0, r8
 800ad46:	4649      	mov	r1, r9
 800ad48:	f7f5 faa6 	bl	8000298 <__aeabi_dsub>
 800ad4c:	f7f5 ff0c 	bl	8000b68 <__aeabi_d2iz>
 800ad50:	ab0e      	add	r3, sp, #56	; 0x38
 800ad52:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800ad56:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ad5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad5e:	f7f5 fa9d 	bl	800029c <__adddf3>
 800ad62:	3501      	adds	r5, #1
 800ad64:	4680      	mov	r8, r0
 800ad66:	4689      	mov	r9, r1
 800ad68:	e75e      	b.n	800ac28 <__kernel_rem_pio2+0x100>
 800ad6a:	d105      	bne.n	800ad78 <__kernel_rem_pio2+0x250>
 800ad6c:	1e63      	subs	r3, r4, #1
 800ad6e:	aa0e      	add	r2, sp, #56	; 0x38
 800ad70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ad74:	15c3      	asrs	r3, r0, #23
 800ad76:	e79f      	b.n	800acb8 <__kernel_rem_pio2+0x190>
 800ad78:	2200      	movs	r2, #0
 800ad7a:	4b3a      	ldr	r3, [pc, #232]	; (800ae64 <__kernel_rem_pio2+0x33c>)
 800ad7c:	f7f5 feca 	bl	8000b14 <__aeabi_dcmpge>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d139      	bne.n	800adf8 <__kernel_rem_pio2+0x2d0>
 800ad84:	9002      	str	r0, [sp, #8]
 800ad86:	2200      	movs	r2, #0
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fea3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f000 80c7 	beq.w	800af26 <__kernel_rem_pio2+0x3fe>
 800ad98:	1e65      	subs	r5, r4, #1
 800ad9a:	462b      	mov	r3, r5
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	9904      	ldr	r1, [sp, #16]
 800ada0:	428b      	cmp	r3, r1
 800ada2:	da6a      	bge.n	800ae7a <__kernel_rem_pio2+0x352>
 800ada4:	2a00      	cmp	r2, #0
 800ada6:	f000 8088 	beq.w	800aeba <__kernel_rem_pio2+0x392>
 800adaa:	ab0e      	add	r3, sp, #56	; 0x38
 800adac:	f1aa 0a18 	sub.w	sl, sl, #24
 800adb0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 80b4 	beq.w	800af22 <__kernel_rem_pio2+0x3fa>
 800adba:	4650      	mov	r0, sl
 800adbc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800ae48 <__kernel_rem_pio2+0x320>
 800adc0:	f000 fd02 	bl	800b7c8 <scalbn>
 800adc4:	00ec      	lsls	r4, r5, #3
 800adc6:	ab72      	add	r3, sp, #456	; 0x1c8
 800adc8:	191e      	adds	r6, r3, r4
 800adca:	ec59 8b10 	vmov	r8, r9, d0
 800adce:	f106 0a08 	add.w	sl, r6, #8
 800add2:	462f      	mov	r7, r5
 800add4:	2f00      	cmp	r7, #0
 800add6:	f280 80df 	bge.w	800af98 <__kernel_rem_pio2+0x470>
 800adda:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800ae40 <__kernel_rem_pio2+0x318>
 800adde:	f04f 0a00 	mov.w	sl, #0
 800ade2:	eba5 030a 	sub.w	r3, r5, sl
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f2c0 810a 	blt.w	800b000 <__kernel_rem_pio2+0x4d8>
 800adec:	f8df b078 	ldr.w	fp, [pc, #120]	; 800ae68 <__kernel_rem_pio2+0x340>
 800adf0:	ec59 8b18 	vmov	r8, r9, d8
 800adf4:	2700      	movs	r7, #0
 800adf6:	e0f5      	b.n	800afe4 <__kernel_rem_pio2+0x4bc>
 800adf8:	2302      	movs	r3, #2
 800adfa:	9302      	str	r3, [sp, #8]
 800adfc:	e760      	b.n	800acc0 <__kernel_rem_pio2+0x198>
 800adfe:	ab0e      	add	r3, sp, #56	; 0x38
 800ae00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae04:	b94d      	cbnz	r5, 800ae1a <__kernel_rem_pio2+0x2f2>
 800ae06:	b12b      	cbz	r3, 800ae14 <__kernel_rem_pio2+0x2ec>
 800ae08:	a80e      	add	r0, sp, #56	; 0x38
 800ae0a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ae0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ae12:	2301      	movs	r3, #1
 800ae14:	3201      	adds	r2, #1
 800ae16:	461d      	mov	r5, r3
 800ae18:	e759      	b.n	800acce <__kernel_rem_pio2+0x1a6>
 800ae1a:	a80e      	add	r0, sp, #56	; 0x38
 800ae1c:	1acb      	subs	r3, r1, r3
 800ae1e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ae22:	462b      	mov	r3, r5
 800ae24:	e7f6      	b.n	800ae14 <__kernel_rem_pio2+0x2ec>
 800ae26:	1e62      	subs	r2, r4, #1
 800ae28:	ab0e      	add	r3, sp, #56	; 0x38
 800ae2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ae32:	a90e      	add	r1, sp, #56	; 0x38
 800ae34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ae38:	e757      	b.n	800acea <__kernel_rem_pio2+0x1c2>
 800ae3a:	bf00      	nop
 800ae3c:	f3af 8000 	nop.w
	...
 800ae4c:	3ff00000 	.word	0x3ff00000
 800ae50:	0800c0a8 	.word	0x0800c0a8
 800ae54:	40200000 	.word	0x40200000
 800ae58:	3ff00000 	.word	0x3ff00000
 800ae5c:	3e700000 	.word	0x3e700000
 800ae60:	41700000 	.word	0x41700000
 800ae64:	3fe00000 	.word	0x3fe00000
 800ae68:	0800c068 	.word	0x0800c068
 800ae6c:	1e62      	subs	r2, r4, #1
 800ae6e:	ab0e      	add	r3, sp, #56	; 0x38
 800ae70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae74:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ae78:	e7db      	b.n	800ae32 <__kernel_rem_pio2+0x30a>
 800ae7a:	a90e      	add	r1, sp, #56	; 0x38
 800ae7c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ae80:	3b01      	subs	r3, #1
 800ae82:	430a      	orrs	r2, r1
 800ae84:	e78b      	b.n	800ad9e <__kernel_rem_pio2+0x276>
 800ae86:	3301      	adds	r3, #1
 800ae88:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ae8c:	2900      	cmp	r1, #0
 800ae8e:	d0fa      	beq.n	800ae86 <__kernel_rem_pio2+0x35e>
 800ae90:	9a08      	ldr	r2, [sp, #32]
 800ae92:	4422      	add	r2, r4
 800ae94:	00d2      	lsls	r2, r2, #3
 800ae96:	a922      	add	r1, sp, #136	; 0x88
 800ae98:	18e3      	adds	r3, r4, r3
 800ae9a:	9206      	str	r2, [sp, #24]
 800ae9c:	440a      	add	r2, r1
 800ae9e:	9302      	str	r3, [sp, #8]
 800aea0:	f10b 0108 	add.w	r1, fp, #8
 800aea4:	f102 0308 	add.w	r3, r2, #8
 800aea8:	1c66      	adds	r6, r4, #1
 800aeaa:	910a      	str	r1, [sp, #40]	; 0x28
 800aeac:	2500      	movs	r5, #0
 800aeae:	930d      	str	r3, [sp, #52]	; 0x34
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	42b3      	cmp	r3, r6
 800aeb4:	da04      	bge.n	800aec0 <__kernel_rem_pio2+0x398>
 800aeb6:	461c      	mov	r4, r3
 800aeb8:	e6a6      	b.n	800ac08 <__kernel_rem_pio2+0xe0>
 800aeba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aebc:	2301      	movs	r3, #1
 800aebe:	e7e3      	b.n	800ae88 <__kernel_rem_pio2+0x360>
 800aec0:	9b06      	ldr	r3, [sp, #24]
 800aec2:	18ef      	adds	r7, r5, r3
 800aec4:	ab22      	add	r3, sp, #136	; 0x88
 800aec6:	441f      	add	r7, r3
 800aec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aece:	f7f5 fb31 	bl	8000534 <__aeabi_i2d>
 800aed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aed4:	461c      	mov	r4, r3
 800aed6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aed8:	e9c7 0100 	strd	r0, r1, [r7]
 800aedc:	eb03 0b05 	add.w	fp, r3, r5
 800aee0:	2700      	movs	r7, #0
 800aee2:	f04f 0800 	mov.w	r8, #0
 800aee6:	f04f 0900 	mov.w	r9, #0
 800aeea:	9b07      	ldr	r3, [sp, #28]
 800aeec:	429f      	cmp	r7, r3
 800aeee:	dd08      	ble.n	800af02 <__kernel_rem_pio2+0x3da>
 800aef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef2:	aa72      	add	r2, sp, #456	; 0x1c8
 800aef4:	18eb      	adds	r3, r5, r3
 800aef6:	4413      	add	r3, r2
 800aef8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800aefc:	3601      	adds	r6, #1
 800aefe:	3508      	adds	r5, #8
 800af00:	e7d6      	b.n	800aeb0 <__kernel_rem_pio2+0x388>
 800af02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800af06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800af0a:	f7f5 fb7d 	bl	8000608 <__aeabi_dmul>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	4640      	mov	r0, r8
 800af14:	4649      	mov	r1, r9
 800af16:	f7f5 f9c1 	bl	800029c <__adddf3>
 800af1a:	3701      	adds	r7, #1
 800af1c:	4680      	mov	r8, r0
 800af1e:	4689      	mov	r9, r1
 800af20:	e7e3      	b.n	800aeea <__kernel_rem_pio2+0x3c2>
 800af22:	3d01      	subs	r5, #1
 800af24:	e741      	b.n	800adaa <__kernel_rem_pio2+0x282>
 800af26:	f1ca 0000 	rsb	r0, sl, #0
 800af2a:	ec47 6b10 	vmov	d0, r6, r7
 800af2e:	f000 fc4b 	bl	800b7c8 <scalbn>
 800af32:	ec57 6b10 	vmov	r6, r7, d0
 800af36:	2200      	movs	r2, #0
 800af38:	4b99      	ldr	r3, [pc, #612]	; (800b1a0 <__kernel_rem_pio2+0x678>)
 800af3a:	ee10 0a10 	vmov	r0, s0
 800af3e:	4639      	mov	r1, r7
 800af40:	f7f5 fde8 	bl	8000b14 <__aeabi_dcmpge>
 800af44:	b1f8      	cbz	r0, 800af86 <__kernel_rem_pio2+0x45e>
 800af46:	2200      	movs	r2, #0
 800af48:	4b96      	ldr	r3, [pc, #600]	; (800b1a4 <__kernel_rem_pio2+0x67c>)
 800af4a:	4630      	mov	r0, r6
 800af4c:	4639      	mov	r1, r7
 800af4e:	f7f5 fb5b 	bl	8000608 <__aeabi_dmul>
 800af52:	f7f5 fe09 	bl	8000b68 <__aeabi_d2iz>
 800af56:	4680      	mov	r8, r0
 800af58:	f7f5 faec 	bl	8000534 <__aeabi_i2d>
 800af5c:	2200      	movs	r2, #0
 800af5e:	4b90      	ldr	r3, [pc, #576]	; (800b1a0 <__kernel_rem_pio2+0x678>)
 800af60:	f7f5 fb52 	bl	8000608 <__aeabi_dmul>
 800af64:	460b      	mov	r3, r1
 800af66:	4602      	mov	r2, r0
 800af68:	4639      	mov	r1, r7
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7f5 f994 	bl	8000298 <__aeabi_dsub>
 800af70:	f7f5 fdfa 	bl	8000b68 <__aeabi_d2iz>
 800af74:	1c65      	adds	r5, r4, #1
 800af76:	ab0e      	add	r3, sp, #56	; 0x38
 800af78:	f10a 0a18 	add.w	sl, sl, #24
 800af7c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800af80:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800af84:	e719      	b.n	800adba <__kernel_rem_pio2+0x292>
 800af86:	4630      	mov	r0, r6
 800af88:	4639      	mov	r1, r7
 800af8a:	f7f5 fded 	bl	8000b68 <__aeabi_d2iz>
 800af8e:	ab0e      	add	r3, sp, #56	; 0x38
 800af90:	4625      	mov	r5, r4
 800af92:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800af96:	e710      	b.n	800adba <__kernel_rem_pio2+0x292>
 800af98:	ab0e      	add	r3, sp, #56	; 0x38
 800af9a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800af9e:	f7f5 fac9 	bl	8000534 <__aeabi_i2d>
 800afa2:	4642      	mov	r2, r8
 800afa4:	464b      	mov	r3, r9
 800afa6:	f7f5 fb2f 	bl	8000608 <__aeabi_dmul>
 800afaa:	2200      	movs	r2, #0
 800afac:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800afb0:	4b7c      	ldr	r3, [pc, #496]	; (800b1a4 <__kernel_rem_pio2+0x67c>)
 800afb2:	4640      	mov	r0, r8
 800afb4:	4649      	mov	r1, r9
 800afb6:	f7f5 fb27 	bl	8000608 <__aeabi_dmul>
 800afba:	3f01      	subs	r7, #1
 800afbc:	4680      	mov	r8, r0
 800afbe:	4689      	mov	r9, r1
 800afc0:	e708      	b.n	800add4 <__kernel_rem_pio2+0x2ac>
 800afc2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800afc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afca:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800afce:	f7f5 fb1b 	bl	8000608 <__aeabi_dmul>
 800afd2:	4602      	mov	r2, r0
 800afd4:	460b      	mov	r3, r1
 800afd6:	4640      	mov	r0, r8
 800afd8:	4649      	mov	r1, r9
 800afda:	f7f5 f95f 	bl	800029c <__adddf3>
 800afde:	3701      	adds	r7, #1
 800afe0:	4680      	mov	r8, r0
 800afe2:	4689      	mov	r9, r1
 800afe4:	9b04      	ldr	r3, [sp, #16]
 800afe6:	429f      	cmp	r7, r3
 800afe8:	dc01      	bgt.n	800afee <__kernel_rem_pio2+0x4c6>
 800afea:	45ba      	cmp	sl, r7
 800afec:	dae9      	bge.n	800afc2 <__kernel_rem_pio2+0x49a>
 800afee:	ab4a      	add	r3, sp, #296	; 0x128
 800aff0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800aff4:	e9c3 8900 	strd	r8, r9, [r3]
 800aff8:	f10a 0a01 	add.w	sl, sl, #1
 800affc:	3e08      	subs	r6, #8
 800affe:	e6f0      	b.n	800ade2 <__kernel_rem_pio2+0x2ba>
 800b000:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b002:	2b03      	cmp	r3, #3
 800b004:	d85b      	bhi.n	800b0be <__kernel_rem_pio2+0x596>
 800b006:	e8df f003 	tbb	[pc, r3]
 800b00a:	264a      	.short	0x264a
 800b00c:	0226      	.short	0x0226
 800b00e:	ab9a      	add	r3, sp, #616	; 0x268
 800b010:	441c      	add	r4, r3
 800b012:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b016:	46a2      	mov	sl, r4
 800b018:	46ab      	mov	fp, r5
 800b01a:	f1bb 0f00 	cmp.w	fp, #0
 800b01e:	dc6c      	bgt.n	800b0fa <__kernel_rem_pio2+0x5d2>
 800b020:	46a2      	mov	sl, r4
 800b022:	46ab      	mov	fp, r5
 800b024:	f1bb 0f01 	cmp.w	fp, #1
 800b028:	f300 8086 	bgt.w	800b138 <__kernel_rem_pio2+0x610>
 800b02c:	2000      	movs	r0, #0
 800b02e:	2100      	movs	r1, #0
 800b030:	2d01      	cmp	r5, #1
 800b032:	f300 80a0 	bgt.w	800b176 <__kernel_rem_pio2+0x64e>
 800b036:	9b02      	ldr	r3, [sp, #8]
 800b038:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b03c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b040:	2b00      	cmp	r3, #0
 800b042:	f040 809e 	bne.w	800b182 <__kernel_rem_pio2+0x65a>
 800b046:	9b01      	ldr	r3, [sp, #4]
 800b048:	e9c3 7800 	strd	r7, r8, [r3]
 800b04c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b050:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b054:	e033      	b.n	800b0be <__kernel_rem_pio2+0x596>
 800b056:	3408      	adds	r4, #8
 800b058:	ab4a      	add	r3, sp, #296	; 0x128
 800b05a:	441c      	add	r4, r3
 800b05c:	462e      	mov	r6, r5
 800b05e:	2000      	movs	r0, #0
 800b060:	2100      	movs	r1, #0
 800b062:	2e00      	cmp	r6, #0
 800b064:	da3a      	bge.n	800b0dc <__kernel_rem_pio2+0x5b4>
 800b066:	9b02      	ldr	r3, [sp, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d03d      	beq.n	800b0e8 <__kernel_rem_pio2+0x5c0>
 800b06c:	4602      	mov	r2, r0
 800b06e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b072:	9c01      	ldr	r4, [sp, #4]
 800b074:	e9c4 2300 	strd	r2, r3, [r4]
 800b078:	4602      	mov	r2, r0
 800b07a:	460b      	mov	r3, r1
 800b07c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b080:	f7f5 f90a 	bl	8000298 <__aeabi_dsub>
 800b084:	ae4c      	add	r6, sp, #304	; 0x130
 800b086:	2401      	movs	r4, #1
 800b088:	42a5      	cmp	r5, r4
 800b08a:	da30      	bge.n	800b0ee <__kernel_rem_pio2+0x5c6>
 800b08c:	9b02      	ldr	r3, [sp, #8]
 800b08e:	b113      	cbz	r3, 800b096 <__kernel_rem_pio2+0x56e>
 800b090:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b094:	4619      	mov	r1, r3
 800b096:	9b01      	ldr	r3, [sp, #4]
 800b098:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b09c:	e00f      	b.n	800b0be <__kernel_rem_pio2+0x596>
 800b09e:	ab9a      	add	r3, sp, #616	; 0x268
 800b0a0:	441c      	add	r4, r3
 800b0a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	2100      	movs	r1, #0
 800b0aa:	2d00      	cmp	r5, #0
 800b0ac:	da10      	bge.n	800b0d0 <__kernel_rem_pio2+0x5a8>
 800b0ae:	9b02      	ldr	r3, [sp, #8]
 800b0b0:	b113      	cbz	r3, 800b0b8 <__kernel_rem_pio2+0x590>
 800b0b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	9b01      	ldr	r3, [sp, #4]
 800b0ba:	e9c3 0100 	strd	r0, r1, [r3]
 800b0be:	9b06      	ldr	r3, [sp, #24]
 800b0c0:	f003 0007 	and.w	r0, r3, #7
 800b0c4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b0c8:	ecbd 8b02 	vpop	{d8}
 800b0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b0d4:	f7f5 f8e2 	bl	800029c <__adddf3>
 800b0d8:	3d01      	subs	r5, #1
 800b0da:	e7e6      	b.n	800b0aa <__kernel_rem_pio2+0x582>
 800b0dc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b0e0:	f7f5 f8dc 	bl	800029c <__adddf3>
 800b0e4:	3e01      	subs	r6, #1
 800b0e6:	e7bc      	b.n	800b062 <__kernel_rem_pio2+0x53a>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	e7c1      	b.n	800b072 <__kernel_rem_pio2+0x54a>
 800b0ee:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b0f2:	f7f5 f8d3 	bl	800029c <__adddf3>
 800b0f6:	3401      	adds	r4, #1
 800b0f8:	e7c6      	b.n	800b088 <__kernel_rem_pio2+0x560>
 800b0fa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b0fe:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b102:	4640      	mov	r0, r8
 800b104:	ec53 2b17 	vmov	r2, r3, d7
 800b108:	4649      	mov	r1, r9
 800b10a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b10e:	f7f5 f8c5 	bl	800029c <__adddf3>
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	4606      	mov	r6, r0
 800b118:	460f      	mov	r7, r1
 800b11a:	4640      	mov	r0, r8
 800b11c:	4649      	mov	r1, r9
 800b11e:	f7f5 f8bb 	bl	8000298 <__aeabi_dsub>
 800b122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b126:	f7f5 f8b9 	bl	800029c <__adddf3>
 800b12a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b12e:	e9ca 0100 	strd	r0, r1, [sl]
 800b132:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b136:	e770      	b.n	800b01a <__kernel_rem_pio2+0x4f2>
 800b138:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b13c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b140:	4630      	mov	r0, r6
 800b142:	ec53 2b17 	vmov	r2, r3, d7
 800b146:	4639      	mov	r1, r7
 800b148:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b14c:	f7f5 f8a6 	bl	800029c <__adddf3>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4680      	mov	r8, r0
 800b156:	4689      	mov	r9, r1
 800b158:	4630      	mov	r0, r6
 800b15a:	4639      	mov	r1, r7
 800b15c:	f7f5 f89c 	bl	8000298 <__aeabi_dsub>
 800b160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b164:	f7f5 f89a 	bl	800029c <__adddf3>
 800b168:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b16c:	e9ca 0100 	strd	r0, r1, [sl]
 800b170:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b174:	e756      	b.n	800b024 <__kernel_rem_pio2+0x4fc>
 800b176:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b17a:	f7f5 f88f 	bl	800029c <__adddf3>
 800b17e:	3d01      	subs	r5, #1
 800b180:	e756      	b.n	800b030 <__kernel_rem_pio2+0x508>
 800b182:	9b01      	ldr	r3, [sp, #4]
 800b184:	9a01      	ldr	r2, [sp, #4]
 800b186:	601f      	str	r7, [r3, #0]
 800b188:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b18c:	605c      	str	r4, [r3, #4]
 800b18e:	609d      	str	r5, [r3, #8]
 800b190:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b194:	60d3      	str	r3, [r2, #12]
 800b196:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b19a:	6110      	str	r0, [r2, #16]
 800b19c:	6153      	str	r3, [r2, #20]
 800b19e:	e78e      	b.n	800b0be <__kernel_rem_pio2+0x596>
 800b1a0:	41700000 	.word	0x41700000
 800b1a4:	3e700000 	.word	0x3e700000

0800b1a8 <__kernel_sin>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	ec55 4b10 	vmov	r4, r5, d0
 800b1b0:	b085      	sub	sp, #20
 800b1b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b1b6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b1ba:	ed8d 1b00 	vstr	d1, [sp]
 800b1be:	9002      	str	r0, [sp, #8]
 800b1c0:	da06      	bge.n	800b1d0 <__kernel_sin+0x28>
 800b1c2:	ee10 0a10 	vmov	r0, s0
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 fcce 	bl	8000b68 <__aeabi_d2iz>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d051      	beq.n	800b274 <__kernel_sin+0xcc>
 800b1d0:	4622      	mov	r2, r4
 800b1d2:	462b      	mov	r3, r5
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	f7f5 fa16 	bl	8000608 <__aeabi_dmul>
 800b1dc:	4682      	mov	sl, r0
 800b1de:	468b      	mov	fp, r1
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	4629      	mov	r1, r5
 800b1e8:	f7f5 fa0e 	bl	8000608 <__aeabi_dmul>
 800b1ec:	a341      	add	r3, pc, #260	; (adr r3, 800b2f4 <__kernel_sin+0x14c>)
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	4680      	mov	r8, r0
 800b1f4:	4689      	mov	r9, r1
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	4659      	mov	r1, fp
 800b1fa:	f7f5 fa05 	bl	8000608 <__aeabi_dmul>
 800b1fe:	a33f      	add	r3, pc, #252	; (adr r3, 800b2fc <__kernel_sin+0x154>)
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	f7f5 f848 	bl	8000298 <__aeabi_dsub>
 800b208:	4652      	mov	r2, sl
 800b20a:	465b      	mov	r3, fp
 800b20c:	f7f5 f9fc 	bl	8000608 <__aeabi_dmul>
 800b210:	a33c      	add	r3, pc, #240	; (adr r3, 800b304 <__kernel_sin+0x15c>)
 800b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b216:	f7f5 f841 	bl	800029c <__adddf3>
 800b21a:	4652      	mov	r2, sl
 800b21c:	465b      	mov	r3, fp
 800b21e:	f7f5 f9f3 	bl	8000608 <__aeabi_dmul>
 800b222:	a33a      	add	r3, pc, #232	; (adr r3, 800b30c <__kernel_sin+0x164>)
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f7f5 f836 	bl	8000298 <__aeabi_dsub>
 800b22c:	4652      	mov	r2, sl
 800b22e:	465b      	mov	r3, fp
 800b230:	f7f5 f9ea 	bl	8000608 <__aeabi_dmul>
 800b234:	a337      	add	r3, pc, #220	; (adr r3, 800b314 <__kernel_sin+0x16c>)
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f7f5 f82f 	bl	800029c <__adddf3>
 800b23e:	9b02      	ldr	r3, [sp, #8]
 800b240:	4606      	mov	r6, r0
 800b242:	460f      	mov	r7, r1
 800b244:	b9db      	cbnz	r3, 800b27e <__kernel_sin+0xd6>
 800b246:	4602      	mov	r2, r0
 800b248:	460b      	mov	r3, r1
 800b24a:	4650      	mov	r0, sl
 800b24c:	4659      	mov	r1, fp
 800b24e:	f7f5 f9db 	bl	8000608 <__aeabi_dmul>
 800b252:	a325      	add	r3, pc, #148	; (adr r3, 800b2e8 <__kernel_sin+0x140>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	f7f5 f81e 	bl	8000298 <__aeabi_dsub>
 800b25c:	4642      	mov	r2, r8
 800b25e:	464b      	mov	r3, r9
 800b260:	f7f5 f9d2 	bl	8000608 <__aeabi_dmul>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	4620      	mov	r0, r4
 800b26a:	4629      	mov	r1, r5
 800b26c:	f7f5 f816 	bl	800029c <__adddf3>
 800b270:	4604      	mov	r4, r0
 800b272:	460d      	mov	r5, r1
 800b274:	ec45 4b10 	vmov	d0, r4, r5
 800b278:	b005      	add	sp, #20
 800b27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27e:	2200      	movs	r2, #0
 800b280:	4b1b      	ldr	r3, [pc, #108]	; (800b2f0 <__kernel_sin+0x148>)
 800b282:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b286:	f7f5 f9bf 	bl	8000608 <__aeabi_dmul>
 800b28a:	4632      	mov	r2, r6
 800b28c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b290:	463b      	mov	r3, r7
 800b292:	4640      	mov	r0, r8
 800b294:	4649      	mov	r1, r9
 800b296:	f7f5 f9b7 	bl	8000608 <__aeabi_dmul>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2a2:	f7f4 fff9 	bl	8000298 <__aeabi_dsub>
 800b2a6:	4652      	mov	r2, sl
 800b2a8:	465b      	mov	r3, fp
 800b2aa:	f7f5 f9ad 	bl	8000608 <__aeabi_dmul>
 800b2ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2b2:	f7f4 fff1 	bl	8000298 <__aeabi_dsub>
 800b2b6:	a30c      	add	r3, pc, #48	; (adr r3, 800b2e8 <__kernel_sin+0x140>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	4606      	mov	r6, r0
 800b2be:	460f      	mov	r7, r1
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	f7f5 f9a0 	bl	8000608 <__aeabi_dmul>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	f7f4 ffe4 	bl	800029c <__adddf3>
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4620      	mov	r0, r4
 800b2da:	4629      	mov	r1, r5
 800b2dc:	f7f4 ffdc 	bl	8000298 <__aeabi_dsub>
 800b2e0:	e7c6      	b.n	800b270 <__kernel_sin+0xc8>
 800b2e2:	bf00      	nop
 800b2e4:	f3af 8000 	nop.w
 800b2e8:	55555549 	.word	0x55555549
 800b2ec:	3fc55555 	.word	0x3fc55555
 800b2f0:	3fe00000 	.word	0x3fe00000
 800b2f4:	5acfd57c 	.word	0x5acfd57c
 800b2f8:	3de5d93a 	.word	0x3de5d93a
 800b2fc:	8a2b9ceb 	.word	0x8a2b9ceb
 800b300:	3e5ae5e6 	.word	0x3e5ae5e6
 800b304:	57b1fe7d 	.word	0x57b1fe7d
 800b308:	3ec71de3 	.word	0x3ec71de3
 800b30c:	19c161d5 	.word	0x19c161d5
 800b310:	3f2a01a0 	.word	0x3f2a01a0
 800b314:	1110f8a6 	.word	0x1110f8a6
 800b318:	3f811111 	.word	0x3f811111
 800b31c:	00000000 	.word	0x00000000

0800b320 <__kernel_tan>:
 800b320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b324:	ec5b ab10 	vmov	sl, fp, d0
 800b328:	4bbf      	ldr	r3, [pc, #764]	; (800b628 <__kernel_tan+0x308>)
 800b32a:	b089      	sub	sp, #36	; 0x24
 800b32c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b330:	429f      	cmp	r7, r3
 800b332:	ec59 8b11 	vmov	r8, r9, d1
 800b336:	4606      	mov	r6, r0
 800b338:	f8cd b008 	str.w	fp, [sp, #8]
 800b33c:	dc22      	bgt.n	800b384 <__kernel_tan+0x64>
 800b33e:	ee10 0a10 	vmov	r0, s0
 800b342:	4659      	mov	r1, fp
 800b344:	f7f5 fc10 	bl	8000b68 <__aeabi_d2iz>
 800b348:	2800      	cmp	r0, #0
 800b34a:	d145      	bne.n	800b3d8 <__kernel_tan+0xb8>
 800b34c:	1c73      	adds	r3, r6, #1
 800b34e:	4652      	mov	r2, sl
 800b350:	4313      	orrs	r3, r2
 800b352:	433b      	orrs	r3, r7
 800b354:	d110      	bne.n	800b378 <__kernel_tan+0x58>
 800b356:	ec4b ab10 	vmov	d0, sl, fp
 800b35a:	f7fe ff99 	bl	800a290 <fabs>
 800b35e:	49b3      	ldr	r1, [pc, #716]	; (800b62c <__kernel_tan+0x30c>)
 800b360:	ec53 2b10 	vmov	r2, r3, d0
 800b364:	2000      	movs	r0, #0
 800b366:	f7f5 fa79 	bl	800085c <__aeabi_ddiv>
 800b36a:	4682      	mov	sl, r0
 800b36c:	468b      	mov	fp, r1
 800b36e:	ec4b ab10 	vmov	d0, sl, fp
 800b372:	b009      	add	sp, #36	; 0x24
 800b374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b378:	2e01      	cmp	r6, #1
 800b37a:	d0f8      	beq.n	800b36e <__kernel_tan+0x4e>
 800b37c:	465b      	mov	r3, fp
 800b37e:	2000      	movs	r0, #0
 800b380:	49ab      	ldr	r1, [pc, #684]	; (800b630 <__kernel_tan+0x310>)
 800b382:	e7f0      	b.n	800b366 <__kernel_tan+0x46>
 800b384:	4bab      	ldr	r3, [pc, #684]	; (800b634 <__kernel_tan+0x314>)
 800b386:	429f      	cmp	r7, r3
 800b388:	dd26      	ble.n	800b3d8 <__kernel_tan+0xb8>
 800b38a:	9b02      	ldr	r3, [sp, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	da09      	bge.n	800b3a4 <__kernel_tan+0x84>
 800b390:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b394:	469b      	mov	fp, r3
 800b396:	ee10 aa10 	vmov	sl, s0
 800b39a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b39e:	ee11 8a10 	vmov	r8, s2
 800b3a2:	4699      	mov	r9, r3
 800b3a4:	4652      	mov	r2, sl
 800b3a6:	465b      	mov	r3, fp
 800b3a8:	a181      	add	r1, pc, #516	; (adr r1, 800b5b0 <__kernel_tan+0x290>)
 800b3aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ae:	f7f4 ff73 	bl	8000298 <__aeabi_dsub>
 800b3b2:	4642      	mov	r2, r8
 800b3b4:	464b      	mov	r3, r9
 800b3b6:	4604      	mov	r4, r0
 800b3b8:	460d      	mov	r5, r1
 800b3ba:	a17f      	add	r1, pc, #508	; (adr r1, 800b5b8 <__kernel_tan+0x298>)
 800b3bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3c0:	f7f4 ff6a 	bl	8000298 <__aeabi_dsub>
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	462b      	mov	r3, r5
 800b3c8:	f7f4 ff68 	bl	800029c <__adddf3>
 800b3cc:	f04f 0800 	mov.w	r8, #0
 800b3d0:	4682      	mov	sl, r0
 800b3d2:	468b      	mov	fp, r1
 800b3d4:	f04f 0900 	mov.w	r9, #0
 800b3d8:	4652      	mov	r2, sl
 800b3da:	465b      	mov	r3, fp
 800b3dc:	4650      	mov	r0, sl
 800b3de:	4659      	mov	r1, fp
 800b3e0:	f7f5 f912 	bl	8000608 <__aeabi_dmul>
 800b3e4:	4602      	mov	r2, r0
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	e9cd 0100 	strd	r0, r1, [sp]
 800b3ec:	f7f5 f90c 	bl	8000608 <__aeabi_dmul>
 800b3f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	460d      	mov	r5, r1
 800b3f8:	4650      	mov	r0, sl
 800b3fa:	4659      	mov	r1, fp
 800b3fc:	f7f5 f904 	bl	8000608 <__aeabi_dmul>
 800b400:	a36f      	add	r3, pc, #444	; (adr r3, 800b5c0 <__kernel_tan+0x2a0>)
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b40a:	4620      	mov	r0, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	f7f5 f8fb 	bl	8000608 <__aeabi_dmul>
 800b412:	a36d      	add	r3, pc, #436	; (adr r3, 800b5c8 <__kernel_tan+0x2a8>)
 800b414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b418:	f7f4 ff40 	bl	800029c <__adddf3>
 800b41c:	4622      	mov	r2, r4
 800b41e:	462b      	mov	r3, r5
 800b420:	f7f5 f8f2 	bl	8000608 <__aeabi_dmul>
 800b424:	a36a      	add	r3, pc, #424	; (adr r3, 800b5d0 <__kernel_tan+0x2b0>)
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f7f4 ff37 	bl	800029c <__adddf3>
 800b42e:	4622      	mov	r2, r4
 800b430:	462b      	mov	r3, r5
 800b432:	f7f5 f8e9 	bl	8000608 <__aeabi_dmul>
 800b436:	a368      	add	r3, pc, #416	; (adr r3, 800b5d8 <__kernel_tan+0x2b8>)
 800b438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43c:	f7f4 ff2e 	bl	800029c <__adddf3>
 800b440:	4622      	mov	r2, r4
 800b442:	462b      	mov	r3, r5
 800b444:	f7f5 f8e0 	bl	8000608 <__aeabi_dmul>
 800b448:	a365      	add	r3, pc, #404	; (adr r3, 800b5e0 <__kernel_tan+0x2c0>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	f7f4 ff25 	bl	800029c <__adddf3>
 800b452:	4622      	mov	r2, r4
 800b454:	462b      	mov	r3, r5
 800b456:	f7f5 f8d7 	bl	8000608 <__aeabi_dmul>
 800b45a:	a363      	add	r3, pc, #396	; (adr r3, 800b5e8 <__kernel_tan+0x2c8>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f7f4 ff1c 	bl	800029c <__adddf3>
 800b464:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b468:	f7f5 f8ce 	bl	8000608 <__aeabi_dmul>
 800b46c:	a360      	add	r3, pc, #384	; (adr r3, 800b5f0 <__kernel_tan+0x2d0>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b476:	4620      	mov	r0, r4
 800b478:	4629      	mov	r1, r5
 800b47a:	f7f5 f8c5 	bl	8000608 <__aeabi_dmul>
 800b47e:	a35e      	add	r3, pc, #376	; (adr r3, 800b5f8 <__kernel_tan+0x2d8>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	f7f4 ff0a 	bl	800029c <__adddf3>
 800b488:	4622      	mov	r2, r4
 800b48a:	462b      	mov	r3, r5
 800b48c:	f7f5 f8bc 	bl	8000608 <__aeabi_dmul>
 800b490:	a35b      	add	r3, pc, #364	; (adr r3, 800b600 <__kernel_tan+0x2e0>)
 800b492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b496:	f7f4 ff01 	bl	800029c <__adddf3>
 800b49a:	4622      	mov	r2, r4
 800b49c:	462b      	mov	r3, r5
 800b49e:	f7f5 f8b3 	bl	8000608 <__aeabi_dmul>
 800b4a2:	a359      	add	r3, pc, #356	; (adr r3, 800b608 <__kernel_tan+0x2e8>)
 800b4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a8:	f7f4 fef8 	bl	800029c <__adddf3>
 800b4ac:	4622      	mov	r2, r4
 800b4ae:	462b      	mov	r3, r5
 800b4b0:	f7f5 f8aa 	bl	8000608 <__aeabi_dmul>
 800b4b4:	a356      	add	r3, pc, #344	; (adr r3, 800b610 <__kernel_tan+0x2f0>)
 800b4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ba:	f7f4 feef 	bl	800029c <__adddf3>
 800b4be:	4622      	mov	r2, r4
 800b4c0:	462b      	mov	r3, r5
 800b4c2:	f7f5 f8a1 	bl	8000608 <__aeabi_dmul>
 800b4c6:	a354      	add	r3, pc, #336	; (adr r3, 800b618 <__kernel_tan+0x2f8>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f4 fee6 	bl	800029c <__adddf3>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4d8:	f7f4 fee0 	bl	800029c <__adddf3>
 800b4dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4e0:	f7f5 f892 	bl	8000608 <__aeabi_dmul>
 800b4e4:	4642      	mov	r2, r8
 800b4e6:	464b      	mov	r3, r9
 800b4e8:	f7f4 fed8 	bl	800029c <__adddf3>
 800b4ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4f0:	f7f5 f88a 	bl	8000608 <__aeabi_dmul>
 800b4f4:	4642      	mov	r2, r8
 800b4f6:	464b      	mov	r3, r9
 800b4f8:	f7f4 fed0 	bl	800029c <__adddf3>
 800b4fc:	a348      	add	r3, pc, #288	; (adr r3, 800b620 <__kernel_tan+0x300>)
 800b4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b502:	4604      	mov	r4, r0
 800b504:	460d      	mov	r5, r1
 800b506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b50a:	f7f5 f87d 	bl	8000608 <__aeabi_dmul>
 800b50e:	4622      	mov	r2, r4
 800b510:	462b      	mov	r3, r5
 800b512:	f7f4 fec3 	bl	800029c <__adddf3>
 800b516:	e9cd 0100 	strd	r0, r1, [sp]
 800b51a:	460b      	mov	r3, r1
 800b51c:	4602      	mov	r2, r0
 800b51e:	4659      	mov	r1, fp
 800b520:	4650      	mov	r0, sl
 800b522:	f7f4 febb 	bl	800029c <__adddf3>
 800b526:	4b43      	ldr	r3, [pc, #268]	; (800b634 <__kernel_tan+0x314>)
 800b528:	429f      	cmp	r7, r3
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	f340 8083 	ble.w	800b638 <__kernel_tan+0x318>
 800b532:	4630      	mov	r0, r6
 800b534:	f7f4 fffe 	bl	8000534 <__aeabi_i2d>
 800b538:	4622      	mov	r2, r4
 800b53a:	4680      	mov	r8, r0
 800b53c:	4689      	mov	r9, r1
 800b53e:	462b      	mov	r3, r5
 800b540:	4620      	mov	r0, r4
 800b542:	4629      	mov	r1, r5
 800b544:	f7f5 f860 	bl	8000608 <__aeabi_dmul>
 800b548:	4642      	mov	r2, r8
 800b54a:	4606      	mov	r6, r0
 800b54c:	460f      	mov	r7, r1
 800b54e:	464b      	mov	r3, r9
 800b550:	4620      	mov	r0, r4
 800b552:	4629      	mov	r1, r5
 800b554:	f7f4 fea2 	bl	800029c <__adddf3>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4630      	mov	r0, r6
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f5 f97c 	bl	800085c <__aeabi_ddiv>
 800b564:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b568:	f7f4 fe96 	bl	8000298 <__aeabi_dsub>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4650      	mov	r0, sl
 800b572:	4659      	mov	r1, fp
 800b574:	f7f4 fe90 	bl	8000298 <__aeabi_dsub>
 800b578:	4602      	mov	r2, r0
 800b57a:	460b      	mov	r3, r1
 800b57c:	f7f4 fe8e 	bl	800029c <__adddf3>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4640      	mov	r0, r8
 800b586:	4649      	mov	r1, r9
 800b588:	f7f4 fe86 	bl	8000298 <__aeabi_dsub>
 800b58c:	9b02      	ldr	r3, [sp, #8]
 800b58e:	4604      	mov	r4, r0
 800b590:	1798      	asrs	r0, r3, #30
 800b592:	f000 0002 	and.w	r0, r0, #2
 800b596:	f1c0 0001 	rsb	r0, r0, #1
 800b59a:	460d      	mov	r5, r1
 800b59c:	f7f4 ffca 	bl	8000534 <__aeabi_i2d>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	4620      	mov	r0, r4
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	f7f5 f82e 	bl	8000608 <__aeabi_dmul>
 800b5ac:	e6dd      	b.n	800b36a <__kernel_tan+0x4a>
 800b5ae:	bf00      	nop
 800b5b0:	54442d18 	.word	0x54442d18
 800b5b4:	3fe921fb 	.word	0x3fe921fb
 800b5b8:	33145c07 	.word	0x33145c07
 800b5bc:	3c81a626 	.word	0x3c81a626
 800b5c0:	74bf7ad4 	.word	0x74bf7ad4
 800b5c4:	3efb2a70 	.word	0x3efb2a70
 800b5c8:	32f0a7e9 	.word	0x32f0a7e9
 800b5cc:	3f12b80f 	.word	0x3f12b80f
 800b5d0:	1a8d1068 	.word	0x1a8d1068
 800b5d4:	3f3026f7 	.word	0x3f3026f7
 800b5d8:	fee08315 	.word	0xfee08315
 800b5dc:	3f57dbc8 	.word	0x3f57dbc8
 800b5e0:	e96e8493 	.word	0xe96e8493
 800b5e4:	3f8226e3 	.word	0x3f8226e3
 800b5e8:	1bb341fe 	.word	0x1bb341fe
 800b5ec:	3faba1ba 	.word	0x3faba1ba
 800b5f0:	db605373 	.word	0xdb605373
 800b5f4:	bef375cb 	.word	0xbef375cb
 800b5f8:	a03792a6 	.word	0xa03792a6
 800b5fc:	3f147e88 	.word	0x3f147e88
 800b600:	f2f26501 	.word	0xf2f26501
 800b604:	3f4344d8 	.word	0x3f4344d8
 800b608:	c9560328 	.word	0xc9560328
 800b60c:	3f6d6d22 	.word	0x3f6d6d22
 800b610:	8406d637 	.word	0x8406d637
 800b614:	3f9664f4 	.word	0x3f9664f4
 800b618:	1110fe7a 	.word	0x1110fe7a
 800b61c:	3fc11111 	.word	0x3fc11111
 800b620:	55555563 	.word	0x55555563
 800b624:	3fd55555 	.word	0x3fd55555
 800b628:	3e2fffff 	.word	0x3e2fffff
 800b62c:	3ff00000 	.word	0x3ff00000
 800b630:	bff00000 	.word	0xbff00000
 800b634:	3fe59427 	.word	0x3fe59427
 800b638:	2e01      	cmp	r6, #1
 800b63a:	d036      	beq.n	800b6aa <__kernel_tan+0x38a>
 800b63c:	460f      	mov	r7, r1
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	2000      	movs	r0, #0
 800b644:	491a      	ldr	r1, [pc, #104]	; (800b6b0 <__kernel_tan+0x390>)
 800b646:	f7f5 f909 	bl	800085c <__aeabi_ddiv>
 800b64a:	2600      	movs	r6, #0
 800b64c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b650:	4652      	mov	r2, sl
 800b652:	465b      	mov	r3, fp
 800b654:	4630      	mov	r0, r6
 800b656:	4639      	mov	r1, r7
 800b658:	f7f4 fe1e 	bl	8000298 <__aeabi_dsub>
 800b65c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b668:	f7f4 fe16 	bl	8000298 <__aeabi_dsub>
 800b66c:	4632      	mov	r2, r6
 800b66e:	462b      	mov	r3, r5
 800b670:	f7f4 ffca 	bl	8000608 <__aeabi_dmul>
 800b674:	4632      	mov	r2, r6
 800b676:	4682      	mov	sl, r0
 800b678:	468b      	mov	fp, r1
 800b67a:	462b      	mov	r3, r5
 800b67c:	4630      	mov	r0, r6
 800b67e:	4639      	mov	r1, r7
 800b680:	f7f4 ffc2 	bl	8000608 <__aeabi_dmul>
 800b684:	2200      	movs	r2, #0
 800b686:	4b0b      	ldr	r3, [pc, #44]	; (800b6b4 <__kernel_tan+0x394>)
 800b688:	f7f4 fe08 	bl	800029c <__adddf3>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	4650      	mov	r0, sl
 800b692:	4659      	mov	r1, fp
 800b694:	f7f4 fe02 	bl	800029c <__adddf3>
 800b698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b69c:	f7f4 ffb4 	bl	8000608 <__aeabi_dmul>
 800b6a0:	4632      	mov	r2, r6
 800b6a2:	462b      	mov	r3, r5
 800b6a4:	f7f4 fdfa 	bl	800029c <__adddf3>
 800b6a8:	e65f      	b.n	800b36a <__kernel_tan+0x4a>
 800b6aa:	4682      	mov	sl, r0
 800b6ac:	468b      	mov	fp, r1
 800b6ae:	e65e      	b.n	800b36e <__kernel_tan+0x4e>
 800b6b0:	bff00000 	.word	0xbff00000
 800b6b4:	3ff00000 	.word	0x3ff00000

0800b6b8 <floor>:
 800b6b8:	ec51 0b10 	vmov	r0, r1, d0
 800b6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b6c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b6c8:	2e13      	cmp	r6, #19
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	ee10 5a10 	vmov	r5, s0
 800b6d0:	4680      	mov	r8, r0
 800b6d2:	dc34      	bgt.n	800b73e <floor+0x86>
 800b6d4:	2e00      	cmp	r6, #0
 800b6d6:	da16      	bge.n	800b706 <floor+0x4e>
 800b6d8:	a335      	add	r3, pc, #212	; (adr r3, 800b7b0 <floor+0xf8>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	f7f4 fddd 	bl	800029c <__adddf3>
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	f7f5 fa1f 	bl	8000b28 <__aeabi_dcmpgt>
 800b6ea:	b148      	cbz	r0, 800b700 <floor+0x48>
 800b6ec:	2c00      	cmp	r4, #0
 800b6ee:	da59      	bge.n	800b7a4 <floor+0xec>
 800b6f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b6f4:	4a30      	ldr	r2, [pc, #192]	; (800b7b8 <floor+0x100>)
 800b6f6:	432b      	orrs	r3, r5
 800b6f8:	2500      	movs	r5, #0
 800b6fa:	42ab      	cmp	r3, r5
 800b6fc:	bf18      	it	ne
 800b6fe:	4614      	movne	r4, r2
 800b700:	4621      	mov	r1, r4
 800b702:	4628      	mov	r0, r5
 800b704:	e025      	b.n	800b752 <floor+0x9a>
 800b706:	4f2d      	ldr	r7, [pc, #180]	; (800b7bc <floor+0x104>)
 800b708:	4137      	asrs	r7, r6
 800b70a:	ea01 0307 	and.w	r3, r1, r7
 800b70e:	4303      	orrs	r3, r0
 800b710:	d01f      	beq.n	800b752 <floor+0x9a>
 800b712:	a327      	add	r3, pc, #156	; (adr r3, 800b7b0 <floor+0xf8>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	f7f4 fdc0 	bl	800029c <__adddf3>
 800b71c:	2200      	movs	r2, #0
 800b71e:	2300      	movs	r3, #0
 800b720:	f7f5 fa02 	bl	8000b28 <__aeabi_dcmpgt>
 800b724:	2800      	cmp	r0, #0
 800b726:	d0eb      	beq.n	800b700 <floor+0x48>
 800b728:	2c00      	cmp	r4, #0
 800b72a:	bfbe      	ittt	lt
 800b72c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b730:	fa43 f606 	asrlt.w	r6, r3, r6
 800b734:	19a4      	addlt	r4, r4, r6
 800b736:	ea24 0407 	bic.w	r4, r4, r7
 800b73a:	2500      	movs	r5, #0
 800b73c:	e7e0      	b.n	800b700 <floor+0x48>
 800b73e:	2e33      	cmp	r6, #51	; 0x33
 800b740:	dd0b      	ble.n	800b75a <floor+0xa2>
 800b742:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b746:	d104      	bne.n	800b752 <floor+0x9a>
 800b748:	ee10 2a10 	vmov	r2, s0
 800b74c:	460b      	mov	r3, r1
 800b74e:	f7f4 fda5 	bl	800029c <__adddf3>
 800b752:	ec41 0b10 	vmov	d0, r0, r1
 800b756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b75a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b762:	fa23 f707 	lsr.w	r7, r3, r7
 800b766:	4207      	tst	r7, r0
 800b768:	d0f3      	beq.n	800b752 <floor+0x9a>
 800b76a:	a311      	add	r3, pc, #68	; (adr r3, 800b7b0 <floor+0xf8>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	f7f4 fd94 	bl	800029c <__adddf3>
 800b774:	2200      	movs	r2, #0
 800b776:	2300      	movs	r3, #0
 800b778:	f7f5 f9d6 	bl	8000b28 <__aeabi_dcmpgt>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d0bf      	beq.n	800b700 <floor+0x48>
 800b780:	2c00      	cmp	r4, #0
 800b782:	da02      	bge.n	800b78a <floor+0xd2>
 800b784:	2e14      	cmp	r6, #20
 800b786:	d103      	bne.n	800b790 <floor+0xd8>
 800b788:	3401      	adds	r4, #1
 800b78a:	ea25 0507 	bic.w	r5, r5, r7
 800b78e:	e7b7      	b.n	800b700 <floor+0x48>
 800b790:	2301      	movs	r3, #1
 800b792:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b796:	fa03 f606 	lsl.w	r6, r3, r6
 800b79a:	4435      	add	r5, r6
 800b79c:	4545      	cmp	r5, r8
 800b79e:	bf38      	it	cc
 800b7a0:	18e4      	addcc	r4, r4, r3
 800b7a2:	e7f2      	b.n	800b78a <floor+0xd2>
 800b7a4:	2500      	movs	r5, #0
 800b7a6:	462c      	mov	r4, r5
 800b7a8:	e7aa      	b.n	800b700 <floor+0x48>
 800b7aa:	bf00      	nop
 800b7ac:	f3af 8000 	nop.w
 800b7b0:	8800759c 	.word	0x8800759c
 800b7b4:	7e37e43c 	.word	0x7e37e43c
 800b7b8:	bff00000 	.word	0xbff00000
 800b7bc:	000fffff 	.word	0x000fffff

0800b7c0 <matherr>:
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	4770      	bx	lr
 800b7c4:	0000      	movs	r0, r0
	...

0800b7c8 <scalbn>:
 800b7c8:	b570      	push	{r4, r5, r6, lr}
 800b7ca:	ec55 4b10 	vmov	r4, r5, d0
 800b7ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b7d2:	4606      	mov	r6, r0
 800b7d4:	462b      	mov	r3, r5
 800b7d6:	b9aa      	cbnz	r2, 800b804 <scalbn+0x3c>
 800b7d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7dc:	4323      	orrs	r3, r4
 800b7de:	d03b      	beq.n	800b858 <scalbn+0x90>
 800b7e0:	4b31      	ldr	r3, [pc, #196]	; (800b8a8 <scalbn+0xe0>)
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	ee10 0a10 	vmov	r0, s0
 800b7ea:	f7f4 ff0d 	bl	8000608 <__aeabi_dmul>
 800b7ee:	4b2f      	ldr	r3, [pc, #188]	; (800b8ac <scalbn+0xe4>)
 800b7f0:	429e      	cmp	r6, r3
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	460d      	mov	r5, r1
 800b7f6:	da12      	bge.n	800b81e <scalbn+0x56>
 800b7f8:	a327      	add	r3, pc, #156	; (adr r3, 800b898 <scalbn+0xd0>)
 800b7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fe:	f7f4 ff03 	bl	8000608 <__aeabi_dmul>
 800b802:	e009      	b.n	800b818 <scalbn+0x50>
 800b804:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b808:	428a      	cmp	r2, r1
 800b80a:	d10c      	bne.n	800b826 <scalbn+0x5e>
 800b80c:	ee10 2a10 	vmov	r2, s0
 800b810:	4620      	mov	r0, r4
 800b812:	4629      	mov	r1, r5
 800b814:	f7f4 fd42 	bl	800029c <__adddf3>
 800b818:	4604      	mov	r4, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	e01c      	b.n	800b858 <scalbn+0x90>
 800b81e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b822:	460b      	mov	r3, r1
 800b824:	3a36      	subs	r2, #54	; 0x36
 800b826:	4432      	add	r2, r6
 800b828:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b82c:	428a      	cmp	r2, r1
 800b82e:	dd0b      	ble.n	800b848 <scalbn+0x80>
 800b830:	ec45 4b11 	vmov	d1, r4, r5
 800b834:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b8a0 <scalbn+0xd8>
 800b838:	f000 f83c 	bl	800b8b4 <copysign>
 800b83c:	a318      	add	r3, pc, #96	; (adr r3, 800b8a0 <scalbn+0xd8>)
 800b83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b842:	ec51 0b10 	vmov	r0, r1, d0
 800b846:	e7da      	b.n	800b7fe <scalbn+0x36>
 800b848:	2a00      	cmp	r2, #0
 800b84a:	dd08      	ble.n	800b85e <scalbn+0x96>
 800b84c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b850:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b854:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b858:	ec45 4b10 	vmov	d0, r4, r5
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
 800b85e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b862:	da0d      	bge.n	800b880 <scalbn+0xb8>
 800b864:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b868:	429e      	cmp	r6, r3
 800b86a:	ec45 4b11 	vmov	d1, r4, r5
 800b86e:	dce1      	bgt.n	800b834 <scalbn+0x6c>
 800b870:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b898 <scalbn+0xd0>
 800b874:	f000 f81e 	bl	800b8b4 <copysign>
 800b878:	a307      	add	r3, pc, #28	; (adr r3, 800b898 <scalbn+0xd0>)
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	e7e0      	b.n	800b842 <scalbn+0x7a>
 800b880:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b884:	3236      	adds	r2, #54	; 0x36
 800b886:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b88a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b88e:	4620      	mov	r0, r4
 800b890:	4629      	mov	r1, r5
 800b892:	2200      	movs	r2, #0
 800b894:	4b06      	ldr	r3, [pc, #24]	; (800b8b0 <scalbn+0xe8>)
 800b896:	e7b2      	b.n	800b7fe <scalbn+0x36>
 800b898:	c2f8f359 	.word	0xc2f8f359
 800b89c:	01a56e1f 	.word	0x01a56e1f
 800b8a0:	8800759c 	.word	0x8800759c
 800b8a4:	7e37e43c 	.word	0x7e37e43c
 800b8a8:	43500000 	.word	0x43500000
 800b8ac:	ffff3cb0 	.word	0xffff3cb0
 800b8b0:	3c900000 	.word	0x3c900000

0800b8b4 <copysign>:
 800b8b4:	ec51 0b10 	vmov	r0, r1, d0
 800b8b8:	ee11 0a90 	vmov	r0, s3
 800b8bc:	ee10 2a10 	vmov	r2, s0
 800b8c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b8c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b8c8:	ea41 0300 	orr.w	r3, r1, r0
 800b8cc:	ec43 2b10 	vmov	d0, r2, r3
 800b8d0:	4770      	bx	lr
	...

0800b8d4 <_init>:
 800b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d6:	bf00      	nop
 800b8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8da:	bc08      	pop	{r3}
 800b8dc:	469e      	mov	lr, r3
 800b8de:	4770      	bx	lr

0800b8e0 <_fini>:
 800b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e2:	bf00      	nop
 800b8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8e6:	bc08      	pop	{r3}
 800b8e8:	469e      	mov	lr, r3
 800b8ea:	4770      	bx	lr
