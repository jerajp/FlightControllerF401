
FlightControllerF401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  0800dc18  0800dc18  0001dc18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5d8  0800e5d8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5d8  0800e5d8  0001e5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5e0  0800e5e0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5e0  0800e5e0  0001e5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5e4  0800e5e4  0001e5e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e5e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  200001e4  0800e7cc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  0800e7cc  00020934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026ac9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ac  00000000  00000000  00046cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  0004af90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  0004c570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b8cc  00000000  00000000  0004d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7a0  00000000  00000000  0006927c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000994f7  00000000  00000000  00083a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011cf13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f88  00000000  00000000  0011cf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dbfc 	.word	0x0800dbfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800dbfc 	.word	0x0800dbfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <MPU9250_OnActivate>:

static uint8_t _buffer[21];
static uint8_t _mag_adjust[3];

__weak void MPU9250_OnActivate()
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <MPU9250_Activate>:

static inline void MPU9250_Activate()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	MPU9250_OnActivate();
 8000f64:	f7ff fff4 	bl	8000f50 <MPU9250_OnActivate>
	HAL_GPIO_WritePin(GYRO_CSN_GPIO_Port, GYRO_CSN_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <MPU9250_Activate+0x18>)
 8000f6e:	f005 fc59 	bl	8006824 <HAL_GPIO_WritePin>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020000 	.word	0x40020000

08000f7c <MPU9250_Deactivate>:

static inline void MPU9250_Deactivate()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GYRO_CSN_GPIO_Port, GYRO_CSN_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2110      	movs	r1, #16
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <MPU9250_Deactivate+0x14>)
 8000f86:	f005 fc4d 	bl	8006824 <HAL_GPIO_WritePin>
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020000 	.word	0x40020000

08000f94 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000fa2:	f107 020f 	add.w	r2, r7, #15
 8000fa6:	1df9      	adds	r1, r7, #7
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	2301      	movs	r3, #1
 8000fb0:	4806      	ldr	r0, [pc, #24]	; (8000fcc <SPIx_WriteRead+0x38>)
 8000fb2:	f006 fc90 	bl	80078d6 <HAL_SPI_TransmitReceive>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SPIx_WriteRead+0x2c>
	{
		return -1;
 8000fbc:	23ff      	movs	r3, #255	; 0xff
 8000fbe:	e000      	b.n	8000fc2 <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000624 	.word	0x20000624

08000fd0 <MPU_SPI_Write>:

void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8000fe0:	f7ff ffbe 	bl	8000f60 <MPU9250_Activate>
	SPIx_WriteRead(WriteAddr);
 8000fe4:	78fb      	ldrb	r3, [r7, #3]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ffd4 	bl	8000f94 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8000fec:	e00a      	b.n	8001004 <MPU_SPI_Write+0x34>
	{
		SPIx_WriteRead(*pBuffer);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ffce 	bl	8000f94 <SPIx_WriteRead>
		NumByteToWrite--;
 8000ff8:	883b      	ldrh	r3, [r7, #0]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3301      	adds	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8001004:	883b      	ldrh	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f1      	bne.n	8000fee <MPU_SPI_Write+0x1e>
	}
	MPU9250_Deactivate();
 800100a:	f7ff ffb7 	bl	8000f7c <MPU9250_Deactivate>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	803b      	strh	r3, [r7, #0]
	MPU9250_Activate();
 8001028:	f7ff ff9a 	bl	8000f60 <MPU9250_Activate>
	uint8_t data = ReadAddr | READWRITE_CMD;
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	4313      	orrs	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&MPU9250_SPI, &data, 1, HAL_MAX_DELAY);
 8001036:	f107 010f 	add.w	r1, r7, #15
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103e:	2201      	movs	r2, #1
 8001040:	4807      	ldr	r0, [pc, #28]	; (8001060 <MPU_SPI_Read+0x48>)
 8001042:	f006 fa0b 	bl	800745c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&MPU9250_SPI, pBuffer, NumByteToRead, HAL_MAX_DELAY);
 8001046:	883a      	ldrh	r2, [r7, #0]
 8001048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4804      	ldr	r0, [pc, #16]	; (8001060 <MPU_SPI_Read+0x48>)
 8001050:	f006 fb38 	bl	80076c4 <HAL_SPI_Receive>
	MPU9250_Deactivate();
 8001054:	f7ff ff92 	bl	8000f7c <MPU9250_Deactivate>
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000624 	.word	0x20000624

08001064 <writeRegister>:

/* writes a byte to MPU9250 register given a register address and data */
void writeRegister(uint8_t subAddress, uint8_t data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	460a      	mov	r2, r1
 800106e:	71fb      	strb	r3, [r7, #7]
 8001070:	4613      	mov	r3, r2
 8001072:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Write(&data, subAddress, 1);
 8001074:	79f9      	ldrb	r1, [r7, #7]
 8001076:	1dbb      	adds	r3, r7, #6
 8001078:	2201      	movs	r2, #1
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ffa8 	bl	8000fd0 <MPU_SPI_Write>
	HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f004 fb6d 	bl	8005760 <HAL_Delay>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
void readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	603a      	str	r2, [r7, #0]
 8001098:	71fb      	strb	r3, [r7, #7]
 800109a:	460b      	mov	r3, r1
 800109c:	71bb      	strb	r3, [r7, #6]
	MPU_SPI_Read(dest, subAddress, count);
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4619      	mov	r1, r3
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f7ff ffb6 	bl	8001018 <MPU_SPI_Read>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <writeAK8963Register>:

/* writes a register to the AK8963 given a register address and data */
void writeAK8963Register(uint8_t subAddress, uint8_t data)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	460a      	mov	r2, r1
 80010be:	71fb      	strb	r3, [r7, #7]
 80010c0:	4613      	mov	r3, r2
 80010c2:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for write
	writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR);
 80010c4:	2325      	movs	r3, #37	; 0x25
 80010c6:	220c      	movs	r2, #12
 80010c8:	4611      	mov	r1, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ffca 	bl	8001064 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 80010d0:	2226      	movs	r2, #38	; 0x26
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4610      	mov	r0, r2
 80010d8:	f7ff ffc4 	bl	8001064 <writeRegister>

	// store the data for write
	writeRegister(I2C_SLV0_DO,data);
 80010dc:	2263      	movs	r2, #99	; 0x63
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4610      	mov	r0, r2
 80010e4:	f7ff ffbe 	bl	8001064 <writeRegister>

	// enable I2C and send 1 byte
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1);
 80010e8:	2227      	movs	r2, #39	; 0x27
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	4610      	mov	r0, r2
 80010f6:	f7ff ffb5 	bl	8001064 <writeRegister>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <readAK8963Registers>:

/* reads registers from the AK8963 */
void readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	603a      	str	r2, [r7, #0]
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	460b      	mov	r3, r1
 8001110:	71bb      	strb	r3, [r7, #6]
	// set slave 0 to the AK8963 and set for read
	writeRegister(I2C_SLV0_ADDR, AK8963_I2C_ADDR | I2C_READ_FLAG);
 8001112:	2025      	movs	r0, #37	; 0x25
 8001114:	220c      	movs	r2, #12
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	4313      	orrs	r3, r2
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff ffa1 	bl	8001064 <writeRegister>

	// set the register to the desired AK8963 sub address
	writeRegister(I2C_SLV0_REG,subAddress);
 8001122:	2226      	movs	r2, #38	; 0x26
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	4619      	mov	r1, r3
 8001128:	4610      	mov	r0, r2
 800112a:	f7ff ff9b 	bl	8001064 <writeRegister>

	// enable I2C and request the bytes
	writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count);
 800112e:	2027      	movs	r0, #39	; 0x27
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	4313      	orrs	r3, r2
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff ff93 	bl	8001064 <writeRegister>

	// takes some time for these registers to fill
	HAL_Delay(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f004 fb0e 	bl	8005760 <HAL_Delay>

	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	readRegisters(EXT_SENS_DATA_00,count,dest);
 8001144:	2049      	movs	r0, #73	; 0x49
 8001146:	79bb      	ldrb	r3, [r7, #6]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff ff9f 	bl	800108e <readRegisters>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <whoAmI>:

/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
static uint8_t whoAmI(){
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readRegisters(WHO_AM_I,1,_buffer);
 800115c:	2375      	movs	r3, #117	; 0x75
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <whoAmI+0x18>)
 8001160:	2101      	movs	r1, #1
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff93 	bl	800108e <readRegisters>

	// return the register value
	return _buffer[0];
 8001168:	4b01      	ldr	r3, [pc, #4]	; (8001170 <whoAmI+0x18>)
 800116a:	781b      	ldrb	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000200 	.word	0x20000200

08001174 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
static int whoAmIAK8963(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	// read the WHO AM I register
	readAK8963Registers(AK8963_WHO_AM_I,1,_buffer);
 8001178:	2300      	movs	r3, #0
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <whoAmIAK8963+0x18>)
 800117c:	2101      	movs	r1, #1
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffbf 	bl	8001102 <readAK8963Registers>
	// return the register value
	return _buffer[0];
 8001184:	4b01      	ldr	r3, [pc, #4]	; (800118c <whoAmIAK8963+0x18>)
 8001186:	781b      	ldrb	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000200 	.word	0x20000200

08001190 <MPU9250_Init>:

/* starts communication with the MPU-9250 */
uint8_t MPU9250_Init()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1, CLOCK_SEL_PLL);
 8001196:	236b      	movs	r3, #107	; 0x6b
 8001198:	2201      	movs	r2, #1
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff61 	bl	8001064 <writeRegister>
	// enable I2C master mode
	writeRegister(USER_CTRL, I2C_MST_EN);
 80011a2:	236a      	movs	r3, #106	; 0x6a
 80011a4:	2220      	movs	r2, #32
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff5b 	bl	8001064 <writeRegister>
	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL, I2C_MST_CLK);
 80011ae:	2324      	movs	r3, #36	; 0x24
 80011b0:	220d      	movs	r2, #13
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff55 	bl	8001064 <writeRegister>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80011ba:	230a      	movs	r3, #10
 80011bc:	2200      	movs	r2, #0
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff77 	bl	80010b4 <writeAK8963Register>
	// reset the MPU9250
	writeRegister(PWR_MGMNT_1,PWR_RESET);
 80011c6:	236b      	movs	r3, #107	; 0x6b
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff49 	bl	8001064 <writeRegister>
	// wait for MPU-9250 to come back up
	HAL_Delay(10);
 80011d2:	200a      	movs	r0, #10
 80011d4:	f004 fac4 	bl	8005760 <HAL_Delay>
	// reset the AK8963
	writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80011d8:	230b      	movs	r3, #11
 80011da:	2201      	movs	r2, #1
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff68 	bl	80010b4 <writeAK8963Register>
	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80011e4:	236b      	movs	r3, #107	; 0x6b
 80011e6:	2201      	movs	r2, #1
 80011e8:	4611      	mov	r1, r2
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff3a 	bl	8001064 <writeRegister>

	// check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
	uint8_t who = whoAmI();
 80011f0:	f7ff ffb2 	bl	8001158 <whoAmI>
 80011f4:	4603      	mov	r3, r0
 80011f6:	71fb      	strb	r3, [r7, #7]
	if((who != 0x71) &&( who != 0x73))
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2b71      	cmp	r3, #113	; 0x71
 80011fc:	d004      	beq.n	8001208 <MPU9250_Init+0x78>
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b73      	cmp	r3, #115	; 0x73
 8001202:	d001      	beq.n	8001208 <MPU9250_Init+0x78>
	{
		return 1;
 8001204:	2301      	movs	r3, #1
 8001206:	e066      	b.n	80012d6 <MPU9250_Init+0x146>
	}

	// enable accelerometer and gyro
	writeRegister(PWR_MGMNT_2,SEN_ENABLE);
 8001208:	236c      	movs	r3, #108	; 0x6c
 800120a:	2200      	movs	r2, #0
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff28 	bl	8001064 <writeRegister>

	// setting accel range to 8G as default
	writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_8G);
 8001214:	231c      	movs	r3, #28
 8001216:	2210      	movs	r2, #16
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff22 	bl	8001064 <writeRegister>

	// setting the gyro range to 2000DPS as default
	writeRegister(GYRO_CONFIG,GYRO_FS_SEL_2000DPS_NO_DLPF);
 8001220:	231b      	movs	r3, #27
 8001222:	221b      	movs	r2, #27
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff1c 	bl	8001064 <writeRegister>

	// setting bandwidth of accelorometer
	writeRegister(ACCEL_CONFIG2,ACCEL_NO_DLPF);
 800122c:	231d      	movs	r3, #29
 800122e:	2204      	movs	r2, #4
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff16 	bl	8001064 <writeRegister>

	// setting gyro bandwidth to 184Hz only applicable if GYRO Config register set for DLPF
	//writeRegister(CONFIG,DLPF_184);

	// setting the sample rate divider to 0 as default
	writeRegister(SMPDIV,0x00);
 8001238:	2319      	movs	r3, #25
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff11 	bl	8001064 <writeRegister>

	// enable I2C master mode
	writeRegister(USER_CTRL,I2C_MST_EN);
 8001242:	236a      	movs	r3, #106	; 0x6a
 8001244:	2220      	movs	r2, #32
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff0b 	bl	8001064 <writeRegister>

	// set the I2C bus speed to 400 kHz
	writeRegister(I2C_MST_CTRL,I2C_MST_CLK);
 800124e:	2324      	movs	r3, #36	; 0x24
 8001250:	220d      	movs	r2, #13
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff05 	bl	8001064 <writeRegister>

	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 0x48 )
 800125a:	f7ff ff8b 	bl	8001174 <whoAmIAK8963>
 800125e:	4603      	mov	r3, r0
 8001260:	2b48      	cmp	r3, #72	; 0x48
 8001262:	d001      	beq.n	8001268 <MPU9250_Init+0xd8>
	{
		return 1;
 8001264:	2301      	movs	r3, #1
 8001266:	e036      	b.n	80012d6 <MPU9250_Init+0x146>
	}

	/* get the magnetometer calibration */
	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001268:	230a      	movs	r3, #10
 800126a:	2200      	movs	r2, #0
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff20 	bl	80010b4 <writeAK8963Register>

	HAL_Delay(100); // long wait between AK8963 mode changes
 8001274:	2064      	movs	r0, #100	; 0x64
 8001276:	f004 fa73 	bl	8005760 <HAL_Delay>

	// set AK8963 to FUSE ROM access
	writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM);
 800127a:	230a      	movs	r3, #10
 800127c:	220f      	movs	r2, #15
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff17 	bl	80010b4 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 8001286:	2064      	movs	r0, #100	; 0x64
 8001288:	f004 fa6a 	bl	8005760 <HAL_Delay>

	// read the AK8963 ASA registers and compute magnetometer scale factors
	readAK8963Registers(AK8963_ASA, 3, _mag_adjust);
 800128c:	2310      	movs	r3, #16
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <MPU9250_Init+0x150>)
 8001290:	2103      	movs	r1, #3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ff35 	bl	8001102 <readAK8963Registers>

	// set AK8963 to Power Down
	writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8001298:	230a      	movs	r3, #10
 800129a:	2200      	movs	r2, #0
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff ff08 	bl	80010b4 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80012a4:	2064      	movs	r0, #100	; 0x64
 80012a6:	f004 fa5b 	bl	8005760 <HAL_Delay>

	// set AK8963 to 16 bit resolution, 100 Hz update rate
	writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2);
 80012aa:	230a      	movs	r3, #10
 80012ac:	2216      	movs	r2, #22
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff feff 	bl	80010b4 <writeAK8963Register>

	// long wait between AK8963 mode changes
	HAL_Delay(100);
 80012b6:	2064      	movs	r0, #100	; 0x64
 80012b8:	f004 fa52 	bl	8005760 <HAL_Delay>

	// select clock source to gyro
	writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL);
 80012bc:	236b      	movs	r3, #107	; 0x6b
 80012be:	2201      	movs	r2, #1
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fece 	bl	8001064 <writeRegister>

	// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
	readAK8963Registers(AK8963_HXL,7,_buffer);
 80012c8:	2303      	movs	r3, #3
 80012ca:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <MPU9250_Init+0x154>)
 80012cc:	2107      	movs	r1, #7
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff17 	bl	8001102 <readAK8963Registers>

	// successful init, return 0
	return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000218 	.word	0x20000218
 80012e4:	20000200 	.word	0x20000200

080012e8 <MPU9250_GetData>:
	writeRegister(SMPDIV, srd);
}

/* read the Gyro,Accel and Mag data*/
void MPU9250_GetData(struct MPUstr* DataStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 21, _buffer);
 80012f0:	233b      	movs	r3, #59	; 0x3b
 80012f2:	4a60      	ldr	r2, [pc, #384]	; (8001474 <MPU9250_GetData+0x18c>)
 80012f4:	2115      	movs	r1, #21
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fec9 	bl	800108e <readRegisters>

	// combine into 16 bit values
	DataStruct->Accelerometer_X_RAW = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 80012fc:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <MPU9250_GetData+0x18c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <MPU9250_GetData+0x18c>)
 8001306:	785b      	ldrb	r3, [r3, #1]
 8001308:	b21b      	sxth	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b21a      	sxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y_RAW = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 8001312:	4b58      	ldr	r3, [pc, #352]	; (8001474 <MPU9250_GetData+0x18c>)
 8001314:	789b      	ldrb	r3, [r3, #2]
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21a      	sxth	r2, r3
 800131a:	4b56      	ldr	r3, [pc, #344]	; (8001474 <MPU9250_GetData+0x18c>)
 800131c:	78db      	ldrb	r3, [r3, #3]
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z_RAW = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001328:	4b52      	ldr	r3, [pc, #328]	; (8001474 <MPU9250_GetData+0x18c>)
 800132a:	791b      	ldrb	r3, [r3, #4]
 800132c:	021b      	lsls	r3, r3, #8
 800132e:	b21a      	sxth	r2, r3
 8001330:	4b50      	ldr	r3, [pc, #320]	; (8001474 <MPU9250_GetData+0x18c>)
 8001332:	795b      	ldrb	r3, [r3, #5]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21a      	sxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	809a      	strh	r2, [r3, #4]
	DataStruct->Gyroscope_X_RAW = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 800133e:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <MPU9250_GetData+0x18c>)
 8001340:	7a1b      	ldrb	r3, [r3, #8]
 8001342:	021b      	lsls	r3, r3, #8
 8001344:	b21a      	sxth	r2, r3
 8001346:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <MPU9250_GetData+0x18c>)
 8001348:	7a5b      	ldrb	r3, [r3, #9]
 800134a:	b21b      	sxth	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b21a      	sxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y_RAW = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 8001354:	4b47      	ldr	r3, [pc, #284]	; (8001474 <MPU9250_GetData+0x18c>)
 8001356:	7a9b      	ldrb	r3, [r3, #10]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <MPU9250_GetData+0x18c>)
 800135e:	7adb      	ldrb	r3, [r3, #11]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21a      	sxth	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z_RAW = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 800136a:	4b42      	ldr	r3, [pc, #264]	; (8001474 <MPU9250_GetData+0x18c>)
 800136c:	7b1b      	ldrb	r3, [r3, #12]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	4b40      	ldr	r3, [pc, #256]	; (8001474 <MPU9250_GetData+0x18c>)
 8001374:	7b5b      	ldrb	r3, [r3, #13]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21a      	sxth	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	815a      	strh	r2, [r3, #10]

	int16_t magx = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 8001380:	4b3c      	ldr	r3, [pc, #240]	; (8001474 <MPU9250_GetData+0x18c>)
 8001382:	7bdb      	ldrb	r3, [r3, #15]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	b21a      	sxth	r2, r3
 8001388:	4b3a      	ldr	r3, [pc, #232]	; (8001474 <MPU9250_GetData+0x18c>)
 800138a:	7b9b      	ldrb	r3, [r3, #14]
 800138c:	b21b      	sxth	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	81fb      	strh	r3, [r7, #14]
	int16_t magy = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 8001392:	4b38      	ldr	r3, [pc, #224]	; (8001474 <MPU9250_GetData+0x18c>)
 8001394:	7c5b      	ldrb	r3, [r3, #17]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	b21a      	sxth	r2, r3
 800139a:	4b36      	ldr	r3, [pc, #216]	; (8001474 <MPU9250_GetData+0x18c>)
 800139c:	7c1b      	ldrb	r3, [r3, #16]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	81bb      	strh	r3, [r7, #12]
	int16_t magz = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80013a4:	4b33      	ldr	r3, [pc, #204]	; (8001474 <MPU9250_GetData+0x18c>)
 80013a6:	7cdb      	ldrb	r3, [r3, #19]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <MPU9250_GetData+0x18c>)
 80013ae:	7c9b      	ldrb	r3, [r3, #18]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	4313      	orrs	r3, r2
 80013b4:	817b      	strh	r3, [r7, #10]

	DataStruct->Mag_X_RAW = (int16_t)((float)magx * ((float)(_mag_adjust[0] - 128) / 256.0f + 1.0f));
 80013b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MPU9250_GetData+0x190>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	3b80      	subs	r3, #128	; 0x80
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013d0:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 800147c <MPU9250_GetData+0x194>
 80013d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80013dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80013e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e8:	ee17 3a90 	vmov	r3, s15
 80013ec:	b21a      	sxth	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	819a      	strh	r2, [r3, #12]
	DataStruct->Mag_Y_RAW = (int16_t)((float)magy * ((float)(_mag_adjust[1] - 128) / 256.0f + 1.0f));
 80013f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MPU9250_GetData+0x190>)
 8001400:	785b      	ldrb	r3, [r3, #1]
 8001402:	3b80      	subs	r3, #128	; 0x80
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140c:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800147c <MPU9250_GetData+0x194>
 8001410:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001424:	ee17 3a90 	vmov	r3, s15
 8001428:	b21a      	sxth	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	81da      	strh	r2, [r3, #14]
	DataStruct->Mag_Z_RAW  = (int16_t)((float)magz * ((float)(_mag_adjust[2] - 128) / 256.0f + 1.0f));
 800142e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MPU9250_GetData+0x190>)
 800143c:	789b      	ldrb	r3, [r3, #2]
 800143e:	3b80      	subs	r3, #128	; 0x80
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001448:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800147c <MPU9250_GetData+0x194>
 800144c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001460:	ee17 3a90 	vmov	r3, s15
 8001464:	b21a      	sxth	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	821a      	strh	r2, [r3, #16]
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000200 	.word	0x20000200
 8001478:	20000218 	.word	0x20000218
 800147c:	43800000 	.word	0x43800000

08001480 <MPU9250_GetGyroData>:

/* read the Gyro data*/
void MPU9250_GetGyroData(struct MPUstr* DataStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(GYRO_OUT, 6, _buffer);
 8001488:	2343      	movs	r3, #67	; 0x43
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <MPU9250_GetGyroData+0x60>)
 800148c:	2106      	movs	r1, #6
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fdfd 	bl	800108e <readRegisters>

	// combine into 16 bit values
	DataStruct->Gyroscope_X_RAW = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <MPU9250_GetGyroData+0x60>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MPU9250_GetGyroData+0x60>)
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	80da      	strh	r2, [r3, #6]
	DataStruct->Gyroscope_Y_RAW = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <MPU9250_GetGyroData+0x60>)
 80014ac:	789b      	ldrb	r3, [r3, #2]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <MPU9250_GetGyroData+0x60>)
 80014b4:	78db      	ldrb	r3, [r3, #3]
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	811a      	strh	r2, [r3, #8]
	DataStruct->Gyroscope_Z_RAW = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <MPU9250_GetGyroData+0x60>)
 80014c2:	791b      	ldrb	r3, [r3, #4]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <MPU9250_GetGyroData+0x60>)
 80014ca:	795b      	ldrb	r3, [r3, #5]
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	815a      	strh	r2, [r3, #10]
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000200 	.word	0x20000200

080014e4 <MPU9250_GetAccelData>:

/* read the Accel data*/
void MPU9250_GetAccelData(struct MPUstr* DataStruct)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	// grab the data from the MPU9250
	readRegisters(ACCEL_OUT, 6, _buffer);
 80014ec:	233b      	movs	r3, #59	; 0x3b
 80014ee:	4a15      	ldr	r2, [pc, #84]	; (8001544 <MPU9250_GetAccelData+0x60>)
 80014f0:	2106      	movs	r1, #6
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fdcb 	bl	800108e <readRegisters>

	// combine into 16 bit values
	DataStruct->Accelerometer_X_RAW = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MPU9250_GetAccelData+0x60>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b21a      	sxth	r2, r3
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MPU9250_GetAccelData+0x60>)
 8001502:	785b      	ldrb	r3, [r3, #1]
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21a      	sxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	801a      	strh	r2, [r3, #0]
	DataStruct->Accelerometer_Y_RAW = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MPU9250_GetAccelData+0x60>)
 8001510:	789b      	ldrb	r3, [r3, #2]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	b21a      	sxth	r2, r3
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MPU9250_GetAccelData+0x60>)
 8001518:	78db      	ldrb	r3, [r3, #3]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21a      	sxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	805a      	strh	r2, [r3, #2]
	DataStruct->Accelerometer_Z_RAW = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MPU9250_GetAccelData+0x60>)
 8001526:	791b      	ldrb	r3, [r3, #4]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <MPU9250_GetAccelData+0x60>)
 800152e:	795b      	ldrb	r3, [r3, #5]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	809a      	strh	r2, [r3, #4]
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000200 	.word	0x20000200

08001548 <MPU_CalculateFromRAWData>:
#include "MPUcalc.h"
#include "MPU9250.h"


void MPU_CalculateFromRAWData(struct MPUstr* d,float timedelta)
{
 8001548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800154c:	b08c      	sub	sp, #48	; 0x30
 800154e:	af00      	add	r7, sp, #0
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	ed87 0a02 	vstr	s0, [r7, #8]
	float AccelVectorRoll;
	float p,q,r;
	float X,Y,Z;

	//Offset RAW gyro values with calibrated offsets
	d->Gyroscope_X_Cal = (float)(d->Gyroscope_X_RAW) - d->Offset_Gyro_X;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800155c:	ee07 3a90 	vmov	s15, r3
 8001560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	edd3 7a05 	vldr	s15, [r3, #20]
 800156a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edc3 7a08 	vstr	s15, [r3, #32]
	d->Gyroscope_Y_Cal = (float)(d->Gyroscope_Y_RAW) - d->Offset_Gyro_Y;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	edd3 7a06 	vldr	s15, [r3, #24]
 8001588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	d->Gyroscope_Z_Cal = (float)(d->Gyroscope_Z_RAW) - d->Offset_Gyro_Z;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001598:	ee07 3a90 	vmov	s15, r3
 800159c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	edd3 7a07 	vldr	s15, [r3, #28]
 80015a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	//GYRO AND ACCEL DATA in STANDARD X,Y,Z directions Roll (nose), Pitch(right wing), Yaw (down)
	//Sensor MPU 6050 axis position X (right wing), Y (nose), Z (up)
	d->Gyro_X = d->Gyroscope_Y_Cal;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80015b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ba:	ee17 3a90 	vmov	r3, s15
 80015be:	b21a      	sxth	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	865a      	strh	r2, [r3, #50]	; 0x32
	d->Gyro_Y = d->Gyroscope_X_Cal;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	edd3 7a08 	vldr	s15, [r3, #32]
 80015ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ce:	ee17 3a90 	vmov	r3, s15
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	869a      	strh	r2, [r3, #52]	; 0x34
	d->Gyro_Z = -d->Gyroscope_Z_Cal;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80015de:	eef1 7a67 	vneg.f32	s15, s15
 80015e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e6:	ee17 3a90 	vmov	r3, s15
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	86da      	strh	r2, [r3, #54]	; 0x36

	d->Accel_X = d->Accelerometer_Y_RAW;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	859a      	strh	r2, [r3, #44]	; 0x2c
	d->Accel_Y = d->Accelerometer_X_RAW;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	85da      	strh	r2, [r3, #46]	; 0x2e
	d->Accel_Z = -d->Accelerometer_Z_RAW;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800160a:	b29b      	uxth	r3, r3
 800160c:	425b      	negs	r3, r3
 800160e:	b29b      	uxth	r3, r3
 8001610:	b21a      	sxth	r2, r3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	861a      	strh	r2, [r3, #48]	; 0x30


	//Accelerometer angles-----------------------------------------------------------------
	AccelVectorRoll =  sqrt( (d->Accel_X * d->Accel_X) + (d->Accel_Z * d->Accel_Z) );
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800161c:	461a      	mov	r2, r3
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001624:	fb03 f202 	mul.w	r2, r3, r2
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800162e:	4619      	mov	r1, r3
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001636:	fb03 f301 	mul.w	r3, r3, r1
 800163a:	4413      	add	r3, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff79 	bl	8000534 <__aeabi_i2d>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	ec43 2b10 	vmov	d0, r2, r3
 800164a:	f00b f841 	bl	800c6d0 <sqrt>
 800164e:	ec53 2b10 	vmov	r2, r3, d0
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff faaf 	bl	8000bb8 <__aeabi_d2f>
 800165a:	4603      	mov	r3, r0
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
	AccelVectorPitch = sqrt( (d->Accel_Y * d->Accel_Y) + (d->Accel_Z * d->Accel_Z) );
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001664:	461a      	mov	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800166c:	fb03 f202 	mul.w	r2, r3, r2
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001676:	4619      	mov	r1, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800167e:	fb03 f301 	mul.w	r3, r3, r1
 8001682:	4413      	add	r3, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff55 	bl	8000534 <__aeabi_i2d>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	ec43 2b10 	vmov	d0, r2, r3
 8001692:	f00b f81d 	bl	800c6d0 <sqrt>
 8001696:	ec53 2b10 	vmov	r2, r3, d0
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f7ff fa8b 	bl	8000bb8 <__aeabi_d2f>
 80016a2:	4603      	mov	r3, r0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28

	d->Angle_Accel_Roll  = -atan(d->Accel_Y/AccelVectorRoll) * RADIANSTODEGREES;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016bc:	ee16 0a90 	vmov	r0, s13
 80016c0:	f7fe ff4a 	bl	8000558 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	ec43 2b10 	vmov	d0, r2, r3
 80016cc:	f00a fd80 	bl	800c1d0 <atan>
 80016d0:	ec53 2b10 	vmov	r2, r3, d0
 80016d4:	4614      	mov	r4, r2
 80016d6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016da:	a3f9      	add	r3, pc, #996	; (adr r3, 8001ac0 <MPU_CalculateFromRAWData+0x578>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7fe ff90 	bl	8000608 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f7ff fa62 	bl	8000bb8 <__aeabi_d2f>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	645a      	str	r2, [r3, #68]	; 0x44
	d->Angle_Accel_Pitch = atan(d->Accel_X/AccelVectorPitch) * RADIANSTODEGREES;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001708:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800170c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001710:	ee16 0a90 	vmov	r0, s13
 8001714:	f7fe ff20 	bl	8000558 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	ec43 2b10 	vmov	d0, r2, r3
 8001720:	f00a fd56 	bl	800c1d0 <atan>
 8001724:	ec51 0b10 	vmov	r0, r1, d0
 8001728:	a3e5      	add	r3, pc, #916	; (adr r3, 8001ac0 <MPU_CalculateFromRAWData+0x578>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe ff6b 	bl	8000608 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa3d 	bl	8000bb8 <__aeabi_d2f>
 800173e:	4602      	mov	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	641a      	str	r2, [r3, #64]	; 0x40

	//Compensate offset with spirit level manual offset
	d->Angle_Accel_Pitch-=ACCELPITCHMANUALOFFSET;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800174a:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 8001ab0 <MPU_CalculateFromRAWData+0x568>
 800174e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	d->Angle_Accel_Roll-=ACCELROLLMANUALOFFSET;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800175e:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8001ab4 <MPU_CalculateFromRAWData+0x56c>
 8001762:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	//Save angles in Radians
	d->Angle_Accel_Pitch_Rad=d->Angle_Accel_Pitch*DEGREESTORADIANS;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001772:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8001ab8 <MPU_CalculateFromRAWData+0x570>
 8001776:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	d->Angle_Accel_Roll_Rad=d->Angle_Accel_Roll*DEGREESTORADIANS;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001786:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8001ab8 <MPU_CalculateFromRAWData+0x570>
 800178a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

	//Calculate angular gyro velocities----------------------------------------------------
	d->AngleSpeed_Gyro_X = d->Gyro_X / GYROCONSTANT;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a2:	eddf 6ac6 	vldr	s13, [pc, #792]	; 8001abc <MPU_CalculateFromRAWData+0x574>
 80017a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	d->AngleSpeed_Gyro_Y = d->Gyro_Y / GYROCONSTANT;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017be:	eddf 6abf 	vldr	s13, [pc, #764]	; 8001abc <MPU_CalculateFromRAWData+0x574>
 80017c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	d->AngleSpeed_Gyro_Z = d->Gyro_Z / GYROCONSTANT;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017da:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8001abc <MPU_CalculateFromRAWData+0x574>
 80017de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74

	//convert angular velocity to radians/s
	p = d->AngleSpeed_Gyro_X * DEGREESTORADIANS;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80017ee:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8001ab8 <MPU_CalculateFromRAWData+0x570>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	q = d->AngleSpeed_Gyro_Y * DEGREESTORADIANS;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001800:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8001ab8 <MPU_CalculateFromRAWData+0x570>
 8001804:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001808:	edc7 7a08 	vstr	s15, [r7, #32]
	r = d->AngleSpeed_Gyro_Z * DEGREESTORADIANS;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001812:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8001ab8 <MPU_CalculateFromRAWData+0x570>
 8001816:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181a:	edc7 7a07 	vstr	s15, [r7, #28]

	//Save Angles in radians from previous STEP
	X = d->Roll_Rad;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001824:	61bb      	str	r3, [r7, #24]
	Y = d->Pitch_Rad;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800182c:	617b      	str	r3, [r7, #20]
	Z = d->Angle_Gyro_Yaw_Rad ;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001832:	613b      	str	r3, [r7, #16]

	//TRANSFORM gyro data to Euler Angles with complementary filter with accelerometer
	d->Roll_Rad   = 0.999 * (X + timedelta * (p  +  q*sin(X)*tan(Y) + r*cos(X)*tan(Y) ) ) + 0.001*d->Angle_Accel_Roll_Rad;
 8001834:	69b8      	ldr	r0, [r7, #24]
 8001836:	f7fe fe8f 	bl	8000558 <__aeabi_f2d>
 800183a:	4604      	mov	r4, r0
 800183c:	460d      	mov	r5, r1
 800183e:	68b8      	ldr	r0, [r7, #8]
 8001840:	f7fe fe8a 	bl	8000558 <__aeabi_f2d>
 8001844:	4680      	mov	r8, r0
 8001846:	4689      	mov	r9, r1
 8001848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800184a:	f7fe fe85 	bl	8000558 <__aeabi_f2d>
 800184e:	4682      	mov	sl, r0
 8001850:	468b      	mov	fp, r1
 8001852:	6a38      	ldr	r0, [r7, #32]
 8001854:	f7fe fe80 	bl	8000558 <__aeabi_f2d>
 8001858:	e9c7 0100 	strd	r0, r1, [r7]
 800185c:	69b8      	ldr	r0, [r7, #24]
 800185e:	f7fe fe7b 	bl	8000558 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	ec43 2b10 	vmov	d0, r2, r3
 800186a:	f00a fead 	bl	800c5c8 <sin>
 800186e:	ec53 2b10 	vmov	r2, r3, d0
 8001872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001876:	f7fe fec7 	bl	8000608 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	e9c7 2300 	strd	r2, r3, [r7]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7fe fe68 	bl	8000558 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	ec43 2b10 	vmov	d0, r2, r3
 8001890:	f00a feee 	bl	800c670 <tan>
 8001894:	ec53 2b10 	vmov	r2, r3, d0
 8001898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800189c:	f7fe feb4 	bl	8000608 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4650      	mov	r0, sl
 80018a6:	4659      	mov	r1, fp
 80018a8:	f7fe fcf8 	bl	800029c <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	e9c7 2300 	strd	r2, r3, [r7]
 80018b4:	69f8      	ldr	r0, [r7, #28]
 80018b6:	f7fe fe4f 	bl	8000558 <__aeabi_f2d>
 80018ba:	4682      	mov	sl, r0
 80018bc:	468b      	mov	fp, r1
 80018be:	69b8      	ldr	r0, [r7, #24]
 80018c0:	f7fe fe4a 	bl	8000558 <__aeabi_f2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	ec43 2b10 	vmov	d0, r2, r3
 80018cc:	f00a fe20 	bl	800c510 <cos>
 80018d0:	ec53 2b10 	vmov	r2, r3, d0
 80018d4:	4650      	mov	r0, sl
 80018d6:	4659      	mov	r1, fp
 80018d8:	f7fe fe96 	bl	8000608 <__aeabi_dmul>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4692      	mov	sl, r2
 80018e2:	469b      	mov	fp, r3
 80018e4:	6978      	ldr	r0, [r7, #20]
 80018e6:	f7fe fe37 	bl	8000558 <__aeabi_f2d>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	ec43 2b10 	vmov	d0, r2, r3
 80018f2:	f00a febd 	bl	800c670 <tan>
 80018f6:	ec53 2b10 	vmov	r2, r3, d0
 80018fa:	4650      	mov	r0, sl
 80018fc:	4659      	mov	r1, fp
 80018fe:	f7fe fe83 	bl	8000608 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800190a:	f7fe fcc7 	bl	800029c <__adddf3>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4640      	mov	r0, r8
 8001914:	4649      	mov	r1, r9
 8001916:	f7fe fe77 	bl	8000608 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe fcbb 	bl	800029c <__adddf3>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	a35c      	add	r3, pc, #368	; (adr r3, 8001aa0 <MPU_CalculateFromRAWData+0x558>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fe68 	bl	8000608 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4614      	mov	r4, r2
 800193e:	461d      	mov	r5, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe07 	bl	8000558 <__aeabi_f2d>
 800194a:	a357      	add	r3, pc, #348	; (adr r3, 8001aa8 <MPU_CalculateFromRAWData+0x560>)
 800194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001950:	f7fe fe5a 	bl	8000608 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fc9e 	bl	800029c <__adddf3>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f7ff f926 	bl	8000bb8 <__aeabi_d2f>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	d->Pitch_Rad  = 0.999 * (Y + timedelta * (q * cos(X) -  r * sin(X) ) 			    ) + 0.001*d->Angle_Accel_Pitch_Rad;
 8001974:	6978      	ldr	r0, [r7, #20]
 8001976:	f7fe fdef 	bl	8000558 <__aeabi_f2d>
 800197a:	4604      	mov	r4, r0
 800197c:	460d      	mov	r5, r1
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f7fe fdea 	bl	8000558 <__aeabi_f2d>
 8001984:	4680      	mov	r8, r0
 8001986:	4689      	mov	r9, r1
 8001988:	6a38      	ldr	r0, [r7, #32]
 800198a:	f7fe fde5 	bl	8000558 <__aeabi_f2d>
 800198e:	4682      	mov	sl, r0
 8001990:	468b      	mov	fp, r1
 8001992:	69b8      	ldr	r0, [r7, #24]
 8001994:	f7fe fde0 	bl	8000558 <__aeabi_f2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	ec43 2b10 	vmov	d0, r2, r3
 80019a0:	f00a fdb6 	bl	800c510 <cos>
 80019a4:	ec53 2b10 	vmov	r2, r3, d0
 80019a8:	4650      	mov	r0, sl
 80019aa:	4659      	mov	r1, fp
 80019ac:	f7fe fe2c 	bl	8000608 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	e9c7 2300 	strd	r2, r3, [r7]
 80019b8:	69f8      	ldr	r0, [r7, #28]
 80019ba:	f7fe fdcd 	bl	8000558 <__aeabi_f2d>
 80019be:	4682      	mov	sl, r0
 80019c0:	468b      	mov	fp, r1
 80019c2:	69b8      	ldr	r0, [r7, #24]
 80019c4:	f7fe fdc8 	bl	8000558 <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	ec43 2b10 	vmov	d0, r2, r3
 80019d0:	f00a fdfa 	bl	800c5c8 <sin>
 80019d4:	ec53 2b10 	vmov	r2, r3, d0
 80019d8:	4650      	mov	r0, sl
 80019da:	4659      	mov	r1, fp
 80019dc:	f7fe fe14 	bl	8000608 <__aeabi_dmul>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019e8:	f7fe fc56 	bl	8000298 <__aeabi_dsub>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4640      	mov	r0, r8
 80019f2:	4649      	mov	r1, r9
 80019f4:	f7fe fe08 	bl	8000608 <__aeabi_dmul>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4620      	mov	r0, r4
 80019fe:	4629      	mov	r1, r5
 8001a00:	f7fe fc4c 	bl	800029c <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	a324      	add	r3, pc, #144	; (adr r3, 8001aa0 <MPU_CalculateFromRAWData+0x558>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fdf9 	bl	8000608 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4614      	mov	r4, r2
 8001a1c:	461d      	mov	r5, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fd98 	bl	8000558 <__aeabi_f2d>
 8001a28:	a31f      	add	r3, pc, #124	; (adr r3, 8001aa8 <MPU_CalculateFromRAWData+0x560>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	f7fe fdeb 	bl	8000608 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fc2f 	bl	800029c <__adddf3>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f8b7 	bl	8000bb8 <__aeabi_d2f>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	d->Angle_Gyro_Yaw_Rad = Z + timedelta * (q*sin(X)/cos(Y) + r*cos(X)/cos(Y) ); //Only Gyro Angle will drift
 8001a52:	6938      	ldr	r0, [r7, #16]
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	4604      	mov	r4, r0
 8001a5a:	460d      	mov	r5, r1
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f7fe fd7b 	bl	8000558 <__aeabi_f2d>
 8001a62:	4680      	mov	r8, r0
 8001a64:	4689      	mov	r9, r1
 8001a66:	6a38      	ldr	r0, [r7, #32]
 8001a68:	f7fe fd76 	bl	8000558 <__aeabi_f2d>
 8001a6c:	4682      	mov	sl, r0
 8001a6e:	468b      	mov	fp, r1
 8001a70:	69b8      	ldr	r0, [r7, #24]
 8001a72:	f7fe fd71 	bl	8000558 <__aeabi_f2d>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	ec43 2b10 	vmov	d0, r2, r3
 8001a7e:	f00a fda3 	bl	800c5c8 <sin>
 8001a82:	ec53 2b10 	vmov	r2, r3, d0
 8001a86:	4650      	mov	r0, sl
 8001a88:	4659      	mov	r1, fp
 8001a8a:	f7fe fdbd 	bl	8000608 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4692      	mov	sl, r2
 8001a94:	469b      	mov	fp, r3
 8001a96:	6978      	ldr	r0, [r7, #20]
 8001a98:	f7fe fd5e 	bl	8000558 <__aeabi_f2d>
 8001a9c:	e016      	b.n	8001acc <MPU_CalculateFromRAWData+0x584>
 8001a9e:	bf00      	nop
 8001aa0:	d916872b 	.word	0xd916872b
 8001aa4:	3feff7ce 	.word	0x3feff7ce
 8001aa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001aac:	3f50624d 	.word	0x3f50624d
 8001ab0:	3e99999a 	.word	0x3e99999a
 8001ab4:	3e4ccccd 	.word	0x3e4ccccd
 8001ab8:	3c8efa35 	.word	0x3c8efa35
 8001abc:	41833333 	.word	0x41833333
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	404ca5dc 	.word	0x404ca5dc
 8001ac8:	42652ee1 	.word	0x42652ee1
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	ec43 2b10 	vmov	d0, r2, r3
 8001ad4:	f00a fd1c 	bl	800c510 <cos>
 8001ad8:	ec53 2b10 	vmov	r2, r3, d0
 8001adc:	4650      	mov	r0, sl
 8001ade:	4659      	mov	r1, fp
 8001ae0:	f7fe febc 	bl	800085c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	e9c7 2300 	strd	r2, r3, [r7]
 8001aec:	69f8      	ldr	r0, [r7, #28]
 8001aee:	f7fe fd33 	bl	8000558 <__aeabi_f2d>
 8001af2:	4682      	mov	sl, r0
 8001af4:	468b      	mov	fp, r1
 8001af6:	69b8      	ldr	r0, [r7, #24]
 8001af8:	f7fe fd2e 	bl	8000558 <__aeabi_f2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	ec43 2b10 	vmov	d0, r2, r3
 8001b04:	f00a fd04 	bl	800c510 <cos>
 8001b08:	ec53 2b10 	vmov	r2, r3, d0
 8001b0c:	4650      	mov	r0, sl
 8001b0e:	4659      	mov	r1, fp
 8001b10:	f7fe fd7a 	bl	8000608 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4692      	mov	sl, r2
 8001b1a:	469b      	mov	fp, r3
 8001b1c:	6978      	ldr	r0, [r7, #20]
 8001b1e:	f7fe fd1b 	bl	8000558 <__aeabi_f2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	ec43 2b10 	vmov	d0, r2, r3
 8001b2a:	f00a fcf1 	bl	800c510 <cos>
 8001b2e:	ec53 2b10 	vmov	r2, r3, d0
 8001b32:	4650      	mov	r0, sl
 8001b34:	4659      	mov	r1, fp
 8001b36:	f7fe fe91 	bl	800085c <__aeabi_ddiv>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b42:	f7fe fbab 	bl	800029c <__adddf3>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4640      	mov	r0, r8
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	f7fe fd5b 	bl	8000608 <__aeabi_dmul>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4620      	mov	r0, r4
 8001b58:	4629      	mov	r1, r5
 8001b5a:	f7fe fb9f 	bl	800029c <__adddf3>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	f7ff f827 	bl	8000bb8 <__aeabi_d2f>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	669a      	str	r2, [r3, #104]	; 0x68

	//Convert to Degrees
	d->Roll   = d->Roll_Rad * RADIANSTODEGREES;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001b76:	ed1f 7a2c 	vldr	s14, [pc, #-176]	; 8001ac8 <MPU_CalculateFromRAWData+0x580>
 8001b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	d->Pitch  = d->Pitch_Rad * RADIANSTODEGREES;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001b8a:	ed1f 7a31 	vldr	s14, [pc, #-196]	; 8001ac8 <MPU_CalculateFromRAWData+0x580>
 8001b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	d->Angle_Gyro_Yaw   = d->Angle_Gyro_Yaw_Rad * RADIANSTODEGREES;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001b9e:	ed1f 7a36 	vldr	s14, [pc, #-216]	; 8001ac8 <MPU_CalculateFromRAWData+0x580>
 8001ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
}
 8001bac:	bf00      	nop
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb6:	bf00      	nop

08001bb8 <GetGyroOffset>:

void GetGyroOffset(struct MPUstr* d, int32_t Loops, uint32_t Delayms)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
	int32_t SUMGyroX,SUMGyroY,SUMGyroZ;
	uint32_t i;

	SUMGyroX=0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
	SUMGyroY=0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
	SUMGyroZ=0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

	for(i=0;i<Loops;i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	e01d      	b.n	8001c12 <GetGyroOffset+0x5a>
	{

		MPU9250_GetGyroData(&mpuDataStr);
 8001bd6:	4839      	ldr	r0, [pc, #228]	; (8001cbc <GetGyroOffset+0x104>)
 8001bd8:	f7ff fc52 	bl	8001480 <MPU9250_GetGyroData>

		  SUMGyroX+=d->Gyroscope_X_RAW;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001be2:	461a      	mov	r2, r3
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	4413      	add	r3, r2
 8001be8:	61fb      	str	r3, [r7, #28]
		  SUMGyroY+=d->Gyroscope_Y_RAW;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
		  SUMGyroZ+=d->Gyroscope_Z_RAW;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	4413      	add	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]

		  HAL_Delay(Delayms);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f003 fdaa 	bl	8005760 <HAL_Delay>
	for(i=0;i<Loops;i++)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d3dd      	bcc.n	8001bd6 <GetGyroOffset+0x1e>

	}

	d->Offset_Gyro_X=(float)(SUMGyroX) / (float)(Loops);
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	edc3 7a05 	vstr	s15, [r3, #20]
	d->Offset_Gyro_Y=(float)(SUMGyroY) / (float)(Loops);
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	edc3 7a06 	vstr	s15, [r3, #24]
	d->Offset_Gyro_Z=(float)(SUMGyroZ) / (float)(Loops);
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	ee07 3a90 	vmov	s15, r3
 8001c5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	edc3 7a07 	vstr	s15, [r3, #28]


	MPU9250_GetAccelData(&mpuDataStr);
 8001c74:	4811      	ldr	r0, [pc, #68]	; (8001cbc <GetGyroOffset+0x104>)
 8001c76:	f7ff fc35 	bl	80014e4 <MPU9250_GetAccelData>

	MPU_CalculateFromRAWData(&mpuDataStr,0); //Gyro angles don't matter
 8001c7a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001cc0 <GetGyroOffset+0x108>
 8001c7e:	480f      	ldr	r0, [pc, #60]	; (8001cbc <GetGyroOffset+0x104>)
 8001c80:	f7ff fc62 	bl	8001548 <MPU_CalculateFromRAWData>

	//Transfer accelerometer angles to Gyro
	d->Pitch = d->Angle_Accel_Pitch;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	679a      	str	r2, [r3, #120]	; 0x78
	d->Roll =  d->Angle_Accel_Roll;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	67da      	str	r2, [r3, #124]	; 0x7c

	d->Angle_Gyro_Pitch_Rad = d->Angle_Accel_Pitch_Rad;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	661a      	str	r2, [r3, #96]	; 0x60
	d->Angle_Gyro_Roll_Rad = d->Angle_Accel_Roll_Rad;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	665a      	str	r2, [r3, #100]	; 0x64

	d->Angle_Gyro_Yaw = 0;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	65da      	str	r2, [r3, #92]	; 0x5c
	d->Angle_Gyro_Yaw_Rad = 0;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	669a      	str	r2, [r3, #104]	; 0x68
}
 8001cb4:	bf00      	nop
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000324 	.word	0x20000324
 8001cc0:	00000000 	.word	0x00000000

08001cc4 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001cd0:	887a      	ldrh	r2, [r7, #2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60da      	str	r2, [r3, #12]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	b29b      	uxth	r3, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e001      	b.n	8001d22 <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d36:	463b      	mov	r3, r7
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d44:	4a21      	ldr	r2, [pc, #132]	; (8001dcc <MX_ADC1_Init+0x9c>)
 8001d46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d48:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <MX_ADC1_Init+0xa0>)
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001d92:	f003 fd09 	bl	80057a8 <HAL_ADC_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d9c:	f001 f9a8 	bl	80030f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001da8:	2301      	movs	r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	4619      	mov	r1, r3
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <MX_ADC1_Init+0x98>)
 8001db2:	f003 fe75 	bl	8005aa0 <HAL_ADC_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001dbc:	f001 f998 	bl	80030f0 <Error_Handler>
  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000025c 	.word	0x2000025c
 8001dcc:	40012000 	.word	0x40012000
 8001dd0:	0f000001 	.word	0x0f000001

08001dd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_ADC_MspInit+0x7c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d127      	bne.n	8001e46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_ADC_MspInit+0x80>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e32:	2303      	movs	r3, #3
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4805      	ldr	r0, [pc, #20]	; (8001e58 <HAL_ADC_MspInit+0x84>)
 8001e42:	f004 fb6b 	bl	800651c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e46:	bf00      	nop
 8001e48:	3728      	adds	r7, #40	; 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40012000 	.word	0x40012000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020000 	.word	0x40020000

08001e5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a42      	ldr	r2, [pc, #264]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a3b      	ldr	r2, [pc, #236]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	4a34      	ldr	r2, [pc, #208]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eba:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001ed0:	f043 0302 	orr.w	r3, r3, #2
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <MX_GPIO_Init+0x128>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee8:	4827      	ldr	r0, [pc, #156]	; (8001f88 <MX_GPIO_Init+0x12c>)
 8001eea:	f004 fc9b 	bl	8006824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CSN_Pin|NRF24_CSN_Pin, GPIO_PIN_RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f248 0110 	movw	r1, #32784	; 0x8010
 8001ef4:	4825      	ldr	r0, [pc, #148]	; (8001f8c <MX_GPIO_Init+0x130>)
 8001ef6:	f004 fc95 	bl	8006824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f00:	4823      	ldr	r0, [pc, #140]	; (8001f90 <MX_GPIO_Init+0x134>)
 8001f02:	f004 fc8f 	bl	8006824 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001f06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	481a      	ldr	r0, [pc, #104]	; (8001f88 <MX_GPIO_Init+0x12c>)
 8001f20:	f004 fafc 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = GYRO_CSN_Pin|NRF24_CSN_Pin;
 8001f24:	f248 0310 	movw	r3, #32784	; 0x8010
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f32:	2300      	movs	r3, #0
 8001f34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4813      	ldr	r0, [pc, #76]	; (8001f8c <MX_GPIO_Init+0x130>)
 8001f3e:	f004 faed 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 8001f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480d      	ldr	r0, [pc, #52]	; (8001f90 <MX_GPIO_Init+0x134>)
 8001f5c:	f004 fade 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 8001f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_GPIO_Init+0x130>)
 8001f76:	f004 fad1 	bl	800651c <HAL_GPIO_Init>

}
 8001f7a:	bf00      	nop
 8001f7c:	3728      	adds	r7, #40	; 0x28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020400 	.word	0x40020400

08001f94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001f9a:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <MX_I2C1_Init+0x54>)
 8001f9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f9e:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fa0:	4a12      	ldr	r2, [pc, #72]	; (8001fec <MX_I2C1_Init+0x58>)
 8001fa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fa4:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	; (8001fe4 <MX_I2C1_Init+0x50>)
 8001fd2:	f004 fc5b 	bl	800688c <HAL_I2C_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fdc:	f001 f888 	bl	80030f0 <Error_Handler>
  }

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200002a4 	.word	0x200002a4
 8001fe8:	40005400 	.word	0x40005400
 8001fec:	000186a0 	.word	0x000186a0

08001ff0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_I2C_MspInit+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12c      	bne.n	800206c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_I2C_MspInit+0x88>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002034:	2312      	movs	r3, #18
 8002036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002038:	2301      	movs	r3, #1
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002040:	2304      	movs	r3, #4
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 0314 	add.w	r3, r7, #20
 8002048:	4619      	mov	r1, r3
 800204a:	480c      	ldr	r0, [pc, #48]	; (800207c <HAL_I2C_MspInit+0x8c>)
 800204c:	f004 fa66 	bl	800651c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <HAL_I2C_MspInit+0x88>)
 800205a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800205e:	6413      	str	r3, [r2, #64]	; 0x40
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_I2C_MspInit+0x88>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40005400 	.word	0x40005400
 8002078:	40023800 	.word	0x40023800
 800207c:	40020400 	.word	0x40020400

08002080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002080:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002088:	f003 faf8 	bl	800567c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208c:	f000 fd22 	bl	8002ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002090:	f7ff fee4 	bl	8001e5c <MX_GPIO_Init>
  MX_TIM2_Init();
 8002094:	f003 f994 	bl	80053c0 <MX_TIM2_Init>
  MX_ADC1_Init();
 8002098:	f7ff fe4a 	bl	8001d30 <MX_ADC1_Init>
  MX_I2C1_Init();
 800209c:	f7ff ff7a 	bl	8001f94 <MX_I2C1_Init>
  MX_SPI1_Init();
 80020a0:	f001 fbe2 	bl	8003868 <MX_SPI1_Init>
  MX_SPI2_Init();
 80020a4:	f001 fc16 	bl	80038d4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80020a8:	f001 fc4a 	bl	8003940 <MX_SPI3_Init>
  MX_TIM1_Init();
 80020ac:	f003 f8c2 	bl	8005234 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80020b0:	f003 fa48 	bl	8005544 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 80020b4:	482f      	ldr	r0, [pc, #188]	; (8002174 <main+0xf4>)
 80020b6:	f003 fbbb 	bl	8005830 <HAL_ADC_Start>

  //DEFAULT FLASH CONSTANTS--------------------------------------------------------------------------
  FlashDataDefault.controlData=CONTROLWORD;
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <main+0xf8>)
 80020bc:	2207      	movs	r2, #7
 80020be:	601a      	str	r2, [r3, #0]
  FlashDataDefault.pid_p_gain_pitch=3.0;
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <main+0xf8>)
 80020c2:	4a2e      	ldr	r2, [pc, #184]	; (800217c <main+0xfc>)
 80020c4:	605a      	str	r2, [r3, #4]
  FlashDataDefault.pid_i_gain_pitch=0.0;
 80020c6:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <main+0xf8>)
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  FlashDataDefault.pid_d_gain_pitch=400.0;
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <main+0xf8>)
 80020d0:	4a2b      	ldr	r2, [pc, #172]	; (8002180 <main+0x100>)
 80020d2:	60da      	str	r2, [r3, #12]
  FlashDataDefault.pid_p_gain_roll=3.0;
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <main+0xf8>)
 80020d6:	4a29      	ldr	r2, [pc, #164]	; (800217c <main+0xfc>)
 80020d8:	611a      	str	r2, [r3, #16]
  FlashDataDefault.pid_i_gain_roll=0.0;
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <main+0xf8>)
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  FlashDataDefault.pid_d_gain_roll=400.0;
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <main+0xf8>)
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <main+0x100>)
 80020e6:	619a      	str	r2, [r3, #24]
  FlashDataDefault.pid_p_gain_yaw=4.0;
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <main+0xf8>)
 80020ea:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80020ee:	61da      	str	r2, [r3, #28]
  FlashDataDefault.pid_i_gain_yaw=0.0;
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <main+0xf8>)
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  FlashDataDefault.pid_d_gain_yaw=0.0;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <main+0xf8>)
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24
  FlashDataDefault.pid_max_pitch = 400;
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <main+0xf8>)
 8002102:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
  FlashDataDefault.pid_i_max_pitch = 100;
 8002108:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <main+0xf8>)
 800210a:	2264      	movs	r2, #100	; 0x64
 800210c:	62da      	str	r2, [r3, #44]	; 0x2c
  FlashDataDefault.pid_max_roll = 400;
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <main+0xf8>)
 8002110:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
  FlashDataDefault.pid_i_max_roll = 100;
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <main+0xf8>)
 8002118:	2264      	movs	r2, #100	; 0x64
 800211a:	635a      	str	r2, [r3, #52]	; 0x34
  FlashDataDefault.pid_max_yaw = 100;
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <main+0xf8>)
 800211e:	2264      	movs	r2, #100	; 0x64
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
  FlashDataDefault.pid_i_max_yaw = 100;
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <main+0xf8>)
 8002124:	2264      	movs	r2, #100	; 0x64
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
  FlashDataDefault.maxpitchdegree=20; //degrees
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <main+0xf8>)
 800212a:	4a16      	ldr	r2, [pc, #88]	; (8002184 <main+0x104>)
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
  FlashDataDefault.maxrolldegree=20;  //degrees
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <main+0xf8>)
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <main+0x104>)
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
  FlashDataDefault.maxyawdegree=30;  //degrees per second rotation
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <main+0xf8>)
 8002136:	4a14      	ldr	r2, [pc, #80]	; (8002188 <main+0x108>)
 8002138:	649a      	str	r2, [r3, #72]	; 0x48
  FlashDataDefault.minthrottle=80;    //80counts of 1000 to spin rotors
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <main+0xf8>)
 800213c:	4a13      	ldr	r2, [pc, #76]	; (800218c <main+0x10c>)
 800213e:	64da      	str	r2, [r3, #76]	; 0x4c
  FlashDataDefault.maxthrottle=800;   //800counts of 1000 (80%)
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <main+0xf8>)
 8002142:	4a13      	ldr	r2, [pc, #76]	; (8002190 <main+0x110>)
 8002144:	651a      	str	r2, [r3, #80]	; 0x50


  if( CheckFlashData(FLASHCONSTADDR) == CONTROLWORD ) //Check if any Data is present
 8002146:	4813      	ldr	r0, [pc, #76]	; (8002194 <main+0x114>)
 8002148:	f000 feac 	bl	8002ea4 <CheckFlashData>
 800214c:	4603      	mov	r3, r0
 800214e:	2b07      	cmp	r3, #7
 8002150:	d12a      	bne.n	80021a8 <main+0x128>
  {
	  //Read Data and Save parameters into ACTIVE structure
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 8002152:	4911      	ldr	r1, [pc, #68]	; (8002198 <main+0x118>)
 8002154:	480f      	ldr	r0, [pc, #60]	; (8002194 <main+0x114>)
 8002156:	f000 feb1 	bl	8002ebc <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 800215a:	4910      	ldr	r1, [pc, #64]	; (800219c <main+0x11c>)
 800215c:	480d      	ldr	r0, [pc, #52]	; (8002194 <main+0x114>)
 800215e:	f000 fead 	bl	8002ebc <ReadFlashData>

	  sprintf(UartTXbuff0,"Flash Data OK \n\r" );
 8002162:	490f      	ldr	r1, [pc, #60]	; (80021a0 <main+0x120>)
 8002164:	480f      	ldr	r0, [pc, #60]	; (80021a4 <main+0x124>)
 8002166:	f007 fe17 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800216a:	480e      	ldr	r0, [pc, #56]	; (80021a4 <main+0x124>)
 800216c:	f000 ff8c 	bl	8003088 <WriteString>
 8002170:	e02e      	b.n	80021d0 <main+0x150>
 8002172:	bf00      	nop
 8002174:	2000025c 	.word	0x2000025c
 8002178:	200003b4 	.word	0x200003b4
 800217c:	40400000 	.word	0x40400000
 8002180:	43c80000 	.word	0x43c80000
 8002184:	41a00000 	.word	0x41a00000
 8002188:	41f00000 	.word	0x41f00000
 800218c:	42a00000 	.word	0x42a00000
 8002190:	44480000 	.word	0x44480000
 8002194:	08020000 	.word	0x08020000
 8002198:	200004b8 	.word	0x200004b8
 800219c:	20000510 	.word	0x20000510
 80021a0:	0800dc18 	.word	0x0800dc18
 80021a4:	20000418 	.word	0x20000418

  }
  else
  {
	  //Write default values into Flash, Read back data into Active Structure
	  WriteFlashData(FLASHCONSTADDR,FLASHCONSTSECTOR, &FlashDataDefault);
 80021a8:	4abb      	ldr	r2, [pc, #748]	; (8002498 <main+0x418>)
 80021aa:	2105      	movs	r1, #5
 80021ac:	48bb      	ldr	r0, [pc, #748]	; (800249c <main+0x41c>)
 80021ae:	f000 fcfb 	bl	8002ba8 <WriteFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataActive);
 80021b2:	49bb      	ldr	r1, [pc, #748]	; (80024a0 <main+0x420>)
 80021b4:	48b9      	ldr	r0, [pc, #740]	; (800249c <main+0x41c>)
 80021b6:	f000 fe81 	bl	8002ebc <ReadFlashData>
	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);
 80021ba:	49ba      	ldr	r1, [pc, #744]	; (80024a4 <main+0x424>)
 80021bc:	48b7      	ldr	r0, [pc, #732]	; (800249c <main+0x41c>)
 80021be:	f000 fe7d 	bl	8002ebc <ReadFlashData>

	  sprintf(UartTXbuff0,"Flash Default Data Written \n\r" );
 80021c2:	49b9      	ldr	r1, [pc, #740]	; (80024a8 <main+0x428>)
 80021c4:	48b9      	ldr	r0, [pc, #740]	; (80024ac <main+0x42c>)
 80021c6:	f007 fde7 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80021ca:	48b8      	ldr	r0, [pc, #736]	; (80024ac <main+0x42c>)
 80021cc:	f000 ff5c 	bl	8003088 <WriteString>
  }//------------------------------------------------------------------------------------------------------

  //Gyro Init
  MPU9250_Init();
 80021d0:	f7fe ffde 	bl	8001190 <MPU9250_Init>

  HAL_Delay(400);//wait for stable power
 80021d4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80021d8:	f003 fac2 	bl	8005760 <HAL_Delay>

  //NRF24 INIT-----------------------------------
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 80021dc:	4bb4      	ldr	r3, [pc, #720]	; (80024b0 <main+0x430>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4ab3      	ldr	r2, [pc, #716]	; (80024b0 <main+0x430>)
 80021e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e6:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 80021e8:	2200      	movs	r2, #0
 80021ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ee:	48b1      	ldr	r0, [pc, #708]	; (80024b4 <main+0x434>)
 80021f0:	f004 fb18 	bl	8006824 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 80021f4:	f001 f90a 	bl	800340c <nRF24_Check>
 80021f8:	4603      	mov	r3, r0
 80021fa:	461a      	mov	r2, r3
 80021fc:	4bae      	ldr	r3, [pc, #696]	; (80024b8 <main+0x438>)
 80021fe:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 8002200:	f001 f8b2 	bl	8003368 <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 8002204:	20ff      	movs	r0, #255	; 0xff
 8002206:	f001 fa8d 	bl	8003724 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 800220a:	200f      	movs	r0, #15
 800220c:	f001 f98d 	bl	800352a <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 8002210:	2020      	movs	r0, #32
 8002212:	f001 fa18 	bl	8003646 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 8002216:	2008      	movs	r0, #8
 8002218:	f001 f966 	bl	80034e8 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 800221c:	2003      	movs	r0, #3
 800221e:	f001 f992 	bl	8003546 <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 8002222:	49a6      	ldr	r1, [pc, #664]	; (80024bc <main+0x43c>)
 8002224:	2001      	movs	r0, #1
 8002226:	f001 f99f 	bl	8003568 <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 8); // Auto-ACK: disabled
 800222a:	2208      	movs	r2, #8
 800222c:	2100      	movs	r1, #0
 800222e:	2001      	movs	r0, #1
 8002230:	f001 fa24 	bl	800367c <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 8002234:	49a1      	ldr	r1, [pc, #644]	; (80024bc <main+0x43c>)
 8002236:	2006      	movs	r0, #6
 8002238:	f001 f996 	bl	8003568 <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_18dBm);
 800223c:	2000      	movs	r0, #0
 800223e:	f001 f9e7 	bl	8003610 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 8002242:	2001      	movs	r0, #1
 8002244:	f001 f92f 	bl	80034a6 <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 8002248:	f001 fab6 	bl	80037b8 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 800224c:	2002      	movs	r0, #2
 800224e:	f001 f90b 	bl	8003468 <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002258:	4896      	ldr	r0, [pc, #600]	; (80024b4 <main+0x434>)
 800225a:	f004 fae3 	bl	8006824 <HAL_GPIO_WritePin>


  HAL_Delay(5000);//wait to connect battery
 800225e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002262:	f003 fa7d 	bl	8005760 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002266:	2100      	movs	r1, #0
 8002268:	4895      	ldr	r0, [pc, #596]	; (80024c0 <main+0x440>)
 800226a:	f005 fe6b 	bl	8007f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800226e:	2104      	movs	r1, #4
 8002270:	4893      	ldr	r0, [pc, #588]	; (80024c0 <main+0x440>)
 8002272:	f005 fe67 	bl	8007f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002276:	2108      	movs	r1, #8
 8002278:	4891      	ldr	r0, [pc, #580]	; (80024c0 <main+0x440>)
 800227a:	f005 fe63 	bl	8007f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800227e:	210c      	movs	r1, #12
 8002280:	488f      	ldr	r0, [pc, #572]	; (80024c0 <main+0x440>)
 8002282:	f005 fe5f 	bl	8007f44 <HAL_TIM_PWM_Start>

  //Get Gyro offset--------------------------------------
  GyroCalibStatus=1;
 8002286:	4b8f      	ldr	r3, [pc, #572]	; (80024c4 <main+0x444>)
 8002288:	2201      	movs	r2, #1
 800228a:	601a      	str	r2, [r3, #0]
  GetGyroOffset(&mpuDataStr, GYROCALIBVALUES, 1);
 800228c:	2201      	movs	r2, #1
 800228e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002292:	488d      	ldr	r0, [pc, #564]	; (80024c8 <main+0x448>)
 8002294:	f7ff fc90 	bl	8001bb8 <GetGyroOffset>
  GyroCalibStatus=0;
 8002298:	4b8a      	ldr	r3, [pc, #552]	; (80024c4 <main+0x444>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]

  MotorStatus=MOTOROFF;
 800229e:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <main+0x44c>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 80022a4:	488a      	ldr	r0, [pc, #552]	; (80024d0 <main+0x450>)
 80022a6:	f005 fdf4 	bl	8007e92 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	  //own function is used for UART TX, very basic function for direct Register write one char at the time
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 ); //removed ->missing bytes on occasion

	  HAL_Delay(100);
 80022aa:	2064      	movs	r0, #100	; 0x64
 80022ac:	f003 fa58 	bl	8005760 <HAL_Delay>

	  sprintf(UartTXbuff0,T_HIDE_CUR);
 80022b0:	4988      	ldr	r1, [pc, #544]	; (80024d4 <main+0x454>)
 80022b2:	487e      	ldr	r0, [pc, #504]	; (80024ac <main+0x42c>)
 80022b4:	f007 fd70 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80022b8:	487c      	ldr	r0, [pc, #496]	; (80024ac <main+0x42c>)
 80022ba:	f000 fee5 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0,T_GO_TO,1,1); //Go to start Screen
 80022be:	2301      	movs	r3, #1
 80022c0:	2201      	movs	r2, #1
 80022c2:	4985      	ldr	r1, [pc, #532]	; (80024d8 <main+0x458>)
 80022c4:	4879      	ldr	r0, [pc, #484]	; (80024ac <main+0x42c>)
 80022c6:	f007 fd67 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80022ca:	4878      	ldr	r0, [pc, #480]	; (80024ac <main+0x42c>)
 80022cc:	f000 fedc 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 80022d0:	4982      	ldr	r1, [pc, #520]	; (80024dc <main+0x45c>)
 80022d2:	4876      	ldr	r0, [pc, #472]	; (80024ac <main+0x42c>)
 80022d4:	f007 fd60 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80022d8:	4874      	ldr	r0, [pc, #464]	; (80024ac <main+0x42c>)
 80022da:	f000 fed5 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Motor Status %u \n\r",MotorStatus);
 80022de:	4b7b      	ldr	r3, [pc, #492]	; (80024cc <main+0x44c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	497e      	ldr	r1, [pc, #504]	; (80024e0 <main+0x460>)
 80022e6:	4871      	ldr	r0, [pc, #452]	; (80024ac <main+0x42c>)
 80022e8:	f007 fd56 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80022ec:	486f      	ldr	r0, [pc, #444]	; (80024ac <main+0x42c>)
 80022ee:	f000 fecb 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "ThrottleIN %.2f \n\r",ThrottleINscaled);
 80022f2:	4b7c      	ldr	r3, [pc, #496]	; (80024e4 <main+0x464>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f92e 	bl	8000558 <__aeabi_f2d>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4979      	ldr	r1, [pc, #484]	; (80024e8 <main+0x468>)
 8002302:	486a      	ldr	r0, [pc, #424]	; (80024ac <main+0x42c>)
 8002304:	f007 fd48 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002308:	4868      	ldr	r0, [pc, #416]	; (80024ac <main+0x42c>)
 800230a:	f000 febd 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "PitchIN %.2f \n\r",PitchINscaled);
 800230e:	4b77      	ldr	r3, [pc, #476]	; (80024ec <main+0x46c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f920 	bl	8000558 <__aeabi_f2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4974      	ldr	r1, [pc, #464]	; (80024f0 <main+0x470>)
 800231e:	4863      	ldr	r0, [pc, #396]	; (80024ac <main+0x42c>)
 8002320:	f007 fd3a 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002324:	4861      	ldr	r0, [pc, #388]	; (80024ac <main+0x42c>)
 8002326:	f000 feaf 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "RollIN %.2f \n\r",RollINscaled);
 800232a:	4b72      	ldr	r3, [pc, #456]	; (80024f4 <main+0x474>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe f912 	bl	8000558 <__aeabi_f2d>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	496f      	ldr	r1, [pc, #444]	; (80024f8 <main+0x478>)
 800233a:	485c      	ldr	r0, [pc, #368]	; (80024ac <main+0x42c>)
 800233c:	f007 fd2c 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002340:	485a      	ldr	r0, [pc, #360]	; (80024ac <main+0x42c>)
 8002342:	f000 fea1 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "YawIN %.2f \n\r",YawINscaled);
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <main+0x47c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe f904 	bl	8000558 <__aeabi_f2d>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	496a      	ldr	r1, [pc, #424]	; (8002500 <main+0x480>)
 8002356:	4855      	ldr	r0, [pc, #340]	; (80024ac <main+0x42c>)
 8002358:	f007 fd1e 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800235c:	4853      	ldr	r0, [pc, #332]	; (80024ac <main+0x42c>)
 800235e:	f000 fe93 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 8002362:	4968      	ldr	r1, [pc, #416]	; (8002504 <main+0x484>)
 8002364:	4851      	ldr	r0, [pc, #324]	; (80024ac <main+0x42c>)
 8002366:	f007 fd17 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800236a:	4850      	ldr	r0, [pc, #320]	; (80024ac <main+0x42c>)
 800236c:	f000 fe8c 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Pitch=%.2f deg\n\r",mpuDataStr.Pitch);
 8002370:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <main+0x448>)
 8002372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe f8ef 	bl	8000558 <__aeabi_f2d>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4962      	ldr	r1, [pc, #392]	; (8002508 <main+0x488>)
 8002380:	484a      	ldr	r0, [pc, #296]	; (80024ac <main+0x42c>)
 8002382:	f007 fd09 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002386:	4849      	ldr	r0, [pc, #292]	; (80024ac <main+0x42c>)
 8002388:	f000 fe7e 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Roll=%.2f deg\n\r",mpuDataStr.Roll);
 800238c:	4b4e      	ldr	r3, [pc, #312]	; (80024c8 <main+0x448>)
 800238e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8e1 	bl	8000558 <__aeabi_f2d>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	495c      	ldr	r1, [pc, #368]	; (800250c <main+0x48c>)
 800239c:	4843      	ldr	r0, [pc, #268]	; (80024ac <main+0x42c>)
 800239e:	f007 fcfb 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80023a2:	4842      	ldr	r0, [pc, #264]	; (80024ac <main+0x42c>)
 80023a4:	f000 fe70 	bl	8003088 <WriteString>
	  //WriteString(UartTXbuff0);

	  //sprintf(UartTXbuff0, "Gyro Roll=%.2f deg\n\r",mpuDataStr.Angle_Gyro_Roll);
	  //WriteString(UartTXbuff0);

	  sprintf(UartTXbuff0, "Yaw-Gyro=%.2f deg\n\r",mpuDataStr.Angle_Gyro_Yaw);
 80023a8:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <main+0x448>)
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8d3 	bl	8000558 <__aeabi_f2d>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4956      	ldr	r1, [pc, #344]	; (8002510 <main+0x490>)
 80023b8:	483c      	ldr	r0, [pc, #240]	; (80024ac <main+0x42c>)
 80023ba:	f007 fced 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80023be:	483b      	ldr	r0, [pc, #236]	; (80024ac <main+0x42c>)
 80023c0:	f000 fe62 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Gyro Z speed=%.2f deg/s\n\r",mpuDataStr.AngleSpeed_Gyro_Z);
 80023c4:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <main+0x448>)
 80023c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8c5 	bl	8000558 <__aeabi_f2d>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4950      	ldr	r1, [pc, #320]	; (8002514 <main+0x494>)
 80023d4:	4835      	ldr	r0, [pc, #212]	; (80024ac <main+0x42c>)
 80023d6:	f007 fcdf 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80023da:	4834      	ldr	r0, [pc, #208]	; (80024ac <main+0x42c>)
 80023dc:	f000 fe54 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "YAW PID in=%.2f deg/s\n\r",YawPIDin);
 80023e0:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <main+0x498>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8b7 	bl	8000558 <__aeabi_f2d>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	494b      	ldr	r1, [pc, #300]	; (800251c <main+0x49c>)
 80023f0:	482e      	ldr	r0, [pc, #184]	; (80024ac <main+0x42c>)
 80023f2:	f007 fcd1 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80023f6:	482d      	ldr	r0, [pc, #180]	; (80024ac <main+0x42c>)
 80023f8:	f000 fe46 	bl	8003088 <WriteString>
	  //WriteString(UartTXbuff0);

	  //sprintf(UartTXbuff0, "Gyro Y speed=%.2f deg/s\n\r",mpuDataStr.AngleSpeed_Gyro_Y);
	  //WriteString(UartTXbuff0);

	  sprintf(UartTXbuff0, "\n\r" );
 80023fc:	4941      	ldr	r1, [pc, #260]	; (8002504 <main+0x484>)
 80023fe:	482b      	ldr	r0, [pc, #172]	; (80024ac <main+0x42c>)
 8002400:	f007 fcca 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002404:	4829      	ldr	r0, [pc, #164]	; (80024ac <main+0x42c>)
 8002406:	f000 fe3f 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Accel Pitch=%.2f deg\n\r",mpuDataStr.Angle_Accel_Pitch);
 800240a:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <main+0x448>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f8a2 	bl	8000558 <__aeabi_f2d>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4941      	ldr	r1, [pc, #260]	; (8002520 <main+0x4a0>)
 800241a:	4824      	ldr	r0, [pc, #144]	; (80024ac <main+0x42c>)
 800241c:	f007 fcbc 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002420:	4822      	ldr	r0, [pc, #136]	; (80024ac <main+0x42c>)
 8002422:	f000 fe31 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Accel Roll=%.2f deg\n\r",mpuDataStr.Angle_Accel_Roll);
 8002426:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <main+0x448>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe f894 	bl	8000558 <__aeabi_f2d>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	493b      	ldr	r1, [pc, #236]	; (8002524 <main+0x4a4>)
 8002436:	481d      	ldr	r0, [pc, #116]	; (80024ac <main+0x42c>)
 8002438:	f007 fcae 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800243c:	481b      	ldr	r0, [pc, #108]	; (80024ac <main+0x42c>)
 800243e:	f000 fe23 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 8002442:	4930      	ldr	r1, [pc, #192]	; (8002504 <main+0x484>)
 8002444:	4819      	ldr	r0, [pc, #100]	; (80024ac <main+0x42c>)
 8002446:	f007 fca7 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800244a:	4818      	ldr	r0, [pc, #96]	; (80024ac <main+0x42c>)
 800244c:	f000 fe1c 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Acc Raw %d %d %d \n\r",mpuDataStr.Accelerometer_X_RAW,mpuDataStr.Accelerometer_Y_RAW,mpuDataStr.Accelerometer_Z_RAW);
 8002450:	4b1d      	ldr	r3, [pc, #116]	; (80024c8 <main+0x448>)
 8002452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002456:	461a      	mov	r2, r3
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <main+0x448>)
 800245a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800245e:	4619      	mov	r1, r3
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <main+0x448>)
 8002462:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	460b      	mov	r3, r1
 800246a:	492f      	ldr	r1, [pc, #188]	; (8002528 <main+0x4a8>)
 800246c:	480f      	ldr	r0, [pc, #60]	; (80024ac <main+0x42c>)
 800246e:	f007 fc93 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002472:	480e      	ldr	r0, [pc, #56]	; (80024ac <main+0x42c>)
 8002474:	f000 fe08 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Gyro Raw %d %d %d \n\r",mpuDataStr.Gyroscope_X_RAW,mpuDataStr.Gyroscope_Y_RAW,mpuDataStr.Gyroscope_Z_RAW);
 8002478:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <main+0x448>)
 800247a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800247e:	461a      	mov	r2, r3
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <main+0x448>)
 8002482:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002486:	4619      	mov	r1, r3
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <main+0x448>)
 800248a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	460b      	mov	r3, r1
 8002492:	4926      	ldr	r1, [pc, #152]	; (800252c <main+0x4ac>)
 8002494:	e04c      	b.n	8002530 <main+0x4b0>
 8002496:	bf00      	nop
 8002498:	200003b4 	.word	0x200003b4
 800249c:	08020000 	.word	0x08020000
 80024a0:	200004b8 	.word	0x200004b8
 80024a4:	20000510 	.word	0x20000510
 80024a8:	0800dc2c 	.word	0x0800dc2c
 80024ac:	20000418 	.word	0x20000418
 80024b0:	40003800 	.word	0x40003800
 80024b4:	40020400 	.word	0x40020400
 80024b8:	20000410 	.word	0x20000410
 80024bc:	0800dfac 	.word	0x0800dfac
 80024c0:	20000840 	.word	0x20000840
 80024c4:	20000220 	.word	0x20000220
 80024c8:	20000324 	.word	0x20000324
 80024cc:	2000021c 	.word	0x2000021c
 80024d0:	20000880 	.word	0x20000880
 80024d4:	0800dc4c 	.word	0x0800dc4c
 80024d8:	0800dc54 	.word	0x0800dc54
 80024dc:	0800dc60 	.word	0x0800dc60
 80024e0:	0800dc68 	.word	0x0800dc68
 80024e4:	20000688 	.word	0x20000688
 80024e8:	0800dc7c 	.word	0x0800dc7c
 80024ec:	200007a0 	.word	0x200007a0
 80024f0:	0800dc90 	.word	0x0800dc90
 80024f4:	2000079c 	.word	0x2000079c
 80024f8:	0800dca0 	.word	0x0800dca0
 80024fc:	200006a0 	.word	0x200006a0
 8002500:	0800dcb0 	.word	0x0800dcb0
 8002504:	0800dcc0 	.word	0x0800dcc0
 8002508:	0800dcc4 	.word	0x0800dcc4
 800250c:	0800dcd8 	.word	0x0800dcd8
 8002510:	0800dce8 	.word	0x0800dce8
 8002514:	0800dcfc 	.word	0x0800dcfc
 8002518:	20000788 	.word	0x20000788
 800251c:	0800dd18 	.word	0x0800dd18
 8002520:	0800dd30 	.word	0x0800dd30
 8002524:	0800dd48 	.word	0x0800dd48
 8002528:	0800dd60 	.word	0x0800dd60
 800252c:	0800dd74 	.word	0x0800dd74
 8002530:	48a6      	ldr	r0, [pc, #664]	; (80027cc <main+0x74c>)
 8002532:	f007 fc31 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002536:	48a5      	ldr	r0, [pc, #660]	; (80027cc <main+0x74c>)
 8002538:	f000 fda6 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Gyro Offset %.1f %.1f %.1f \n\r",mpuDataStr.Offset_Gyro_X,mpuDataStr.Offset_Gyro_Y,mpuDataStr.Offset_Gyro_Z);
 800253c:	4ba4      	ldr	r3, [pc, #656]	; (80027d0 <main+0x750>)
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe f809 	bl	8000558 <__aeabi_f2d>
 8002546:	4680      	mov	r8, r0
 8002548:	4689      	mov	r9, r1
 800254a:	4ba1      	ldr	r3, [pc, #644]	; (80027d0 <main+0x750>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f802 	bl	8000558 <__aeabi_f2d>
 8002554:	4604      	mov	r4, r0
 8002556:	460d      	mov	r5, r1
 8002558:	4b9d      	ldr	r3, [pc, #628]	; (80027d0 <main+0x750>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd fffb 	bl	8000558 <__aeabi_f2d>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800256a:	e9cd 4500 	strd	r4, r5, [sp]
 800256e:	4642      	mov	r2, r8
 8002570:	464b      	mov	r3, r9
 8002572:	4998      	ldr	r1, [pc, #608]	; (80027d4 <main+0x754>)
 8002574:	4895      	ldr	r0, [pc, #596]	; (80027cc <main+0x74c>)
 8002576:	f007 fc0f 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800257a:	4894      	ldr	r0, [pc, #592]	; (80027cc <main+0x74c>)
 800257c:	f000 fd84 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Gyro Cal %.1f %.1f %.1f \n\r",mpuDataStr.Gyroscope_X_Cal,mpuDataStr.Gyroscope_Y_Cal,mpuDataStr.Gyroscope_Z_Cal);
 8002580:	4b93      	ldr	r3, [pc, #588]	; (80027d0 <main+0x750>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fd ffe7 	bl	8000558 <__aeabi_f2d>
 800258a:	4680      	mov	r8, r0
 800258c:	4689      	mov	r9, r1
 800258e:	4b90      	ldr	r3, [pc, #576]	; (80027d0 <main+0x750>)
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ffe0 	bl	8000558 <__aeabi_f2d>
 8002598:	4604      	mov	r4, r0
 800259a:	460d      	mov	r5, r1
 800259c:	4b8c      	ldr	r3, [pc, #560]	; (80027d0 <main+0x750>)
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd ffd9 	bl	8000558 <__aeabi_f2d>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025ae:	e9cd 4500 	strd	r4, r5, [sp]
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	4988      	ldr	r1, [pc, #544]	; (80027d8 <main+0x758>)
 80025b8:	4884      	ldr	r0, [pc, #528]	; (80027cc <main+0x74c>)
 80025ba:	f007 fbed 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80025be:	4883      	ldr	r0, [pc, #524]	; (80027cc <main+0x74c>)
 80025c0:	f000 fd62 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 80025c4:	4985      	ldr	r1, [pc, #532]	; (80027dc <main+0x75c>)
 80025c6:	4881      	ldr	r0, [pc, #516]	; (80027cc <main+0x74c>)
 80025c8:	f007 fbe6 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80025cc:	487f      	ldr	r0, [pc, #508]	; (80027cc <main+0x74c>)
 80025ce:	f000 fd5b 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "PWM 1:%u  2:%u  3:%u  4:%u   \n\r",PWM_Mot1,PWM_Mot2,PWM_Mot3,PWM_Mot4);
 80025d2:	4b83      	ldr	r3, [pc, #524]	; (80027e0 <main+0x760>)
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	4b83      	ldr	r3, [pc, #524]	; (80027e4 <main+0x764>)
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	4b83      	ldr	r3, [pc, #524]	; (80027e8 <main+0x768>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a83      	ldr	r2, [pc, #524]	; (80027ec <main+0x76c>)
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	9201      	str	r2, [sp, #4]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4603      	mov	r3, r0
 80025e8:	460a      	mov	r2, r1
 80025ea:	4981      	ldr	r1, [pc, #516]	; (80027f0 <main+0x770>)
 80025ec:	4877      	ldr	r0, [pc, #476]	; (80027cc <main+0x74c>)
 80025ee:	f007 fbd3 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80025f2:	4876      	ldr	r0, [pc, #472]	; (80027cc <main+0x74c>)
 80025f4:	f000 fd48 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Toggle %d %d %d %d %d %d  ",togg1,togg2,togg3,togg4,togg5,togg6);
 80025f8:	4b7e      	ldr	r3, [pc, #504]	; (80027f4 <main+0x774>)
 80025fa:	681c      	ldr	r4, [r3, #0]
 80025fc:	4b7e      	ldr	r3, [pc, #504]	; (80027f8 <main+0x778>)
 80025fe:	681d      	ldr	r5, [r3, #0]
 8002600:	4b7e      	ldr	r3, [pc, #504]	; (80027fc <main+0x77c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a7e      	ldr	r2, [pc, #504]	; (8002800 <main+0x780>)
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	497e      	ldr	r1, [pc, #504]	; (8002804 <main+0x784>)
 800260a:	6809      	ldr	r1, [r1, #0]
 800260c:	487e      	ldr	r0, [pc, #504]	; (8002808 <main+0x788>)
 800260e:	6800      	ldr	r0, [r0, #0]
 8002610:	9003      	str	r0, [sp, #12]
 8002612:	9102      	str	r1, [sp, #8]
 8002614:	9201      	str	r2, [sp, #4]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	462b      	mov	r3, r5
 800261a:	4622      	mov	r2, r4
 800261c:	497b      	ldr	r1, [pc, #492]	; (800280c <main+0x78c>)
 800261e:	486b      	ldr	r0, [pc, #428]	; (80027cc <main+0x74c>)
 8002620:	f007 fbba 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002624:	4869      	ldr	r0, [pc, #420]	; (80027cc <main+0x74c>)
 8002626:	f000 fd2f 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Potenc %d %d  ",potenc1,potenc2);
 800262a:	4b79      	ldr	r3, [pc, #484]	; (8002810 <main+0x790>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b79      	ldr	r3, [pc, #484]	; (8002814 <main+0x794>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4979      	ldr	r1, [pc, #484]	; (8002818 <main+0x798>)
 8002634:	4865      	ldr	r0, [pc, #404]	; (80027cc <main+0x74c>)
 8002636:	f007 fbaf 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800263a:	4864      	ldr	r0, [pc, #400]	; (80027cc <main+0x74c>)
 800263c:	f000 fd24 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "YL %d %d  YD %d %d \n\r",Ljoyupdown, Ljoyleftright, Djoyupdown, Djoyleftright);
 8002640:	4b76      	ldr	r3, [pc, #472]	; (800281c <main+0x79c>)
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	4b76      	ldr	r3, [pc, #472]	; (8002820 <main+0x7a0>)
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	4b76      	ldr	r3, [pc, #472]	; (8002824 <main+0x7a4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a76      	ldr	r2, [pc, #472]	; (8002828 <main+0x7a8>)
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	9201      	str	r2, [sp, #4]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	4603      	mov	r3, r0
 8002656:	460a      	mov	r2, r1
 8002658:	4974      	ldr	r1, [pc, #464]	; (800282c <main+0x7ac>)
 800265a:	485c      	ldr	r0, [pc, #368]	; (80027cc <main+0x74c>)
 800265c:	f007 fb9c 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002660:	485a      	ldr	r0, [pc, #360]	; (80027cc <main+0x74c>)
 8002662:	f000 fd11 	bl	8003088 <WriteString>

	  //ACTIVE PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Active  \n\r" );
 8002666:	4972      	ldr	r1, [pc, #456]	; (8002830 <main+0x7b0>)
 8002668:	4858      	ldr	r0, [pc, #352]	; (80027cc <main+0x74c>)
 800266a:	f007 fb95 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800266e:	4857      	ldr	r0, [pc, #348]	; (80027cc <main+0x74c>)
 8002670:	f000 fd0a 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch);
 8002674:	4b6f      	ldr	r3, [pc, #444]	; (8002834 <main+0x7b4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff6d 	bl	8000558 <__aeabi_f2d>
 800267e:	4680      	mov	r8, r0
 8002680:	4689      	mov	r9, r1
 8002682:	4b6c      	ldr	r3, [pc, #432]	; (8002834 <main+0x7b4>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f7fd ff66 	bl	8000558 <__aeabi_f2d>
 800268c:	4604      	mov	r4, r0
 800268e:	460d      	mov	r5, r1
 8002690:	4b68      	ldr	r3, [pc, #416]	; (8002834 <main+0x7b4>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff5f 	bl	8000558 <__aeabi_f2d>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026a2:	e9cd 4500 	strd	r4, r5, [sp]
 80026a6:	4642      	mov	r2, r8
 80026a8:	464b      	mov	r3, r9
 80026aa:	4963      	ldr	r1, [pc, #396]	; (8002838 <main+0x7b8>)
 80026ac:	4847      	ldr	r0, [pc, #284]	; (80027cc <main+0x74c>)
 80026ae:	f007 fb73 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80026b2:	4846      	ldr	r0, [pc, #280]	; (80027cc <main+0x74c>)
 80026b4:	f000 fce8 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll);
 80026b8:	4b5e      	ldr	r3, [pc, #376]	; (8002834 <main+0x7b4>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd ff4b 	bl	8000558 <__aeabi_f2d>
 80026c2:	4680      	mov	r8, r0
 80026c4:	4689      	mov	r9, r1
 80026c6:	4b5b      	ldr	r3, [pc, #364]	; (8002834 <main+0x7b4>)
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff44 	bl	8000558 <__aeabi_f2d>
 80026d0:	4604      	mov	r4, r0
 80026d2:	460d      	mov	r5, r1
 80026d4:	4b57      	ldr	r3, [pc, #348]	; (8002834 <main+0x7b4>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff3d 	bl	8000558 <__aeabi_f2d>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026e6:	e9cd 4500 	strd	r4, r5, [sp]
 80026ea:	4642      	mov	r2, r8
 80026ec:	464b      	mov	r3, r9
 80026ee:	4953      	ldr	r1, [pc, #332]	; (800283c <main+0x7bc>)
 80026f0:	4836      	ldr	r0, [pc, #216]	; (80027cc <main+0x74c>)
 80026f2:	f007 fb51 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80026f6:	4835      	ldr	r0, [pc, #212]	; (80027cc <main+0x74c>)
 80026f8:	f000 fcc6 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw);
 80026fc:	4b4d      	ldr	r3, [pc, #308]	; (8002834 <main+0x7b4>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fd ff29 	bl	8000558 <__aeabi_f2d>
 8002706:	4680      	mov	r8, r0
 8002708:	4689      	mov	r9, r1
 800270a:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <main+0x7b4>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd ff22 	bl	8000558 <__aeabi_f2d>
 8002714:	4604      	mov	r4, r0
 8002716:	460d      	mov	r5, r1
 8002718:	4b46      	ldr	r3, [pc, #280]	; (8002834 <main+0x7b4>)
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ff1b 	bl	8000558 <__aeabi_f2d>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800272a:	e9cd 4500 	strd	r4, r5, [sp]
 800272e:	4642      	mov	r2, r8
 8002730:	464b      	mov	r3, r9
 8002732:	4943      	ldr	r1, [pc, #268]	; (8002840 <main+0x7c0>)
 8002734:	4825      	ldr	r0, [pc, #148]	; (80027cc <main+0x74c>)
 8002736:	f007 fb2f 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800273a:	4824      	ldr	r0, [pc, #144]	; (80027cc <main+0x74c>)
 800273c:	f000 fca4 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataActive.pid_max_pitch, FlashDataActive.pid_i_max_pitch);
 8002740:	4b3c      	ldr	r3, [pc, #240]	; (8002834 <main+0x7b4>)
 8002742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002744:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <main+0x7b4>)
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	493e      	ldr	r1, [pc, #248]	; (8002844 <main+0x7c4>)
 800274a:	4820      	ldr	r0, [pc, #128]	; (80027cc <main+0x74c>)
 800274c:	f007 fb24 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002750:	481e      	ldr	r0, [pc, #120]	; (80027cc <main+0x74c>)
 8002752:	f000 fc99 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataActive.pid_max_roll, FlashDataActive.pid_i_max_roll);
 8002756:	4b37      	ldr	r3, [pc, #220]	; (8002834 <main+0x7b4>)
 8002758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275a:	4b36      	ldr	r3, [pc, #216]	; (8002834 <main+0x7b4>)
 800275c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275e:	493a      	ldr	r1, [pc, #232]	; (8002848 <main+0x7c8>)
 8002760:	481a      	ldr	r0, [pc, #104]	; (80027cc <main+0x74c>)
 8002762:	f007 fb19 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002766:	4819      	ldr	r0, [pc, #100]	; (80027cc <main+0x74c>)
 8002768:	f000 fc8e 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataActive.pid_max_yaw, FlashDataActive.pid_i_max_yaw);
 800276c:	4b31      	ldr	r3, [pc, #196]	; (8002834 <main+0x7b4>)
 800276e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002770:	4b30      	ldr	r3, [pc, #192]	; (8002834 <main+0x7b4>)
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	4935      	ldr	r1, [pc, #212]	; (800284c <main+0x7cc>)
 8002776:	4815      	ldr	r0, [pc, #84]	; (80027cc <main+0x74c>)
 8002778:	f007 fb0e 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800277c:	4813      	ldr	r0, [pc, #76]	; (80027cc <main+0x74c>)
 800277e:	f000 fc83 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataActive.maxpitchdegree);
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <main+0x7b4>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4618      	mov	r0, r3
 8002788:	f7fd fee6 	bl	8000558 <__aeabi_f2d>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	492f      	ldr	r1, [pc, #188]	; (8002850 <main+0x7d0>)
 8002792:	480e      	ldr	r0, [pc, #56]	; (80027cc <main+0x74c>)
 8002794:	f007 fb00 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002798:	480c      	ldr	r0, [pc, #48]	; (80027cc <main+0x74c>)
 800279a:	f000 fc75 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataActive.maxrolldegree);
 800279e:	4b25      	ldr	r3, [pc, #148]	; (8002834 <main+0x7b4>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fd fed8 	bl	8000558 <__aeabi_f2d>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	4929      	ldr	r1, [pc, #164]	; (8002854 <main+0x7d4>)
 80027ae:	4807      	ldr	r0, [pc, #28]	; (80027cc <main+0x74c>)
 80027b0:	f007 faf2 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80027b4:	4805      	ldr	r0, [pc, #20]	; (80027cc <main+0x74c>)
 80027b6:	f000 fc67 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataActive.maxyawdegree);
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <main+0x7b4>)
 80027bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd feca 	bl	8000558 <__aeabi_f2d>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	e046      	b.n	8002858 <main+0x7d8>
 80027ca:	bf00      	nop
 80027cc:	20000418 	.word	0x20000418
 80027d0:	20000324 	.word	0x20000324
 80027d4:	0800dd8c 	.word	0x0800dd8c
 80027d8:	0800ddac 	.word	0x0800ddac
 80027dc:	0800dcc0 	.word	0x0800dcc0
 80027e0:	200007b0 	.word	0x200007b0
 80027e4:	2000068c 	.word	0x2000068c
 80027e8:	20000680 	.word	0x20000680
 80027ec:	2000077c 	.word	0x2000077c
 80027f0:	0800ddc8 	.word	0x0800ddc8
 80027f4:	200004a8 	.word	0x200004a8
 80027f8:	2000056c 	.word	0x2000056c
 80027fc:	200002fc 	.word	0x200002fc
 8002800:	200004b4 	.word	0x200004b4
 8002804:	2000047c 	.word	0x2000047c
 8002808:	20000300 	.word	0x20000300
 800280c:	0800dde8 	.word	0x0800dde8
 8002810:	2000050c 	.word	0x2000050c
 8002814:	20000568 	.word	0x20000568
 8002818:	0800de04 	.word	0x0800de04
 800281c:	200004ac 	.word	0x200004ac
 8002820:	200004a0 	.word	0x200004a0
 8002824:	20000564 	.word	0x20000564
 8002828:	200002f8 	.word	0x200002f8
 800282c:	0800de14 	.word	0x0800de14
 8002830:	0800de2c 	.word	0x0800de2c
 8002834:	200004b8 	.word	0x200004b8
 8002838:	0800de48 	.word	0x0800de48
 800283c:	0800de68 	.word	0x0800de68
 8002840:	0800de88 	.word	0x0800de88
 8002844:	0800dea4 	.word	0x0800dea4
 8002848:	0800dec0 	.word	0x0800dec0
 800284c:	0800ded8 	.word	0x0800ded8
 8002850:	0800def0 	.word	0x0800def0
 8002854:	0800df0c 	.word	0x0800df0c
 8002858:	4988      	ldr	r1, [pc, #544]	; (8002a7c <main+0x9fc>)
 800285a:	4889      	ldr	r0, [pc, #548]	; (8002a80 <main+0xa00>)
 800285c:	f007 fa9c 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002860:	4887      	ldr	r0, [pc, #540]	; (8002a80 <main+0xa00>)
 8002862:	f000 fc11 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataActive.maxthrottle, FlashDataActive.minthrottle);
 8002866:	4b87      	ldr	r3, [pc, #540]	; (8002a84 <main+0xa04>)
 8002868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fe74 	bl	8000558 <__aeabi_f2d>
 8002870:	4604      	mov	r4, r0
 8002872:	460d      	mov	r5, r1
 8002874:	4b83      	ldr	r3, [pc, #524]	; (8002a84 <main+0xa04>)
 8002876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fe6d 	bl	8000558 <__aeabi_f2d>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	e9cd 2300 	strd	r2, r3, [sp]
 8002886:	4622      	mov	r2, r4
 8002888:	462b      	mov	r3, r5
 800288a:	497f      	ldr	r1, [pc, #508]	; (8002a88 <main+0xa08>)
 800288c:	487c      	ldr	r0, [pc, #496]	; (8002a80 <main+0xa00>)
 800288e:	f007 fa83 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002892:	487b      	ldr	r0, [pc, #492]	; (8002a80 <main+0xa00>)
 8002894:	f000 fbf8 	bl	8003088 <WriteString>


	  //FLASH PID CONSTANTS
	  sprintf(UartTXbuff0, "\n\rPID Constants Flash  \n\r" );
 8002898:	497c      	ldr	r1, [pc, #496]	; (8002a8c <main+0xa0c>)
 800289a:	4879      	ldr	r0, [pc, #484]	; (8002a80 <main+0xa00>)
 800289c:	f007 fa7c 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80028a0:	4877      	ldr	r0, [pc, #476]	; (8002a80 <main+0xa00>)
 80028a2:	f000 fbf1 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Pitch P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_pitch, FlashDataFlash.pid_i_gain_pitch, FlashDataFlash.pid_d_gain_pitch);
 80028a6:	4b7a      	ldr	r3, [pc, #488]	; (8002a90 <main+0xa10>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fd fe54 	bl	8000558 <__aeabi_f2d>
 80028b0:	4680      	mov	r8, r0
 80028b2:	4689      	mov	r9, r1
 80028b4:	4b76      	ldr	r3, [pc, #472]	; (8002a90 <main+0xa10>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fd fe4d 	bl	8000558 <__aeabi_f2d>
 80028be:	4604      	mov	r4, r0
 80028c0:	460d      	mov	r5, r1
 80028c2:	4b73      	ldr	r3, [pc, #460]	; (8002a90 <main+0xa10>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe46 	bl	8000558 <__aeabi_f2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80028d4:	e9cd 4500 	strd	r4, r5, [sp]
 80028d8:	4642      	mov	r2, r8
 80028da:	464b      	mov	r3, r9
 80028dc:	496d      	ldr	r1, [pc, #436]	; (8002a94 <main+0xa14>)
 80028de:	4868      	ldr	r0, [pc, #416]	; (8002a80 <main+0xa00>)
 80028e0:	f007 fa5a 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80028e4:	4866      	ldr	r0, [pc, #408]	; (8002a80 <main+0xa00>)
 80028e6:	f000 fbcf 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Roll P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_roll, FlashDataFlash.pid_i_gain_roll, FlashDataFlash.pid_d_gain_roll);
 80028ea:	4b69      	ldr	r3, [pc, #420]	; (8002a90 <main+0xa10>)
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd fe32 	bl	8000558 <__aeabi_f2d>
 80028f4:	4680      	mov	r8, r0
 80028f6:	4689      	mov	r9, r1
 80028f8:	4b65      	ldr	r3, [pc, #404]	; (8002a90 <main+0xa10>)
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7fd fe2b 	bl	8000558 <__aeabi_f2d>
 8002902:	4604      	mov	r4, r0
 8002904:	460d      	mov	r5, r1
 8002906:	4b62      	ldr	r3, [pc, #392]	; (8002a90 <main+0xa10>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe24 	bl	8000558 <__aeabi_f2d>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002918:	e9cd 4500 	strd	r4, r5, [sp]
 800291c:	4642      	mov	r2, r8
 800291e:	464b      	mov	r3, r9
 8002920:	495d      	ldr	r1, [pc, #372]	; (8002a98 <main+0xa18>)
 8002922:	4857      	ldr	r0, [pc, #348]	; (8002a80 <main+0xa00>)
 8002924:	f007 fa38 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002928:	4855      	ldr	r0, [pc, #340]	; (8002a80 <main+0xa00>)
 800292a:	f000 fbad 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Yaw P=%.2f I=%.5f D=%.2f \n\r",FlashDataFlash.pid_p_gain_yaw, FlashDataFlash.pid_i_gain_yaw, FlashDataFlash.pid_d_gain_yaw);
 800292e:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <main+0xa10>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fe10 	bl	8000558 <__aeabi_f2d>
 8002938:	4680      	mov	r8, r0
 800293a:	4689      	mov	r9, r1
 800293c:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <main+0xa10>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fe09 	bl	8000558 <__aeabi_f2d>
 8002946:	4604      	mov	r4, r0
 8002948:	460d      	mov	r5, r1
 800294a:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <main+0xa10>)
 800294c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fe02 	bl	8000558 <__aeabi_f2d>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800295c:	e9cd 4500 	strd	r4, r5, [sp]
 8002960:	4642      	mov	r2, r8
 8002962:	464b      	mov	r3, r9
 8002964:	494d      	ldr	r1, [pc, #308]	; (8002a9c <main+0xa1c>)
 8002966:	4846      	ldr	r0, [pc, #280]	; (8002a80 <main+0xa00>)
 8002968:	f007 fa16 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 800296c:	4844      	ldr	r0, [pc, #272]	; (8002a80 <main+0xa00>)
 800296e:	f000 fb8b 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max %d Max I %d \n\r",FlashDataFlash.pid_max_pitch, FlashDataFlash.pid_i_max_pitch);
 8002972:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <main+0xa10>)
 8002974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002976:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <main+0xa10>)
 8002978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297a:	4949      	ldr	r1, [pc, #292]	; (8002aa0 <main+0xa20>)
 800297c:	4840      	ldr	r0, [pc, #256]	; (8002a80 <main+0xa00>)
 800297e:	f007 fa0b 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002982:	483f      	ldr	r0, [pc, #252]	; (8002a80 <main+0xa00>)
 8002984:	f000 fb80 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max %d Max I %d \n\r",FlashDataFlash.pid_max_roll, FlashDataFlash.pid_i_max_roll);
 8002988:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <main+0xa10>)
 800298a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800298c:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <main+0xa10>)
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	4944      	ldr	r1, [pc, #272]	; (8002aa4 <main+0xa24>)
 8002992:	483b      	ldr	r0, [pc, #236]	; (8002a80 <main+0xa00>)
 8002994:	f007 fa00 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002998:	4839      	ldr	r0, [pc, #228]	; (8002a80 <main+0xa00>)
 800299a:	f000 fb75 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max %d Max I %d \n\r",FlashDataFlash.pid_max_yaw, FlashDataFlash.pid_i_max_yaw);
 800299e:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <main+0xa10>)
 80029a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029a2:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <main+0xa10>)
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	4940      	ldr	r1, [pc, #256]	; (8002aa8 <main+0xa28>)
 80029a8:	4835      	ldr	r0, [pc, #212]	; (8002a80 <main+0xa00>)
 80029aa:	f007 f9f5 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80029ae:	4834      	ldr	r0, [pc, #208]	; (8002a80 <main+0xa00>)
 80029b0:	f000 fb6a 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Pitch Max Degree %.2f \n\r",FlashDataFlash.maxpitchdegree);
 80029b4:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <main+0xa10>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fdcd 	bl	8000558 <__aeabi_f2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	493a      	ldr	r1, [pc, #232]	; (8002aac <main+0xa2c>)
 80029c4:	482e      	ldr	r0, [pc, #184]	; (8002a80 <main+0xa00>)
 80029c6:	f007 f9e7 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80029ca:	482d      	ldr	r0, [pc, #180]	; (8002a80 <main+0xa00>)
 80029cc:	f000 fb5c 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Roll Max Degree %.2f \n\r",FlashDataFlash.maxrolldegree);
 80029d0:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <main+0xa10>)
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fdbf 	bl	8000558 <__aeabi_f2d>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4934      	ldr	r1, [pc, #208]	; (8002ab0 <main+0xa30>)
 80029e0:	4827      	ldr	r0, [pc, #156]	; (8002a80 <main+0xa00>)
 80029e2:	f007 f9d9 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 80029e6:	4826      	ldr	r0, [pc, #152]	; (8002a80 <main+0xa00>)
 80029e8:	f000 fb4e 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Yaw Max Degree %.2f \n\r",FlashDataFlash.maxyawdegree);
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <main+0xa10>)
 80029ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7fd fdb1 	bl	8000558 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4920      	ldr	r1, [pc, #128]	; (8002a7c <main+0x9fc>)
 80029fc:	4820      	ldr	r0, [pc, #128]	; (8002a80 <main+0xa00>)
 80029fe:	f007 f9cb 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002a02:	481f      	ldr	r0, [pc, #124]	; (8002a80 <main+0xa00>)
 8002a04:	f000 fb40 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataFlash.maxthrottle, FlashDataFlash.minthrottle);
 8002a08:	4b21      	ldr	r3, [pc, #132]	; (8002a90 <main+0xa10>)
 8002a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fda3 	bl	8000558 <__aeabi_f2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <main+0xa10>)
 8002a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fd9c 	bl	8000558 <__aeabi_f2d>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	e9cd 2300 	strd	r2, r3, [sp]
 8002a28:	4622      	mov	r2, r4
 8002a2a:	462b      	mov	r3, r5
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <main+0xa08>)
 8002a2e:	4814      	ldr	r0, [pc, #80]	; (8002a80 <main+0xa00>)
 8002a30:	f007 f9b2 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002a34:	4812      	ldr	r0, [pc, #72]	; (8002a80 <main+0xa00>)
 8002a36:	f000 fb27 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "\n\r" );
 8002a3a:	491e      	ldr	r1, [pc, #120]	; (8002ab4 <main+0xa34>)
 8002a3c:	4810      	ldr	r0, [pc, #64]	; (8002a80 <main+0xa00>)
 8002a3e:	f007 f9ab 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002a42:	480f      	ldr	r0, [pc, #60]	; (8002a80 <main+0xa00>)
 8002a44:	f000 fb20 	bl	8003088 <WriteString>

	  sprintf(UartTXbuff0, "watch %d %d %d %d %d %d\n\r",watch1,watch2,watch3,watch4,watch5,watch6);
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <main+0xa38>)
 8002a4a:	681c      	ldr	r4, [r3, #0]
 8002a4c:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <main+0xa3c>)
 8002a4e:	681d      	ldr	r5, [r3, #0]
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <main+0xa40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <main+0xa44>)
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	491b      	ldr	r1, [pc, #108]	; (8002ac8 <main+0xa48>)
 8002a5a:	6809      	ldr	r1, [r1, #0]
 8002a5c:	481b      	ldr	r0, [pc, #108]	; (8002acc <main+0xa4c>)
 8002a5e:	6800      	ldr	r0, [r0, #0]
 8002a60:	9003      	str	r0, [sp, #12]
 8002a62:	9102      	str	r1, [sp, #8]
 8002a64:	9201      	str	r2, [sp, #4]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	462b      	mov	r3, r5
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	4918      	ldr	r1, [pc, #96]	; (8002ad0 <main+0xa50>)
 8002a6e:	4804      	ldr	r0, [pc, #16]	; (8002a80 <main+0xa00>)
 8002a70:	f007 f992 	bl	8009d98 <siprintf>
	  WriteString(UartTXbuff0);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <main+0xa00>)
 8002a76:	f000 fb07 	bl	8003088 <WriteString>
	  HAL_Delay(100);
 8002a7a:	e416      	b.n	80022aa <main+0x22a>
 8002a7c:	0800df24 	.word	0x0800df24
 8002a80:	20000418 	.word	0x20000418
 8002a84:	200004b8 	.word	0x200004b8
 8002a88:	0800df3c 	.word	0x0800df3c
 8002a8c:	0800df5c 	.word	0x0800df5c
 8002a90:	20000510 	.word	0x20000510
 8002a94:	0800de48 	.word	0x0800de48
 8002a98:	0800de68 	.word	0x0800de68
 8002a9c:	0800de88 	.word	0x0800de88
 8002aa0:	0800dea4 	.word	0x0800dea4
 8002aa4:	0800dec0 	.word	0x0800dec0
 8002aa8:	0800ded8 	.word	0x0800ded8
 8002aac:	0800def0 	.word	0x0800def0
 8002ab0:	0800df0c 	.word	0x0800df0c
 8002ab4:	0800dcc0 	.word	0x0800dcc0
 8002ab8:	20000414 	.word	0x20000414
 8002abc:	20000408 	.word	0x20000408
 8002ac0:	200004b0 	.word	0x200004b0
 8002ac4:	2000040c 	.word	0x2000040c
 8002ac8:	20000570 	.word	0x20000570
 8002acc:	200004a4 	.word	0x200004a4
 8002ad0:	0800df78 	.word	0x0800df78

08002ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b094      	sub	sp, #80	; 0x50
 8002ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ada:	f107 0320 	add.w	r3, r7, #32
 8002ade:	2230      	movs	r2, #48	; 0x30
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f006 fce6 	bl	80094b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ae8:	f107 030c 	add.w	r3, r7, #12
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <SystemClock_Config+0xcc>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <SystemClock_Config+0xcc>)
 8002b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b06:	6413      	str	r3, [r2, #64]	; 0x40
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <SystemClock_Config+0xcc>)
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b14:	2300      	movs	r3, #0
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <SystemClock_Config+0xd0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b20:	4a20      	ldr	r2, [pc, #128]	; (8002ba4 <SystemClock_Config+0xd0>)
 8002b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <SystemClock_Config+0xd0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b34:	2301      	movs	r3, #1
 8002b36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002b48:	2319      	movs	r3, #25
 8002b4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b4c:	23a8      	movs	r3, #168	; 0xa8
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b50:	2302      	movs	r3, #2
 8002b52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002b54:	2304      	movs	r3, #4
 8002b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b58:	f107 0320 	add.w	r3, r7, #32
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 ffd9 	bl	8006b14 <HAL_RCC_OscConfig>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002b68:	f000 fac2 	bl	80030f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b70:	2302      	movs	r3, #2
 8002b72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b74:	2300      	movs	r3, #0
 8002b76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b82:	f107 030c 	add.w	r3, r7, #12
 8002b86:	2102      	movs	r1, #2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 fa33 	bl	8006ff4 <HAL_RCC_ClockConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002b94:	f000 faac 	bl	80030f0 <Error_Handler>
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3750      	adds	r7, #80	; 0x50
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40007000 	.word	0x40007000

08002ba8 <WriteFlashData>:

/* USER CODE BEGIN 4 */

//Write Data into Flash starting from given address------------------------------------------------------------------
void WriteFlashData(uint32_t StartAddr, uint32_t Sectornumb, struct FlashDatastruct *p)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
	HAL_FLASH_Unlock();
 8002bb4:	f003 faf8 	bl	80061a8 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(Sectornumb, FLASH_VOLTAGE_RANGE_3);
 8002bb8:	2102      	movs	r1, #2
 8002bba:	68b8      	ldr	r0, [r7, #8]
 8002bbc:	f003 fc66 	bl	800648c <FLASH_Erase_Sector>

	sprintf(UartTXbuff0,"Flash Erased \n\r");
 8002bc0:	49ad      	ldr	r1, [pc, #692]	; (8002e78 <WriteFlashData+0x2d0>)
 8002bc2:	48ae      	ldr	r0, [pc, #696]	; (8002e7c <WriteFlashData+0x2d4>)
 8002bc4:	f007 f8e8 	bl	8009d98 <siprintf>
	WriteString(UartTXbuff0);
 8002bc8:	48ac      	ldr	r0, [pc, #688]	; (8002e7c <WriteFlashData+0x2d4>)
 8002bca:	f000 fa5d 	bl	8003088 <WriteString>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr, p->controlData);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	68f9      	ldr	r1, [r7, #12]
 8002bda:	2002      	movs	r0, #2
 8002bdc:	f003 fa90 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+4, (uint32_t) ( p->pid_p_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1d19      	adds	r1, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bea:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002e80 <WriteFlashData+0x2d8>
 8002bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf6:	ee17 3a90 	vmov	r3, s15
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	2002      	movs	r0, #2
 8002c02:	f003 fa7d 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+8, (uint32_t) ( p->pid_i_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f103 0108 	add.w	r1, r3, #8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c12:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002e80 <WriteFlashData+0x2d8>
 8002c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1e:	ee17 3a90 	vmov	r3, s15
 8002c22:	461a      	mov	r2, r3
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	2002      	movs	r0, #2
 8002c2a:	f003 fa69 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+12,(uint32_t) ( p->pid_d_gain_pitch * FLASHCONSTANTMULTIPLIER) );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f103 010c 	add.w	r1, r3, #12
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c3a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002e80 <WriteFlashData+0x2d8>
 8002c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c46:	ee17 3a90 	vmov	r3, s15
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	2002      	movs	r0, #2
 8002c52:	f003 fa55 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+16,(uint32_t) ( p->pid_p_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f103 0110 	add.w	r1, r3, #16
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c62:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002e80 <WriteFlashData+0x2d8>
 8002c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c6e:	ee17 3a90 	vmov	r3, s15
 8002c72:	461a      	mov	r2, r3
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f003 fa41 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+20,(uint32_t) ( p->pid_i_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f103 0114 	add.w	r1, r3, #20
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c8a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8002e80 <WriteFlashData+0x2d8>
 8002c8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c96:	ee17 3a90 	vmov	r3, s15
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	f003 fa2d 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+24,(uint32_t) ( p->pid_d_gain_roll * FLASHCONSTANTMULTIPLIER) );
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f103 0118 	add.w	r1, r3, #24
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cb2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002e80 <WriteFlashData+0x2d8>
 8002cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cbe:	ee17 3a90 	vmov	r3, s15
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f003 fa19 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+28,(uint32_t) ( p->pid_p_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f103 011c 	add.w	r1, r3, #28
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cda:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8002e80 <WriteFlashData+0x2d8>
 8002cde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ce6:	ee17 3a90 	vmov	r3, s15
 8002cea:	461a      	mov	r2, r3
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	2002      	movs	r0, #2
 8002cf2:	f003 fa05 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+32,(uint32_t) ( p->pid_i_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f103 0120 	add.w	r1, r3, #32
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d02:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002e80 <WriteFlashData+0x2d8>
 8002d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d0e:	ee17 3a90 	vmov	r3, s15
 8002d12:	461a      	mov	r2, r3
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	2002      	movs	r0, #2
 8002d1a:	f003 f9f1 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+36,(uint32_t) ( p->pid_d_gain_yaw * FLASHCONSTANTMULTIPLIER) );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d2a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002e80 <WriteFlashData+0x2d8>
 8002d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d36:	ee17 3a90 	vmov	r3, s15
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	2002      	movs	r0, #2
 8002d42:	f003 f9dd 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+40, p->pid_max_pitch);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	461a      	mov	r2, r3
 8002d52:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d56:	2002      	movs	r0, #2
 8002d58:	f003 f9d2 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+44, p->pid_i_max_pitch);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	461a      	mov	r2, r3
 8002d68:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d6c:	2002      	movs	r0, #2
 8002d6e:	f003 f9c7 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+48, p->pid_max_roll);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d82:	2002      	movs	r0, #2
 8002d84:	f003 f9bc 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+52, p->pid_i_max_roll);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d92:	461a      	mov	r2, r3
 8002d94:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002d98:	2002      	movs	r0, #2
 8002d9a:	f003 f9b1 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+56, p->pid_max_yaw);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	461a      	mov	r2, r3
 8002daa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dae:	2002      	movs	r0, #2
 8002db0:	f003 f9a6 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+60, p->pid_i_max_yaw);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	f003 f99b 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+64,(uint32_t)(p->maxpitchdegree) );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dda:	ee17 3a90 	vmov	r3, s15
 8002dde:	461a      	mov	r2, r3
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	2002      	movs	r0, #2
 8002de6:	f003 f98b 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+68,(uint32_t)(p->maxrolldegree) );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfa:	ee17 3a90 	vmov	r3, s15
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	2002      	movs	r0, #2
 8002e06:	f003 f97b 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+72,(uint32_t)(p->maxyawdegree) );
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002e16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e1a:	ee17 3a90 	vmov	r3, s15
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f04f 0300 	mov.w	r3, #0
 8002e24:	2002      	movs	r0, #2
 8002e26:	f003 f96b 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+76,(uint32_t)(p->minthrottle) );
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3a:	ee17 3a90 	vmov	r3, s15
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	2002      	movs	r0, #2
 8002e46:	f003 f95b 	bl	8006100 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,StartAddr+80,(uint32_t)(p->maxthrottle) );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5a:	ee17 3a90 	vmov	r3, s15
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	2002      	movs	r0, #2
 8002e66:	f003 f94b 	bl	8006100 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8002e6a:	f003 f9bf 	bl	80061ec <HAL_FLASH_Lock>
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	0800df94 	.word	0x0800df94
 8002e7c:	20000418 	.word	0x20000418
 8002e80:	47c35000 	.word	0x47c35000

08002e84 <EraseFlashData>:

void EraseFlashData(uint32_t Sectornumb)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8002e8c:	f003 f98c 	bl	80061a8 <HAL_FLASH_Unlock>

	FLASH_Erase_Sector(Sectornumb, FLASH_VOLTAGE_RANGE_3);
 8002e90:	2102      	movs	r1, #2
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f003 fafa 	bl	800648c <FLASH_Erase_Sector>

	HAL_FLASH_Lock();
 8002e98:	f003 f9a8 	bl	80061ec <HAL_FLASH_Lock>
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <CheckFlashData>:


//Check if Data on given address matches control word
uint32_t CheckFlashData(uint32_t StartAddr)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	return *(( uint32_t *) (StartAddr) );
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <ReadFlashData>:

//Read Data from Flash
void ReadFlashData(uint32_t StartAddr, struct FlashDatastruct *p)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	p->controlData= *(( uint32_t *) (StartAddr) );
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	601a      	str	r2, [r3, #0]
	p->pid_p_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+4) )) )/FLASHCONSTANTMULTIPLIER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	ee07 3a90 	vmov	s15, r3
 8002ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002edc:	eddf 6a69 	vldr	s13, [pc, #420]	; 8003084 <ReadFlashData+0x1c8>
 8002ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	edc3 7a01 	vstr	s15, [r3, #4]
	p->pid_i_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+8) )) )/FLASHCONSTANTMULTIPLIER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3308      	adds	r3, #8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	ee07 3a90 	vmov	s15, r3
 8002ef4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ef8:	eddf 6a62 	vldr	s13, [pc, #392]	; 8003084 <ReadFlashData+0x1c8>
 8002efc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	edc3 7a02 	vstr	s15, [r3, #8]
	p->pid_d_gain_pitch=(float)( (*(( uint32_t *) (StartAddr+12) )) )/FLASHCONSTANTMULTIPLIER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	ee07 3a90 	vmov	s15, r3
 8002f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f14:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8003084 <ReadFlashData+0x1c8>
 8002f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	edc3 7a03 	vstr	s15, [r3, #12]
	p->pid_p_gain_roll=(float)( (*(( uint32_t *) (StartAddr+16) ))  )/FLASHCONSTANTMULTIPLIER;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	3310      	adds	r3, #16
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	ee07 3a90 	vmov	s15, r3
 8002f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f30:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003084 <ReadFlashData+0x1c8>
 8002f34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	edc3 7a04 	vstr	s15, [r3, #16]
	p->pid_i_gain_roll=(float)( (*(( uint32_t *) (StartAddr+20) )) )/FLASHCONSTANTMULTIPLIER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3314      	adds	r3, #20
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	ee07 3a90 	vmov	s15, r3
 8002f48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f4c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8003084 <ReadFlashData+0x1c8>
 8002f50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	edc3 7a05 	vstr	s15, [r3, #20]
	p->pid_d_gain_roll=(float)( (*(( uint32_t *) (StartAddr+24) )) )/FLASHCONSTANTMULTIPLIER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3318      	adds	r3, #24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f68:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003084 <ReadFlashData+0x1c8>
 8002f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	edc3 7a06 	vstr	s15, [r3, #24]
	p->pid_p_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+28) )) )/FLASHCONSTANTMULTIPLIER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	331c      	adds	r3, #28
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	ee07 3a90 	vmov	s15, r3
 8002f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f84:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8003084 <ReadFlashData+0x1c8>
 8002f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	edc3 7a07 	vstr	s15, [r3, #28]
	p->pid_i_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+32) )) )/FLASHCONSTANTMULTIPLIER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3320      	adds	r3, #32
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	ee07 3a90 	vmov	s15, r3
 8002f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fa0:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003084 <ReadFlashData+0x1c8>
 8002fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	edc3 7a08 	vstr	s15, [r3, #32]
	p->pid_d_gain_yaw=(float)( (*(( uint32_t *) (StartAddr+36) )) )/FLASHCONSTANTMULTIPLIER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3324      	adds	r3, #36	; 0x24
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fbc:	eddf 6a31 	vldr	s13, [pc, #196]	; 8003084 <ReadFlashData+0x1c8>
 8002fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	p->pid_max_pitch=*(( uint32_t *) (StartAddr+40) );
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3328      	adds	r3, #40	; 0x28
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
	p->pid_i_max_pitch=*(( uint32_t *) (StartAddr+44) );
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	332c      	adds	r3, #44	; 0x2c
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	p->pid_max_roll=*(( uint32_t *) (StartAddr+48) );
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3330      	adds	r3, #48	; 0x30
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
	p->pid_i_max_roll=*(( uint32_t *) (StartAddr+52) );
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3334      	adds	r3, #52	; 0x34
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	635a      	str	r2, [r3, #52]	; 0x34
	p->pid_max_yaw=*(( uint32_t *) (StartAddr+56) );
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	3338      	adds	r3, #56	; 0x38
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	639a      	str	r2, [r3, #56]	; 0x38
	p->pid_i_max_yaw=*(( uint32_t *) (StartAddr+60) );
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	333c      	adds	r3, #60	; 0x3c
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	63da      	str	r2, [r3, #60]	; 0x3c
	p->maxpitchdegree=(float)( (*(( uint32_t *) (StartAddr+64) )) );
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3340      	adds	r3, #64	; 0x40
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	p->maxrolldegree=(float)( (*(( uint32_t *) (StartAddr+68) )) );
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3344      	adds	r3, #68	; 0x44
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	p->maxyawdegree=(float)( (*(( uint32_t *) (StartAddr+72) )) );
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3348      	adds	r3, #72	; 0x48
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	ee07 3a90 	vmov	s15, r3
 8003044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	p->minthrottle=(float)( (*(( uint32_t *) (StartAddr+76) )) );
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	334c      	adds	r3, #76	; 0x4c
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	ee07 3a90 	vmov	s15, r3
 8003058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	p->maxthrottle=(float)( (*(( uint32_t *) (StartAddr+80) )) );
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3350      	adds	r3, #80	; 0x50
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	ee07 3a90 	vmov	s15, r3
 800306c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	47c35000 	.word	0x47c35000

08003088 <WriteString>:

/* Print character to array */
void WriteString(char string[])
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  unsigned int i=0;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
  while (string[i])
 8003094:	e009      	b.n	80030aa <WriteString+0x22>
  {
	PrintCharUart (string[i]);
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f80e 	bl	80030c0 <PrintCharUart>
	i++;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
  while (string[i])
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ef      	bne.n	8003096 <WriteString+0xe>
  }
}
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <PrintCharUart>:

/* Write character to Serial Port    */
void PrintCharUart (int ch)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));
 80030c8:	bf00      	nop
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <PrintCharUart+0x2c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f9      	beq.n	80030ca <PrintCharUart+0xa>
	USART1->DR = (USART_DR_DR & ch);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <PrintCharUart+0x2c>)
 80030da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030de:	6053      	str	r3, [r2, #4]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	40011000 	.word	0x40011000

080030f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
	...

08003100 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <nRF24_TransmitPacket+0x98>)
 800310e:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8003110:	2200      	movs	r2, #0
 8003112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003116:	4821      	ldr	r0, [pc, #132]	; (800319c <nRF24_TransmitPacket+0x9c>)
 8003118:	f003 fb84 	bl	8006824 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	4619      	mov	r1, r3
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 fb5e 	bl	80037e2 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8003126:	2201      	movs	r2, #1
 8003128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800312c:	481b      	ldr	r0, [pc, #108]	; (800319c <nRF24_TransmitPacket+0x9c>)
 800312e:	f003 fb79 	bl	8006824 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8003132:	f000 fb1e 	bl	8003772 <nRF24_GetStatus>
 8003136:	4603      	mov	r3, r0
 8003138:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1e5a      	subs	r2, r3, #1
 8003148:	60ba      	str	r2, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f1      	bne.n	8003132 <nRF24_TransmitPacket+0x32>
 800314e:	e000      	b.n	8003152 <nRF24_TransmitPacket+0x52>
			break;
 8003150:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8003152:	2200      	movs	r2, #0
 8003154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003158:	4810      	ldr	r0, [pc, #64]	; (800319c <nRF24_TransmitPacket+0x9c>)
 800315a:	f003 fb63 	bl	8006824 <HAL_GPIO_WritePin>

	if (!wait) {
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8003164:	2302      	movs	r3, #2
 8003166:	e012      	b.n	800318e <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8003168:	f000 fb26 	bl	80037b8 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8003176:	2303      	movs	r3, #3
 8003178:	e009      	b.n	800318e <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8003184:	2301      	movs	r3, #1
 8003186:	e002      	b.n	800318e <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8003188:	f000 fb06 	bl	8003798 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	000fffff 	.word	0x000fffff
 800319c:	40020400 	.word	0x40020400

080031a0 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 80031aa:	bf00      	nop
 80031ac:	2102      	movs	r1, #2
 80031ae:	480e      	ldr	r0, [pc, #56]	; (80031e8 <nRF24_LL_RW+0x48>)
 80031b0:	f7fe fda4 	bl	8001cfc <SPI_I2S_GetFlagStatus>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f8      	beq.n	80031ac <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	b29b      	uxth	r3, r3
 80031be:	4619      	mov	r1, r3
 80031c0:	4809      	ldr	r0, [pc, #36]	; (80031e8 <nRF24_LL_RW+0x48>)
 80031c2:	f7fe fd7f 	bl	8001cc4 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 80031c6:	bf00      	nop
 80031c8:	2101      	movs	r1, #1
 80031ca:	4807      	ldr	r0, [pc, #28]	; (80031e8 <nRF24_LL_RW+0x48>)
 80031cc:	f7fe fd96 	bl	8001cfc <SPI_I2S_GetFlagStatus>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f8      	beq.n	80031c8 <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 80031d6:	4804      	ldr	r0, [pc, #16]	; (80031e8 <nRF24_LL_RW+0x48>)
 80031d8:	f7fe fd83 	bl	8001ce2 <SPI_I2S_ReceiveData>
 80031dc:	4603      	mov	r3, r0
 80031de:	b2db      	uxtb	r3, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40003800 	.word	0x40003800

080031ec <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 80031f6:	2200      	movs	r2, #0
 80031f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031fc:	480c      	ldr	r0, [pc, #48]	; (8003230 <nRF24_ReadReg+0x44>)
 80031fe:	f003 fb11 	bl	8006824 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	b2db      	uxtb	r3, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff ffc8 	bl	80031a0 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8003210:	20ff      	movs	r0, #255	; 0xff
 8003212:	f7ff ffc5 	bl	80031a0 <nRF24_LL_RW>
 8003216:	4603      	mov	r3, r0
 8003218:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 800321a:	2201      	movs	r2, #1
 800321c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003220:	4803      	ldr	r0, [pc, #12]	; (8003230 <nRF24_ReadReg+0x44>)
 8003222:	f003 faff 	bl	8006824 <HAL_GPIO_WritePin>

	return value;
 8003226:	7bfb      	ldrb	r3, [r7, #15]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40020000 	.word	0x40020000

08003234 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	460a      	mov	r2, r1
 800323e:	71fb      	strb	r3, [r7, #7]
 8003240:	4613      	mov	r3, r2
 8003242:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003244:	2200      	movs	r2, #0
 8003246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800324a:	481a      	ldr	r0, [pc, #104]	; (80032b4 <nRF24_WriteReg+0x80>)
 800324c:	f003 faea 	bl	8006824 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	2b1f      	cmp	r3, #31
 8003254:	d810      	bhi.n	8003278 <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	b25b      	sxtb	r3, r3
 8003260:	f043 0320 	orr.w	r3, r3, #32
 8003264:	b25b      	sxtb	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff99 	bl	80031a0 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 800326e:	79bb      	ldrb	r3, [r7, #6]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff95 	bl	80031a0 <nRF24_LL_RW>
 8003276:	e013      	b.n	80032a0 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff ff90 	bl	80031a0 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	2be1      	cmp	r3, #225	; 0xe1
 8003284:	d00c      	beq.n	80032a0 <nRF24_WriteReg+0x6c>
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	2be2      	cmp	r3, #226	; 0xe2
 800328a:	d009      	beq.n	80032a0 <nRF24_WriteReg+0x6c>
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	2be3      	cmp	r3, #227	; 0xe3
 8003290:	d006      	beq.n	80032a0 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	2bff      	cmp	r3, #255	; 0xff
 8003296:	d003      	beq.n	80032a0 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8003298:	79bb      	ldrb	r3, [r7, #6]
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff ff80 	bl	80031a0 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 80032a0:	2201      	movs	r2, #1
 80032a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032a6:	4803      	ldr	r0, [pc, #12]	; (80032b4 <nRF24_WriteReg+0x80>)
 80032a8:	f003 fabc 	bl	8006824 <HAL_GPIO_WritePin>
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40020000 	.word	0x40020000

080032b8 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 80032c8:	2200      	movs	r2, #0
 80032ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032ce:	480f      	ldr	r0, [pc, #60]	; (800330c <nRF24_ReadMBReg+0x54>)
 80032d0:	f003 faa8 	bl	8006824 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff ff62 	bl	80031a0 <nRF24_LL_RW>
	while (count--) {
 80032dc:	e007      	b.n	80032ee <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 80032de:	683c      	ldr	r4, [r7, #0]
 80032e0:	1c63      	adds	r3, r4, #1
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	20ff      	movs	r0, #255	; 0xff
 80032e6:	f7ff ff5b 	bl	80031a0 <nRF24_LL_RW>
 80032ea:	4603      	mov	r3, r0
 80032ec:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80032ee:	79bb      	ldrb	r3, [r7, #6]
 80032f0:	1e5a      	subs	r2, r3, #1
 80032f2:	71ba      	strb	r2, [r7, #6]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f2      	bne.n	80032de <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 80032f8:	2201      	movs	r2, #1
 80032fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032fe:	4803      	ldr	r0, [pc, #12]	; (800330c <nRF24_ReadMBReg+0x54>)
 8003300:	f003 fa90 	bl	8006824 <HAL_GPIO_WritePin>
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	bd90      	pop	{r4, r7, pc}
 800330c:	40020000 	.word	0x40020000

08003310 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	71fb      	strb	r3, [r7, #7]
 800331c:	4613      	mov	r3, r2
 800331e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8003320:	2200      	movs	r2, #0
 8003322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003326:	480f      	ldr	r0, [pc, #60]	; (8003364 <nRF24_WriteMBReg+0x54>)
 8003328:	f003 fa7c 	bl	8006824 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ff36 	bl	80031a0 <nRF24_LL_RW>
	while (count--) {
 8003334:	e006      	b.n	8003344 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	603a      	str	r2, [r7, #0]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff2e 	bl	80031a0 <nRF24_LL_RW>
	while (count--) {
 8003344:	79bb      	ldrb	r3, [r7, #6]
 8003346:	1e5a      	subs	r2, r3, #1
 8003348:	71ba      	strb	r2, [r7, #6]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f3      	bne.n	8003336 <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 800334e:	2201      	movs	r2, #1
 8003350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003354:	4803      	ldr	r0, [pc, #12]	; (8003364 <nRF24_WriteMBReg+0x54>)
 8003356:	f003 fa65 	bl	8006824 <HAL_GPIO_WritePin>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40020000 	.word	0x40020000

08003368 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 800336c:	2108      	movs	r1, #8
 800336e:	2000      	movs	r0, #0
 8003370:	f7ff ff60 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8003374:	213f      	movs	r1, #63	; 0x3f
 8003376:	2001      	movs	r0, #1
 8003378:	f7ff ff5c 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 800337c:	2103      	movs	r1, #3
 800337e:	2002      	movs	r0, #2
 8003380:	f7ff ff58 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8003384:	2103      	movs	r1, #3
 8003386:	2003      	movs	r0, #3
 8003388:	f7ff ff54 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 800338c:	2103      	movs	r1, #3
 800338e:	2004      	movs	r0, #4
 8003390:	f7ff ff50 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8003394:	2102      	movs	r1, #2
 8003396:	2005      	movs	r0, #5
 8003398:	f7ff ff4c 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 800339c:	210e      	movs	r1, #14
 800339e:	2006      	movs	r0, #6
 80033a0:	f7ff ff48 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 80033a4:	2100      	movs	r1, #0
 80033a6:	2007      	movs	r0, #7
 80033a8:	f7ff ff44 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 80033ac:	2100      	movs	r1, #0
 80033ae:	2011      	movs	r0, #17
 80033b0:	f7ff ff40 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 80033b4:	2100      	movs	r1, #0
 80033b6:	2012      	movs	r0, #18
 80033b8:	f7ff ff3c 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 80033bc:	2100      	movs	r1, #0
 80033be:	2013      	movs	r0, #19
 80033c0:	f7ff ff38 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 80033c4:	2100      	movs	r1, #0
 80033c6:	2014      	movs	r0, #20
 80033c8:	f7ff ff34 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 80033cc:	2100      	movs	r1, #0
 80033ce:	2015      	movs	r0, #21
 80033d0:	f7ff ff30 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 80033d4:	2100      	movs	r1, #0
 80033d6:	2016      	movs	r0, #22
 80033d8:	f7ff ff2c 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 80033dc:	2100      	movs	r1, #0
 80033de:	201c      	movs	r0, #28
 80033e0:	f7ff ff28 	bl	8003234 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 80033e4:	2100      	movs	r1, #0
 80033e6:	201d      	movs	r0, #29
 80033e8:	f7ff ff24 	bl	8003234 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 80033ec:	f000 f9dc 	bl	80037a8 <nRF24_FlushRX>
	nRF24_FlushTX();
 80033f0:	f000 f9d2 	bl	8003798 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 80033f4:	f000 f9e0 	bl	80037b8 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 80033f8:	2201      	movs	r2, #1
 80033fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033fe:	4802      	ldr	r0, [pc, #8]	; (8003408 <nRF24_Init+0xa0>)
 8003400:	f003 fa10 	bl	8006824 <HAL_GPIO_WritePin>
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40020000 	.word	0x40020000

0800340c <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <nRF24_Check+0x58>)
 8003414:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8003416:	2205      	movs	r2, #5
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	2030      	movs	r0, #48	; 0x30
 800341c:	f7ff ff78 	bl	8003310 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8003420:	463b      	mov	r3, r7
 8003422:	2205      	movs	r2, #5
 8003424:	4619      	mov	r1, r3
 8003426:	2010      	movs	r0, #16
 8003428:	f7ff ff46 	bl	80032b8 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]
 8003430:	e010      	b.n	8003454 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8003432:	7bfb      	ldrb	r3, [r7, #15]
 8003434:	f107 0210 	add.w	r2, r7, #16
 8003438:	4413      	add	r3, r2
 800343a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	1c59      	adds	r1, r3, #1
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d001      	beq.n	800344e <nRF24_Check+0x42>
 800344a:	2300      	movs	r3, #0
 800344c:	e006      	b.n	800345c <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	3301      	adds	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d9eb      	bls.n	8003432 <nRF24_Check+0x26>
	}

	return 1;
 800345a:	2301      	movs	r3, #1
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	0800dfa4 	.word	0x0800dfa4

08003468 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8003472:	2000      	movs	r0, #0
 8003474:	f7ff feba 	bl	80031ec <nRF24_ReadReg>
 8003478:	4603      	mov	r3, r0
 800347a:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d104      	bne.n	800348c <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	73fb      	strb	r3, [r7, #15]
 800348a:	e003      	b.n	8003494 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	f023 0302 	bic.w	r3, r3, #2
 8003492:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	4619      	mov	r1, r3
 8003498:	2000      	movs	r0, #0
 800349a:	f7ff fecb 	bl	8003234 <nRF24_WriteReg>
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	4603      	mov	r3, r0
 80034ae:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7ff fe9b 	bl	80031ec <nRF24_ReadReg>
 80034b6:	4603      	mov	r3, r0
 80034b8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
 80034bc:	f023 0301 	bic.w	r3, r3, #1
 80034c0:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 80034c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	b25a      	sxtb	r2, r3
 80034cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	4619      	mov	r1, r3
 80034da:	2000      	movs	r0, #0
 80034dc:	f7ff feaa 	bl	8003234 <nRF24_WriteReg>
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 80034f2:	2000      	movs	r0, #0
 80034f4:	f7ff fe7a 	bl	80031ec <nRF24_ReadReg>
 80034f8:	4603      	mov	r3, r0
 80034fa:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	f023 030c 	bic.w	r3, r3, #12
 8003502:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8003504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	b25a      	sxtb	r2, r3
 800350e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003512:	4313      	orrs	r3, r2
 8003514:	b25b      	sxtb	r3, r3
 8003516:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	4619      	mov	r1, r3
 800351c:	2000      	movs	r0, #0
 800351e:	f7ff fe89 	bl	8003234 <nRF24_WriteReg>
}
 8003522:	bf00      	nop
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	4619      	mov	r1, r3
 8003538:	2005      	movs	r0, #5
 800353a:	f7ff fe7b 	bl	8003234 <nRF24_WriteReg>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	3b02      	subs	r3, #2
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	2003      	movs	r0, #3
 800355a:	f7ff fe6b 	bl	8003234 <nRF24_WriteReg>
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	2b06      	cmp	r3, #6
 8003578:	d00a      	beq.n	8003590 <nRF24_SetAddr+0x28>
 800357a:	2b06      	cmp	r3, #6
 800357c:	dc3e      	bgt.n	80035fc <nRF24_SetAddr+0x94>
 800357e:	2b01      	cmp	r3, #1
 8003580:	dc02      	bgt.n	8003588 <nRF24_SetAddr+0x20>
 8003582:	2b00      	cmp	r3, #0
 8003584:	da04      	bge.n	8003590 <nRF24_SetAddr+0x28>
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
			break;
		default:
			// Incorrect pipe number -> do nothing
			break;
 8003586:	e039      	b.n	80035fc <nRF24_SetAddr+0x94>
 8003588:	3b02      	subs	r3, #2
	switch (pipe) {
 800358a:	2b03      	cmp	r3, #3
 800358c:	d836      	bhi.n	80035fc <nRF24_SetAddr+0x94>
 800358e:	e02b      	b.n	80035e8 <nRF24_SetAddr+0x80>
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8003590:	2003      	movs	r0, #3
 8003592:	f7ff fe2b 	bl	80031ec <nRF24_ReadReg>
 8003596:	4603      	mov	r3, r0
 8003598:	3301      	adds	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
			addr += addr_width;
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035aa:	4817      	ldr	r0, [pc, #92]	; (8003608 <nRF24_SetAddr+0xa0>)
 80035ac:	f003 f93a 	bl	8006824 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <nRF24_SetAddr+0xa4>)
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	f043 0320 	orr.w	r3, r3, #32
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fdef 	bl	80031a0 <nRF24_LL_RW>
				nRF24_LL_RW(*addr--);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	603a      	str	r2, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7ff fde8 	bl	80031a0 <nRF24_LL_RW>
			} while (addr_width--);
 80035d0:	7bfb      	ldrb	r3, [r7, #15]
 80035d2:	1e5a      	subs	r2, r3, #1
 80035d4:	73fa      	strb	r2, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f3      	bne.n	80035c2 <nRF24_SetAddr+0x5a>
			nRF24_CSN_H();
 80035da:	2201      	movs	r2, #1
 80035dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035e0:	4809      	ldr	r0, [pc, #36]	; (8003608 <nRF24_SetAddr+0xa0>)
 80035e2:	f003 f91f 	bl	8006824 <HAL_GPIO_WritePin>
			break;
 80035e6:	e00a      	b.n	80035fe <nRF24_SetAddr+0x96>
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 80035e8:	79fb      	ldrb	r3, [r7, #7]
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <nRF24_SetAddr+0xa4>)
 80035ec:	5cd2      	ldrb	r2, [r2, r3]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7ff fe1d 	bl	8003234 <nRF24_WriteReg>
			break;
 80035fa:	e000      	b.n	80035fe <nRF24_SetAddr+0x96>
			break;
 80035fc:	bf00      	nop
	}
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40020000 	.word	0x40020000
 800360c:	0800dfb8 	.word	0x0800dfb8

08003610 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800361a:	2006      	movs	r0, #6
 800361c:	f7ff fde6 	bl	80031ec <nRF24_ReadReg>
 8003620:	4603      	mov	r3, r0
 8003622:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	f023 0306 	bic.w	r3, r3, #6
 800362a:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	4313      	orrs	r3, r2
 8003632:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8003634:	7bfb      	ldrb	r3, [r7, #15]
 8003636:	4619      	mov	r1, r3
 8003638:	2006      	movs	r0, #6
 800363a:	f7ff fdfb 	bl	8003234 <nRF24_WriteReg>
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8003650:	2006      	movs	r0, #6
 8003652:	f7ff fdcb 	bl	80031ec <nRF24_ReadReg>
 8003656:	4603      	mov	r3, r0
 8003658:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800365a:	7bfb      	ldrb	r3, [r7, #15]
 800365c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003660:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	4313      	orrs	r3, r2
 8003668:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	4619      	mov	r1, r3
 800366e:	2006      	movs	r0, #6
 8003670:	f7ff fde0 	bl	8003234 <nRF24_WriteReg>
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
 8003686:	460b      	mov	r3, r1
 8003688:	71bb      	strb	r3, [r7, #6]
 800368a:	4613      	mov	r3, r2
 800368c:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 800368e:	2002      	movs	r0, #2
 8003690:	f7ff fdac 	bl	80031ec <nRF24_ReadReg>
 8003694:	4603      	mov	r3, r0
 8003696:	b25a      	sxtb	r2, r3
 8003698:	79fb      	ldrb	r3, [r7, #7]
 800369a:	2101      	movs	r1, #1
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	b25b      	sxtb	r3, r3
 80036a2:	4313      	orrs	r3, r2
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ac:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	4619      	mov	r1, r3
 80036b2:	2002      	movs	r0, #2
 80036b4:	f7ff fdbe 	bl	8003234 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	4a19      	ldr	r2, [pc, #100]	; (8003720 <nRF24_SetRXPipe+0xa4>)
 80036bc:	5cd2      	ldrb	r2, [r2, r3]
 80036be:	797b      	ldrb	r3, [r7, #5]
 80036c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	4619      	mov	r1, r3
 80036c8:	4610      	mov	r0, r2
 80036ca:	f7ff fdb3 	bl	8003234 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80036ce:	2001      	movs	r0, #1
 80036d0:	f7ff fd8c 	bl	80031ec <nRF24_ReadReg>
 80036d4:	4603      	mov	r3, r0
 80036d6:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 80036d8:	79bb      	ldrb	r3, [r7, #6]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d10a      	bne.n	80036f4 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	2201      	movs	r2, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	b25a      	sxtb	r2, r3
 80036e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	b25b      	sxtb	r3, r3
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e00b      	b.n	800370c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	2201      	movs	r2, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	b25b      	sxtb	r3, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	b25a      	sxtb	r2, r3
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4013      	ands	r3, r2
 8003708:	b25b      	sxtb	r3, r3
 800370a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	4619      	mov	r1, r3
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff fd8f 	bl	8003234 <nRF24_WriteReg>
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	0800dfb0 	.word	0x0800dfb0

08003724 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2b05      	cmp	r3, #5
 8003732:	d904      	bls.n	800373e <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8003734:	2100      	movs	r1, #0
 8003736:	2001      	movs	r0, #1
 8003738:	f7ff fd7c 	bl	8003234 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 800373c:	e015      	b.n	800376a <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800373e:	2001      	movs	r0, #1
 8003740:	f7ff fd54 	bl	80031ec <nRF24_ReadReg>
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	2201      	movs	r2, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	b25b      	sxtb	r3, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	b25a      	sxtb	r2, r3
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	4013      	ands	r3, r2
 800375c:	b25b      	sxtb	r3, r3
 800375e:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	4619      	mov	r1, r3
 8003764:	2001      	movs	r0, #1
 8003766:	f7ff fd65 	bl	8003234 <nRF24_WriteReg>
}
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 8003772:	b580      	push	{r7, lr}
 8003774:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 8003776:	2007      	movs	r0, #7
 8003778:	f7ff fd38 	bl	80031ec <nRF24_ReadReg>
 800377c:	4603      	mov	r3, r0
}
 800377e:	4618      	mov	r0, r3
 8003780:	bd80      	pop	{r7, pc}

08003782 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8003782:	b580      	push	{r7, lr}
 8003784:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 8003786:	2017      	movs	r0, #23
 8003788:	f7ff fd30 	bl	80031ec <nRF24_ReadReg>
 800378c:	4603      	mov	r3, r0
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	b2db      	uxtb	r3, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	bd80      	pop	{r7, pc}

08003798 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 800379c:	21ff      	movs	r1, #255	; 0xff
 800379e:	20e1      	movs	r0, #225	; 0xe1
 80037a0:	f7ff fd48 	bl	8003234 <nRF24_WriteReg>
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 80037ac:	21ff      	movs	r1, #255	; 0xff
 80037ae:	20e2      	movs	r0, #226	; 0xe2
 80037b0:	f7ff fd40 	bl	8003234 <nRF24_WriteReg>
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80037be:	2007      	movs	r0, #7
 80037c0:	f7ff fd14 	bl	80031ec <nRF24_ReadReg>
 80037c4:	4603      	mov	r3, r0
 80037c6:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80037ce:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	4619      	mov	r1, r3
 80037d4:	2007      	movs	r0, #7
 80037d6:	f7ff fd2d 	bl	8003234 <nRF24_WriteReg>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	460b      	mov	r3, r1
 80037ec:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 80037ee:	78fb      	ldrb	r3, [r7, #3]
 80037f0:	461a      	mov	r2, r3
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	20a0      	movs	r0, #160	; 0xa0
 80037f6:	f7ff fd8b 	bl	8003310 <nRF24_WriteMBReg>
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800380e:	2007      	movs	r0, #7
 8003810:	f7ff fcec 	bl	80031ec <nRF24_ReadReg>
 8003814:	4603      	mov	r3, r0
 8003816:	105b      	asrs	r3, r3, #1
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d816      	bhi.n	8003854 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8003826:	7bfb      	ldrb	r3, [r7, #15]
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <nRF24_ReadPayload+0x60>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fcdd 	bl	80031ec <nRF24_ReadReg>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d006      	beq.n	8003850 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	2061      	movs	r0, #97	; 0x61
 800384c:	f7ff fd34 	bl	80032b8 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	e003      	b.n	800385c <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800385a:	23ff      	movs	r3, #255	; 0xff
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	0800dfb0 	.word	0x0800dfb0

08003868 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <MX_SPI1_Init+0x64>)
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <MX_SPI1_Init+0x68>)
 8003870:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <MX_SPI1_Init+0x64>)
 8003874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003878:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <MX_SPI1_Init+0x64>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <MX_SPI1_Init+0x64>)
 8003882:	2200      	movs	r2, #0
 8003884:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <MX_SPI1_Init+0x64>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <MX_SPI1_Init+0x64>)
 800388e:	2200      	movs	r2, #0
 8003890:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <MX_SPI1_Init+0x64>)
 8003894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003898:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <MX_SPI1_Init+0x64>)
 800389c:	2210      	movs	r2, #16
 800389e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <MX_SPI1_Init+0x64>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <MX_SPI1_Init+0x64>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <MX_SPI1_Init+0x64>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <MX_SPI1_Init+0x64>)
 80038b4:	220a      	movs	r2, #10
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038b8:	4804      	ldr	r0, [pc, #16]	; (80038cc <MX_SPI1_Init+0x64>)
 80038ba:	f003 fd6b 	bl	8007394 <HAL_SPI_Init>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80038c4:	f7ff fc14 	bl	80030f0 <Error_Handler>
  }

}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	20000624 	.word	0x20000624
 80038d0:	40013000 	.word	0x40013000

080038d4 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80038d8:	4b17      	ldr	r3, [pc, #92]	; (8003938 <MX_SPI2_Init+0x64>)
 80038da:	4a18      	ldr	r2, [pc, #96]	; (800393c <MX_SPI2_Init+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038de:	4b16      	ldr	r3, [pc, #88]	; (8003938 <MX_SPI2_Init+0x64>)
 80038e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <MX_SPI2_Init+0x64>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038ec:	4b12      	ldr	r3, [pc, #72]	; (8003938 <MX_SPI2_Init+0x64>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038f2:	4b11      	ldr	r3, [pc, #68]	; (8003938 <MX_SPI2_Init+0x64>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <MX_SPI2_Init+0x64>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038fe:	4b0e      	ldr	r3, [pc, #56]	; (8003938 <MX_SPI2_Init+0x64>)
 8003900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003904:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003906:	4b0c      	ldr	r3, [pc, #48]	; (8003938 <MX_SPI2_Init+0x64>)
 8003908:	2208      	movs	r2, #8
 800390a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <MX_SPI2_Init+0x64>)
 800390e:	2200      	movs	r2, #0
 8003910:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <MX_SPI2_Init+0x64>)
 8003914:	2200      	movs	r2, #0
 8003916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003918:	4b07      	ldr	r3, [pc, #28]	; (8003938 <MX_SPI2_Init+0x64>)
 800391a:	2200      	movs	r2, #0
 800391c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <MX_SPI2_Init+0x64>)
 8003920:	220a      	movs	r2, #10
 8003922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003924:	4804      	ldr	r0, [pc, #16]	; (8003938 <MX_SPI2_Init+0x64>)
 8003926:	f003 fd35 	bl	8007394 <HAL_SPI_Init>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003930:	f7ff fbde 	bl	80030f0 <Error_Handler>
  }

}
 8003934:	bf00      	nop
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000574 	.word	0x20000574
 800393c:	40003800 	.word	0x40003800

08003940 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8003944:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <MX_SPI3_Init+0x64>)
 8003946:	4a18      	ldr	r2, [pc, #96]	; (80039a8 <MX_SPI3_Init+0x68>)
 8003948:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800394a:	4b16      	ldr	r3, [pc, #88]	; (80039a4 <MX_SPI3_Init+0x64>)
 800394c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003950:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003952:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <MX_SPI3_Init+0x64>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003958:	4b12      	ldr	r3, [pc, #72]	; (80039a4 <MX_SPI3_Init+0x64>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800395e:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <MX_SPI3_Init+0x64>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <MX_SPI3_Init+0x64>)
 8003966:	2200      	movs	r2, #0
 8003968:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <MX_SPI3_Init+0x64>)
 800396c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003970:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <MX_SPI3_Init+0x64>)
 8003974:	2200      	movs	r2, #0
 8003976:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <MX_SPI3_Init+0x64>)
 800397a:	2200      	movs	r2, #0
 800397c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800397e:	4b09      	ldr	r3, [pc, #36]	; (80039a4 <MX_SPI3_Init+0x64>)
 8003980:	2200      	movs	r2, #0
 8003982:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <MX_SPI3_Init+0x64>)
 8003986:	2200      	movs	r2, #0
 8003988:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <MX_SPI3_Init+0x64>)
 800398c:	220a      	movs	r2, #10
 800398e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003990:	4804      	ldr	r0, [pc, #16]	; (80039a4 <MX_SPI3_Init+0x64>)
 8003992:	f003 fcff 	bl	8007394 <HAL_SPI_Init>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800399c:	f7ff fba8 	bl	80030f0 <Error_Handler>
  }

}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	200005cc 	.word	0x200005cc
 80039a8:	40003c00 	.word	0x40003c00

080039ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08e      	sub	sp, #56	; 0x38
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a4b      	ldr	r2, [pc, #300]	; (8003af8 <HAL_SPI_MspInit+0x14c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d12c      	bne.n	8003a28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
 80039d2:	4b4a      	ldr	r3, [pc, #296]	; (8003afc <HAL_SPI_MspInit+0x150>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	4a49      	ldr	r2, [pc, #292]	; (8003afc <HAL_SPI_MspInit+0x150>)
 80039d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039dc:	6453      	str	r3, [r2, #68]	; 0x44
 80039de:	4b47      	ldr	r3, [pc, #284]	; (8003afc <HAL_SPI_MspInit+0x150>)
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	4b43      	ldr	r3, [pc, #268]	; (8003afc <HAL_SPI_MspInit+0x150>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	4a42      	ldr	r2, [pc, #264]	; (8003afc <HAL_SPI_MspInit+0x150>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6313      	str	r3, [r2, #48]	; 0x30
 80039fa:	4b40      	ldr	r3, [pc, #256]	; (8003afc <HAL_SPI_MspInit+0x150>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a06:	23e0      	movs	r3, #224	; 0xe0
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a12:	2303      	movs	r3, #3
 8003a14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a16:	2305      	movs	r3, #5
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4837      	ldr	r0, [pc, #220]	; (8003b00 <HAL_SPI_MspInit+0x154>)
 8003a22:	f002 fd7b 	bl	800651c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003a26:	e063      	b.n	8003af0 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a35      	ldr	r2, [pc, #212]	; (8003b04 <HAL_SPI_MspInit+0x158>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d12d      	bne.n	8003a8e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	4b31      	ldr	r3, [pc, #196]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a30      	ldr	r2, [pc, #192]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b2e      	ldr	r3, [pc, #184]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a4a:	61bb      	str	r3, [r7, #24]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	4b2a      	ldr	r3, [pc, #168]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a29      	ldr	r2, [pc, #164]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b27      	ldr	r3, [pc, #156]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8003a6a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a70:	2302      	movs	r3, #2
 8003a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a7c:	2305      	movs	r3, #5
 8003a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a84:	4619      	mov	r1, r3
 8003a86:	4820      	ldr	r0, [pc, #128]	; (8003b08 <HAL_SPI_MspInit+0x15c>)
 8003a88:	f002 fd48 	bl	800651c <HAL_GPIO_Init>
}
 8003a8c:	e030      	b.n	8003af0 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI3)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <HAL_SPI_MspInit+0x160>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d12b      	bne.n	8003af0 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003a98:	2300      	movs	r3, #0
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003aa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8003aa8:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	4b10      	ldr	r3, [pc, #64]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	4a0f      	ldr	r2, [pc, #60]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ac4:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <HAL_SPI_MspInit+0x150>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003ad0:	2338      	movs	r3, #56	; 0x38
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003adc:	2303      	movs	r3, #3
 8003ade:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ae0:	2306      	movs	r3, #6
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4807      	ldr	r0, [pc, #28]	; (8003b08 <HAL_SPI_MspInit+0x15c>)
 8003aec:	f002 fd16 	bl	800651c <HAL_GPIO_Init>
}
 8003af0:	bf00      	nop
 8003af2:	3738      	adds	r7, #56	; 0x38
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40013000 	.word	0x40013000
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40003800 	.word	0x40003800
 8003b08:	40020400 	.word	0x40020400
 8003b0c:	40003c00 	.word	0x40003c00

08003b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	4a0f      	ldr	r2, [pc, #60]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b24:	6453      	str	r3, [r2, #68]	; 0x44
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b40:	6413      	str	r3, [r2, #64]	; 0x40
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_MspInit+0x4c>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800

08003b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b72:	e7fe      	b.n	8003b72 <HardFault_Handler+0x4>

08003b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b78:	e7fe      	b.n	8003b78 <MemManage_Handler+0x4>

08003b7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b7e:	e7fe      	b.n	8003b7e <BusFault_Handler+0x4>

08003b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <UsageFault_Handler+0x4>

08003b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003bb4:	f001 fdb4 	bl	8005720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bb8:	bf00      	nop
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	0000      	movs	r0, r0
	...

08003bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bc0:	b5b0      	push	{r4, r5, r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bc6:	4890      	ldr	r0, [pc, #576]	; (8003e08 <TIM2_IRQHandler+0x248>)
 8003bc8:	f004 f9ee 	bl	8007fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky--------------------------------------------------------------
  LEDcount++;
 8003bcc:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <TIM2_IRQHandler+0x24c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	4a8e      	ldr	r2, [pc, #568]	; (8003e0c <TIM2_IRQHandler+0x24c>)
 8003bd4:	6013      	str	r3, [r2, #0]
  if(LEDcount>=50)
 8003bd6:	4b8d      	ldr	r3, [pc, #564]	; (8003e0c <TIM2_IRQHandler+0x24c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b31      	cmp	r3, #49	; 0x31
 8003bdc:	d907      	bls.n	8003bee <TIM2_IRQHandler+0x2e>
  {
	  LEDcount=0;
 8003bde:	4b8b      	ldr	r3, [pc, #556]	; (8003e0c <TIM2_IRQHandler+0x24c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8003be4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003be8:	4889      	ldr	r0, [pc, #548]	; (8003e10 <TIM2_IRQHandler+0x250>)
 8003bea:	f002 fe34 	bl	8006856 <HAL_GPIO_TogglePin>
  }//-------------------------------------------------------------------


  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,1);
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4888      	ldr	r0, [pc, #544]	; (8003e14 <TIM2_IRQHandler+0x254>)
 8003bf2:	f001 fec3 	bl	800597c <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 8003bf6:	4887      	ldr	r0, [pc, #540]	; (8003e14 <TIM2_IRQHandler+0x254>)
 8003bf8:	f001 ff44 	bl	8005a84 <HAL_ADC_GetValue>
 8003bfc:	ee07 0a90 	vmov	s15, r0
 8003c00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c04:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003e18 <TIM2_IRQHandler+0x258>
 8003c08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c10:	ee17 2a90 	vmov	r2, s15
 8003c14:	4b81      	ldr	r3, [pc, #516]	; (8003e1c <TIM2_IRQHandler+0x25c>)
 8003c16:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8003c18:	4b81      	ldr	r3, [pc, #516]	; (8003e20 <TIM2_IRQHandler+0x260>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a7f      	ldr	r2, [pc, #508]	; (8003e1c <TIM2_IRQHandler+0x25c>)
 8003c1e:	6812      	ldr	r2, [r2, #0]
 8003c20:	4980      	ldr	r1, [pc, #512]	; (8003e24 <TIM2_IRQHandler+0x264>)
 8003c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8003c26:	4b7e      	ldr	r3, [pc, #504]	; (8003e20 <TIM2_IRQHandler+0x260>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	4a7c      	ldr	r2, [pc, #496]	; (8003e20 <TIM2_IRQHandler+0x260>)
 8003c2e:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 8003c30:	4b7b      	ldr	r3, [pc, #492]	; (8003e20 <TIM2_IRQHandler+0x260>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b31      	cmp	r3, #49	; 0x31
 8003c36:	d902      	bls.n	8003c3e <TIM2_IRQHandler+0x7e>
 8003c38:	4b79      	ldr	r3, [pc, #484]	; (8003e20 <TIM2_IRQHandler+0x260>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 8003c3e:	4b7a      	ldr	r3, [pc, #488]	; (8003e28 <TIM2_IRQHandler+0x268>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 8003c44:	4b79      	ldr	r3, [pc, #484]	; (8003e2c <TIM2_IRQHandler+0x26c>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e00e      	b.n	8003c6a <TIM2_IRQHandler+0xaa>
  {
	  BattmVSUM+=BAttmVhist[i];
 8003c4c:	4b77      	ldr	r3, [pc, #476]	; (8003e2c <TIM2_IRQHandler+0x26c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a74      	ldr	r2, [pc, #464]	; (8003e24 <TIM2_IRQHandler+0x264>)
 8003c52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c56:	4b74      	ldr	r3, [pc, #464]	; (8003e28 <TIM2_IRQHandler+0x268>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a72      	ldr	r2, [pc, #456]	; (8003e28 <TIM2_IRQHandler+0x268>)
 8003c5e:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 8003c60:	4b72      	ldr	r3, [pc, #456]	; (8003e2c <TIM2_IRQHandler+0x26c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3301      	adds	r3, #1
 8003c66:	4a71      	ldr	r2, [pc, #452]	; (8003e2c <TIM2_IRQHandler+0x26c>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	4b70      	ldr	r3, [pc, #448]	; (8003e2c <TIM2_IRQHandler+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b31      	cmp	r3, #49	; 0x31
 8003c70:	d9ec      	bls.n	8003c4c <TIM2_IRQHandler+0x8c>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 8003c72:	4b6d      	ldr	r3, [pc, #436]	; (8003e28 <TIM2_IRQHandler+0x268>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a6e      	ldr	r2, [pc, #440]	; (8003e30 <TIM2_IRQHandler+0x270>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	4a6d      	ldr	r2, [pc, #436]	; (8003e34 <TIM2_IRQHandler+0x274>)
 8003c80:	6013      	str	r3, [r2, #0]
  //--------------------------------------------------------------------

  //save OLD toggle values
  togg1hist=togg1;
 8003c82:	4b6d      	ldr	r3, [pc, #436]	; (8003e38 <TIM2_IRQHandler+0x278>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6d      	ldr	r2, [pc, #436]	; (8003e3c <TIM2_IRQHandler+0x27c>)
 8003c88:	6013      	str	r3, [r2, #0]
  togg2hist=togg2;
 8003c8a:	4b6d      	ldr	r3, [pc, #436]	; (8003e40 <TIM2_IRQHandler+0x280>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6d      	ldr	r2, [pc, #436]	; (8003e44 <TIM2_IRQHandler+0x284>)
 8003c90:	6013      	str	r3, [r2, #0]
  togg3hist=togg3;
 8003c92:	4b6d      	ldr	r3, [pc, #436]	; (8003e48 <TIM2_IRQHandler+0x288>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a6d      	ldr	r2, [pc, #436]	; (8003e4c <TIM2_IRQHandler+0x28c>)
 8003c98:	6013      	str	r3, [r2, #0]
  togg4hist=togg4;
 8003c9a:	4b6d      	ldr	r3, [pc, #436]	; (8003e50 <TIM2_IRQHandler+0x290>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a6d      	ldr	r2, [pc, #436]	; (8003e54 <TIM2_IRQHandler+0x294>)
 8003ca0:	6013      	str	r3, [r2, #0]
  togg5hist=togg5;
 8003ca2:	4b6d      	ldr	r3, [pc, #436]	; (8003e58 <TIM2_IRQHandler+0x298>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6d      	ldr	r2, [pc, #436]	; (8003e5c <TIM2_IRQHandler+0x29c>)
 8003ca8:	6013      	str	r3, [r2, #0]
  togg6hist=togg6;
 8003caa:	4b6d      	ldr	r3, [pc, #436]	; (8003e60 <TIM2_IRQHandler+0x2a0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6d      	ldr	r2, [pc, #436]	; (8003e64 <TIM2_IRQHandler+0x2a4>)
 8003cb0:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 8003cb2:	4b6d      	ldr	r3, [pc, #436]	; (8003e68 <TIM2_IRQHandler+0x2a8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f000 823c 	beq.w	8004134 <TIM2_IRQHandler+0x574>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8003cbc:	f7ff fd61 	bl	8003782 <nRF24_GetStatus_RXFIFO>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	f000 8236 	beq.w	8004134 <TIM2_IRQHandler+0x574>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8003cc8:	4968      	ldr	r1, [pc, #416]	; (8003e6c <TIM2_IRQHandler+0x2ac>)
 8003cca:	4869      	ldr	r0, [pc, #420]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003ccc:	f7ff fd9a 	bl	8003804 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 8003cd0:	f7ff fd72 	bl	80037b8 <nRF24_ClearIRQFlags>

  			MSGSelector=(nRF24_payloadRX[0]);
 8003cd4:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b66      	ldr	r3, [pc, #408]	; (8003e74 <TIM2_IRQHandler+0x2b4>)
 8003cdc:	601a      	str	r2, [r3, #0]

  			switch(MSGSelector)
 8003cde:	4b65      	ldr	r3, [pc, #404]	; (8003e74 <TIM2_IRQHandler+0x2b4>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	f200 80dd 	bhi.w	8003ea2 <TIM2_IRQHandler+0x2e2>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <TIM2_IRQHandler+0x130>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d05 	.word	0x08003d05
 8003cf4:	08003dcf 	.word	0x08003dcf
 8003cf8:	08003dfd 	.word	0x08003dfd
 8003cfc:	08003dbf 	.word	0x08003dbf
 8003d00:	08003dc7 	.word	0x08003dc7
  			{
  				case COMMCONTROLDATA:
  									{
  										if(nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100 && nRF24_payloadRX[4]<=100)//Check if Data is in correct ranges
 8003d04:	4b5a      	ldr	r3, [pc, #360]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b64      	cmp	r3, #100	; 0x64
 8003d0a:	f200 80c9 	bhi.w	8003ea0 <TIM2_IRQHandler+0x2e0>
 8003d0e:	4b58      	ldr	r3, [pc, #352]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d10:	789b      	ldrb	r3, [r3, #2]
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	f200 80c4 	bhi.w	8003ea0 <TIM2_IRQHandler+0x2e0>
 8003d18:	4b55      	ldr	r3, [pc, #340]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d1a:	78db      	ldrb	r3, [r3, #3]
 8003d1c:	2b64      	cmp	r3, #100	; 0x64
 8003d1e:	f200 80bf 	bhi.w	8003ea0 <TIM2_IRQHandler+0x2e0>
 8003d22:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d24:	791b      	ldrb	r3, [r3, #4]
 8003d26:	2b64      	cmp	r3, #100	; 0x64
 8003d28:	f200 80ba 	bhi.w	8003ea0 <TIM2_IRQHandler+0x2e0>
  										{
  							  				Ljoyupdown=nRF24_payloadRX[1];
 8003d2c:	4b50      	ldr	r3, [pc, #320]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d2e:	785b      	ldrb	r3, [r3, #1]
 8003d30:	461a      	mov	r2, r3
 8003d32:	4b51      	ldr	r3, [pc, #324]	; (8003e78 <TIM2_IRQHandler+0x2b8>)
 8003d34:	601a      	str	r2, [r3, #0]
  							  				Ljoyleftright=nRF24_payloadRX[2];
 8003d36:	4b4e      	ldr	r3, [pc, #312]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d38:	789b      	ldrb	r3, [r3, #2]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b4f      	ldr	r3, [pc, #316]	; (8003e7c <TIM2_IRQHandler+0x2bc>)
 8003d3e:	601a      	str	r2, [r3, #0]
  							  				Djoyupdown=nRF24_payloadRX[3];
 8003d40:	4b4b      	ldr	r3, [pc, #300]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d42:	78db      	ldrb	r3, [r3, #3]
 8003d44:	461a      	mov	r2, r3
 8003d46:	4b4e      	ldr	r3, [pc, #312]	; (8003e80 <TIM2_IRQHandler+0x2c0>)
 8003d48:	601a      	str	r2, [r3, #0]
  							  				Djoyleftright=nRF24_payloadRX[4];
 8003d4a:	4b49      	ldr	r3, [pc, #292]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d4c:	791b      	ldrb	r3, [r3, #4]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	4b4c      	ldr	r3, [pc, #304]	; (8003e84 <TIM2_IRQHandler+0x2c4>)
 8003d52:	601a      	str	r2, [r3, #0]
  							  				potenc1=nRF24_payloadRX[5];
 8003d54:	4b46      	ldr	r3, [pc, #280]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d56:	795b      	ldrb	r3, [r3, #5]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <TIM2_IRQHandler+0x2c8>)
 8003d5c:	601a      	str	r2, [r3, #0]
  							  				potenc2=nRF24_payloadRX[6];
 8003d5e:	4b44      	ldr	r3, [pc, #272]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d60:	799b      	ldrb	r3, [r3, #6]
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b49      	ldr	r3, [pc, #292]	; (8003e8c <TIM2_IRQHandler+0x2cc>)
 8003d66:	601a      	str	r2, [r3, #0]

  							  				togg1=nRF24_payloadRX[7]>>7;
 8003d68:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d6a:	79db      	ldrb	r3, [r3, #7]
 8003d6c:	09db      	lsrs	r3, r3, #7
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <TIM2_IRQHandler+0x278>)
 8003d74:	601a      	str	r2, [r3, #0]
  							  				togg2=(nRF24_payloadRX[7] & 64 )>>6;
 8003d76:	4b3e      	ldr	r3, [pc, #248]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d78:	79db      	ldrb	r3, [r3, #7]
 8003d7a:	119b      	asrs	r3, r3, #6
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	4a2f      	ldr	r2, [pc, #188]	; (8003e40 <TIM2_IRQHandler+0x280>)
 8003d82:	6013      	str	r3, [r2, #0]
  							  				togg3=(nRF24_payloadRX[7] & 32 )>>5;
 8003d84:	4b3a      	ldr	r3, [pc, #232]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d86:	79db      	ldrb	r3, [r3, #7]
 8003d88:	115b      	asrs	r3, r3, #5
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	4a2e      	ldr	r2, [pc, #184]	; (8003e48 <TIM2_IRQHandler+0x288>)
 8003d90:	6013      	str	r3, [r2, #0]
  							  				togg4=(nRF24_payloadRX[7] & 16 )>>4;
 8003d92:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003d94:	79db      	ldrb	r3, [r3, #7]
 8003d96:	111b      	asrs	r3, r3, #4
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	4a2c      	ldr	r2, [pc, #176]	; (8003e50 <TIM2_IRQHandler+0x290>)
 8003d9e:	6013      	str	r3, [r2, #0]
  							  				togg5=(nRF24_payloadRX[7] & 8 )>>3;
 8003da0:	4b33      	ldr	r3, [pc, #204]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003da2:	79db      	ldrb	r3, [r3, #7]
 8003da4:	10db      	asrs	r3, r3, #3
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	4a2b      	ldr	r2, [pc, #172]	; (8003e58 <TIM2_IRQHandler+0x298>)
 8003dac:	6013      	str	r3, [r2, #0]
  							  				togg6=(nRF24_payloadRX[7] & 4 )>>2;
 8003dae:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003db0:	79db      	ldrb	r3, [r3, #7]
 8003db2:	109b      	asrs	r3, r3, #2
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <TIM2_IRQHandler+0x2a0>)
 8003dba:	6013      	str	r3, [r2, #0]
  										}
  									}break;
 8003dbc:	e070      	b.n	8003ea0 <TIM2_IRQHandler+0x2e0>

  				case COMMERASEFLASHDR:
  									{
  										FlashEraseFlag=1;
 8003dbe:	4b34      	ldr	r3, [pc, #208]	; (8003e90 <TIM2_IRQHandler+0x2d0>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  									}break;
 8003dc4:	e06d      	b.n	8003ea2 <TIM2_IRQHandler+0x2e2>

  				case COMMWRITEFLASHDR:
  									{
  										FlashWriteFlag=1;
 8003dc6:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <TIM2_IRQHandler+0x2d4>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

  									}break;
 8003dcc:	e069      	b.n	8003ea2 <TIM2_IRQHandler+0x2e2>

  				case COMMPARAMACTIVE:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 8003dce:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003dd0:	785b      	ldrb	r3, [r3, #1]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4b30      	ldr	r3, [pc, #192]	; (8003e98 <TIM2_IRQHandler+0x2d8>)
 8003dd6:	601a      	str	r2, [r3, #0]
  				  						ParamDataRX=(nRF24_payloadRX[2]<<24) + (nRF24_payloadRX[3]<<16) + (nRF24_payloadRX[4]<<8) + (nRF24_payloadRX[5]);
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003dda:	789b      	ldrb	r3, [r3, #2]
 8003ddc:	061a      	lsls	r2, r3, #24
 8003dde:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003de0:	78db      	ldrb	r3, [r3, #3]
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	441a      	add	r2, r3
 8003de6:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003de8:	791b      	ldrb	r3, [r3, #4]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	4413      	add	r3, r2
 8003dee:	4a20      	ldr	r2, [pc, #128]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003df0:	7952      	ldrb	r2, [r2, #5]
 8003df2:	4413      	add	r3, r2
 8003df4:	461a      	mov	r2, r3
 8003df6:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <TIM2_IRQHandler+0x2dc>)
 8003df8:	601a      	str	r2, [r3, #0]

  				  					}break;
 8003dfa:	e052      	b.n	8003ea2 <TIM2_IRQHandler+0x2e2>

  				case COMMPARAMFLASH:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 8003dfc:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <TIM2_IRQHandler+0x2b0>)
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	461a      	mov	r2, r3
 8003e02:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <TIM2_IRQHandler+0x2d8>)
 8003e04:	601a      	str	r2, [r3, #0]

  				  					}break;
 8003e06:	e04c      	b.n	8003ea2 <TIM2_IRQHandler+0x2e2>
 8003e08:	20000880 	.word	0x20000880
 8003e0c:	20000818 	.word	0x20000818
 8003e10:	40020800 	.word	0x40020800
 8003e14:	2000025c 	.word	0x2000025c
 8003e18:	4090ac29 	.word	0x4090ac29
 8003e1c:	20000828 	.word	0x20000828
 8003e20:	2000022c 	.word	0x2000022c
 8003e24:	200006a4 	.word	0x200006a4
 8003e28:	20000224 	.word	0x20000224
 8003e2c:	20000784 	.word	0x20000784
 8003e30:	51eb851f 	.word	0x51eb851f
 8003e34:	20000228 	.word	0x20000228
 8003e38:	200004a8 	.word	0x200004a8
 8003e3c:	2000083c 	.word	0x2000083c
 8003e40:	2000056c 	.word	0x2000056c
 8003e44:	200007a8 	.word	0x200007a8
 8003e48:	200002fc 	.word	0x200002fc
 8003e4c:	20000838 	.word	0x20000838
 8003e50:	200004b4 	.word	0x200004b4
 8003e54:	2000076c 	.word	0x2000076c
 8003e58:	2000047c 	.word	0x2000047c
 8003e5c:	20000698 	.word	0x20000698
 8003e60:	20000300 	.word	0x20000300
 8003e64:	20000820 	.word	0x20000820
 8003e68:	20000000 	.word	0x20000000
 8003e6c:	2000021b 	.word	0x2000021b
 8003e70:	20000304 	.word	0x20000304
 8003e74:	2000069c 	.word	0x2000069c
 8003e78:	200004ac 	.word	0x200004ac
 8003e7c:	200004a0 	.word	0x200004a0
 8003e80:	20000564 	.word	0x20000564
 8003e84:	200002f8 	.word	0x200002f8
 8003e88:	2000050c 	.word	0x2000050c
 8003e8c:	20000568 	.word	0x20000568
 8003e90:	20000684 	.word	0x20000684
 8003e94:	20000824 	.word	0x20000824
 8003e98:	2000078c 	.word	0x2000078c
 8003e9c:	20000770 	.word	0x20000770
  									}break;
 8003ea0:	bf00      	nop


  			}


  			if(MSGSelector==COMMPARAMACTIVE)//save values in active structure
 8003ea2:	4bb4      	ldr	r3, [pc, #720]	; (8004174 <TIM2_IRQHandler+0x5b4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	f040 8138 	bne.w	800411c <TIM2_IRQHandler+0x55c>
  			{
  				switch(ParamSelector)
 8003eac:	4bb2      	ldr	r3, [pc, #712]	; (8004178 <TIM2_IRQHandler+0x5b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	2b13      	cmp	r3, #19
 8003eb4:	f200 8133 	bhi.w	800411e <TIM2_IRQHandler+0x55e>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <TIM2_IRQHandler+0x300>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003f11 	.word	0x08003f11
 8003ec4:	08003f2d 	.word	0x08003f2d
 8003ec8:	08003f49 	.word	0x08003f49
 8003ecc:	08003f65 	.word	0x08003f65
 8003ed0:	08003f81 	.word	0x08003f81
 8003ed4:	08003f9d 	.word	0x08003f9d
 8003ed8:	08003fb9 	.word	0x08003fb9
 8003edc:	08003fd5 	.word	0x08003fd5
 8003ee0:	08003ff1 	.word	0x08003ff1
 8003ee4:	0800400d 	.word	0x0800400d
 8003ee8:	08004023 	.word	0x08004023
 8003eec:	08004039 	.word	0x08004039
 8003ef0:	0800404f 	.word	0x0800404f
 8003ef4:	08004065 	.word	0x08004065
 8003ef8:	0800407b 	.word	0x0800407b
 8003efc:	08004091 	.word	0x08004091
 8003f00:	080040ad 	.word	0x080040ad
 8003f04:	080040c9 	.word	0x080040c9
 8003f08:	080040e5 	.word	0x080040e5
 8003f0c:	08004101 	.word	0x08004101
  				{
					case  PARAM1 :{FlashDataActive.pid_p_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003f10:	4b9a      	ldr	r3, [pc, #616]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f1c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8003f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f24:	4b97      	ldr	r3, [pc, #604]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8003f26:	edc3 7a01 	vstr	s15, [r3, #4]
 8003f2a:	e0f8      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM2 :{FlashDataActive.pid_i_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	ee07 3a90 	vmov	s15, r3
 8003f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f38:	eddf 6a91 	vldr	s13, [pc, #580]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8003f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f40:	4b90      	ldr	r3, [pc, #576]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8003f42:	edc3 7a02 	vstr	s15, [r3, #8]
 8003f46:	e0ea      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM3 :{FlashDataActive.pid_d_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003f48:	4b8c      	ldr	r3, [pc, #560]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f54:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8003f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f5c:	4b89      	ldr	r3, [pc, #548]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8003f5e:	edc3 7a03 	vstr	s15, [r3, #12]
 8003f62:	e0dc      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM4 :{FlashDataActive.pid_p_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003f64:	4b85      	ldr	r3, [pc, #532]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	ee07 3a90 	vmov	s15, r3
 8003f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f70:	eddf 6a83 	vldr	s13, [pc, #524]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8003f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f78:	4b82      	ldr	r3, [pc, #520]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8003f7a:	edc3 7a04 	vstr	s15, [r3, #16]
 8003f7e:	e0ce      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM5 :{FlashDataActive.pid_i_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003f80:	4b7e      	ldr	r3, [pc, #504]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f8c:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8003f90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f94:	4b7b      	ldr	r3, [pc, #492]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8003f96:	edc3 7a05 	vstr	s15, [r3, #20]
 8003f9a:	e0c0      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM6 :{FlashDataActive.pid_d_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003f9c:	4b77      	ldr	r3, [pc, #476]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	ee07 3a90 	vmov	s15, r3
 8003fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fa8:	eddf 6a75 	vldr	s13, [pc, #468]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8003fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb0:	4b74      	ldr	r3, [pc, #464]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8003fb2:	edc3 7a06 	vstr	s15, [r3, #24]
 8003fb6:	e0b2      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM7 :{FlashDataActive.pid_p_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003fb8:	4b70      	ldr	r3, [pc, #448]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	ee07 3a90 	vmov	s15, r3
 8003fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fc4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8003fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fcc:	4b6d      	ldr	r3, [pc, #436]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8003fce:	edc3 7a07 	vstr	s15, [r3, #28]
 8003fd2:	e0a4      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM8 :{FlashDataActive.pid_i_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003fd4:	4b69      	ldr	r3, [pc, #420]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	ee07 3a90 	vmov	s15, r3
 8003fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fe0:	eddf 6a67 	vldr	s13, [pc, #412]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8003fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fe8:	4b66      	ldr	r3, [pc, #408]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8003fea:	edc3 7a08 	vstr	s15, [r3, #32]
 8003fee:	e096      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM9 :{FlashDataActive.pid_d_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8003ff0:	4b62      	ldr	r3, [pc, #392]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	ee07 3a90 	vmov	s15, r3
 8003ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ffc:	eddf 6a60 	vldr	s13, [pc, #384]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8004000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004004:	4b5f      	ldr	r3, [pc, #380]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8004006:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 800400a:	e088      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM10 :{FlashDataActive.pid_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 800400c:	4b5b      	ldr	r3, [pc, #364]	; (800417c <TIM2_IRQHandler+0x5bc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	4a5d      	ldr	r2, [pc, #372]	; (8004188 <TIM2_IRQHandler+0x5c8>)
 8004014:	fba2 2303 	umull	r2, r3, r2, r3
 8004018:	09db      	lsrs	r3, r3, #7
 800401a:	461a      	mov	r2, r3
 800401c:	4b59      	ldr	r3, [pc, #356]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 800401e:	629a      	str	r2, [r3, #40]	; 0x28
 8004020:	e07d      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM11 :{FlashDataActive.pid_i_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004022:	4b56      	ldr	r3, [pc, #344]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	4a57      	ldr	r2, [pc, #348]	; (8004188 <TIM2_IRQHandler+0x5c8>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	09db      	lsrs	r3, r3, #7
 8004030:	461a      	mov	r2, r3
 8004032:	4b54      	ldr	r3, [pc, #336]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c
 8004036:	e072      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM12 :{FlashDataActive.pid_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004038:	4b50      	ldr	r3, [pc, #320]	; (800417c <TIM2_IRQHandler+0x5bc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	095b      	lsrs	r3, r3, #5
 800403e:	4a52      	ldr	r2, [pc, #328]	; (8004188 <TIM2_IRQHandler+0x5c8>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	09db      	lsrs	r3, r3, #7
 8004046:	461a      	mov	r2, r3
 8004048:	4b4e      	ldr	r3, [pc, #312]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
 800404c:	e067      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM13 :{FlashDataActive.pid_i_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 800404e:	4b4b      	ldr	r3, [pc, #300]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	4a4c      	ldr	r2, [pc, #304]	; (8004188 <TIM2_IRQHandler+0x5c8>)
 8004056:	fba2 2303 	umull	r2, r3, r2, r3
 800405a:	09db      	lsrs	r3, r3, #7
 800405c:	461a      	mov	r2, r3
 800405e:	4b49      	ldr	r3, [pc, #292]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8004060:	635a      	str	r2, [r3, #52]	; 0x34
 8004062:	e05c      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM14 :{FlashDataActive.pid_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8004064:	4b45      	ldr	r3, [pc, #276]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	4a47      	ldr	r2, [pc, #284]	; (8004188 <TIM2_IRQHandler+0x5c8>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	09db      	lsrs	r3, r3, #7
 8004072:	461a      	mov	r2, r3
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8004076:	639a      	str	r2, [r3, #56]	; 0x38
 8004078:	e051      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM15 :{FlashDataActive.pid_i_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 800407a:	4b40      	ldr	r3, [pc, #256]	; (800417c <TIM2_IRQHandler+0x5bc>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	4a41      	ldr	r2, [pc, #260]	; (8004188 <TIM2_IRQHandler+0x5c8>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	09db      	lsrs	r3, r3, #7
 8004088:	461a      	mov	r2, r3
 800408a:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 800408c:	63da      	str	r2, [r3, #60]	; 0x3c
 800408e:	e046      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM16 :{FlashDataActive.maxpitchdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004090:	4b3a      	ldr	r3, [pc, #232]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	ee07 3a90 	vmov	s15, r3
 8004098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800409c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004180 <TIM2_IRQHandler+0x5c0>
 80040a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040a4:	4b37      	ldr	r3, [pc, #220]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 80040a6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 80040aa:	e038      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM17 :{FlashDataActive.maxrolldegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80040ac:	4b33      	ldr	r3, [pc, #204]	; (800417c <TIM2_IRQHandler+0x5bc>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	ee07 3a90 	vmov	s15, r3
 80040b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040b8:	eddf 6a31 	vldr	s13, [pc, #196]	; 8004180 <TIM2_IRQHandler+0x5c0>
 80040bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040c0:	4b30      	ldr	r3, [pc, #192]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 80040c2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 80040c6:	e02a      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM18 :{FlashDataActive.maxyawdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80040c8:	4b2c      	ldr	r3, [pc, #176]	; (800417c <TIM2_IRQHandler+0x5bc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040d4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004180 <TIM2_IRQHandler+0x5c0>
 80040d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 80040de:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 80040e2:	e01c      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM19 :{FlashDataActive.minthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 80040e4:	4b25      	ldr	r3, [pc, #148]	; (800417c <TIM2_IRQHandler+0x5bc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	ee07 3a90 	vmov	s15, r3
 80040ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040f0:	eddf 6a23 	vldr	s13, [pc, #140]	; 8004180 <TIM2_IRQHandler+0x5c0>
 80040f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040f8:	4b22      	ldr	r3, [pc, #136]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 80040fa:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 80040fe:	e00e      	b.n	800411e <TIM2_IRQHandler+0x55e>
					case  PARAM20 :{FlashDataActive.maxthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8004100:	4b1e      	ldr	r3, [pc, #120]	; (800417c <TIM2_IRQHandler+0x5bc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	ee07 3a90 	vmov	s15, r3
 8004108:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800410c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8004180 <TIM2_IRQHandler+0x5c0>
 8004110:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8004116:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 800411a:	e000      	b.n	800411e <TIM2_IRQHandler+0x55e>
  				}
  			}
 800411c:	bf00      	nop



  			SendBackFlag=1;
 800411e:	4b1b      	ldr	r3, [pc, #108]	; (800418c <TIM2_IRQHandler+0x5cc>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <TIM2_IRQHandler+0x5d0>)
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <TIM2_IRQHandler+0x5d4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <TIM2_IRQHandler+0x5d4>)
 8004132:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8004134:	4b15      	ldr	r3, [pc, #84]	; (800418c <TIM2_IRQHandler+0x5cc>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 82a9 	beq.w	8004690 <TIM2_IRQHandler+0xad0>
  {
    	BackTimer++;
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <TIM2_IRQHandler+0x5d8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3301      	adds	r3, #1
 8004144:	4a14      	ldr	r2, [pc, #80]	; (8004198 <TIM2_IRQHandler+0x5d8>)
 8004146:	6013      	str	r3, [r2, #0]

    	//Calculate param for transfer
    	 if(MSGSelector==COMMPARAMACTIVE || MSGSelector==COMMPARAMFLASH)
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <TIM2_IRQHandler+0x5b4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d004      	beq.n	800415a <TIM2_IRQHandler+0x59a>
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <TIM2_IRQHandler+0x5b4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b02      	cmp	r3, #2
 8004156:	f040 8157 	bne.w	8004408 <TIM2_IRQHandler+0x848>
    	 {
    		 if(MSGSelector==COMMPARAMACTIVE)FlashDataTemp=FlashDataActive;
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <TIM2_IRQHandler+0x5b4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d11e      	bne.n	80041a0 <TIM2_IRQHandler+0x5e0>
 8004162:	4a0e      	ldr	r2, [pc, #56]	; (800419c <TIM2_IRQHandler+0x5dc>)
 8004164:	4b07      	ldr	r3, [pc, #28]	; (8004184 <TIM2_IRQHandler+0x5c4>)
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	2354      	movs	r3, #84	; 0x54
 800416c:	461a      	mov	r2, r3
 800416e:	f005 f993 	bl	8009498 <memcpy>
 8004172:	e01d      	b.n	80041b0 <TIM2_IRQHandler+0x5f0>
 8004174:	2000069c 	.word	0x2000069c
 8004178:	2000078c 	.word	0x2000078c
 800417c:	20000770 	.word	0x20000770
 8004180:	47c35000 	.word	0x47c35000
 8004184:	200004b8 	.word	0x200004b8
 8004188:	0a7c5ac5 	.word	0x0a7c5ac5
 800418c:	20000230 	.word	0x20000230
 8004190:	20000000 	.word	0x20000000
 8004194:	20000694 	.word	0x20000694
 8004198:	20000234 	.word	0x20000234
 800419c:	200007b8 	.word	0x200007b8
    		 else FlashDataTemp=FlashDataFlash;
 80041a0:	4ab5      	ldr	r2, [pc, #724]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 80041a2:	4bb6      	ldr	r3, [pc, #728]	; (800447c <TIM2_IRQHandler+0x8bc>)
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	2354      	movs	r3, #84	; 0x54
 80041aa:	461a      	mov	r2, r3
 80041ac:	f005 f974 	bl	8009498 <memcpy>

    		 switch(ParamSelector)
 80041b0:	4bb3      	ldr	r3, [pc, #716]	; (8004480 <TIM2_IRQHandler+0x8c0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	2b13      	cmp	r3, #19
 80041b8:	f200 8127 	bhi.w	800440a <TIM2_IRQHandler+0x84a>
 80041bc:	a201      	add	r2, pc, #4	; (adr r2, 80041c4 <TIM2_IRQHandler+0x604>)
 80041be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c2:	bf00      	nop
 80041c4:	08004215 	.word	0x08004215
 80041c8:	08004231 	.word	0x08004231
 80041cc:	0800424d 	.word	0x0800424d
 80041d0:	08004269 	.word	0x08004269
 80041d4:	08004285 	.word	0x08004285
 80041d8:	080042a1 	.word	0x080042a1
 80041dc:	080042bd 	.word	0x080042bd
 80041e0:	080042d9 	.word	0x080042d9
 80041e4:	080042f5 	.word	0x080042f5
 80041e8:	08004311 	.word	0x08004311
 80041ec:	08004323 	.word	0x08004323
 80041f0:	08004335 	.word	0x08004335
 80041f4:	08004347 	.word	0x08004347
 80041f8:	08004359 	.word	0x08004359
 80041fc:	0800436b 	.word	0x0800436b
 8004200:	0800437d 	.word	0x0800437d
 8004204:	08004399 	.word	0x08004399
 8004208:	080043b5 	.word	0x080043b5
 800420c:	080043d1 	.word	0x080043d1
 8004210:	080043ed 	.word	0x080043ed
    		 {
    	 	 	 case PARAM1: {ParamDataTX=FlashDataTemp.pid_p_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004214:	4b98      	ldr	r3, [pc, #608]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 8004216:	edd3 7a01 	vldr	s15, [r3, #4]
 800421a:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8004484 <TIM2_IRQHandler+0x8c4>
 800421e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004226:	ee17 2a90 	vmov	r2, s15
 800422a:	4b97      	ldr	r3, [pc, #604]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	e0ec      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM2: {ParamDataTX=FlashDataTemp.pid_i_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004230:	4b91      	ldr	r3, [pc, #580]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 8004232:	edd3 7a02 	vldr	s15, [r3, #8]
 8004236:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8004484 <TIM2_IRQHandler+0x8c4>
 800423a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800423e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004242:	ee17 2a90 	vmov	r2, s15
 8004246:	4b90      	ldr	r3, [pc, #576]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	e0de      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM3: {ParamDataTX=FlashDataTemp.pid_d_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 800424c:	4b8a      	ldr	r3, [pc, #552]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 800424e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004252:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004484 <TIM2_IRQHandler+0x8c4>
 8004256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800425a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800425e:	ee17 2a90 	vmov	r2, s15
 8004262:	4b89      	ldr	r3, [pc, #548]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e0d0      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM4: {ParamDataTX=FlashDataTemp.pid_p_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004268:	4b83      	ldr	r3, [pc, #524]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 800426a:	edd3 7a04 	vldr	s15, [r3, #16]
 800426e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8004484 <TIM2_IRQHandler+0x8c4>
 8004272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800427a:	ee17 2a90 	vmov	r2, s15
 800427e:	4b82      	ldr	r3, [pc, #520]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e0c2      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM5: {ParamDataTX=FlashDataTemp.pid_i_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004284:	4b7c      	ldr	r3, [pc, #496]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 8004286:	edd3 7a05 	vldr	s15, [r3, #20]
 800428a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8004484 <TIM2_IRQHandler+0x8c4>
 800428e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004292:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004296:	ee17 2a90 	vmov	r2, s15
 800429a:	4b7b      	ldr	r3, [pc, #492]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e0b4      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM6: {ParamDataTX=FlashDataTemp.pid_d_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 80042a0:	4b75      	ldr	r3, [pc, #468]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 80042a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80042a6:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8004484 <TIM2_IRQHandler+0x8c4>
 80042aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042b2:	ee17 2a90 	vmov	r2, s15
 80042b6:	4b74      	ldr	r3, [pc, #464]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e0a6      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM7: {ParamDataTX=FlashDataTemp.pid_p_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 80042bc:	4b6e      	ldr	r3, [pc, #440]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 80042be:	edd3 7a07 	vldr	s15, [r3, #28]
 80042c2:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004484 <TIM2_IRQHandler+0x8c4>
 80042c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ce:	ee17 2a90 	vmov	r2, s15
 80042d2:	4b6d      	ldr	r3, [pc, #436]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e098      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM8: {ParamDataTX=FlashDataTemp.pid_i_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 80042d8:	4b67      	ldr	r3, [pc, #412]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 80042da:	edd3 7a08 	vldr	s15, [r3, #32]
 80042de:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004484 <TIM2_IRQHandler+0x8c4>
 80042e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ea:	ee17 2a90 	vmov	r2, s15
 80042ee:	4b66      	ldr	r3, [pc, #408]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e08a      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM9: {ParamDataTX=FlashDataTemp.pid_d_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 80042f4:	4b60      	ldr	r3, [pc, #384]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 80042f6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80042fa:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8004484 <TIM2_IRQHandler+0x8c4>
 80042fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004306:	ee17 2a90 	vmov	r2, s15
 800430a:	4b5f      	ldr	r3, [pc, #380]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e07c      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM10: {ParamDataTX=FlashDataTemp.pid_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	4a5d      	ldr	r2, [pc, #372]	; (800448c <TIM2_IRQHandler+0x8cc>)
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	461a      	mov	r2, r3
 800431c:	4b5a      	ldr	r3, [pc, #360]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	e073      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM11: {ParamDataTX=FlashDataTemp.pid_i_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8004322:	4b55      	ldr	r3, [pc, #340]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	4a59      	ldr	r2, [pc, #356]	; (800448c <TIM2_IRQHandler+0x8cc>)
 8004328:	fb02 f303 	mul.w	r3, r2, r3
 800432c:	461a      	mov	r2, r3
 800432e:	4b56      	ldr	r3, [pc, #344]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e06a      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM12: {ParamDataTX=FlashDataTemp.pid_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004334:	4b50      	ldr	r3, [pc, #320]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	4a54      	ldr	r2, [pc, #336]	; (800448c <TIM2_IRQHandler+0x8cc>)
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	461a      	mov	r2, r3
 8004340:	4b51      	ldr	r3, [pc, #324]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	e061      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM13: {ParamDataTX=FlashDataTemp.pid_i_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8004346:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 8004348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800434a:	4a50      	ldr	r2, [pc, #320]	; (800448c <TIM2_IRQHandler+0x8cc>)
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	461a      	mov	r2, r3
 8004352:	4b4d      	ldr	r3, [pc, #308]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	e058      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM14: {ParamDataTX=FlashDataTemp.pid_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8004358:	4b47      	ldr	r3, [pc, #284]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	4a4b      	ldr	r2, [pc, #300]	; (800448c <TIM2_IRQHandler+0x8cc>)
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	461a      	mov	r2, r3
 8004364:	4b48      	ldr	r3, [pc, #288]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e04f      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM15: {ParamDataTX=FlashDataTemp.pid_i_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 800436a:	4b43      	ldr	r3, [pc, #268]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	4a47      	ldr	r2, [pc, #284]	; (800448c <TIM2_IRQHandler+0x8cc>)
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	461a      	mov	r2, r3
 8004376:	4b44      	ldr	r3, [pc, #272]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	e046      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM16: {ParamDataTX=FlashDataTemp.maxpitchdegree*FLASHCONSTANTMULTIPLIER;}break;
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 800437e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004382:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004484 <TIM2_IRQHandler+0x8c4>
 8004386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800438a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800438e:	ee17 2a90 	vmov	r2, s15
 8004392:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	e038      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM17: {ParamDataTX=FlashDataTemp.maxrolldegree*FLASHCONSTANTMULTIPLIER;}break;
 8004398:	4b37      	ldr	r3, [pc, #220]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 800439a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800439e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004484 <TIM2_IRQHandler+0x8c4>
 80043a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043aa:	ee17 2a90 	vmov	r2, s15
 80043ae:	4b36      	ldr	r3, [pc, #216]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e02a      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM18: {ParamDataTX=FlashDataTemp.maxyawdegree*FLASHCONSTANTMULTIPLIER;}break;
 80043b4:	4b30      	ldr	r3, [pc, #192]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 80043b6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80043ba:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004484 <TIM2_IRQHandler+0x8c4>
 80043be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c6:	ee17 2a90 	vmov	r2, s15
 80043ca:	4b2f      	ldr	r3, [pc, #188]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	e01c      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM19: {ParamDataTX=FlashDataTemp.minthrottle*FLASHCONSTANTMULTIPLIER;}break;
 80043d0:	4b29      	ldr	r3, [pc, #164]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 80043d2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80043d6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004484 <TIM2_IRQHandler+0x8c4>
 80043da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e2:	ee17 2a90 	vmov	r2, s15
 80043e6:	4b28      	ldr	r3, [pc, #160]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e00e      	b.n	800440a <TIM2_IRQHandler+0x84a>
    	 	 	 case PARAM20: {ParamDataTX=FlashDataTemp.maxthrottle*FLASHCONSTANTMULTIPLIER;}break;
 80043ec:	4b22      	ldr	r3, [pc, #136]	; (8004478 <TIM2_IRQHandler+0x8b8>)
 80043ee:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80043f2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004484 <TIM2_IRQHandler+0x8c4>
 80043f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043fe:	ee17 2a90 	vmov	r2, s15
 8004402:	4b21      	ldr	r3, [pc, #132]	; (8004488 <TIM2_IRQHandler+0x8c8>)
 8004404:	601a      	str	r2, [r3, #0]
 8004406:	e000      	b.n	800440a <TIM2_IRQHandler+0x84a>
    		 }
    	 }
 8004408:	bf00      	nop

      	switch(BackTimer)
 800440a:	4b21      	ldr	r3, [pc, #132]	; (8004490 <TIM2_IRQHandler+0x8d0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3b01      	subs	r3, #1
 8004410:	2b05      	cmp	r3, #5
 8004412:	f200 813e 	bhi.w	8004692 <TIM2_IRQHandler+0xad2>
 8004416:	a201      	add	r2, pc, #4	; (adr r2, 800441c <TIM2_IRQHandler+0x85c>)
 8004418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441c:	08004435 	.word	0x08004435
 8004420:	08004693 	.word	0x08004693
 8004424:	08004693 	.word	0x08004693
 8004428:	08004449 	.word	0x08004449
 800442c:	08004669 	.word	0x08004669
 8004430:	0800467d 	.word	0x0800467d
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8004434:	2200      	movs	r2, #0
 8004436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800443a:	4816      	ldr	r0, [pc, #88]	; (8004494 <TIM2_IRQHandler+0x8d4>)
 800443c:	f002 f9f2 	bl	8006824 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8004440:	2000      	movs	r0, #0
 8004442:	f7ff f830 	bl	80034a6 <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8004446:	e124      	b.n	8004692 <TIM2_IRQHandler+0xad2>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 	 		 nRF24_payloadTX[0] = MSGSelector;
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <TIM2_IRQHandler+0x8d8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <TIM2_IRQHandler+0x8dc>)
 8004450:	701a      	strb	r2, [r3, #0]

  	 	 	 		switch(MSGSelector)
 8004452:	4b11      	ldr	r3, [pc, #68]	; (8004498 <TIM2_IRQHandler+0x8d8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b04      	cmp	r3, #4
 8004458:	f200 8101 	bhi.w	800465e <TIM2_IRQHandler+0xa9e>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <TIM2_IRQHandler+0x8a4>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	080044a1 	.word	0x080044a1
 8004468:	080045eb 	.word	0x080045eb
 800446c:	08004625 	.word	0x08004625
 8004470:	0800459b 	.word	0x0800459b
 8004474:	080045c3 	.word	0x080045c3
 8004478:	200007b8 	.word	0x200007b8
 800447c:	20000510 	.word	0x20000510
 8004480:	2000078c 	.word	0x2000078c
 8004484:	47c35000 	.word	0x47c35000
 8004488:	20000794 	.word	0x20000794
 800448c:	000186a0 	.word	0x000186a0
 8004490:	20000234 	.word	0x20000234
 8004494:	40020400 	.word	0x40020400
 8004498:	2000069c 	.word	0x2000069c
 800449c:	20000480 	.word	0x20000480
  	 	 	 		{
  	 	 	 			case COMMCONTROLDATA:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = (uint8_t)(BattmVAVG & 0xFF);
 80044a0:	4b89      	ldr	r3, [pc, #548]	; (80046c8 <TIM2_IRQHandler+0xb08>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b89      	ldr	r3, [pc, #548]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80044a8:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 80044aa:	4b87      	ldr	r3, [pc, #540]	; (80046c8 <TIM2_IRQHandler+0xb08>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4b86      	ldr	r3, [pc, #536]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80044b4:	709a      	strb	r2, [r3, #2]

  	 	 	 								  	//save Angle for NRF24 transfer
  	 	 	 								  	if(mpuDataStr.Pitch<0)
 80044b6:	4b86      	ldr	r3, [pc, #536]	; (80046d0 <TIM2_IRQHandler+0xb10>)
 80044b8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80044bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c4:	d510      	bpl.n	80044e8 <TIM2_IRQHandler+0x928>
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=1;
 80044c6:	4b83      	ldr	r3, [pc, #524]	; (80046d4 <TIM2_IRQHandler+0xb14>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=mpuDataStr.Pitch*(-1);
 80044cc:	4b80      	ldr	r3, [pc, #512]	; (80046d0 <TIM2_IRQHandler+0xb10>)
 80044ce:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80044d2:	eef1 7a67 	vneg.f32	s15, s15
 80044d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044da:	edc7 7a01 	vstr	s15, [r7, #4]
 80044de:	793b      	ldrb	r3, [r7, #4]
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	4b7d      	ldr	r3, [pc, #500]	; (80046d8 <TIM2_IRQHandler+0xb18>)
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e00d      	b.n	8004504 <TIM2_IRQHandler+0x944>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=0;
 80044e8:	4b7a      	ldr	r3, [pc, #488]	; (80046d4 <TIM2_IRQHandler+0xb14>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=mpuDataStr.Pitch;
 80044ee:	4b78      	ldr	r3, [pc, #480]	; (80046d0 <TIM2_IRQHandler+0xb10>)
 80044f0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80044f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80044fc:	793b      	ldrb	r3, [r7, #4]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	4b75      	ldr	r3, [pc, #468]	; (80046d8 <TIM2_IRQHandler+0xb18>)
 8004502:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	if(mpuDataStr.Roll<0)
 8004504:	4b72      	ldr	r3, [pc, #456]	; (80046d0 <TIM2_IRQHandler+0xb10>)
 8004506:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800450a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	d510      	bpl.n	8004536 <TIM2_IRQHandler+0x976>
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=1;
 8004514:	4b71      	ldr	r3, [pc, #452]	; (80046dc <TIM2_IRQHandler+0xb1c>)
 8004516:	2201      	movs	r2, #1
 8004518:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=mpuDataStr.Roll*(-1);
 800451a:	4b6d      	ldr	r3, [pc, #436]	; (80046d0 <TIM2_IRQHandler+0xb10>)
 800451c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8004520:	eef1 7a67 	vneg.f32	s15, s15
 8004524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004528:	edc7 7a01 	vstr	s15, [r7, #4]
 800452c:	793b      	ldrb	r3, [r7, #4]
 800452e:	b2da      	uxtb	r2, r3
 8004530:	4b6b      	ldr	r3, [pc, #428]	; (80046e0 <TIM2_IRQHandler+0xb20>)
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e00d      	b.n	8004552 <TIM2_IRQHandler+0x992>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=0;
 8004536:	4b69      	ldr	r3, [pc, #420]	; (80046dc <TIM2_IRQHandler+0xb1c>)
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=mpuDataStr.Roll;
 800453c:	4b64      	ldr	r3, [pc, #400]	; (80046d0 <TIM2_IRQHandler+0xb10>)
 800453e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8004542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004546:	edc7 7a01 	vstr	s15, [r7, #4]
 800454a:	793b      	ldrb	r3, [r7, #4]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	4b64      	ldr	r3, [pc, #400]	; (80046e0 <TIM2_IRQHandler+0xb20>)
 8004550:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	nRF24_payloadTX[3] = (uint8_t)(AnglePitchNRF24);
 8004552:	4b61      	ldr	r3, [pc, #388]	; (80046d8 <TIM2_IRQHandler+0xb18>)
 8004554:	781a      	ldrb	r2, [r3, #0]
 8004556:	4b5d      	ldr	r3, [pc, #372]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 8004558:	70da      	strb	r2, [r3, #3]
  	 	 	 								  	nRF24_payloadTX[4] = (uint8_t)(AngleRollNRF24);
 800455a:	4b61      	ldr	r3, [pc, #388]	; (80046e0 <TIM2_IRQHandler+0xb20>)
 800455c:	781a      	ldrb	r2, [r3, #0]
 800455e:	4b5b      	ldr	r3, [pc, #364]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 8004560:	711a      	strb	r2, [r3, #4]
  	 	 	 								  	nRF24_payloadTX[5] = (uint8_t)(AnglePitchDIR + (AngleRollDIR<<1) + (GyroCalibStatus<<2) + ((MotorStatus & 0x7)<<3) ); //1bit Pitch DIR, 1bit Roll DIR, 1 bit GyroCalinFlag, 3 bit MotorStatus
 8004562:	4b5e      	ldr	r3, [pc, #376]	; (80046dc <TIM2_IRQHandler+0xb1c>)
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	b2da      	uxtb	r2, r3
 800456a:	4b5a      	ldr	r3, [pc, #360]	; (80046d4 <TIM2_IRQHandler+0xb14>)
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	4413      	add	r3, r2
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4b5c      	ldr	r3, [pc, #368]	; (80046e4 <TIM2_IRQHandler+0xb24>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	b2db      	uxtb	r3, r3
 800457c:	4413      	add	r3, r2
 800457e:	b2da      	uxtb	r2, r3
 8004580:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <TIM2_IRQHandler+0xb28>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800458e:	b2db      	uxtb	r3, r3
 8004590:	4413      	add	r3, r2
 8004592:	b2da      	uxtb	r2, r3
 8004594:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 8004596:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 8004598:	e061      	b.n	800465e <TIM2_IRQHandler+0xa9e>
  	 	 	 			case COMMERASEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 800459a:	4b4c      	ldr	r3, [pc, #304]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 800459c:	2200      	movs	r2, #0
 800459e:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2]=0;
 80045a0:	4b4a      	ldr	r3, [pc, #296]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	709a      	strb	r2, [r3, #2]
  	 	 	 							  	 	nRF24_payloadTX[3]=0;
 80045a6:	4b49      	ldr	r3, [pc, #292]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	70da      	strb	r2, [r3, #3]
  	 	 	 							  	 	nRF24_payloadTX[4]=0;
 80045ac:	4b47      	ldr	r3, [pc, #284]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	711a      	strb	r2, [r3, #4]
  	 	 	 							  	 	nRF24_payloadTX[5]=0;
 80045b2:	4b46      	ldr	r3, [pc, #280]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	715a      	strb	r2, [r3, #5]
  	 	 	 							  	 	FlashEraseTimeoutCount=FLASHOPERATIONTIMEOUT;//set timeout to prevent multiple calls
 80045b8:	4b4c      	ldr	r3, [pc, #304]	; (80046ec <TIM2_IRQHandler+0xb2c>)
 80045ba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045be:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 80045c0:	e04d      	b.n	800465e <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMWRITEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 80045c2:	4b42      	ldr	r3, [pc, #264]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	705a      	strb	r2, [r3, #1]
  	 	 	 						  	 	  	nRF24_payloadTX[2]=0;
 80045c8:	4b40      	ldr	r3, [pc, #256]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	709a      	strb	r2, [r3, #2]
  	 	 	 						  	 	  	nRF24_payloadTX[3]=0;
 80045ce:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	70da      	strb	r2, [r3, #3]
  	 	 	 						  	 	  	nRF24_payloadTX[4]=0;
 80045d4:	4b3d      	ldr	r3, [pc, #244]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	711a      	strb	r2, [r3, #4]
  	 	 	 						  	 	  	nRF24_payloadTX[5]=0;
 80045da:	4b3c      	ldr	r3, [pc, #240]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	715a      	strb	r2, [r3, #5]
  	 	 	 						  	 	  	FlashWriteTimeoutCount=FLASHOPERATIONTIMEOUT; //set timeout to prevent multiple calls
 80045e0:	4b43      	ldr	r3, [pc, #268]	; (80046f0 <TIM2_IRQHandler+0xb30>)
 80045e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045e6:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 80045e8:	e039      	b.n	800465e <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMPARAMACTIVE:
											{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 80045ea:	4b42      	ldr	r3, [pc, #264]	; (80046f4 <TIM2_IRQHandler+0xb34>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	4b36      	ldr	r3, [pc, #216]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045f2:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 80045f4:	4b40      	ldr	r3, [pc, #256]	; (80046f8 <TIM2_IRQHandler+0xb38>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	0e1b      	lsrs	r3, r3, #24
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	4b33      	ldr	r3, [pc, #204]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 80045fe:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 8004600:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <TIM2_IRQHandler+0xb38>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	b2da      	uxtb	r2, r3
 8004608:	4b30      	ldr	r3, [pc, #192]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 800460a:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 800460c:	4b3a      	ldr	r3, [pc, #232]	; (80046f8 <TIM2_IRQHandler+0xb38>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	b2da      	uxtb	r2, r3
 8004614:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 8004616:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8004618:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <TIM2_IRQHandler+0xb38>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	b2da      	uxtb	r2, r3
 800461e:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 8004620:	715a      	strb	r2, [r3, #5]
											}break;
 8004622:	e01c      	b.n	800465e <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMPARAMFLASH:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 8004624:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <TIM2_IRQHandler+0xb34>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4b28      	ldr	r3, [pc, #160]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 800462c:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 800462e:	4b32      	ldr	r3, [pc, #200]	; (80046f8 <TIM2_IRQHandler+0xb38>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	0e1b      	lsrs	r3, r3, #24
 8004634:	b2da      	uxtb	r2, r3
 8004636:	4b25      	ldr	r3, [pc, #148]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 8004638:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 800463a:	4b2f      	ldr	r3, [pc, #188]	; (80046f8 <TIM2_IRQHandler+0xb38>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	0c1b      	lsrs	r3, r3, #16
 8004640:	b2da      	uxtb	r2, r3
 8004642:	4b22      	ldr	r3, [pc, #136]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 8004644:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 8004646:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <TIM2_IRQHandler+0xb38>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	0a1b      	lsrs	r3, r3, #8
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 8004650:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8004652:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <TIM2_IRQHandler+0xb38>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 800465a:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 800465c:	bf00      	nop
  	 	 	 		}

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 6);
 800465e:	2106      	movs	r1, #6
 8004660:	481a      	ldr	r0, [pc, #104]	; (80046cc <TIM2_IRQHandler+0xb0c>)
 8004662:	f7fe fd4d 	bl	8003100 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 8004666:	e014      	b.n	8004692 <TIM2_IRQHandler+0xad2>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 8004668:	2001      	movs	r0, #1
 800466a:	f7fe ff1c 	bl	80034a6 <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 800466e:	2201      	movs	r2, #1
 8004670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004674:	4821      	ldr	r0, [pc, #132]	; (80046fc <TIM2_IRQHandler+0xb3c>)
 8004676:	f002 f8d5 	bl	8006824 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 800467a:	e00a      	b.n	8004692 <TIM2_IRQHandler+0xad2>

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 800467c:	4b20      	ldr	r3, [pc, #128]	; (8004700 <TIM2_IRQHandler+0xb40>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <TIM2_IRQHandler+0xb44>)
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 8004688:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <TIM2_IRQHandler+0xb48>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]

  				}break;
 800468e:	e000      	b.n	8004692 <TIM2_IRQHandler+0xad2>
      	}
  }//End Send Back config routine
 8004690:	bf00      	nop

  //Communication diagnostics
  LoopCounter++;
 8004692:	4b1e      	ldr	r3, [pc, #120]	; (800470c <TIM2_IRQHandler+0xb4c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	3301      	adds	r3, #1
 8004698:	4a1c      	ldr	r2, [pc, #112]	; (800470c <TIM2_IRQHandler+0xb4c>)
 800469a:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 800469c:	4b1b      	ldr	r3, [pc, #108]	; (800470c <TIM2_IRQHandler+0xb4c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a4:	d145      	bne.n	8004732 <TIM2_IRQHandler+0xb72>
  {
    		MSGprerSecond=MSGcount;
 80046a6:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <TIM2_IRQHandler+0xb50>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a1a      	ldr	r2, [pc, #104]	; (8004714 <TIM2_IRQHandler+0xb54>)
 80046ac:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 80046ae:	4b18      	ldr	r3, [pc, #96]	; (8004710 <TIM2_IRQHandler+0xb50>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b09      	cmp	r3, #9
 80046b4:	d834      	bhi.n	8004720 <TIM2_IRQHandler+0xb60>
    		{
    			MSGLowCount++;
 80046b6:	4b18      	ldr	r3, [pc, #96]	; (8004718 <TIM2_IRQHandler+0xb58>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3301      	adds	r3, #1
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <TIM2_IRQHandler+0xb58>)
 80046be:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 80046c0:	4b16      	ldr	r3, [pc, #88]	; (800471c <TIM2_IRQHandler+0xb5c>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e02e      	b.n	8004726 <TIM2_IRQHandler+0xb66>
 80046c8:	20000228 	.word	0x20000228
 80046cc:	20000480 	.word	0x20000480
 80046d0:	20000324 	.word	0x20000324
 80046d4:	20000780 	.word	0x20000780
 80046d8:	20000814 	.word	0x20000814
 80046dc:	200007ac 	.word	0x200007ac
 80046e0:	2000081c 	.word	0x2000081c
 80046e4:	20000220 	.word	0x20000220
 80046e8:	2000021c 	.word	0x2000021c
 80046ec:	20000690 	.word	0x20000690
 80046f0:	2000082c 	.word	0x2000082c
 80046f4:	2000078c 	.word	0x2000078c
 80046f8:	20000794 	.word	0x20000794
 80046fc:	40020400 	.word	0x40020400
 8004700:	20000000 	.word	0x20000000
 8004704:	20000230 	.word	0x20000230
 8004708:	20000234 	.word	0x20000234
 800470c:	2000067c 	.word	0x2000067c
 8004710:	20000694 	.word	0x20000694
 8004714:	20000778 	.word	0x20000778
 8004718:	20000774 	.word	0x20000774
 800471c:	200007b4 	.word	0x200007b4
    		}
    		 else  ConnectWeakFlag=0;
 8004720:	4bc5      	ldr	r3, [pc, #788]	; (8004a38 <TIM2_IRQHandler+0xe78>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8004726:	4bc5      	ldr	r3, [pc, #788]	; (8004a3c <TIM2_IRQHandler+0xe7c>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 800472c:	4bc4      	ldr	r3, [pc, #784]	; (8004a40 <TIM2_IRQHandler+0xe80>)
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  //MPU 9250
  MPU9250_GetData(&mpuDataStr);
 8004732:	48c4      	ldr	r0, [pc, #784]	; (8004a44 <TIM2_IRQHandler+0xe84>)
 8004734:	f7fc fdd8 	bl	80012e8 <MPU9250_GetData>
  MPU_CalculateFromRAWData(&mpuDataStr,0.002);
 8004738:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 8004a48 <TIM2_IRQHandler+0xe88>
 800473c:	48c1      	ldr	r0, [pc, #772]	; (8004a44 <TIM2_IRQHandler+0xe84>)
 800473e:	f7fc ff03 	bl	8001548 <MPU_CalculateFromRAWData>

  //PID input Filtered
  PitchPIDin =  /*(PitchPIDin * 0.99) */+ (mpuDataStr.Pitch  );
 8004742:	4bc0      	ldr	r3, [pc, #768]	; (8004a44 <TIM2_IRQHandler+0xe84>)
 8004744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004746:	4ac1      	ldr	r2, [pc, #772]	; (8004a4c <TIM2_IRQHandler+0xe8c>)
 8004748:	6013      	str	r3, [r2, #0]
  RollPIDin = /*(RollPIDin * 0.99) */+ (mpuDataStr.Roll );
 800474a:	4bbe      	ldr	r3, [pc, #760]	; (8004a44 <TIM2_IRQHandler+0xe84>)
 800474c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474e:	4ac0      	ldr	r2, [pc, #768]	; (8004a50 <TIM2_IRQHandler+0xe90>)
 8004750:	6013      	str	r3, [r2, #0]
  YawPIDin = (YawPIDin * 0.99) + (mpuDataStr.AngleSpeed_Gyro_Z * 0.01);
 8004752:	4bc0      	ldr	r3, [pc, #768]	; (8004a54 <TIM2_IRQHandler+0xe94>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f7fb fefe 	bl	8000558 <__aeabi_f2d>
 800475c:	a3b2      	add	r3, pc, #712	; (adr r3, 8004a28 <TIM2_IRQHandler+0xe68>)
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f7fb ff51 	bl	8000608 <__aeabi_dmul>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4614      	mov	r4, r2
 800476c:	461d      	mov	r5, r3
 800476e:	4bb5      	ldr	r3, [pc, #724]	; (8004a44 <TIM2_IRQHandler+0xe84>)
 8004770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004772:	4618      	mov	r0, r3
 8004774:	f7fb fef0 	bl	8000558 <__aeabi_f2d>
 8004778:	a3ad      	add	r3, pc, #692	; (adr r3, 8004a30 <TIM2_IRQHandler+0xe70>)
 800477a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477e:	f7fb ff43 	bl	8000608 <__aeabi_dmul>
 8004782:	4602      	mov	r2, r0
 8004784:	460b      	mov	r3, r1
 8004786:	4620      	mov	r0, r4
 8004788:	4629      	mov	r1, r5
 800478a:	f7fb fd87 	bl	800029c <__adddf3>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	f7fc fa0f 	bl	8000bb8 <__aeabi_d2f>
 800479a:	4603      	mov	r3, r0
 800479c:	4aad      	ldr	r2, [pc, #692]	; (8004a54 <TIM2_IRQHandler+0xe94>)
 800479e:	6013      	str	r3, [r2, #0]
  //-------------------------------------------------------------------

  //SCALE DATA
  //Throttle UP->DOWN 0-100 ->scaling
  ThrottleINscaled=ScaleDataFl(Ljoyupdown,0,100,FlashDataActive.minthrottle,FlashDataActive.maxthrottle);
 80047a0:	4bad      	ldr	r3, [pc, #692]	; (8004a58 <TIM2_IRQHandler+0xe98>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ac:	4bab      	ldr	r3, [pc, #684]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 80047ae:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80047b2:	4baa      	ldr	r3, [pc, #680]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 80047b4:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80047b8:	eeb0 2a66 	vmov.f32	s4, s13
 80047bc:	eef0 1a47 	vmov.f32	s3, s14
 80047c0:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 8004a60 <TIM2_IRQHandler+0xea0>
 80047c4:	eddf 0aa7 	vldr	s1, [pc, #668]	; 8004a64 <TIM2_IRQHandler+0xea4>
 80047c8:	eeb0 0a67 	vmov.f32	s0, s15
 80047cc:	f000 fb90 	bl	8004ef0 <ScaleDataFl>
 80047d0:	eef0 7a40 	vmov.f32	s15, s0
 80047d4:	4ba4      	ldr	r3, [pc, #656]	; (8004a68 <TIM2_IRQHandler+0xea8>)
 80047d6:	edc3 7a00 	vstr	s15, [r3]

  //Pitch UP->DOWN 0-100 ->scaling
  PitchINscaled=ScaleDataFl(Djoyupdown,0,100,-FlashDataActive.maxpitchdegree,FlashDataActive.maxpitchdegree);
 80047da:	4ba4      	ldr	r3, [pc, #656]	; (8004a6c <TIM2_IRQHandler+0xeac>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047e6:	4b9d      	ldr	r3, [pc, #628]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 80047e8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80047ec:	eef1 7a67 	vneg.f32	s15, s15
 80047f0:	4b9a      	ldr	r3, [pc, #616]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 80047f2:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 80047f6:	eeb0 2a66 	vmov.f32	s4, s13
 80047fa:	eef0 1a67 	vmov.f32	s3, s15
 80047fe:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8004a60 <TIM2_IRQHandler+0xea0>
 8004802:	eddf 0a98 	vldr	s1, [pc, #608]	; 8004a64 <TIM2_IRQHandler+0xea4>
 8004806:	eeb0 0a47 	vmov.f32	s0, s14
 800480a:	f000 fb71 	bl	8004ef0 <ScaleDataFl>
 800480e:	eef0 7a40 	vmov.f32	s15, s0
 8004812:	4b97      	ldr	r3, [pc, #604]	; (8004a70 <TIM2_IRQHandler+0xeb0>)
 8004814:	edc3 7a00 	vstr	s15, [r3]
  //Invert
  PitchINscaled*=(-1);
 8004818:	4b95      	ldr	r3, [pc, #596]	; (8004a70 <TIM2_IRQHandler+0xeb0>)
 800481a:	edd3 7a00 	vldr	s15, [r3]
 800481e:	eef1 7a67 	vneg.f32	s15, s15
 8004822:	4b93      	ldr	r3, [pc, #588]	; (8004a70 <TIM2_IRQHandler+0xeb0>)
 8004824:	edc3 7a00 	vstr	s15, [r3]

  //Roll LEFT->RIGHT 0 -> 100 -> scaling
  RollINscaled=ScaleDataFl(Djoyleftright,0,100,-FlashDataActive.maxrolldegree,FlashDataActive.maxrolldegree);
 8004828:	4b92      	ldr	r3, [pc, #584]	; (8004a74 <TIM2_IRQHandler+0xeb4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004834:	4b89      	ldr	r3, [pc, #548]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004836:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800483a:	eef1 7a67 	vneg.f32	s15, s15
 800483e:	4b87      	ldr	r3, [pc, #540]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004840:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8004844:	eeb0 2a66 	vmov.f32	s4, s13
 8004848:	eef0 1a67 	vmov.f32	s3, s15
 800484c:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8004a60 <TIM2_IRQHandler+0xea0>
 8004850:	eddf 0a84 	vldr	s1, [pc, #528]	; 8004a64 <TIM2_IRQHandler+0xea4>
 8004854:	eeb0 0a47 	vmov.f32	s0, s14
 8004858:	f000 fb4a 	bl	8004ef0 <ScaleDataFl>
 800485c:	eef0 7a40 	vmov.f32	s15, s0
 8004860:	4b85      	ldr	r3, [pc, #532]	; (8004a78 <TIM2_IRQHandler+0xeb8>)
 8004862:	edc3 7a00 	vstr	s15, [r3]

  //YAW angular speed of rotation degrees/second
  YawINscaled=ScaleDataFl(Ljoyleftright,0,100,-FlashDataActive.maxyawdegree,FlashDataActive.maxyawdegree);
 8004866:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <TIM2_IRQHandler+0xebc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004872:	4b7a      	ldr	r3, [pc, #488]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004874:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004878:	eef1 7a67 	vneg.f32	s15, s15
 800487c:	4b77      	ldr	r3, [pc, #476]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 800487e:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8004882:	eeb0 2a66 	vmov.f32	s4, s13
 8004886:	eef0 1a67 	vmov.f32	s3, s15
 800488a:	ed9f 1a75 	vldr	s2, [pc, #468]	; 8004a60 <TIM2_IRQHandler+0xea0>
 800488e:	eddf 0a75 	vldr	s1, [pc, #468]	; 8004a64 <TIM2_IRQHandler+0xea4>
 8004892:	eeb0 0a47 	vmov.f32	s0, s14
 8004896:	f000 fb2b 	bl	8004ef0 <ScaleDataFl>
 800489a:	eef0 7a40 	vmov.f32	s15, s0
 800489e:	4b78      	ldr	r3, [pc, #480]	; (8004a80 <TIM2_IRQHandler+0xec0>)
 80048a0:	edc3 7a00 	vstr	s15, [r3]

  //MOTOR CONTROL

  //PID
  PitchPIDout = pid(PitchINscaled, PitchPIDin, FlashDataActive.pid_p_gain_pitch, FlashDataActive.pid_i_gain_pitch, FlashDataActive.pid_d_gain_pitch, &pitch_integral, &pitch_diffErrHist, FlashDataActive.pid_i_max_pitch, FlashDataActive.pid_max_pitch);
 80048a4:	4b72      	ldr	r3, [pc, #456]	; (8004a70 <TIM2_IRQHandler+0xeb0>)
 80048a6:	edd3 7a00 	vldr	s15, [r3]
 80048aa:	4b68      	ldr	r3, [pc, #416]	; (8004a4c <TIM2_IRQHandler+0xe8c>)
 80048ac:	ed93 7a00 	vldr	s14, [r3]
 80048b0:	4b6a      	ldr	r3, [pc, #424]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 80048b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80048b6:	4b69      	ldr	r3, [pc, #420]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 80048b8:	ed93 6a02 	vldr	s12, [r3, #8]
 80048bc:	4b67      	ldr	r3, [pc, #412]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 80048be:	edd3 5a03 	vldr	s11, [r3, #12]
 80048c2:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	ee05 3a10 	vmov	s10, r3
 80048ca:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80048ce:	4b63      	ldr	r3, [pc, #396]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	ee04 3a90 	vmov	s9, r3
 80048d6:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80048da:	eeb0 3a64 	vmov.f32	s6, s9
 80048de:	eef0 2a45 	vmov.f32	s5, s10
 80048e2:	4968      	ldr	r1, [pc, #416]	; (8004a84 <TIM2_IRQHandler+0xec4>)
 80048e4:	4868      	ldr	r0, [pc, #416]	; (8004a88 <TIM2_IRQHandler+0xec8>)
 80048e6:	eeb0 2a65 	vmov.f32	s4, s11
 80048ea:	eef0 1a46 	vmov.f32	s3, s12
 80048ee:	eeb0 1a66 	vmov.f32	s2, s13
 80048f2:	eef0 0a47 	vmov.f32	s1, s14
 80048f6:	eeb0 0a67 	vmov.f32	s0, s15
 80048fa:	f000 fb3b 	bl	8004f74 <pid>
 80048fe:	eef0 7a40 	vmov.f32	s15, s0
 8004902:	4b62      	ldr	r3, [pc, #392]	; (8004a8c <TIM2_IRQHandler+0xecc>)
 8004904:	edc3 7a00 	vstr	s15, [r3]
  RollPIDout = pid(RollINscaled, RollPIDin, FlashDataActive.pid_p_gain_roll, FlashDataActive.pid_i_gain_roll, FlashDataActive.pid_d_gain_roll,&roll_integral,&roll_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_roll );
 8004908:	4b5b      	ldr	r3, [pc, #364]	; (8004a78 <TIM2_IRQHandler+0xeb8>)
 800490a:	edd3 7a00 	vldr	s15, [r3]
 800490e:	4b50      	ldr	r3, [pc, #320]	; (8004a50 <TIM2_IRQHandler+0xe90>)
 8004910:	ed93 7a00 	vldr	s14, [r3]
 8004914:	4b51      	ldr	r3, [pc, #324]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004916:	edd3 6a04 	vldr	s13, [r3, #16]
 800491a:	4b50      	ldr	r3, [pc, #320]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 800491c:	ed93 6a05 	vldr	s12, [r3, #20]
 8004920:	4b4e      	ldr	r3, [pc, #312]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004922:	edd3 5a06 	vldr	s11, [r3, #24]
 8004926:	4b4d      	ldr	r3, [pc, #308]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492a:	ee05 3a10 	vmov	s10, r3
 800492e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8004932:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	ee04 3a90 	vmov	s9, r3
 800493a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800493e:	eeb0 3a64 	vmov.f32	s6, s9
 8004942:	eef0 2a45 	vmov.f32	s5, s10
 8004946:	4952      	ldr	r1, [pc, #328]	; (8004a90 <TIM2_IRQHandler+0xed0>)
 8004948:	4852      	ldr	r0, [pc, #328]	; (8004a94 <TIM2_IRQHandler+0xed4>)
 800494a:	eeb0 2a65 	vmov.f32	s4, s11
 800494e:	eef0 1a46 	vmov.f32	s3, s12
 8004952:	eeb0 1a66 	vmov.f32	s2, s13
 8004956:	eef0 0a47 	vmov.f32	s1, s14
 800495a:	eeb0 0a67 	vmov.f32	s0, s15
 800495e:	f000 fb09 	bl	8004f74 <pid>
 8004962:	eef0 7a40 	vmov.f32	s15, s0
 8004966:	4b4c      	ldr	r3, [pc, #304]	; (8004a98 <TIM2_IRQHandler+0xed8>)
 8004968:	edc3 7a00 	vstr	s15, [r3]
  YawPIDout = pid(YawINscaled, YawPIDin, FlashDataActive.pid_p_gain_yaw, FlashDataActive.pid_i_gain_yaw, FlashDataActive.pid_d_gain_yaw, &yaw_integral,&yaw_diffErrHist,FlashDataActive.pid_i_max_roll, FlashDataActive.pid_max_yaw );
 800496c:	4b44      	ldr	r3, [pc, #272]	; (8004a80 <TIM2_IRQHandler+0xec0>)
 800496e:	edd3 7a00 	vldr	s15, [r3]
 8004972:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <TIM2_IRQHandler+0xe94>)
 8004974:	ed93 7a00 	vldr	s14, [r3]
 8004978:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 800497a:	edd3 6a07 	vldr	s13, [r3, #28]
 800497e:	4b37      	ldr	r3, [pc, #220]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004980:	ed93 6a08 	vldr	s12, [r3, #32]
 8004984:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004986:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
 800498a:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 800498c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498e:	ee05 3a10 	vmov	s10, r3
 8004992:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8004996:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <TIM2_IRQHandler+0xe9c>)
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	ee04 3a90 	vmov	s9, r3
 800499e:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80049a2:	eeb0 3a64 	vmov.f32	s6, s9
 80049a6:	eef0 2a45 	vmov.f32	s5, s10
 80049aa:	493c      	ldr	r1, [pc, #240]	; (8004a9c <TIM2_IRQHandler+0xedc>)
 80049ac:	483c      	ldr	r0, [pc, #240]	; (8004aa0 <TIM2_IRQHandler+0xee0>)
 80049ae:	eeb0 2a65 	vmov.f32	s4, s11
 80049b2:	eef0 1a46 	vmov.f32	s3, s12
 80049b6:	eeb0 1a66 	vmov.f32	s2, s13
 80049ba:	eef0 0a47 	vmov.f32	s1, s14
 80049be:	eeb0 0a67 	vmov.f32	s0, s15
 80049c2:	f000 fad7 	bl	8004f74 <pid>
 80049c6:	eef0 7a40 	vmov.f32	s15, s0
 80049ca:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <TIM2_IRQHandler+0xee4>)
 80049cc:	edc3 7a00 	vstr	s15, [r3]

  //TESTING
  if(ConnectWeakFlag==1)MotorStatus=MOTOROFF;//if connection is lost!
 80049d0:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <TIM2_IRQHandler+0xe78>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <TIM2_IRQHandler+0xe1e>
 80049d8:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <TIM2_IRQHandler+0xee8>)
 80049da:	2201      	movs	r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  //Motor STATUS (TOGGLE 1)
  //ON toggle 0->1 front start motor ON sequence
  if(togg1hist!=togg1 && togg1==1 && ThrottleINscaled<MOTORSTARTBLOCKTHRESHOLD)MotorStatus=MOTORSTARTING;
 80049de:	4b33      	ldr	r3, [pc, #204]	; (8004aac <TIM2_IRQHandler+0xeec>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b33      	ldr	r3, [pc, #204]	; (8004ab0 <TIM2_IRQHandler+0xef0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d010      	beq.n	8004a0c <TIM2_IRQHandler+0xe4c>
 80049ea:	4b31      	ldr	r3, [pc, #196]	; (8004ab0 <TIM2_IRQHandler+0xef0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d10c      	bne.n	8004a0c <TIM2_IRQHandler+0xe4c>
 80049f2:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <TIM2_IRQHandler+0xea8>)
 80049f4:	edd3 7a00 	vldr	s15, [r3]
 80049f8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004ab4 <TIM2_IRQHandler+0xef4>
 80049fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a04:	d502      	bpl.n	8004a0c <TIM2_IRQHandler+0xe4c>
 8004a06:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <TIM2_IRQHandler+0xee8>)
 8004a08:	2202      	movs	r2, #2
 8004a0a:	601a      	str	r2, [r3, #0]

  //ON toggle 0-> motor always OFF
  if(togg1==0)MotorStatus=MOTOROFF;
 8004a0c:	4b28      	ldr	r3, [pc, #160]	; (8004ab0 <TIM2_IRQHandler+0xef0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <TIM2_IRQHandler+0xe5a>
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <TIM2_IRQHandler+0xee8>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

  //GYROCALIB-----------------------------------------------------------------------------------------
  if(togg2hist==0 && togg2==1 && GyroCalibStatus==0 && MotorStatus==MOTOROFF) //button 2 pressed Motor OFF Calib not in progress
 8004a1a:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <TIM2_IRQHandler+0xef8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d15b      	bne.n	8004ada <TIM2_IRQHandler+0xf1a>
 8004a22:	e04b      	b.n	8004abc <TIM2_IRQHandler+0xefc>
 8004a24:	f3af 8000 	nop.w
 8004a28:	7ae147ae 	.word	0x7ae147ae
 8004a2c:	3fefae14 	.word	0x3fefae14
 8004a30:	47ae147b 	.word	0x47ae147b
 8004a34:	3f847ae1 	.word	0x3f847ae1
 8004a38:	200007b4 	.word	0x200007b4
 8004a3c:	20000694 	.word	0x20000694
 8004a40:	2000067c 	.word	0x2000067c
 8004a44:	20000324 	.word	0x20000324
 8004a48:	3b03126f 	.word	0x3b03126f
 8004a4c:	2000080c 	.word	0x2000080c
 8004a50:	20000790 	.word	0x20000790
 8004a54:	20000788 	.word	0x20000788
 8004a58:	200004ac 	.word	0x200004ac
 8004a5c:	200004b8 	.word	0x200004b8
 8004a60:	42c80000 	.word	0x42c80000
 8004a64:	00000000 	.word	0x00000000
 8004a68:	20000688 	.word	0x20000688
 8004a6c:	20000564 	.word	0x20000564
 8004a70:	200007a0 	.word	0x200007a0
 8004a74:	200002f8 	.word	0x200002f8
 8004a78:	2000079c 	.word	0x2000079c
 8004a7c:	200004a0 	.word	0x200004a0
 8004a80:	200006a0 	.word	0x200006a0
 8004a84:	2000023c 	.word	0x2000023c
 8004a88:	20000238 	.word	0x20000238
 8004a8c:	20000830 	.word	0x20000830
 8004a90:	20000244 	.word	0x20000244
 8004a94:	20000240 	.word	0x20000240
 8004a98:	20000798 	.word	0x20000798
 8004a9c:	2000024c 	.word	0x2000024c
 8004aa0:	20000248 	.word	0x20000248
 8004aa4:	20000834 	.word	0x20000834
 8004aa8:	2000021c 	.word	0x2000021c
 8004aac:	2000083c 	.word	0x2000083c
 8004ab0:	200004a8 	.word	0x200004a8
 8004ab4:	43480000 	.word	0x43480000
 8004ab8:	200007a8 	.word	0x200007a8
 8004abc:	4bb5      	ldr	r3, [pc, #724]	; (8004d94 <TIM2_IRQHandler+0x11d4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d10a      	bne.n	8004ada <TIM2_IRQHandler+0xf1a>
 8004ac4:	4bb4      	ldr	r3, [pc, #720]	; (8004d98 <TIM2_IRQHandler+0x11d8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <TIM2_IRQHandler+0xf1a>
 8004acc:	4bb3      	ldr	r3, [pc, #716]	; (8004d9c <TIM2_IRQHandler+0x11dc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d102      	bne.n	8004ada <TIM2_IRQHandler+0xf1a>
  {
	  GyroCalibStatus=1;
 8004ad4:	4bb0      	ldr	r3, [pc, #704]	; (8004d98 <TIM2_IRQHandler+0x11d8>)
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
  }

  //Write and Erase Flash operation timeout to prevent multiple calls in sequence
  if(FlashWriteTimeoutCount>0)FlashWriteTimeoutCount--;
 8004ada:	4bb1      	ldr	r3, [pc, #708]	; (8004da0 <TIM2_IRQHandler+0x11e0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <TIM2_IRQHandler+0xf2c>
 8004ae2:	4baf      	ldr	r3, [pc, #700]	; (8004da0 <TIM2_IRQHandler+0x11e0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	4aad      	ldr	r2, [pc, #692]	; (8004da0 <TIM2_IRQHandler+0x11e0>)
 8004aea:	6013      	str	r3, [r2, #0]
  if(FlashEraseTimeoutCount>0)FlashEraseTimeoutCount--;
 8004aec:	4bad      	ldr	r3, [pc, #692]	; (8004da4 <TIM2_IRQHandler+0x11e4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d004      	beq.n	8004afe <TIM2_IRQHandler+0xf3e>
 8004af4:	4bab      	ldr	r3, [pc, #684]	; (8004da4 <TIM2_IRQHandler+0x11e4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	3b01      	subs	r3, #1
 8004afa:	4aaa      	ldr	r2, [pc, #680]	; (8004da4 <TIM2_IRQHandler+0x11e4>)
 8004afc:	6013      	str	r3, [r2, #0]

  //Write active parameters in flash
  if(FlashWriteFlag && MotorStatus==MOTOROFF && FlashWriteTimeoutCount==0)
 8004afe:	4baa      	ldr	r3, [pc, #680]	; (8004da8 <TIM2_IRQHandler+0x11e8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d013      	beq.n	8004b2e <TIM2_IRQHandler+0xf6e>
 8004b06:	4ba5      	ldr	r3, [pc, #660]	; (8004d9c <TIM2_IRQHandler+0x11dc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10f      	bne.n	8004b2e <TIM2_IRQHandler+0xf6e>
 8004b0e:	4ba4      	ldr	r3, [pc, #656]	; (8004da0 <TIM2_IRQHandler+0x11e0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10b      	bne.n	8004b2e <TIM2_IRQHandler+0xf6e>
  {
  	  WriteFlashData(FLASHCONSTADDR,FLASHCONSTSECTOR, &FlashDataActive);
 8004b16:	4aa5      	ldr	r2, [pc, #660]	; (8004dac <TIM2_IRQHandler+0x11ec>)
 8004b18:	2105      	movs	r1, #5
 8004b1a:	48a5      	ldr	r0, [pc, #660]	; (8004db0 <TIM2_IRQHandler+0x11f0>)
 8004b1c:	f7fe f844 	bl	8002ba8 <WriteFlashData>
  	  ReadFlashData(FLASHCONSTADDR, &FlashDataFlash);//Read back values to Flash structure
 8004b20:	49a4      	ldr	r1, [pc, #656]	; (8004db4 <TIM2_IRQHandler+0x11f4>)
 8004b22:	48a3      	ldr	r0, [pc, #652]	; (8004db0 <TIM2_IRQHandler+0x11f0>)
 8004b24:	f7fe f9ca 	bl	8002ebc <ReadFlashData>
  	  FlashWriteFlag=0;//reset
 8004b28:	4b9f      	ldr	r3, [pc, #636]	; (8004da8 <TIM2_IRQHandler+0x11e8>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
  }

  //Erase Flash Data
  if(FlashEraseFlag && MotorStatus==MOTOROFF && FlashEraseTimeoutCount==0)
 8004b2e:	4ba2      	ldr	r3, [pc, #648]	; (8004db8 <TIM2_IRQHandler+0x11f8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <TIM2_IRQHandler+0xf92>
 8004b36:	4b99      	ldr	r3, [pc, #612]	; (8004d9c <TIM2_IRQHandler+0x11dc>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d109      	bne.n	8004b52 <TIM2_IRQHandler+0xf92>
 8004b3e:	4b99      	ldr	r3, [pc, #612]	; (8004da4 <TIM2_IRQHandler+0x11e4>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <TIM2_IRQHandler+0xf92>
  {
  	  EraseFlashData(FLASHCONSTSECTOR);
 8004b46:	2005      	movs	r0, #5
 8004b48:	f7fe f99c 	bl	8002e84 <EraseFlashData>
  	  FlashEraseFlag=0;//reset
 8004b4c:	4b9a      	ldr	r3, [pc, #616]	; (8004db8 <TIM2_IRQHandler+0x11f8>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]
  }

  if(GyroCalibStatus==1)
 8004b52:	4b91      	ldr	r3, [pc, #580]	; (8004d98 <TIM2_IRQHandler+0x11d8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d11a      	bne.n	8004b90 <TIM2_IRQHandler+0xfd0>
  {
  		//Transfer accelerometer angles to Gyro
  	  	mpuDataStr.Pitch = mpuDataStr.Angle_Accel_Pitch;
 8004b5a:	4b98      	ldr	r3, [pc, #608]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	4a97      	ldr	r2, [pc, #604]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b60:	6793      	str	r3, [r2, #120]	; 0x78
  	  	mpuDataStr.Roll =  mpuDataStr.Angle_Accel_Roll;
 8004b62:	4b96      	ldr	r3, [pc, #600]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	4a95      	ldr	r2, [pc, #596]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b68:	67d3      	str	r3, [r2, #124]	; 0x7c

  	  	mpuDataStr.Angle_Gyro_Pitch_Rad = mpuDataStr.Angle_Accel_Pitch_Rad;
 8004b6a:	4b94      	ldr	r3, [pc, #592]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6e:	4a93      	ldr	r2, [pc, #588]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b70:	6613      	str	r3, [r2, #96]	; 0x60
  	  	mpuDataStr.Angle_Gyro_Roll_Rad = mpuDataStr.Angle_Accel_Roll_Rad;
 8004b72:	4b92      	ldr	r3, [pc, #584]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b76:	4a91      	ldr	r2, [pc, #580]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b78:	6653      	str	r3, [r2, #100]	; 0x64

  	  	mpuDataStr.Angle_Gyro_Yaw = 0;
 8004b7a:	4b90      	ldr	r3, [pc, #576]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	65da      	str	r2, [r3, #92]	; 0x5c
  	  	mpuDataStr.Angle_Gyro_Yaw_Rad = 0;
 8004b82:	4b8e      	ldr	r3, [pc, #568]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004b84:	f04f 0200 	mov.w	r2, #0
 8004b88:	669a      	str	r2, [r3, #104]	; 0x68

  		GyroCalibStatus=0;
 8004b8a:	4b83      	ldr	r3, [pc, #524]	; (8004d98 <TIM2_IRQHandler+0x11d8>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]


  }//--------------------------------------------------------------------------------------------------

  if(MotorStatus==MOTORSTARTING)
 8004b90:	4b82      	ldr	r3, [pc, #520]	; (8004d9c <TIM2_IRQHandler+0x11dc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d10e      	bne.n	8004bb6 <TIM2_IRQHandler+0xff6>
  {

	  if(GyroCalibStatus==0)//only if calib is finished allow transition
 8004b98:	4b7f      	ldr	r3, [pc, #508]	; (8004d98 <TIM2_IRQHandler+0x11d8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <TIM2_IRQHandler+0xff6>
  	  {
  		  //Before Start trasfer Accel Angles to Gyro Angles
  		  mpuDataStr.Angle_Gyro_Pitch = mpuDataStr.Angle_Accel_Pitch;
 8004ba0:	4b86      	ldr	r3, [pc, #536]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	4a85      	ldr	r2, [pc, #532]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004ba6:	6553      	str	r3, [r2, #84]	; 0x54
  		  mpuDataStr.Angle_Gyro_Roll = mpuDataStr.Angle_Accel_Roll;
 8004ba8:	4b84      	ldr	r3, [pc, #528]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bac:	4a83      	ldr	r2, [pc, #524]	; (8004dbc <TIM2_IRQHandler+0x11fc>)
 8004bae:	6593      	str	r3, [r2, #88]	; 0x58

  		  MotorStatus=MOTORRUNNING;
 8004bb0:	4b7a      	ldr	r3, [pc, #488]	; (8004d9c <TIM2_IRQHandler+0x11dc>)
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	601a      	str	r2, [r3, #0]

   //MOT 1 FRONT LEFT  CW
   //MOT 2 FRONT RIGHT CCW
   //MOT 3 BACK  RIGHT CW
   //MOT 4 BACK  LEFT  CCW
   switch(MotorStatus)
 8004bb6:	4b79      	ldr	r3, [pc, #484]	; (8004d9c <TIM2_IRQHandler+0x11dc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	f040 813f 	bne.w	8004e3e <TIM2_IRQHandler+0x127e>
   {
    	  case MOTORRUNNING:
    	  	  	  {
    	  	  		  PWM_Mot1=1000 + ThrottleINscaled  - PitchPIDout - RollPIDout + YawPIDout;
 8004bc0:	4b7f      	ldr	r3, [pc, #508]	; (8004dc0 <TIM2_IRQHandler+0x1200>)
 8004bc2:	edd3 7a00 	vldr	s15, [r3]
 8004bc6:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bce:	4b7e      	ldr	r3, [pc, #504]	; (8004dc8 <TIM2_IRQHandler+0x1208>)
 8004bd0:	edd3 7a00 	vldr	s15, [r3]
 8004bd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004bd8:	4b7c      	ldr	r3, [pc, #496]	; (8004dcc <TIM2_IRQHandler+0x120c>)
 8004bda:	edd3 7a00 	vldr	s15, [r3]
 8004bde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004be2:	4b7b      	ldr	r3, [pc, #492]	; (8004dd0 <TIM2_IRQHandler+0x1210>)
 8004be4:	edd3 7a00 	vldr	s15, [r3]
 8004be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf0:	ee17 2a90 	vmov	r2, s15
 8004bf4:	4b77      	ldr	r3, [pc, #476]	; (8004dd4 <TIM2_IRQHandler+0x1214>)
 8004bf6:	601a      	str	r2, [r3, #0]
    	  		  	  PWM_Mot2=1000 + ThrottleINscaled  - PitchPIDout + RollPIDout - YawPIDout;
 8004bf8:	4b71      	ldr	r3, [pc, #452]	; (8004dc0 <TIM2_IRQHandler+0x1200>)
 8004bfa:	edd3 7a00 	vldr	s15, [r3]
 8004bfe:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c06:	4b70      	ldr	r3, [pc, #448]	; (8004dc8 <TIM2_IRQHandler+0x1208>)
 8004c08:	edd3 7a00 	vldr	s15, [r3]
 8004c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c10:	4b6e      	ldr	r3, [pc, #440]	; (8004dcc <TIM2_IRQHandler+0x120c>)
 8004c12:	edd3 7a00 	vldr	s15, [r3]
 8004c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c1a:	4b6d      	ldr	r3, [pc, #436]	; (8004dd0 <TIM2_IRQHandler+0x1210>)
 8004c1c:	edd3 7a00 	vldr	s15, [r3]
 8004c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c28:	ee17 2a90 	vmov	r2, s15
 8004c2c:	4b6a      	ldr	r3, [pc, #424]	; (8004dd8 <TIM2_IRQHandler+0x1218>)
 8004c2e:	601a      	str	r2, [r3, #0]
    	  		  	  PWM_Mot3=1000 + ThrottleINscaled  + PitchPIDout + RollPIDout + YawPIDout;
 8004c30:	4b63      	ldr	r3, [pc, #396]	; (8004dc0 <TIM2_IRQHandler+0x1200>)
 8004c32:	edd3 7a00 	vldr	s15, [r3]
 8004c36:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004c3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c3e:	4b62      	ldr	r3, [pc, #392]	; (8004dc8 <TIM2_IRQHandler+0x1208>)
 8004c40:	edd3 7a00 	vldr	s15, [r3]
 8004c44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c48:	4b60      	ldr	r3, [pc, #384]	; (8004dcc <TIM2_IRQHandler+0x120c>)
 8004c4a:	edd3 7a00 	vldr	s15, [r3]
 8004c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c52:	4b5f      	ldr	r3, [pc, #380]	; (8004dd0 <TIM2_IRQHandler+0x1210>)
 8004c54:	edd3 7a00 	vldr	s15, [r3]
 8004c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c60:	ee17 2a90 	vmov	r2, s15
 8004c64:	4b5d      	ldr	r3, [pc, #372]	; (8004ddc <TIM2_IRQHandler+0x121c>)
 8004c66:	601a      	str	r2, [r3, #0]
    	  		  	  PWM_Mot4=1000 + ThrottleINscaled  + PitchPIDout - RollPIDout - YawPIDout;
 8004c68:	4b55      	ldr	r3, [pc, #340]	; (8004dc0 <TIM2_IRQHandler+0x1200>)
 8004c6a:	edd3 7a00 	vldr	s15, [r3]
 8004c6e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c76:	4b54      	ldr	r3, [pc, #336]	; (8004dc8 <TIM2_IRQHandler+0x1208>)
 8004c78:	edd3 7a00 	vldr	s15, [r3]
 8004c7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c80:	4b52      	ldr	r3, [pc, #328]	; (8004dcc <TIM2_IRQHandler+0x120c>)
 8004c82:	edd3 7a00 	vldr	s15, [r3]
 8004c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c8a:	4b51      	ldr	r3, [pc, #324]	; (8004dd0 <TIM2_IRQHandler+0x1210>)
 8004c8c:	edd3 7a00 	vldr	s15, [r3]
 8004c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c98:	ee17 2a90 	vmov	r2, s15
 8004c9c:	4b50      	ldr	r3, [pc, #320]	; (8004de0 <TIM2_IRQHandler+0x1220>)
 8004c9e:	601a      	str	r2, [r3, #0]

    	  		  	  //MIN OBRATI
    	  		  	  if(PWM_Mot1 < (1000+ FlashDataActive.minthrottle))PWM_Mot1=(1000+ FlashDataActive.minthrottle);
 8004ca0:	4b4c      	ldr	r3, [pc, #304]	; (8004dd4 <TIM2_IRQHandler+0x1214>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cac:	4b3f      	ldr	r3, [pc, #252]	; (8004dac <TIM2_IRQHandler+0x11ec>)
 8004cae:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004cb2:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc2:	d50c      	bpl.n	8004cde <TIM2_IRQHandler+0x111e>
 8004cc4:	4b39      	ldr	r3, [pc, #228]	; (8004dac <TIM2_IRQHandler+0x11ec>)
 8004cc6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004cca:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004cce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd6:	ee17 2a90 	vmov	r2, s15
 8004cda:	4b3e      	ldr	r3, [pc, #248]	; (8004dd4 <TIM2_IRQHandler+0x1214>)
 8004cdc:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot2 < (1000+ FlashDataActive.minthrottle))PWM_Mot2=(1000+ FlashDataActive.minthrottle);
 8004cde:	4b3e      	ldr	r3, [pc, #248]	; (8004dd8 <TIM2_IRQHandler+0x1218>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cea:	4b30      	ldr	r3, [pc, #192]	; (8004dac <TIM2_IRQHandler+0x11ec>)
 8004cec:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004cf0:	eddf 6a34 	vldr	s13, [pc, #208]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d00:	d50c      	bpl.n	8004d1c <TIM2_IRQHandler+0x115c>
 8004d02:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <TIM2_IRQHandler+0x11ec>)
 8004d04:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004d08:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004d0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d14:	ee17 2a90 	vmov	r2, s15
 8004d18:	4b2f      	ldr	r3, [pc, #188]	; (8004dd8 <TIM2_IRQHandler+0x1218>)
 8004d1a:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot3 < (1000+ FlashDataActive.minthrottle))PWM_Mot3=(1000+ FlashDataActive.minthrottle);
 8004d1c:	4b2f      	ldr	r3, [pc, #188]	; (8004ddc <TIM2_IRQHandler+0x121c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <TIM2_IRQHandler+0x11ec>)
 8004d2a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004d2e:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3e:	d50c      	bpl.n	8004d5a <TIM2_IRQHandler+0x119a>
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <TIM2_IRQHandler+0x11ec>)
 8004d42:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004d46:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004d4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d52:	ee17 2a90 	vmov	r2, s15
 8004d56:	4b21      	ldr	r3, [pc, #132]	; (8004ddc <TIM2_IRQHandler+0x121c>)
 8004d58:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot4 < (1000+ FlashDataActive.minthrottle))PWM_Mot4=(1000+ FlashDataActive.minthrottle);
 8004d5a:	4b21      	ldr	r3, [pc, #132]	; (8004de0 <TIM2_IRQHandler+0x1220>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	ee07 3a90 	vmov	s15, r3
 8004d62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <TIM2_IRQHandler+0x11ec>)
 8004d68:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004d6c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7c:	d536      	bpl.n	8004dec <TIM2_IRQHandler+0x122c>
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <TIM2_IRQHandler+0x11ec>)
 8004d80:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004d84:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004dc4 <TIM2_IRQHandler+0x1204>
 8004d88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d90:	e028      	b.n	8004de4 <TIM2_IRQHandler+0x1224>
 8004d92:	bf00      	nop
 8004d94:	2000056c 	.word	0x2000056c
 8004d98:	20000220 	.word	0x20000220
 8004d9c:	2000021c 	.word	0x2000021c
 8004da0:	2000082c 	.word	0x2000082c
 8004da4:	20000690 	.word	0x20000690
 8004da8:	20000824 	.word	0x20000824
 8004dac:	200004b8 	.word	0x200004b8
 8004db0:	08020000 	.word	0x08020000
 8004db4:	20000510 	.word	0x20000510
 8004db8:	20000684 	.word	0x20000684
 8004dbc:	20000324 	.word	0x20000324
 8004dc0:	20000688 	.word	0x20000688
 8004dc4:	447a0000 	.word	0x447a0000
 8004dc8:	20000830 	.word	0x20000830
 8004dcc:	20000798 	.word	0x20000798
 8004dd0:	20000834 	.word	0x20000834
 8004dd4:	200007b0 	.word	0x200007b0
 8004dd8:	2000068c 	.word	0x2000068c
 8004ddc:	20000680 	.word	0x20000680
 8004de0:	2000077c 	.word	0x2000077c
 8004de4:	ee17 2a90 	vmov	r2, s15
 8004de8:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <TIM2_IRQHandler+0x1304>)
 8004dea:	601a      	str	r2, [r3, #0]

    	  		  	  //MAX OBRATI
    	  		  	  if(PWM_Mot1 > 1950)PWM_Mot1=1950;
 8004dec:	4b36      	ldr	r3, [pc, #216]	; (8004ec8 <TIM2_IRQHandler+0x1308>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f240 729e 	movw	r2, #1950	; 0x79e
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d903      	bls.n	8004e00 <TIM2_IRQHandler+0x1240>
 8004df8:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <TIM2_IRQHandler+0x1308>)
 8004dfa:	f240 729e 	movw	r2, #1950	; 0x79e
 8004dfe:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot2 > 1950)PWM_Mot2=1950;
 8004e00:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <TIM2_IRQHandler+0x130c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f240 729e 	movw	r2, #1950	; 0x79e
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d903      	bls.n	8004e14 <TIM2_IRQHandler+0x1254>
 8004e0c:	4b2f      	ldr	r3, [pc, #188]	; (8004ecc <TIM2_IRQHandler+0x130c>)
 8004e0e:	f240 729e 	movw	r2, #1950	; 0x79e
 8004e12:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot3 > 1950)PWM_Mot3=1950;
 8004e14:	4b2e      	ldr	r3, [pc, #184]	; (8004ed0 <TIM2_IRQHandler+0x1310>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f240 729e 	movw	r2, #1950	; 0x79e
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d903      	bls.n	8004e28 <TIM2_IRQHandler+0x1268>
 8004e20:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <TIM2_IRQHandler+0x1310>)
 8004e22:	f240 729e 	movw	r2, #1950	; 0x79e
 8004e26:	601a      	str	r2, [r3, #0]
    	  		  	  if(PWM_Mot4 > 1950)PWM_Mot4=1950;
 8004e28:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <TIM2_IRQHandler+0x1304>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f240 729e 	movw	r2, #1950	; 0x79e
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d92d      	bls.n	8004e90 <TIM2_IRQHandler+0x12d0>
 8004e34:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <TIM2_IRQHandler+0x1304>)
 8004e36:	f240 729e 	movw	r2, #1950	; 0x79e
 8004e3a:	601a      	str	r2, [r3, #0]

    	  	  	  }break;
 8004e3c:	e028      	b.n	8004e90 <TIM2_IRQHandler+0x12d0>

    	  default:
    	  	  	  {
    	  	  		  PWM_Mot1=900;
 8004e3e:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <TIM2_IRQHandler+0x1308>)
 8004e40:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004e44:	601a      	str	r2, [r3, #0]
    		  	  	  PWM_Mot2=900;
 8004e46:	4b21      	ldr	r3, [pc, #132]	; (8004ecc <TIM2_IRQHandler+0x130c>)
 8004e48:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004e4c:	601a      	str	r2, [r3, #0]
    		  	  	  PWM_Mot3=900;
 8004e4e:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <TIM2_IRQHandler+0x1310>)
 8004e50:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004e54:	601a      	str	r2, [r3, #0]
    		  	  	  PWM_Mot4=900;
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <TIM2_IRQHandler+0x1304>)
 8004e58:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004e5c:	601a      	str	r2, [r3, #0]

    		  	  	  //Reset PID
    		  	  	  pitch_integral=0;
 8004e5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ed4 <TIM2_IRQHandler+0x1314>)
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
    		  	  	  pitch_diffErrHist=0;
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <TIM2_IRQHandler+0x1318>)
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
    		  	  	  roll_integral=0;
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	; (8004edc <TIM2_IRQHandler+0x131c>)
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
    		  	  	  roll_diffErrHist=0;
 8004e76:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <TIM2_IRQHandler+0x1320>)
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
    		  	  	  yaw_integral=0;
 8004e7e:	4b19      	ldr	r3, [pc, #100]	; (8004ee4 <TIM2_IRQHandler+0x1324>)
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
    		  	  	  yaw_diffErrHist=0;
 8004e86:	4b18      	ldr	r3, [pc, #96]	; (8004ee8 <TIM2_IRQHandler+0x1328>)
 8004e88:	f04f 0200 	mov.w	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]

    	  	  	  }break;
 8004e8e:	e000      	b.n	8004e92 <TIM2_IRQHandler+0x12d2>
    	  	  	  }break;
 8004e90:	bf00      	nop
   }

   //SET PWM CHANNELS-----------------------------------------------------
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_Mot1);
 8004e92:	4b16      	ldr	r3, [pc, #88]	; (8004eec <TIM2_IRQHandler+0x132c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a0c      	ldr	r2, [pc, #48]	; (8004ec8 <TIM2_IRQHandler+0x1308>)
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	635a      	str	r2, [r3, #52]	; 0x34
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_Mot2);
 8004e9c:	4b13      	ldr	r3, [pc, #76]	; (8004eec <TIM2_IRQHandler+0x132c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <TIM2_IRQHandler+0x130c>)
 8004ea2:	6812      	ldr	r2, [r2, #0]
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_Mot3);
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <TIM2_IRQHandler+0x132c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <TIM2_IRQHandler+0x1310>)
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	63da      	str	r2, [r3, #60]	; 0x3c
   __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, PWM_Mot4);
 8004eb0:	4b0e      	ldr	r3, [pc, #56]	; (8004eec <TIM2_IRQHandler+0x132c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <TIM2_IRQHandler+0x1304>)
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END TIM2_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	2000077c 	.word	0x2000077c
 8004ec8:	200007b0 	.word	0x200007b0
 8004ecc:	2000068c 	.word	0x2000068c
 8004ed0:	20000680 	.word	0x20000680
 8004ed4:	20000238 	.word	0x20000238
 8004ed8:	2000023c 	.word	0x2000023c
 8004edc:	20000240 	.word	0x20000240
 8004ee0:	20000244 	.word	0x20000244
 8004ee4:	20000248 	.word	0x20000248
 8004ee8:	2000024c 	.word	0x2000024c
 8004eec:	20000840 	.word	0x20000840

08004ef0 <ScaleDataFl>:

/* USER CODE BEGIN 1 */

float ScaleDataFl(float in_value,float in_min,float in_max, float out_min, float out_max)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b089      	sub	sp, #36	; 0x24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	ed87 0a05 	vstr	s0, [r7, #20]
 8004efa:	edc7 0a04 	vstr	s1, [r7, #16]
 8004efe:	ed87 1a03 	vstr	s2, [r7, #12]
 8004f02:	edc7 1a02 	vstr	s3, [r7, #8]
 8004f06:	ed87 2a01 	vstr	s4, [r7, #4]
	float factor;
	float out;

	factor=(out_max-out_min)/(in_max-in_min);
 8004f0a:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f12:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004f16:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f26:	edc7 7a06 	vstr	s15, [r7, #24]
	out=(in_value-in_min)*factor+out_min;
 8004f2a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004f32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f36:	edd7 7a06 	vldr	s15, [r7, #24]
 8004f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f46:	edc7 7a07 	vstr	s15, [r7, #28]
	if(out<out_min)out=out_min;
 8004f4a:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5a:	d501      	bpl.n	8004f60 <ScaleDataFl+0x70>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	61fb      	str	r3, [r7, #28]

	return out;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	ee07 3a90 	vmov	s15, r3

}
 8004f66:	eeb0 0a67 	vmov.f32	s0, s15
 8004f6a:	3724      	adds	r7, #36	; 0x24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <pid>:

float pid(float pid_reference, float pid_input, float pid_p, float pid_i, float pid_d, float *integral, float *diffErrHist, float PIDimax, float PIDmax)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b08d      	sub	sp, #52	; 0x34
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004f7e:	edc7 0a08 	vstr	s1, [r7, #32]
 8004f82:	ed87 1a07 	vstr	s2, [r7, #28]
 8004f86:	edc7 1a06 	vstr	s3, [r7, #24]
 8004f8a:	ed87 2a05 	vstr	s4, [r7, #20]
 8004f8e:	6138      	str	r0, [r7, #16]
 8004f90:	60f9      	str	r1, [r7, #12]
 8004f92:	edc7 2a02 	vstr	s5, [r7, #8]
 8004f96:	ed87 3a01 	vstr	s6, [r7, #4]
	float out;
	float pid_error_temp;

	//Erro calculation
	pid_error_temp = pid_input - pid_reference;
 8004f9a:	ed97 7a08 	vldr	s14, [r7, #32]
 8004f9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fa6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	//Integral part + saturation
	*integral += pid_i * pid_error_temp;
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	ed93 7a00 	vldr	s14, [r3]
 8004fb0:	edd7 6a06 	vldr	s13, [r7, #24]
 8004fb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004fb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	edc3 7a00 	vstr	s15, [r3]
	if(*integral > PIDimax)*integral = PIDimax;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	edd3 7a00 	vldr	s15, [r3]
 8004fcc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004fd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd8:	d503      	bpl.n	8004fe2 <pid+0x6e>
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e012      	b.n	8005008 <pid+0x94>
	else if(*integral < PIDimax * -1)*integral = PIDimax * -1;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	ed93 7a00 	vldr	s14, [r3]
 8004fe8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fec:	eef1 7a67 	vneg.f32	s15, s15
 8004ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff8:	d506      	bpl.n	8005008 <pid+0x94>
 8004ffa:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ffe:	eef1 7a67 	vneg.f32	s15, s15
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	edc3 7a00 	vstr	s15, [r3]

	out = pid_p * pid_error_temp + *integral + pid_d * (pid_error_temp - *diffErrHist);
 8005008:	ed97 7a07 	vldr	s14, [r7, #28]
 800500c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	edd3 7a00 	vldr	s15, [r3]
 800501a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	edd3 7a00 	vldr	s15, [r3]
 8005024:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8005028:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800502c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005038:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	if(out > PIDmax)out = PIDmax;
 800503c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005040:	edd7 7a01 	vldr	s15, [r7, #4]
 8005044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504c:	dd02      	ble.n	8005054 <pid+0xe0>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	e010      	b.n	8005076 <pid+0x102>
	else if(out < PIDmax * -1)out = PIDmax * -1;
 8005054:	edd7 7a01 	vldr	s15, [r7, #4]
 8005058:	eef1 7a67 	vneg.f32	s15, s15
 800505c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005060:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005068:	d505      	bpl.n	8005076 <pid+0x102>
 800506a:	edd7 7a01 	vldr	s15, [r7, #4]
 800506e:	eef1 7a67 	vneg.f32	s15, s15
 8005072:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	//save Error for next cylce D calculation
	*diffErrHist = pid_error_temp;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800507a:	601a      	str	r2, [r3, #0]


	return out;
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	ee07 3a90 	vmov	s15, r3
}
 8005082:	eeb0 0a67 	vmov.f32	s0, s15
 8005086:	3734      	adds	r7, #52	; 0x34
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
	return 1;
 8005094:	2301      	movs	r3, #1
}
 8005096:	4618      	mov	r0, r3
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <_kill>:

int _kill(int pid, int sig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050aa:	f004 f9cb 	bl	8009444 <__errno>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2216      	movs	r2, #22
 80050b2:	601a      	str	r2, [r3, #0]
	return -1;
 80050b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3708      	adds	r7, #8
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <_exit>:

void _exit (int status)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff ffe7 	bl	80050a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80050d2:	e7fe      	b.n	80050d2 <_exit+0x12>

080050d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e0:	2300      	movs	r3, #0
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e00a      	b.n	80050fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80050e6:	f3af 8000 	nop.w
 80050ea:	4601      	mov	r1, r0
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	60ba      	str	r2, [r7, #8]
 80050f2:	b2ca      	uxtb	r2, r1
 80050f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3301      	adds	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	dbf0      	blt.n	80050e6 <_read+0x12>
	}

return len;
 8005104:	687b      	ldr	r3, [r7, #4]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b086      	sub	sp, #24
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	e009      	b.n	8005134 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	60ba      	str	r2, [r7, #8]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	3301      	adds	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	429a      	cmp	r2, r3
 800513a:	dbf1      	blt.n	8005120 <_write+0x12>
	}
	return len;
 800513c:	687b      	ldr	r3, [r7, #4]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <_close>:

int _close(int file)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
	return -1;
 800514e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800515e:	b480      	push	{r7}
 8005160:	b083      	sub	sp, #12
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800516e:	605a      	str	r2, [r3, #4]
	return 0;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <_isatty>:

int _isatty(int file)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
	return 1;
 8005186:	2301      	movs	r3, #1
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
	return 0;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80051b8:	4b11      	ldr	r3, [pc, #68]	; (8005200 <_sbrk+0x50>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <_sbrk+0x16>
		heap_end = &end;
 80051c0:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <_sbrk+0x50>)
 80051c2:	4a10      	ldr	r2, [pc, #64]	; (8005204 <_sbrk+0x54>)
 80051c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80051c6:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <_sbrk+0x50>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80051cc:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <_sbrk+0x50>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	466a      	mov	r2, sp
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d907      	bls.n	80051ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80051da:	f004 f933 	bl	8009444 <__errno>
 80051de:	4603      	mov	r3, r0
 80051e0:	220c      	movs	r2, #12
 80051e2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80051e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051e8:	e006      	b.n	80051f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <_sbrk+0x50>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4413      	add	r3, r2
 80051f2:	4a03      	ldr	r2, [pc, #12]	; (8005200 <_sbrk+0x50>)
 80051f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80051f6:	68fb      	ldr	r3, [r7, #12]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000250 	.word	0x20000250
 8005204:	20000938 	.word	0x20000938

08005208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800520c:	4b08      	ldr	r3, [pc, #32]	; (8005230 <SystemInit+0x28>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	4a07      	ldr	r2, [pc, #28]	; (8005230 <SystemInit+0x28>)
 8005214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <SystemInit+0x28>)
 800521e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005222:	609a      	str	r2, [r3, #8]
#endif
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	e000ed00 	.word	0xe000ed00

08005234 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b096      	sub	sp, #88	; 0x58
 8005238:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800523a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	605a      	str	r2, [r3, #4]
 8005244:	609a      	str	r2, [r3, #8]
 8005246:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005248:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	605a      	str	r2, [r3, #4]
 800525c:	609a      	str	r2, [r3, #8]
 800525e:	60da      	str	r2, [r3, #12]
 8005260:	611a      	str	r2, [r3, #16]
 8005262:	615a      	str	r2, [r3, #20]
 8005264:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005266:	1d3b      	adds	r3, r7, #4
 8005268:	2220      	movs	r2, #32
 800526a:	2100      	movs	r1, #0
 800526c:	4618      	mov	r0, r3
 800526e:	f004 f921 	bl	80094b4 <memset>

  htim1.Instance = TIM1;
 8005272:	4b51      	ldr	r3, [pc, #324]	; (80053b8 <MX_TIM1_Init+0x184>)
 8005274:	4a51      	ldr	r2, [pc, #324]	; (80053bc <MX_TIM1_Init+0x188>)
 8005276:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8005278:	4b4f      	ldr	r3, [pc, #316]	; (80053b8 <MX_TIM1_Init+0x184>)
 800527a:	2253      	movs	r2, #83	; 0x53
 800527c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800527e:	4b4e      	ldr	r3, [pc, #312]	; (80053b8 <MX_TIM1_Init+0x184>)
 8005280:	2200      	movs	r2, #0
 8005282:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8005284:	4b4c      	ldr	r3, [pc, #304]	; (80053b8 <MX_TIM1_Init+0x184>)
 8005286:	f644 6220 	movw	r2, #20000	; 0x4e20
 800528a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800528c:	4b4a      	ldr	r3, [pc, #296]	; (80053b8 <MX_TIM1_Init+0x184>)
 800528e:	2200      	movs	r2, #0
 8005290:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005292:	4b49      	ldr	r3, [pc, #292]	; (80053b8 <MX_TIM1_Init+0x184>)
 8005294:	2200      	movs	r2, #0
 8005296:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005298:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <MX_TIM1_Init+0x184>)
 800529a:	2200      	movs	r2, #0
 800529c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800529e:	4846      	ldr	r0, [pc, #280]	; (80053b8 <MX_TIM1_Init+0x184>)
 80052a0:	f002 fdcc 	bl	8007e3c <HAL_TIM_Base_Init>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80052aa:	f7fd ff21 	bl	80030f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80052b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80052b8:	4619      	mov	r1, r3
 80052ba:	483f      	ldr	r0, [pc, #252]	; (80053b8 <MX_TIM1_Init+0x184>)
 80052bc:	f003 f842 	bl	8008344 <HAL_TIM_ConfigClockSource>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d001      	beq.n	80052ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80052c6:	f7fd ff13 	bl	80030f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80052ca:	483b      	ldr	r0, [pc, #236]	; (80053b8 <MX_TIM1_Init+0x184>)
 80052cc:	f002 fe05 	bl	8007eda <HAL_TIM_PWM_Init>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80052d6:	f7fd ff0b 	bl	80030f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052de:	2300      	movs	r3, #0
 80052e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052e6:	4619      	mov	r1, r3
 80052e8:	4833      	ldr	r0, [pc, #204]	; (80053b8 <MX_TIM1_Init+0x184>)
 80052ea:	f003 fbed 	bl	8008ac8 <HAL_TIMEx_MasterConfigSynchronization>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80052f4:	f7fd fefc 	bl	80030f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80052f8:	2360      	movs	r3, #96	; 0x60
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 80052fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005302:	2300      	movs	r3, #0
 8005304:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005306:	2300      	movs	r3, #0
 8005308:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800530a:	2304      	movs	r3, #4
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005312:	2300      	movs	r3, #0
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800531a:	2200      	movs	r2, #0
 800531c:	4619      	mov	r1, r3
 800531e:	4826      	ldr	r0, [pc, #152]	; (80053b8 <MX_TIM1_Init+0x184>)
 8005320:	f002 ff4a 	bl	80081b8 <HAL_TIM_PWM_ConfigChannel>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800532a:	f7fd fee1 	bl	80030f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800532e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005332:	2204      	movs	r2, #4
 8005334:	4619      	mov	r1, r3
 8005336:	4820      	ldr	r0, [pc, #128]	; (80053b8 <MX_TIM1_Init+0x184>)
 8005338:	f002 ff3e 	bl	80081b8 <HAL_TIM_PWM_ConfigChannel>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8005342:	f7fd fed5 	bl	80030f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800534a:	2208      	movs	r2, #8
 800534c:	4619      	mov	r1, r3
 800534e:	481a      	ldr	r0, [pc, #104]	; (80053b8 <MX_TIM1_Init+0x184>)
 8005350:	f002 ff32 	bl	80081b8 <HAL_TIM_PWM_ConfigChannel>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800535a:	f7fd fec9 	bl	80030f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800535e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005362:	220c      	movs	r2, #12
 8005364:	4619      	mov	r1, r3
 8005366:	4814      	ldr	r0, [pc, #80]	; (80053b8 <MX_TIM1_Init+0x184>)
 8005368:	f002 ff26 	bl	80081b8 <HAL_TIM_PWM_ConfigChannel>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8005372:	f7fd febd 	bl	80030f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005376:	2300      	movs	r3, #0
 8005378:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800537a:	2300      	movs	r3, #0
 800537c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800537e:	2300      	movs	r3, #0
 8005380:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800538a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800538e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005390:	2300      	movs	r3, #0
 8005392:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005394:	1d3b      	adds	r3, r7, #4
 8005396:	4619      	mov	r1, r3
 8005398:	4807      	ldr	r0, [pc, #28]	; (80053b8 <MX_TIM1_Init+0x184>)
 800539a:	f003 fc03 	bl	8008ba4 <HAL_TIMEx_ConfigBreakDeadTime>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80053a4:	f7fd fea4 	bl	80030f0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80053a8:	4803      	ldr	r0, [pc, #12]	; (80053b8 <MX_TIM1_Init+0x184>)
 80053aa:	f000 f891 	bl	80054d0 <HAL_TIM_MspPostInit>

}
 80053ae:	bf00      	nop
 80053b0:	3758      	adds	r7, #88	; 0x58
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000840 	.word	0x20000840
 80053bc:	40010000 	.word	0x40010000

080053c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053c6:	f107 0308 	add.w	r3, r7, #8
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	605a      	str	r2, [r3, #4]
 80053d0:	609a      	str	r2, [r3, #8]
 80053d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053d4:	463b      	mov	r3, r7
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80053dc:	4b1d      	ldr	r3, [pc, #116]	; (8005454 <MX_TIM2_Init+0x94>)
 80053de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80053e4:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <MX_TIM2_Init+0x94>)
 80053e6:	2253      	movs	r2, #83	; 0x53
 80053e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053ea:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <MX_TIM2_Init+0x94>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80053f0:	4b18      	ldr	r3, [pc, #96]	; (8005454 <MX_TIM2_Init+0x94>)
 80053f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80053f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053f8:	4b16      	ldr	r3, [pc, #88]	; (8005454 <MX_TIM2_Init+0x94>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80053fe:	4b15      	ldr	r3, [pc, #84]	; (8005454 <MX_TIM2_Init+0x94>)
 8005400:	2280      	movs	r2, #128	; 0x80
 8005402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005404:	4813      	ldr	r0, [pc, #76]	; (8005454 <MX_TIM2_Init+0x94>)
 8005406:	f002 fd19 	bl	8007e3c <HAL_TIM_Base_Init>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8005410:	f7fd fe6e 	bl	80030f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800541a:	f107 0308 	add.w	r3, r7, #8
 800541e:	4619      	mov	r1, r3
 8005420:	480c      	ldr	r0, [pc, #48]	; (8005454 <MX_TIM2_Init+0x94>)
 8005422:	f002 ff8f 	bl	8008344 <HAL_TIM_ConfigClockSource>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800542c:	f7fd fe60 	bl	80030f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005430:	2300      	movs	r3, #0
 8005432:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005434:	2300      	movs	r3, #0
 8005436:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005438:	463b      	mov	r3, r7
 800543a:	4619      	mov	r1, r3
 800543c:	4805      	ldr	r0, [pc, #20]	; (8005454 <MX_TIM2_Init+0x94>)
 800543e:	f003 fb43 	bl	8008ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8005448:	f7fd fe52 	bl	80030f0 <Error_Handler>
  }

}
 800544c:	bf00      	nop
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000880 	.word	0x20000880

08005458 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a18      	ldr	r2, [pc, #96]	; (80054c8 <HAL_TIM_Base_MspInit+0x70>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10e      	bne.n	8005488 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	4b17      	ldr	r3, [pc, #92]	; (80054cc <HAL_TIM_Base_MspInit+0x74>)
 8005470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005472:	4a16      	ldr	r2, [pc, #88]	; (80054cc <HAL_TIM_Base_MspInit+0x74>)
 8005474:	f043 0301 	orr.w	r3, r3, #1
 8005478:	6453      	str	r3, [r2, #68]	; 0x44
 800547a:	4b14      	ldr	r3, [pc, #80]	; (80054cc <HAL_TIM_Base_MspInit+0x74>)
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8005486:	e01a      	b.n	80054be <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d115      	bne.n	80054be <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <HAL_TIM_Base_MspInit+0x74>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	4a0c      	ldr	r2, [pc, #48]	; (80054cc <HAL_TIM_Base_MspInit+0x74>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6413      	str	r3, [r2, #64]	; 0x40
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <HAL_TIM_Base_MspInit+0x74>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80054ae:	2200      	movs	r2, #0
 80054b0:	2101      	movs	r1, #1
 80054b2:	201c      	movs	r0, #28
 80054b4:	f000 fded 	bl	8006092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054b8:	201c      	movs	r0, #28
 80054ba:	f000 fe06 	bl	80060ca <HAL_NVIC_EnableIRQ>
}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40023800 	.word	0x40023800

080054d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	60da      	str	r2, [r3, #12]
 80054e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a12      	ldr	r2, [pc, #72]	; (8005538 <HAL_TIM_MspPostInit+0x68>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d11e      	bne.n	8005530 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_TIM_MspPostInit+0x6c>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	4a10      	ldr	r2, [pc, #64]	; (800553c <HAL_TIM_MspPostInit+0x6c>)
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	6313      	str	r3, [r2, #48]	; 0x30
 8005502:	4b0e      	ldr	r3, [pc, #56]	; (800553c <HAL_TIM_MspPostInit+0x6c>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800550e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8005512:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005514:	2302      	movs	r3, #2
 8005516:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005520:	2301      	movs	r3, #1
 8005522:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005524:	f107 030c 	add.w	r3, r7, #12
 8005528:	4619      	mov	r1, r3
 800552a:	4805      	ldr	r0, [pc, #20]	; (8005540 <HAL_TIM_MspPostInit+0x70>)
 800552c:	f000 fff6 	bl	800651c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005530:	bf00      	nop
 8005532:	3720      	adds	r7, #32
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40010000 	.word	0x40010000
 800553c:	40023800 	.word	0x40023800
 8005540:	40020000 	.word	0x40020000

08005544 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <MX_USART1_UART_Init+0x4c>)
 800554a:	4a12      	ldr	r2, [pc, #72]	; (8005594 <MX_USART1_UART_Init+0x50>)
 800554c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800554e:	4b10      	ldr	r3, [pc, #64]	; (8005590 <MX_USART1_UART_Init+0x4c>)
 8005550:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005556:	4b0e      	ldr	r3, [pc, #56]	; (8005590 <MX_USART1_UART_Init+0x4c>)
 8005558:	2200      	movs	r2, #0
 800555a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800555c:	4b0c      	ldr	r3, [pc, #48]	; (8005590 <MX_USART1_UART_Init+0x4c>)
 800555e:	2200      	movs	r2, #0
 8005560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005562:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <MX_USART1_UART_Init+0x4c>)
 8005564:	2200      	movs	r2, #0
 8005566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005568:	4b09      	ldr	r3, [pc, #36]	; (8005590 <MX_USART1_UART_Init+0x4c>)
 800556a:	220c      	movs	r2, #12
 800556c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800556e:	4b08      	ldr	r3, [pc, #32]	; (8005590 <MX_USART1_UART_Init+0x4c>)
 8005570:	2200      	movs	r2, #0
 8005572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005574:	4b06      	ldr	r3, [pc, #24]	; (8005590 <MX_USART1_UART_Init+0x4c>)
 8005576:	2200      	movs	r2, #0
 8005578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800557a:	4805      	ldr	r0, [pc, #20]	; (8005590 <MX_USART1_UART_Init+0x4c>)
 800557c:	f003 fb78 	bl	8008c70 <HAL_UART_Init>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005586:	f7fd fdb3 	bl	80030f0 <Error_Handler>
  }

}
 800558a:	bf00      	nop
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	200008c0 	.word	0x200008c0
 8005594:	40011000 	.word	0x40011000

08005598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a0:	f107 0314 	add.w	r3, r7, #20
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	60da      	str	r2, [r3, #12]
 80055ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <HAL_UART_MspInit+0x84>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d12b      	bne.n	8005612 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	4b18      	ldr	r3, [pc, #96]	; (8005620 <HAL_UART_MspInit+0x88>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	4a17      	ldr	r2, [pc, #92]	; (8005620 <HAL_UART_MspInit+0x88>)
 80055c4:	f043 0310 	orr.w	r3, r3, #16
 80055c8:	6453      	str	r3, [r2, #68]	; 0x44
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <HAL_UART_MspInit+0x88>)
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	f003 0310 	and.w	r3, r3, #16
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <HAL_UART_MspInit+0x88>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_UART_MspInit+0x88>)
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <HAL_UART_MspInit+0x88>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055f2:	23c0      	movs	r3, #192	; 0xc0
 80055f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f6:	2302      	movs	r3, #2
 80055f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055fe:	2303      	movs	r3, #3
 8005600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005602:	2307      	movs	r3, #7
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005606:	f107 0314 	add.w	r3, r7, #20
 800560a:	4619      	mov	r1, r3
 800560c:	4805      	ldr	r0, [pc, #20]	; (8005624 <HAL_UART_MspInit+0x8c>)
 800560e:	f000 ff85 	bl	800651c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005612:	bf00      	nop
 8005614:	3728      	adds	r7, #40	; 0x28
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40011000 	.word	0x40011000
 8005620:	40023800 	.word	0x40023800
 8005624:	40020400 	.word	0x40020400

08005628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005660 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800562c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800562e:	e003      	b.n	8005638 <LoopCopyDataInit>

08005630 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005630:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005632:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005634:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005636:	3104      	adds	r1, #4

08005638 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005638:	480b      	ldr	r0, [pc, #44]	; (8005668 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800563a:	4b0c      	ldr	r3, [pc, #48]	; (800566c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800563c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800563e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005640:	d3f6      	bcc.n	8005630 <CopyDataInit>
  ldr  r2, =_sbss
 8005642:	4a0b      	ldr	r2, [pc, #44]	; (8005670 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005644:	e002      	b.n	800564c <LoopFillZerobss>

08005646 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005646:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005648:	f842 3b04 	str.w	r3, [r2], #4

0800564c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800564e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005650:	d3f9      	bcc.n	8005646 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005652:	f7ff fdd9 	bl	8005208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005656:	f003 fefb 	bl	8009450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800565a:	f7fc fd11 	bl	8002080 <main>
  bx  lr    
 800565e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005660:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8005664:	0800e5e8 	.word	0x0800e5e8
  ldr  r0, =_sdata
 8005668:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800566c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8005670:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8005674:	20000934 	.word	0x20000934

08005678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005678:	e7fe      	b.n	8005678 <ADC_IRQHandler>
	...

0800567c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <HAL_Init+0x40>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a0d      	ldr	r2, [pc, #52]	; (80056bc <HAL_Init+0x40>)
 8005686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800568a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <HAL_Init+0x40>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a0a      	ldr	r2, [pc, #40]	; (80056bc <HAL_Init+0x40>)
 8005692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005698:	4b08      	ldr	r3, [pc, #32]	; (80056bc <HAL_Init+0x40>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a07      	ldr	r2, [pc, #28]	; (80056bc <HAL_Init+0x40>)
 800569e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056a4:	2003      	movs	r0, #3
 80056a6:	f000 fce9 	bl	800607c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056aa:	2002      	movs	r0, #2
 80056ac:	f000 f808 	bl	80056c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056b0:	f7fe fa2e 	bl	8003b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	40023c00 	.word	0x40023c00

080056c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80056c8:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_InitTick+0x54>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4b12      	ldr	r3, [pc, #72]	; (8005718 <HAL_InitTick+0x58>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	4619      	mov	r1, r3
 80056d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fd01 	bl	80060e6 <HAL_SYSTICK_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e00e      	b.n	800570c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d80a      	bhi.n	800570a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056f4:	2200      	movs	r2, #0
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056fc:	f000 fcc9 	bl	8006092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005700:	4a06      	ldr	r2, [pc, #24]	; (800571c <HAL_InitTick+0x5c>)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	e000      	b.n	800570c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
}
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	20000004 	.word	0x20000004
 8005718:	2000000c 	.word	0x2000000c
 800571c:	20000008 	.word	0x20000008

08005720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <HAL_IncTick+0x20>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	4b06      	ldr	r3, [pc, #24]	; (8005744 <HAL_IncTick+0x24>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4413      	add	r3, r2
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <HAL_IncTick+0x24>)
 8005732:	6013      	str	r3, [r2, #0]
}
 8005734:	bf00      	nop
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	2000000c 	.word	0x2000000c
 8005744:	20000900 	.word	0x20000900

08005748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  return uwTick;
 800574c:	4b03      	ldr	r3, [pc, #12]	; (800575c <HAL_GetTick+0x14>)
 800574e:	681b      	ldr	r3, [r3, #0]
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	20000900 	.word	0x20000900

08005760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005768:	f7ff ffee 	bl	8005748 <HAL_GetTick>
 800576c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005778:	d005      	beq.n	8005786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800577a:	4b0a      	ldr	r3, [pc, #40]	; (80057a4 <HAL_Delay+0x44>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005786:	bf00      	nop
 8005788:	f7ff ffde 	bl	8005748 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	429a      	cmp	r2, r3
 8005796:	d8f7      	bhi.n	8005788 <HAL_Delay+0x28>
  {
  }
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	2000000c 	.word	0x2000000c

080057a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e033      	b.n	8005826 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fc fb04 	bl	8001dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d118      	bne.n	8005818 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057ee:	f023 0302 	bic.w	r3, r3, #2
 80057f2:	f043 0202 	orr.w	r2, r3, #2
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa72 	bl	8005ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
 8005816:	e001      	b.n	800581c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
	...

08005830 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_ADC_Start+0x1a>
 8005846:	2302      	movs	r3, #2
 8005848:	e08a      	b.n	8005960 <HAL_ADC_Start+0x130>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b01      	cmp	r3, #1
 800585e:	d018      	beq.n	8005892 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689a      	ldr	r2, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005870:	4b3e      	ldr	r3, [pc, #248]	; (800596c <HAL_ADC_Start+0x13c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a3e      	ldr	r2, [pc, #248]	; (8005970 <HAL_ADC_Start+0x140>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	0c9a      	lsrs	r2, r3, #18
 800587c:	4613      	mov	r3, r2
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4413      	add	r3, r2
 8005882:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005884:	e002      	b.n	800588c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	3b01      	subs	r3, #1
 800588a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f9      	bne.n	8005886 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d15e      	bne.n	800595e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058a8:	f023 0301 	bic.w	r3, r3, #1
 80058ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058de:	d106      	bne.n	80058ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e4:	f023 0206 	bic.w	r2, r3, #6
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	645a      	str	r2, [r3, #68]	; 0x44
 80058ec:	e002      	b.n	80058f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80058fc:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <HAL_ADC_Start+0x144>)
 80058fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005908:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10f      	bne.n	8005936 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d11c      	bne.n	800595e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005932:	609a      	str	r2, [r3, #8]
 8005934:	e013      	b.n	800595e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a0f      	ldr	r2, [pc, #60]	; (8005978 <HAL_ADC_Start+0x148>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d10e      	bne.n	800595e <HAL_ADC_Start+0x12e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d107      	bne.n	800595e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800595c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	20000004 	.word	0x20000004
 8005970:	431bde83 	.word	0x431bde83
 8005974:	40012300 	.word	0x40012300
 8005978:	40012000 	.word	0x40012000

0800597c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005998:	d113      	bne.n	80059c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80059a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a8:	d10b      	bne.n	80059c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f043 0220 	orr.w	r2, r3, #32
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e05c      	b.n	8005a7c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80059c2:	f7ff fec1 	bl	8005748 <HAL_GetTick>
 80059c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80059c8:	e01a      	b.n	8005a00 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059d0:	d016      	beq.n	8005a00 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <HAL_ADC_PollForConversion+0x6c>
 80059d8:	f7ff feb6 	bl	8005748 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d20b      	bcs.n	8005a00 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	f043 0204 	orr.w	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e03d      	b.n	8005a7c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d1dd      	bne.n	80059ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f06f 0212 	mvn.w	r2, #18
 8005a16:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d123      	bne.n	8005a7a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d11f      	bne.n	8005a7a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d006      	beq.n	8005a56 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d111      	bne.n	8005a7a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d105      	bne.n	8005a7a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f043 0201 	orr.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_ADC_ConfigChannel+0x1c>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e105      	b.n	8005cc8 <HAL_ADC_ConfigChannel+0x228>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b09      	cmp	r3, #9
 8005aca:	d925      	bls.n	8005b18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68d9      	ldr	r1, [r3, #12]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4613      	mov	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	3b1e      	subs	r3, #30
 8005ae2:	2207      	movs	r2, #7
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	43da      	mvns	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	400a      	ands	r2, r1
 8005af0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68d9      	ldr	r1, [r3, #12]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	4618      	mov	r0, r3
 8005b04:	4603      	mov	r3, r0
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4403      	add	r3, r0
 8005b0a:	3b1e      	subs	r3, #30
 8005b0c:	409a      	lsls	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	e022      	b.n	8005b5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6919      	ldr	r1, [r3, #16]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	4613      	mov	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b32:	43da      	mvns	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	400a      	ands	r2, r1
 8005b3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6919      	ldr	r1, [r3, #16]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	689a      	ldr	r2, [r3, #8]
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	4603      	mov	r3, r0
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4403      	add	r3, r0
 8005b54:	409a      	lsls	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2b06      	cmp	r3, #6
 8005b64:	d824      	bhi.n	8005bb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	3b05      	subs	r3, #5
 8005b78:	221f      	movs	r2, #31
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	43da      	mvns	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	400a      	ands	r2, r1
 8005b86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	4618      	mov	r0, r3
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3b05      	subs	r3, #5
 8005ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	635a      	str	r2, [r3, #52]	; 0x34
 8005bae:	e04c      	b.n	8005c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2b0c      	cmp	r3, #12
 8005bb6:	d824      	bhi.n	8005c02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	3b23      	subs	r3, #35	; 0x23
 8005bca:	221f      	movs	r2, #31
 8005bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd0:	43da      	mvns	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	400a      	ands	r2, r1
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	4618      	mov	r0, r3
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3b23      	subs	r3, #35	; 0x23
 8005bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8005c00:	e023      	b.n	8005c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	3b41      	subs	r3, #65	; 0x41
 8005c14:	221f      	movs	r2, #31
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	400a      	ands	r2, r1
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	4618      	mov	r0, r3
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	3b41      	subs	r3, #65	; 0x41
 8005c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	430a      	orrs	r2, r1
 8005c48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c4a:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <HAL_ADC_ConfigChannel+0x234>)
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a21      	ldr	r2, [pc, #132]	; (8005cd8 <HAL_ADC_ConfigChannel+0x238>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d109      	bne.n	8005c6c <HAL_ADC_ConfigChannel+0x1cc>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b12      	cmp	r3, #18
 8005c5e:	d105      	bne.n	8005c6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a19      	ldr	r2, [pc, #100]	; (8005cd8 <HAL_ADC_ConfigChannel+0x238>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d123      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x21e>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d003      	beq.n	8005c86 <HAL_ADC_ConfigChannel+0x1e6>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b11      	cmp	r3, #17
 8005c84:	d11b      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b10      	cmp	r3, #16
 8005c98:	d111      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005c9a:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <HAL_ADC_ConfigChannel+0x23c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a10      	ldr	r2, [pc, #64]	; (8005ce0 <HAL_ADC_ConfigChannel+0x240>)
 8005ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca4:	0c9a      	lsrs	r2, r3, #18
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4413      	add	r3, r2
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005cb0:	e002      	b.n	8005cb8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f9      	bne.n	8005cb2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	40012300 	.word	0x40012300
 8005cd8:	40012000 	.word	0x40012000
 8005cdc:	20000004 	.word	0x20000004
 8005ce0:	431bde83 	.word	0x431bde83

08005ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cec:	4b79      	ldr	r3, [pc, #484]	; (8005ed4 <ADC_Init+0x1f0>)
 8005cee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6859      	ldr	r1, [r3, #4]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	021a      	lsls	r2, r3, #8
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6899      	ldr	r1, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	4a58      	ldr	r2, [pc, #352]	; (8005ed8 <ADC_Init+0x1f4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d022      	beq.n	8005dc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6899      	ldr	r1, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6899      	ldr	r1, [r3, #8]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	609a      	str	r2, [r3, #8]
 8005dc0:	e00f      	b.n	8005de2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005de0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689a      	ldr	r2, [r3, #8]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 0202 	bic.w	r2, r2, #2
 8005df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6899      	ldr	r1, [r3, #8]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	7e1b      	ldrb	r3, [r3, #24]
 8005dfc:	005a      	lsls	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01b      	beq.n	8005e48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005e2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6859      	ldr	r1, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	035a      	lsls	r2, r3, #13
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	e007      	b.n	8005e58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	051a      	lsls	r2, r3, #20
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6899      	ldr	r1, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e9a:	025a      	lsls	r2, r3, #9
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	430a      	orrs	r2, r1
 8005ea2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6899      	ldr	r1, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	029a      	lsls	r2, r3, #10
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	609a      	str	r2, [r3, #8]
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	40012300 	.word	0x40012300
 8005ed8:	0f000001 	.word	0x0f000001

08005edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <__NVIC_SetPriorityGrouping+0x44>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f0e:	4a04      	ldr	r2, [pc, #16]	; (8005f20 <__NVIC_SetPriorityGrouping+0x44>)
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	60d3      	str	r3, [r2, #12]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	e000ed00 	.word	0xe000ed00

08005f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <__NVIC_GetPriorityGrouping+0x18>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	0a1b      	lsrs	r3, r3, #8
 8005f2e:	f003 0307 	and.w	r3, r3, #7
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	e000ed00 	.word	0xe000ed00

08005f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	db0b      	blt.n	8005f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	f003 021f 	and.w	r2, r3, #31
 8005f58:	4907      	ldr	r1, [pc, #28]	; (8005f78 <__NVIC_EnableIRQ+0x38>)
 8005f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	2001      	movs	r0, #1
 8005f62:	fa00 f202 	lsl.w	r2, r0, r2
 8005f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	e000e100 	.word	0xe000e100

08005f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	6039      	str	r1, [r7, #0]
 8005f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	db0a      	blt.n	8005fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	490c      	ldr	r1, [pc, #48]	; (8005fc8 <__NVIC_SetPriority+0x4c>)
 8005f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9a:	0112      	lsls	r2, r2, #4
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005fa4:	e00a      	b.n	8005fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	4908      	ldr	r1, [pc, #32]	; (8005fcc <__NVIC_SetPriority+0x50>)
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	3b04      	subs	r3, #4
 8005fb4:	0112      	lsls	r2, r2, #4
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	440b      	add	r3, r1
 8005fba:	761a      	strb	r2, [r3, #24]
}
 8005fbc:	bf00      	nop
 8005fbe:	370c      	adds	r7, #12
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	e000e100 	.word	0xe000e100
 8005fcc:	e000ed00 	.word	0xe000ed00

08005fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b089      	sub	sp, #36	; 0x24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f1c3 0307 	rsb	r3, r3, #7
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	bf28      	it	cs
 8005fee:	2304      	movcs	r3, #4
 8005ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	2b06      	cmp	r3, #6
 8005ff8:	d902      	bls.n	8006000 <NVIC_EncodePriority+0x30>
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	3b03      	subs	r3, #3
 8005ffe:	e000      	b.n	8006002 <NVIC_EncodePriority+0x32>
 8006000:	2300      	movs	r3, #0
 8006002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	43da      	mvns	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	401a      	ands	r2, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	fa01 f303 	lsl.w	r3, r1, r3
 8006022:	43d9      	mvns	r1, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006028:	4313      	orrs	r3, r2
         );
}
 800602a:	4618      	mov	r0, r3
 800602c:	3724      	adds	r7, #36	; 0x24
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3b01      	subs	r3, #1
 8006044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006048:	d301      	bcc.n	800604e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800604a:	2301      	movs	r3, #1
 800604c:	e00f      	b.n	800606e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800604e:	4a0a      	ldr	r2, [pc, #40]	; (8006078 <SysTick_Config+0x40>)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3b01      	subs	r3, #1
 8006054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006056:	210f      	movs	r1, #15
 8006058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800605c:	f7ff ff8e 	bl	8005f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006060:	4b05      	ldr	r3, [pc, #20]	; (8006078 <SysTick_Config+0x40>)
 8006062:	2200      	movs	r2, #0
 8006064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006066:	4b04      	ldr	r3, [pc, #16]	; (8006078 <SysTick_Config+0x40>)
 8006068:	2207      	movs	r2, #7
 800606a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	e000e010 	.word	0xe000e010

0800607c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ff29 	bl	8005edc <__NVIC_SetPriorityGrouping>
}
 800608a:	bf00      	nop
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006092:	b580      	push	{r7, lr}
 8006094:	b086      	sub	sp, #24
 8006096:	af00      	add	r7, sp, #0
 8006098:	4603      	mov	r3, r0
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
 800609e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060a4:	f7ff ff3e 	bl	8005f24 <__NVIC_GetPriorityGrouping>
 80060a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	6978      	ldr	r0, [r7, #20]
 80060b0:	f7ff ff8e 	bl	8005fd0 <NVIC_EncodePriority>
 80060b4:	4602      	mov	r2, r0
 80060b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f7ff ff5d 	bl	8005f7c <__NVIC_SetPriority>
}
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b082      	sub	sp, #8
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	4603      	mov	r3, r0
 80060d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7ff ff31 	bl	8005f40 <__NVIC_EnableIRQ>
}
 80060de:	bf00      	nop
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b082      	sub	sp, #8
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff ffa2 	bl	8006038 <SysTick_Config>
 80060f4:	4603      	mov	r3, r0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006112:	4b23      	ldr	r3, [pc, #140]	; (80061a0 <HAL_FLASH_Program+0xa0>)
 8006114:	7e1b      	ldrb	r3, [r3, #24]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <HAL_FLASH_Program+0x1e>
 800611a:	2302      	movs	r3, #2
 800611c:	e03b      	b.n	8006196 <HAL_FLASH_Program+0x96>
 800611e:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <HAL_FLASH_Program+0xa0>)
 8006120:	2201      	movs	r2, #1
 8006122:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006124:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006128:	f000 f870 	bl	800620c <FLASH_WaitForLastOperation>
 800612c:	4603      	mov	r3, r0
 800612e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006130:	7dfb      	ldrb	r3, [r7, #23]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d12b      	bne.n	800618e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d105      	bne.n	8006148 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800613c:	783b      	ldrb	r3, [r7, #0]
 800613e:	4619      	mov	r1, r3
 8006140:	68b8      	ldr	r0, [r7, #8]
 8006142:	f000 f91b 	bl	800637c <FLASH_Program_Byte>
 8006146:	e016      	b.n	8006176 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d105      	bne.n	800615a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800614e:	883b      	ldrh	r3, [r7, #0]
 8006150:	4619      	mov	r1, r3
 8006152:	68b8      	ldr	r0, [r7, #8]
 8006154:	f000 f8ee 	bl	8006334 <FLASH_Program_HalfWord>
 8006158:	e00d      	b.n	8006176 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d105      	bne.n	800616c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	4619      	mov	r1, r3
 8006164:	68b8      	ldr	r0, [r7, #8]
 8006166:	f000 f8c3 	bl	80062f0 <FLASH_Program_Word>
 800616a:	e004      	b.n	8006176 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800616c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006170:	68b8      	ldr	r0, [r7, #8]
 8006172:	f000 f88b 	bl	800628c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006176:	f24c 3050 	movw	r0, #50000	; 0xc350
 800617a:	f000 f847 	bl	800620c <FLASH_WaitForLastOperation>
 800617e:	4603      	mov	r3, r0
 8006180:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <HAL_FLASH_Program+0xa4>)
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	4a07      	ldr	r2, [pc, #28]	; (80061a4 <HAL_FLASH_Program+0xa4>)
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800618e:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <HAL_FLASH_Program+0xa0>)
 8006190:	2200      	movs	r2, #0
 8006192:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006194:	7dfb      	ldrb	r3, [r7, #23]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000904 	.word	0x20000904
 80061a4:	40023c00 	.word	0x40023c00

080061a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80061b2:	4b0b      	ldr	r3, [pc, #44]	; (80061e0 <HAL_FLASH_Unlock+0x38>)
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	da0b      	bge.n	80061d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80061ba:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <HAL_FLASH_Unlock+0x38>)
 80061bc:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <HAL_FLASH_Unlock+0x3c>)
 80061be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <HAL_FLASH_Unlock+0x38>)
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <HAL_FLASH_Unlock+0x40>)
 80061c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <HAL_FLASH_Unlock+0x38>)
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	da01      	bge.n	80061d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80061d2:	79fb      	ldrb	r3, [r7, #7]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40023c00 	.word	0x40023c00
 80061e4:	45670123 	.word	0x45670123
 80061e8:	cdef89ab 	.word	0xcdef89ab

080061ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80061f0:	4b05      	ldr	r3, [pc, #20]	; (8006208 <HAL_FLASH_Lock+0x1c>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	4a04      	ldr	r2, [pc, #16]	; (8006208 <HAL_FLASH_Lock+0x1c>)
 80061f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061fa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	40023c00 	.word	0x40023c00

0800620c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006218:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <FLASH_WaitForLastOperation+0x78>)
 800621a:	2200      	movs	r2, #0
 800621c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800621e:	f7ff fa93 	bl	8005748 <HAL_GetTick>
 8006222:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006224:	e010      	b.n	8006248 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800622c:	d00c      	beq.n	8006248 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <FLASH_WaitForLastOperation+0x38>
 8006234:	f7ff fa88 	bl	8005748 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	d201      	bcs.n	8006248 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e019      	b.n	800627c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006248:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <FLASH_WaitForLastOperation+0x7c>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e8      	bne.n	8006226 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <FLASH_WaitForLastOperation+0x7c>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <FLASH_WaitForLastOperation+0x7c>)
 8006262:	2201      	movs	r2, #1
 8006264:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006266:	4b08      	ldr	r3, [pc, #32]	; (8006288 <FLASH_WaitForLastOperation+0x7c>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006272:	f000 f8a5 	bl	80063c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
  
}  
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000904 	.word	0x20000904
 8006288:	40023c00 	.word	0x40023c00

0800628c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006298:	4b14      	ldr	r3, [pc, #80]	; (80062ec <FLASH_Program_DoubleWord+0x60>)
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	4a13      	ldr	r2, [pc, #76]	; (80062ec <FLASH_Program_DoubleWord+0x60>)
 800629e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80062a4:	4b11      	ldr	r3, [pc, #68]	; (80062ec <FLASH_Program_DoubleWord+0x60>)
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	4a10      	ldr	r2, [pc, #64]	; (80062ec <FLASH_Program_DoubleWord+0x60>)
 80062aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80062ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80062b0:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <FLASH_Program_DoubleWord+0x60>)
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	4a0d      	ldr	r2, [pc, #52]	; (80062ec <FLASH_Program_DoubleWord+0x60>)
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80062c2:	f3bf 8f6f 	isb	sy
}
 80062c6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80062c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	000a      	movs	r2, r1
 80062d6:	2300      	movs	r3, #0
 80062d8:	68f9      	ldr	r1, [r7, #12]
 80062da:	3104      	adds	r1, #4
 80062dc:	4613      	mov	r3, r2
 80062de:	600b      	str	r3, [r1, #0]
}
 80062e0:	bf00      	nop
 80062e2:	3714      	adds	r7, #20
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr
 80062ec:	40023c00 	.word	0x40023c00

080062f0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80062fa:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <FLASH_Program_Word+0x40>)
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	4a0c      	ldr	r2, [pc, #48]	; (8006330 <FLASH_Program_Word+0x40>)
 8006300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006304:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006306:	4b0a      	ldr	r3, [pc, #40]	; (8006330 <FLASH_Program_Word+0x40>)
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	4a09      	ldr	r2, [pc, #36]	; (8006330 <FLASH_Program_Word+0x40>)
 800630c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006310:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006312:	4b07      	ldr	r3, [pc, #28]	; (8006330 <FLASH_Program_Word+0x40>)
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	4a06      	ldr	r2, [pc, #24]	; (8006330 <FLASH_Program_Word+0x40>)
 8006318:	f043 0301 	orr.w	r3, r3, #1
 800631c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	601a      	str	r2, [r3, #0]
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40023c00 	.word	0x40023c00

08006334 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006340:	4b0d      	ldr	r3, [pc, #52]	; (8006378 <FLASH_Program_HalfWord+0x44>)
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	4a0c      	ldr	r2, [pc, #48]	; (8006378 <FLASH_Program_HalfWord+0x44>)
 8006346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <FLASH_Program_HalfWord+0x44>)
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	4a09      	ldr	r2, [pc, #36]	; (8006378 <FLASH_Program_HalfWord+0x44>)
 8006352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006356:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006358:	4b07      	ldr	r3, [pc, #28]	; (8006378 <FLASH_Program_HalfWord+0x44>)
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	4a06      	ldr	r2, [pc, #24]	; (8006378 <FLASH_Program_HalfWord+0x44>)
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	887a      	ldrh	r2, [r7, #2]
 8006368:	801a      	strh	r2, [r3, #0]
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	40023c00 	.word	0x40023c00

0800637c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006388:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <FLASH_Program_Byte+0x40>)
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	4a0b      	ldr	r2, [pc, #44]	; (80063bc <FLASH_Program_Byte+0x40>)
 800638e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006392:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <FLASH_Program_Byte+0x40>)
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <FLASH_Program_Byte+0x40>)
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800639c:	4b07      	ldr	r3, [pc, #28]	; (80063bc <FLASH_Program_Byte+0x40>)
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	4a06      	ldr	r2, [pc, #24]	; (80063bc <FLASH_Program_Byte+0x40>)
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	701a      	strb	r2, [r3, #0]
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40023c00 	.word	0x40023c00

080063c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80063c4:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80063d0:	4b2d      	ldr	r3, [pc, #180]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f043 0310 	orr.w	r3, r3, #16
 80063d8:	4a2b      	ldr	r2, [pc, #172]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 80063da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80063dc:	4b29      	ldr	r3, [pc, #164]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 80063de:	2210      	movs	r2, #16
 80063e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80063e2:	4b28      	ldr	r3, [pc, #160]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d008      	beq.n	8006400 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80063ee:	4b26      	ldr	r3, [pc, #152]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f043 0308 	orr.w	r3, r3, #8
 80063f6:	4a24      	ldr	r2, [pc, #144]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 80063f8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80063fa:	4b22      	ldr	r3, [pc, #136]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 80063fc:	2220      	movs	r2, #32
 80063fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006400:	4b20      	ldr	r3, [pc, #128]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800640c:	4b1e      	ldr	r3, [pc, #120]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f043 0304 	orr.w	r3, r3, #4
 8006414:	4a1c      	ldr	r2, [pc, #112]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 8006416:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006418:	4b1a      	ldr	r3, [pc, #104]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 800641a:	2240      	movs	r2, #64	; 0x40
 800641c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800641e:	4b19      	ldr	r3, [pc, #100]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006426:	2b00      	cmp	r3, #0
 8006428:	d008      	beq.n	800643c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800642a:	4b17      	ldr	r3, [pc, #92]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	f043 0302 	orr.w	r3, r3, #2
 8006432:	4a15      	ldr	r2, [pc, #84]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 8006434:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006436:	4b13      	ldr	r3, [pc, #76]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 8006438:	2280      	movs	r2, #128	; 0x80
 800643a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800643c:	4b11      	ldr	r3, [pc, #68]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d009      	beq.n	800645c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006448:	4b0f      	ldr	r3, [pc, #60]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 800644a:	69db      	ldr	r3, [r3, #28]
 800644c:	f043 0301 	orr.w	r3, r3, #1
 8006450:	4a0d      	ldr	r2, [pc, #52]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 8006452:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 8006456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800645a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d008      	beq.n	800647a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006468:	4b07      	ldr	r3, [pc, #28]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	f043 0320 	orr.w	r3, r3, #32
 8006470:	4a05      	ldr	r2, [pc, #20]	; (8006488 <FLASH_SetErrorCode+0xc8>)
 8006472:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006474:	4b03      	ldr	r3, [pc, #12]	; (8006484 <FLASH_SetErrorCode+0xc4>)
 8006476:	2202      	movs	r2, #2
 8006478:	60da      	str	r2, [r3, #12]
  }
}
 800647a:	bf00      	nop
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	40023c00 	.word	0x40023c00
 8006488:	20000904 	.word	0x20000904

0800648c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60fb      	str	r3, [r7, #12]
 80064a6:	e010      	b.n	80064ca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d103      	bne.n	80064b6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80064ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e009      	b.n	80064ca <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d103      	bne.n	80064c4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80064bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e002      	b.n	80064ca <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80064c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064c8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80064ca:	4b13      	ldr	r3, [pc, #76]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	4a12      	ldr	r2, [pc, #72]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 80064d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064d4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80064d6:	4b10      	ldr	r3, [pc, #64]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	490f      	ldr	r1, [pc, #60]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	4a0c      	ldr	r2, [pc, #48]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 80064e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80064ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80064ee:	4b0a      	ldr	r3, [pc, #40]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 80064f0:	691a      	ldr	r2, [r3, #16]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4313      	orrs	r3, r2
 80064f8:	4a07      	ldr	r2, [pc, #28]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 80064fa:	f043 0302 	orr.w	r3, r3, #2
 80064fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006500:	4b05      	ldr	r3, [pc, #20]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	4a04      	ldr	r2, [pc, #16]	; (8006518 <FLASH_Erase_Sector+0x8c>)
 8006506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800650a:	6113      	str	r3, [r2, #16]
}
 800650c:	bf00      	nop
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	40023c00 	.word	0x40023c00

0800651c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800651c:	b480      	push	{r7}
 800651e:	b089      	sub	sp, #36	; 0x24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800652a:	2300      	movs	r3, #0
 800652c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800652e:	2300      	movs	r3, #0
 8006530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006532:	2300      	movs	r3, #0
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	e159      	b.n	80067ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006538:	2201      	movs	r2, #1
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4013      	ands	r3, r2
 800654a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	429a      	cmp	r2, r3
 8006552:	f040 8148 	bne.w	80067e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d00b      	beq.n	8006576 <HAL_GPIO_Init+0x5a>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b02      	cmp	r3, #2
 8006564:	d007      	beq.n	8006576 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800656a:	2b11      	cmp	r3, #17
 800656c:	d003      	beq.n	8006576 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	2b12      	cmp	r3, #18
 8006574:	d130      	bne.n	80065d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	2203      	movs	r2, #3
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	43db      	mvns	r3, r3
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	4013      	ands	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	4313      	orrs	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065ac:	2201      	movs	r2, #1
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	fa02 f303 	lsl.w	r3, r2, r3
 80065b4:	43db      	mvns	r3, r3
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4013      	ands	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	091b      	lsrs	r3, r3, #4
 80065c2:	f003 0201 	and.w	r2, r3, #1
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	fa02 f303 	lsl.w	r3, r2, r3
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	2203      	movs	r2, #3
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	43db      	mvns	r3, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4013      	ands	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	fa02 f303 	lsl.w	r3, r2, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4313      	orrs	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d003      	beq.n	8006618 <HAL_GPIO_Init+0xfc>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	2b12      	cmp	r3, #18
 8006616:	d123      	bne.n	8006660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	08da      	lsrs	r2, r3, #3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3208      	adds	r2, #8
 8006620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	220f      	movs	r2, #15
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	43db      	mvns	r3, r3
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4013      	ands	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f003 0307 	and.w	r3, r3, #7
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	4313      	orrs	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	08da      	lsrs	r2, r3, #3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	3208      	adds	r2, #8
 800665a:	69b9      	ldr	r1, [r7, #24]
 800665c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	2203      	movs	r2, #3
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	43db      	mvns	r3, r3
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	4013      	ands	r3, r2
 8006676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 0203 	and.w	r2, r3, #3
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	fa02 f303 	lsl.w	r3, r2, r3
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	4313      	orrs	r3, r2
 800668c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 80a2 	beq.w	80067e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	4b57      	ldr	r3, [pc, #348]	; (8006804 <HAL_GPIO_Init+0x2e8>)
 80066a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066aa:	4a56      	ldr	r2, [pc, #344]	; (8006804 <HAL_GPIO_Init+0x2e8>)
 80066ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066b0:	6453      	str	r3, [r2, #68]	; 0x44
 80066b2:	4b54      	ldr	r3, [pc, #336]	; (8006804 <HAL_GPIO_Init+0x2e8>)
 80066b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066be:	4a52      	ldr	r2, [pc, #328]	; (8006808 <HAL_GPIO_Init+0x2ec>)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	089b      	lsrs	r3, r3, #2
 80066c4:	3302      	adds	r3, #2
 80066c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	220f      	movs	r2, #15
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	43db      	mvns	r3, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4013      	ands	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a49      	ldr	r2, [pc, #292]	; (800680c <HAL_GPIO_Init+0x2f0>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d019      	beq.n	800671e <HAL_GPIO_Init+0x202>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a48      	ldr	r2, [pc, #288]	; (8006810 <HAL_GPIO_Init+0x2f4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d013      	beq.n	800671a <HAL_GPIO_Init+0x1fe>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a47      	ldr	r2, [pc, #284]	; (8006814 <HAL_GPIO_Init+0x2f8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00d      	beq.n	8006716 <HAL_GPIO_Init+0x1fa>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a46      	ldr	r2, [pc, #280]	; (8006818 <HAL_GPIO_Init+0x2fc>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d007      	beq.n	8006712 <HAL_GPIO_Init+0x1f6>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a45      	ldr	r2, [pc, #276]	; (800681c <HAL_GPIO_Init+0x300>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d101      	bne.n	800670e <HAL_GPIO_Init+0x1f2>
 800670a:	2304      	movs	r3, #4
 800670c:	e008      	b.n	8006720 <HAL_GPIO_Init+0x204>
 800670e:	2307      	movs	r3, #7
 8006710:	e006      	b.n	8006720 <HAL_GPIO_Init+0x204>
 8006712:	2303      	movs	r3, #3
 8006714:	e004      	b.n	8006720 <HAL_GPIO_Init+0x204>
 8006716:	2302      	movs	r3, #2
 8006718:	e002      	b.n	8006720 <HAL_GPIO_Init+0x204>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <HAL_GPIO_Init+0x204>
 800671e:	2300      	movs	r3, #0
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	f002 0203 	and.w	r2, r2, #3
 8006726:	0092      	lsls	r2, r2, #2
 8006728:	4093      	lsls	r3, r2
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	4313      	orrs	r3, r2
 800672e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006730:	4935      	ldr	r1, [pc, #212]	; (8006808 <HAL_GPIO_Init+0x2ec>)
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	089b      	lsrs	r3, r3, #2
 8006736:	3302      	adds	r3, #2
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800673e:	4b38      	ldr	r3, [pc, #224]	; (8006820 <HAL_GPIO_Init+0x304>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	43db      	mvns	r3, r3
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	4013      	ands	r3, r2
 800674c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006762:	4a2f      	ldr	r2, [pc, #188]	; (8006820 <HAL_GPIO_Init+0x304>)
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006768:	4b2d      	ldr	r3, [pc, #180]	; (8006820 <HAL_GPIO_Init+0x304>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	43db      	mvns	r3, r3
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	4013      	ands	r3, r2
 8006776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800678c:	4a24      	ldr	r2, [pc, #144]	; (8006820 <HAL_GPIO_Init+0x304>)
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006792:	4b23      	ldr	r3, [pc, #140]	; (8006820 <HAL_GPIO_Init+0x304>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	43db      	mvns	r3, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4013      	ands	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067b6:	4a1a      	ldr	r2, [pc, #104]	; (8006820 <HAL_GPIO_Init+0x304>)
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067bc:	4b18      	ldr	r3, [pc, #96]	; (8006820 <HAL_GPIO_Init+0x304>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	43db      	mvns	r3, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4013      	ands	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067e0:	4a0f      	ldr	r2, [pc, #60]	; (8006820 <HAL_GPIO_Init+0x304>)
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	3301      	adds	r3, #1
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2b0f      	cmp	r3, #15
 80067f0:	f67f aea2 	bls.w	8006538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	3724      	adds	r7, #36	; 0x24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	40023800 	.word	0x40023800
 8006808:	40013800 	.word	0x40013800
 800680c:	40020000 	.word	0x40020000
 8006810:	40020400 	.word	0x40020400
 8006814:	40020800 	.word	0x40020800
 8006818:	40020c00 	.word	0x40020c00
 800681c:	40021000 	.word	0x40021000
 8006820:	40013c00 	.word	0x40013c00

08006824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	460b      	mov	r3, r1
 800682e:	807b      	strh	r3, [r7, #2]
 8006830:	4613      	mov	r3, r2
 8006832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006834:	787b      	ldrb	r3, [r7, #1]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800683a:	887a      	ldrh	r2, [r7, #2]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006840:	e003      	b.n	800684a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006842:	887b      	ldrh	r3, [r7, #2]
 8006844:	041a      	lsls	r2, r3, #16
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	619a      	str	r2, [r3, #24]
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	460b      	mov	r3, r1
 8006860:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	887b      	ldrh	r3, [r7, #2]
 8006868:	401a      	ands	r2, r3
 800686a:	887b      	ldrh	r3, [r7, #2]
 800686c:	429a      	cmp	r2, r3
 800686e:	d104      	bne.n	800687a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006870:	887b      	ldrh	r3, [r7, #2]
 8006872:	041a      	lsls	r2, r3, #16
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006878:	e002      	b.n	8006880 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800687a:	887a      	ldrh	r2, [r7, #2]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	619a      	str	r2, [r3, #24]
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e12b      	b.n	8006af6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fb fb9c 	bl	8001ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2224      	movs	r2, #36	; 0x24
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0201 	bic.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068f0:	f000 fd28 	bl	8007344 <HAL_RCC_GetPCLK1Freq>
 80068f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	4a81      	ldr	r2, [pc, #516]	; (8006b00 <HAL_I2C_Init+0x274>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d807      	bhi.n	8006910 <HAL_I2C_Init+0x84>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a80      	ldr	r2, [pc, #512]	; (8006b04 <HAL_I2C_Init+0x278>)
 8006904:	4293      	cmp	r3, r2
 8006906:	bf94      	ite	ls
 8006908:	2301      	movls	r3, #1
 800690a:	2300      	movhi	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	e006      	b.n	800691e <HAL_I2C_Init+0x92>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4a7d      	ldr	r2, [pc, #500]	; (8006b08 <HAL_I2C_Init+0x27c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	bf94      	ite	ls
 8006918:	2301      	movls	r3, #1
 800691a:	2300      	movhi	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e0e7      	b.n	8006af6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a78      	ldr	r2, [pc, #480]	; (8006b0c <HAL_I2C_Init+0x280>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	0c9b      	lsrs	r3, r3, #18
 8006930:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4a6a      	ldr	r2, [pc, #424]	; (8006b00 <HAL_I2C_Init+0x274>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d802      	bhi.n	8006960 <HAL_I2C_Init+0xd4>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	3301      	adds	r3, #1
 800695e:	e009      	b.n	8006974 <HAL_I2C_Init+0xe8>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006966:	fb02 f303 	mul.w	r3, r2, r3
 800696a:	4a69      	ldr	r2, [pc, #420]	; (8006b10 <HAL_I2C_Init+0x284>)
 800696c:	fba2 2303 	umull	r2, r3, r2, r3
 8006970:	099b      	lsrs	r3, r3, #6
 8006972:	3301      	adds	r3, #1
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	430b      	orrs	r3, r1
 800697a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69db      	ldr	r3, [r3, #28]
 8006982:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006986:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	495c      	ldr	r1, [pc, #368]	; (8006b00 <HAL_I2C_Init+0x274>)
 8006990:	428b      	cmp	r3, r1
 8006992:	d819      	bhi.n	80069c8 <HAL_I2C_Init+0x13c>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	1e59      	subs	r1, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	fbb1 f3f3 	udiv	r3, r1, r3
 80069a2:	1c59      	adds	r1, r3, #1
 80069a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069a8:	400b      	ands	r3, r1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <HAL_I2C_Init+0x138>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1e59      	subs	r1, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	005b      	lsls	r3, r3, #1
 80069b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80069bc:	3301      	adds	r3, #1
 80069be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c2:	e051      	b.n	8006a68 <HAL_I2C_Init+0x1dc>
 80069c4:	2304      	movs	r3, #4
 80069c6:	e04f      	b.n	8006a68 <HAL_I2C_Init+0x1dc>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d111      	bne.n	80069f4 <HAL_I2C_Init+0x168>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	1e58      	subs	r0, r3, #1
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6859      	ldr	r1, [r3, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	440b      	add	r3, r1
 80069de:	fbb0 f3f3 	udiv	r3, r0, r3
 80069e2:	3301      	adds	r3, #1
 80069e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	bf0c      	ite	eq
 80069ec:	2301      	moveq	r3, #1
 80069ee:	2300      	movne	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	e012      	b.n	8006a1a <HAL_I2C_Init+0x18e>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	1e58      	subs	r0, r3, #1
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6859      	ldr	r1, [r3, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	0099      	lsls	r1, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf0c      	ite	eq
 8006a14:	2301      	moveq	r3, #1
 8006a16:	2300      	movne	r3, #0
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <HAL_I2C_Init+0x196>
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e022      	b.n	8006a68 <HAL_I2C_Init+0x1dc>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10e      	bne.n	8006a48 <HAL_I2C_Init+0x1bc>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1e58      	subs	r0, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6859      	ldr	r1, [r3, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	440b      	add	r3, r1
 8006a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a46:	e00f      	b.n	8006a68 <HAL_I2C_Init+0x1dc>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	1e58      	subs	r0, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6859      	ldr	r1, [r3, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	0099      	lsls	r1, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a5e:	3301      	adds	r3, #1
 8006a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	6809      	ldr	r1, [r1, #0]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69da      	ldr	r2, [r3, #28]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6911      	ldr	r1, [r2, #16]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	68d2      	ldr	r2, [r2, #12]
 8006aa2:	4311      	orrs	r1, r2
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6812      	ldr	r2, [r2, #0]
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695a      	ldr	r2, [r3, #20]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f042 0201 	orr.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	000186a0 	.word	0x000186a0
 8006b04:	001e847f 	.word	0x001e847f
 8006b08:	003d08ff 	.word	0x003d08ff
 8006b0c:	431bde83 	.word	0x431bde83
 8006b10:	10624dd3 	.word	0x10624dd3

08006b14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e25b      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d075      	beq.n	8006c1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b32:	4ba3      	ldr	r3, [pc, #652]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 030c 	and.w	r3, r3, #12
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d00c      	beq.n	8006b58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b3e:	4ba0      	ldr	r3, [pc, #640]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d112      	bne.n	8006b70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b4a:	4b9d      	ldr	r3, [pc, #628]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b56:	d10b      	bne.n	8006b70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b58:	4b99      	ldr	r3, [pc, #612]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d05b      	beq.n	8006c1c <HAL_RCC_OscConfig+0x108>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d157      	bne.n	8006c1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e236      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b78:	d106      	bne.n	8006b88 <HAL_RCC_OscConfig+0x74>
 8006b7a:	4b91      	ldr	r3, [pc, #580]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a90      	ldr	r2, [pc, #576]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e01d      	b.n	8006bc4 <HAL_RCC_OscConfig+0xb0>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b90:	d10c      	bne.n	8006bac <HAL_RCC_OscConfig+0x98>
 8006b92:	4b8b      	ldr	r3, [pc, #556]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a8a      	ldr	r2, [pc, #552]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b9c:	6013      	str	r3, [r2, #0]
 8006b9e:	4b88      	ldr	r3, [pc, #544]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a87      	ldr	r2, [pc, #540]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e00b      	b.n	8006bc4 <HAL_RCC_OscConfig+0xb0>
 8006bac:	4b84      	ldr	r3, [pc, #528]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a83      	ldr	r2, [pc, #524]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	4b81      	ldr	r3, [pc, #516]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a80      	ldr	r2, [pc, #512]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d013      	beq.n	8006bf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bcc:	f7fe fdbc 	bl	8005748 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bd4:	f7fe fdb8 	bl	8005748 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b64      	cmp	r3, #100	; 0x64
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e1fb      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be6:	4b76      	ldr	r3, [pc, #472]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCC_OscConfig+0xc0>
 8006bf2:	e014      	b.n	8006c1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bf4:	f7fe fda8 	bl	8005748 <HAL_GetTick>
 8006bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bfa:	e008      	b.n	8006c0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bfc:	f7fe fda4 	bl	8005748 <HAL_GetTick>
 8006c00:	4602      	mov	r2, r0
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	2b64      	cmp	r3, #100	; 0x64
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e1e7      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c0e:	4b6c      	ldr	r3, [pc, #432]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1f0      	bne.n	8006bfc <HAL_RCC_OscConfig+0xe8>
 8006c1a:	e000      	b.n	8006c1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d063      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c2a:	4b65      	ldr	r3, [pc, #404]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 030c 	and.w	r3, r3, #12
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c36:	4b62      	ldr	r3, [pc, #392]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d11c      	bne.n	8006c7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c42:	4b5f      	ldr	r3, [pc, #380]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d116      	bne.n	8006c7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c4e:	4b5c      	ldr	r3, [pc, #368]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <HAL_RCC_OscConfig+0x152>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d001      	beq.n	8006c66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e1bb      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c66:	4b56      	ldr	r3, [pc, #344]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4952      	ldr	r1, [pc, #328]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c7a:	e03a      	b.n	8006cf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d020      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c84:	4b4f      	ldr	r3, [pc, #316]	; (8006dc4 <HAL_RCC_OscConfig+0x2b0>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8a:	f7fe fd5d 	bl	8005748 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c92:	f7fe fd59 	bl	8005748 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e19c      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca4:	4b46      	ldr	r3, [pc, #280]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0f0      	beq.n	8006c92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb0:	4b43      	ldr	r3, [pc, #268]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	4940      	ldr	r1, [pc, #256]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]
 8006cc4:	e015      	b.n	8006cf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cc6:	4b3f      	ldr	r3, [pc, #252]	; (8006dc4 <HAL_RCC_OscConfig+0x2b0>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ccc:	f7fe fd3c 	bl	8005748 <HAL_GetTick>
 8006cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cd2:	e008      	b.n	8006ce6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cd4:	f7fe fd38 	bl	8005748 <HAL_GetTick>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	1ad3      	subs	r3, r2, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e17b      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ce6:	4b36      	ldr	r3, [pc, #216]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f0      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d030      	beq.n	8006d60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d016      	beq.n	8006d34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d06:	4b30      	ldr	r3, [pc, #192]	; (8006dc8 <HAL_RCC_OscConfig+0x2b4>)
 8006d08:	2201      	movs	r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0c:	f7fe fd1c 	bl	8005748 <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d14:	f7fe fd18 	bl	8005748 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e15b      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d26:	4b26      	ldr	r3, [pc, #152]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <HAL_RCC_OscConfig+0x200>
 8006d32:	e015      	b.n	8006d60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d34:	4b24      	ldr	r3, [pc, #144]	; (8006dc8 <HAL_RCC_OscConfig+0x2b4>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d3a:	f7fe fd05 	bl	8005748 <HAL_GetTick>
 8006d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d40:	e008      	b.n	8006d54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d42:	f7fe fd01 	bl	8005748 <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d901      	bls.n	8006d54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e144      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d54:	4b1a      	ldr	r3, [pc, #104]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1f0      	bne.n	8006d42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80a0 	beq.w	8006eae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d72:	4b13      	ldr	r3, [pc, #76]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10f      	bne.n	8006d9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60bb      	str	r3, [r7, #8]
 8006d82:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	4a0e      	ldr	r2, [pc, #56]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <HAL_RCC_OscConfig+0x2ac>)
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d96:	60bb      	str	r3, [r7, #8]
 8006d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d9e:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <HAL_RCC_OscConfig+0x2b8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d121      	bne.n	8006dee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006daa:	4b08      	ldr	r3, [pc, #32]	; (8006dcc <HAL_RCC_OscConfig+0x2b8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a07      	ldr	r2, [pc, #28]	; (8006dcc <HAL_RCC_OscConfig+0x2b8>)
 8006db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006db6:	f7fe fcc7 	bl	8005748 <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dbc:	e011      	b.n	8006de2 <HAL_RCC_OscConfig+0x2ce>
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	42470000 	.word	0x42470000
 8006dc8:	42470e80 	.word	0x42470e80
 8006dcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd0:	f7fe fcba 	bl	8005748 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e0fd      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de2:	4b81      	ldr	r3, [pc, #516]	; (8006fe8 <HAL_RCC_OscConfig+0x4d4>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d106      	bne.n	8006e04 <HAL_RCC_OscConfig+0x2f0>
 8006df6:	4b7d      	ldr	r3, [pc, #500]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfa:	4a7c      	ldr	r2, [pc, #496]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006dfc:	f043 0301 	orr.w	r3, r3, #1
 8006e00:	6713      	str	r3, [r2, #112]	; 0x70
 8006e02:	e01c      	b.n	8006e3e <HAL_RCC_OscConfig+0x32a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b05      	cmp	r3, #5
 8006e0a:	d10c      	bne.n	8006e26 <HAL_RCC_OscConfig+0x312>
 8006e0c:	4b77      	ldr	r3, [pc, #476]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	4a76      	ldr	r2, [pc, #472]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e12:	f043 0304 	orr.w	r3, r3, #4
 8006e16:	6713      	str	r3, [r2, #112]	; 0x70
 8006e18:	4b74      	ldr	r3, [pc, #464]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1c:	4a73      	ldr	r2, [pc, #460]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	6713      	str	r3, [r2, #112]	; 0x70
 8006e24:	e00b      	b.n	8006e3e <HAL_RCC_OscConfig+0x32a>
 8006e26:	4b71      	ldr	r3, [pc, #452]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	4a70      	ldr	r2, [pc, #448]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e2c:	f023 0301 	bic.w	r3, r3, #1
 8006e30:	6713      	str	r3, [r2, #112]	; 0x70
 8006e32:	4b6e      	ldr	r3, [pc, #440]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e36:	4a6d      	ldr	r2, [pc, #436]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e38:	f023 0304 	bic.w	r3, r3, #4
 8006e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d015      	beq.n	8006e72 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e46:	f7fe fc7f 	bl	8005748 <HAL_GetTick>
 8006e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4c:	e00a      	b.n	8006e64 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e4e:	f7fe fc7b 	bl	8005748 <HAL_GetTick>
 8006e52:	4602      	mov	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d901      	bls.n	8006e64 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	e0bc      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e64:	4b61      	ldr	r3, [pc, #388]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e68:	f003 0302 	and.w	r3, r3, #2
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d0ee      	beq.n	8006e4e <HAL_RCC_OscConfig+0x33a>
 8006e70:	e014      	b.n	8006e9c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e72:	f7fe fc69 	bl	8005748 <HAL_GetTick>
 8006e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e78:	e00a      	b.n	8006e90 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e7a:	f7fe fc65 	bl	8005748 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e0a6      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e90:	4b56      	ldr	r3, [pc, #344]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1ee      	bne.n	8006e7a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d105      	bne.n	8006eae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ea2:	4b52      	ldr	r3, [pc, #328]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	4a51      	ldr	r2, [pc, #324]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 8092 	beq.w	8006fdc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eb8:	4b4c      	ldr	r3, [pc, #304]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f003 030c 	and.w	r3, r3, #12
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d05c      	beq.n	8006f7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d141      	bne.n	8006f50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ecc:	4b48      	ldr	r3, [pc, #288]	; (8006ff0 <HAL_RCC_OscConfig+0x4dc>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed2:	f7fe fc39 	bl	8005748 <HAL_GetTick>
 8006ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed8:	e008      	b.n	8006eec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eda:	f7fe fc35 	bl	8005748 <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e078      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eec:	4b3f      	ldr	r3, [pc, #252]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1f0      	bne.n	8006eda <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	69da      	ldr	r2, [r3, #28]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	431a      	orrs	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	019b      	lsls	r3, r3, #6
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0e:	085b      	lsrs	r3, r3, #1
 8006f10:	3b01      	subs	r3, #1
 8006f12:	041b      	lsls	r3, r3, #16
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	061b      	lsls	r3, r3, #24
 8006f1c:	4933      	ldr	r1, [pc, #204]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f22:	4b33      	ldr	r3, [pc, #204]	; (8006ff0 <HAL_RCC_OscConfig+0x4dc>)
 8006f24:	2201      	movs	r2, #1
 8006f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f28:	f7fe fc0e 	bl	8005748 <HAL_GetTick>
 8006f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f30:	f7fe fc0a 	bl	8005748 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e04d      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f42:	4b2a      	ldr	r3, [pc, #168]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCC_OscConfig+0x41c>
 8006f4e:	e045      	b.n	8006fdc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f50:	4b27      	ldr	r3, [pc, #156]	; (8006ff0 <HAL_RCC_OscConfig+0x4dc>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f56:	f7fe fbf7 	bl	8005748 <HAL_GetTick>
 8006f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5c:	e008      	b.n	8006f70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f5e:	f7fe fbf3 	bl	8005748 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d901      	bls.n	8006f70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e036      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f70:	4b1e      	ldr	r3, [pc, #120]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1f0      	bne.n	8006f5e <HAL_RCC_OscConfig+0x44a>
 8006f7c:	e02e      	b.n	8006fdc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e029      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f8a:	4b18      	ldr	r3, [pc, #96]	; (8006fec <HAL_RCC_OscConfig+0x4d8>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	69db      	ldr	r3, [r3, #28]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d11c      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d115      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d10d      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d106      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d001      	beq.n	8006fdc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e000      	b.n	8006fde <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	40007000 	.word	0x40007000
 8006fec:	40023800 	.word	0x40023800
 8006ff0:	42470060 	.word	0x42470060

08006ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0cc      	b.n	80071a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007008:	4b68      	ldr	r3, [pc, #416]	; (80071ac <HAL_RCC_ClockConfig+0x1b8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	429a      	cmp	r2, r3
 8007014:	d90c      	bls.n	8007030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007016:	4b65      	ldr	r3, [pc, #404]	; (80071ac <HAL_RCC_ClockConfig+0x1b8>)
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800701e:	4b63      	ldr	r3, [pc, #396]	; (80071ac <HAL_RCC_ClockConfig+0x1b8>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d001      	beq.n	8007030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e0b8      	b.n	80071a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d020      	beq.n	800707e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007048:	4b59      	ldr	r3, [pc, #356]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	4a58      	ldr	r2, [pc, #352]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007060:	4b53      	ldr	r3, [pc, #332]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	4a52      	ldr	r2, [pc, #328]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800706a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800706c:	4b50      	ldr	r3, [pc, #320]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	494d      	ldr	r1, [pc, #308]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	4313      	orrs	r3, r2
 800707c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d044      	beq.n	8007114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d107      	bne.n	80070a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007092:	4b47      	ldr	r3, [pc, #284]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d119      	bne.n	80070d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e07f      	b.n	80071a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d003      	beq.n	80070b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d107      	bne.n	80070c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070b2:	4b3f      	ldr	r3, [pc, #252]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e06f      	b.n	80071a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c2:	4b3b      	ldr	r3, [pc, #236]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0302 	and.w	r3, r3, #2
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e067      	b.n	80071a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070d2:	4b37      	ldr	r3, [pc, #220]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f023 0203 	bic.w	r2, r3, #3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	4934      	ldr	r1, [pc, #208]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070e4:	f7fe fb30 	bl	8005748 <HAL_GetTick>
 80070e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ea:	e00a      	b.n	8007102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070ec:	f7fe fb2c 	bl	8005748 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e04f      	b.n	80071a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007102:	4b2b      	ldr	r3, [pc, #172]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 020c 	and.w	r2, r3, #12
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	429a      	cmp	r2, r3
 8007112:	d1eb      	bne.n	80070ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007114:	4b25      	ldr	r3, [pc, #148]	; (80071ac <HAL_RCC_ClockConfig+0x1b8>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d20c      	bcs.n	800713c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007122:	4b22      	ldr	r3, [pc, #136]	; (80071ac <HAL_RCC_ClockConfig+0x1b8>)
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800712a:	4b20      	ldr	r3, [pc, #128]	; (80071ac <HAL_RCC_ClockConfig+0x1b8>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	429a      	cmp	r2, r3
 8007136:	d001      	beq.n	800713c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e032      	b.n	80071a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0304 	and.w	r3, r3, #4
 8007144:	2b00      	cmp	r3, #0
 8007146:	d008      	beq.n	800715a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007148:	4b19      	ldr	r3, [pc, #100]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	4916      	ldr	r1, [pc, #88]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	4313      	orrs	r3, r2
 8007158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d009      	beq.n	800717a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007166:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	490e      	ldr	r1, [pc, #56]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007176:	4313      	orrs	r3, r2
 8007178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800717a:	f000 f821 	bl	80071c0 <HAL_RCC_GetSysClockFreq>
 800717e:	4602      	mov	r2, r0
 8007180:	4b0b      	ldr	r3, [pc, #44]	; (80071b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	091b      	lsrs	r3, r3, #4
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	490a      	ldr	r1, [pc, #40]	; (80071b4 <HAL_RCC_ClockConfig+0x1c0>)
 800718c:	5ccb      	ldrb	r3, [r1, r3]
 800718e:	fa22 f303 	lsr.w	r3, r2, r3
 8007192:	4a09      	ldr	r2, [pc, #36]	; (80071b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <HAL_RCC_ClockConfig+0x1c8>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fa90 	bl	80056c0 <HAL_InitTick>

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40023c00 	.word	0x40023c00
 80071b0:	40023800 	.word	0x40023800
 80071b4:	0800dfc0 	.word	0x0800dfc0
 80071b8:	20000004 	.word	0x20000004
 80071bc:	20000008 	.word	0x20000008

080071c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071c0:	b5b0      	push	{r4, r5, r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80071c6:	2100      	movs	r1, #0
 80071c8:	6079      	str	r1, [r7, #4]
 80071ca:	2100      	movs	r1, #0
 80071cc:	60f9      	str	r1, [r7, #12]
 80071ce:	2100      	movs	r1, #0
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80071d2:	2100      	movs	r1, #0
 80071d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071d6:	4952      	ldr	r1, [pc, #328]	; (8007320 <HAL_RCC_GetSysClockFreq+0x160>)
 80071d8:	6889      	ldr	r1, [r1, #8]
 80071da:	f001 010c 	and.w	r1, r1, #12
 80071de:	2908      	cmp	r1, #8
 80071e0:	d00d      	beq.n	80071fe <HAL_RCC_GetSysClockFreq+0x3e>
 80071e2:	2908      	cmp	r1, #8
 80071e4:	f200 8094 	bhi.w	8007310 <HAL_RCC_GetSysClockFreq+0x150>
 80071e8:	2900      	cmp	r1, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_RCC_GetSysClockFreq+0x32>
 80071ec:	2904      	cmp	r1, #4
 80071ee:	d003      	beq.n	80071f8 <HAL_RCC_GetSysClockFreq+0x38>
 80071f0:	e08e      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071f2:	4b4c      	ldr	r3, [pc, #304]	; (8007324 <HAL_RCC_GetSysClockFreq+0x164>)
 80071f4:	60bb      	str	r3, [r7, #8]
       break;
 80071f6:	e08e      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071f8:	4b4b      	ldr	r3, [pc, #300]	; (8007328 <HAL_RCC_GetSysClockFreq+0x168>)
 80071fa:	60bb      	str	r3, [r7, #8]
      break;
 80071fc:	e08b      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071fe:	4948      	ldr	r1, [pc, #288]	; (8007320 <HAL_RCC_GetSysClockFreq+0x160>)
 8007200:	6849      	ldr	r1, [r1, #4]
 8007202:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007206:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007208:	4945      	ldr	r1, [pc, #276]	; (8007320 <HAL_RCC_GetSysClockFreq+0x160>)
 800720a:	6849      	ldr	r1, [r1, #4]
 800720c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007210:	2900      	cmp	r1, #0
 8007212:	d024      	beq.n	800725e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007214:	4942      	ldr	r1, [pc, #264]	; (8007320 <HAL_RCC_GetSysClockFreq+0x160>)
 8007216:	6849      	ldr	r1, [r1, #4]
 8007218:	0989      	lsrs	r1, r1, #6
 800721a:	4608      	mov	r0, r1
 800721c:	f04f 0100 	mov.w	r1, #0
 8007220:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007224:	f04f 0500 	mov.w	r5, #0
 8007228:	ea00 0204 	and.w	r2, r0, r4
 800722c:	ea01 0305 	and.w	r3, r1, r5
 8007230:	493d      	ldr	r1, [pc, #244]	; (8007328 <HAL_RCC_GetSysClockFreq+0x168>)
 8007232:	fb01 f003 	mul.w	r0, r1, r3
 8007236:	2100      	movs	r1, #0
 8007238:	fb01 f102 	mul.w	r1, r1, r2
 800723c:	1844      	adds	r4, r0, r1
 800723e:	493a      	ldr	r1, [pc, #232]	; (8007328 <HAL_RCC_GetSysClockFreq+0x168>)
 8007240:	fba2 0101 	umull	r0, r1, r2, r1
 8007244:	1863      	adds	r3, r4, r1
 8007246:	4619      	mov	r1, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	461a      	mov	r2, r3
 800724c:	f04f 0300 	mov.w	r3, #0
 8007250:	f7f9 fd02 	bl	8000c58 <__aeabi_uldivmod>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4613      	mov	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e04a      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800725e:	4b30      	ldr	r3, [pc, #192]	; (8007320 <HAL_RCC_GetSysClockFreq+0x160>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	099b      	lsrs	r3, r3, #6
 8007264:	461a      	mov	r2, r3
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800726e:	f04f 0100 	mov.w	r1, #0
 8007272:	ea02 0400 	and.w	r4, r2, r0
 8007276:	ea03 0501 	and.w	r5, r3, r1
 800727a:	4620      	mov	r0, r4
 800727c:	4629      	mov	r1, r5
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	014b      	lsls	r3, r1, #5
 8007288:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800728c:	0142      	lsls	r2, r0, #5
 800728e:	4610      	mov	r0, r2
 8007290:	4619      	mov	r1, r3
 8007292:	1b00      	subs	r0, r0, r4
 8007294:	eb61 0105 	sbc.w	r1, r1, r5
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	018b      	lsls	r3, r1, #6
 80072a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072a6:	0182      	lsls	r2, r0, #6
 80072a8:	1a12      	subs	r2, r2, r0
 80072aa:	eb63 0301 	sbc.w	r3, r3, r1
 80072ae:	f04f 0000 	mov.w	r0, #0
 80072b2:	f04f 0100 	mov.w	r1, #0
 80072b6:	00d9      	lsls	r1, r3, #3
 80072b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072bc:	00d0      	lsls	r0, r2, #3
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	1912      	adds	r2, r2, r4
 80072c4:	eb45 0303 	adc.w	r3, r5, r3
 80072c8:	f04f 0000 	mov.w	r0, #0
 80072cc:	f04f 0100 	mov.w	r1, #0
 80072d0:	0299      	lsls	r1, r3, #10
 80072d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80072d6:	0290      	lsls	r0, r2, #10
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4610      	mov	r0, r2
 80072de:	4619      	mov	r1, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	461a      	mov	r2, r3
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	f7f9 fcb6 	bl	8000c58 <__aeabi_uldivmod>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4613      	mov	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <HAL_RCC_GetSysClockFreq+0x160>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	3301      	adds	r3, #1
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	60bb      	str	r3, [r7, #8]
      break;
 800730e:	e002      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007310:	4b04      	ldr	r3, [pc, #16]	; (8007324 <HAL_RCC_GetSysClockFreq+0x164>)
 8007312:	60bb      	str	r3, [r7, #8]
      break;
 8007314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007316:	68bb      	ldr	r3, [r7, #8]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bdb0      	pop	{r4, r5, r7, pc}
 8007320:	40023800 	.word	0x40023800
 8007324:	00f42400 	.word	0x00f42400
 8007328:	017d7840 	.word	0x017d7840

0800732c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007330:	4b03      	ldr	r3, [pc, #12]	; (8007340 <HAL_RCC_GetHCLKFreq+0x14>)
 8007332:	681b      	ldr	r3, [r3, #0]
}
 8007334:	4618      	mov	r0, r3
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	20000004 	.word	0x20000004

08007344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007348:	f7ff fff0 	bl	800732c <HAL_RCC_GetHCLKFreq>
 800734c:	4602      	mov	r2, r0
 800734e:	4b05      	ldr	r3, [pc, #20]	; (8007364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	0a9b      	lsrs	r3, r3, #10
 8007354:	f003 0307 	and.w	r3, r3, #7
 8007358:	4903      	ldr	r1, [pc, #12]	; (8007368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007360:	4618      	mov	r0, r3
 8007362:	bd80      	pop	{r7, pc}
 8007364:	40023800 	.word	0x40023800
 8007368:	0800dfd0 	.word	0x0800dfd0

0800736c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007370:	f7ff ffdc 	bl	800732c <HAL_RCC_GetHCLKFreq>
 8007374:	4602      	mov	r2, r0
 8007376:	4b05      	ldr	r3, [pc, #20]	; (800738c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	0b5b      	lsrs	r3, r3, #13
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	4903      	ldr	r1, [pc, #12]	; (8007390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007382:	5ccb      	ldrb	r3, [r1, r3]
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007388:	4618      	mov	r0, r3
 800738a:	bd80      	pop	{r7, pc}
 800738c:	40023800 	.word	0x40023800
 8007390:	0800dfd0 	.word	0x0800dfd0

08007394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e056      	b.n	8007454 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d106      	bne.n	80073c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7fc faf3 	bl	80039ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	ea42 0103 	orr.w	r1, r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	0c1b      	lsrs	r3, r3, #16
 8007424:	f003 0104 	and.w	r1, r3, #4
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	69da      	ldr	r2, [r3, #28]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007442:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b088      	sub	sp, #32
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007476:	2b01      	cmp	r3, #1
 8007478:	d101      	bne.n	800747e <HAL_SPI_Transmit+0x22>
 800747a:	2302      	movs	r3, #2
 800747c:	e11e      	b.n	80076bc <HAL_SPI_Transmit+0x260>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007486:	f7fe f95f 	bl	8005748 <HAL_GetTick>
 800748a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007496:	b2db      	uxtb	r3, r3
 8007498:	2b01      	cmp	r3, #1
 800749a:	d002      	beq.n	80074a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800749c:	2302      	movs	r3, #2
 800749e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074a0:	e103      	b.n	80076aa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <HAL_SPI_Transmit+0x52>
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d102      	bne.n	80074b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074b2:	e0fa      	b.n	80076aa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2203      	movs	r2, #3
 80074b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	88fa      	ldrh	r2, [r7, #6]
 80074d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074fa:	d107      	bne.n	800750c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800750a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007516:	2b40      	cmp	r3, #64	; 0x40
 8007518:	d007      	beq.n	800752a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007528:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007532:	d14b      	bne.n	80075cc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d002      	beq.n	8007542 <HAL_SPI_Transmit+0xe6>
 800753c:	8afb      	ldrh	r3, [r7, #22]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d13e      	bne.n	80075c0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	881a      	ldrh	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007552:	1c9a      	adds	r2, r3, #2
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007566:	e02b      	b.n	80075c0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 0302 	and.w	r3, r3, #2
 8007572:	2b02      	cmp	r3, #2
 8007574:	d112      	bne.n	800759c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757a:	881a      	ldrh	r2, [r3, #0]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	1c9a      	adds	r2, r3, #2
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	86da      	strh	r2, [r3, #54]	; 0x36
 800759a:	e011      	b.n	80075c0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800759c:	f7fe f8d4 	bl	8005748 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d803      	bhi.n	80075b4 <HAL_SPI_Transmit+0x158>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075b2:	d102      	bne.n	80075ba <HAL_SPI_Transmit+0x15e>
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d102      	bne.n	80075c0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075be:	e074      	b.n	80076aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1ce      	bne.n	8007568 <HAL_SPI_Transmit+0x10c>
 80075ca:	e04c      	b.n	8007666 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_SPI_Transmit+0x17e>
 80075d4:	8afb      	ldrh	r3, [r7, #22]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d140      	bne.n	800765c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	330c      	adds	r3, #12
 80075e4:	7812      	ldrb	r2, [r2, #0]
 80075e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	3b01      	subs	r3, #1
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007600:	e02c      	b.n	800765c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0302 	and.w	r3, r3, #2
 800760c:	2b02      	cmp	r3, #2
 800760e:	d113      	bne.n	8007638 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	330c      	adds	r3, #12
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	86da      	strh	r2, [r3, #54]	; 0x36
 8007636:	e011      	b.n	800765c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007638:	f7fe f886 	bl	8005748 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d803      	bhi.n	8007650 <HAL_SPI_Transmit+0x1f4>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800764e:	d102      	bne.n	8007656 <HAL_SPI_Transmit+0x1fa>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	77fb      	strb	r3, [r7, #31]
          goto error;
 800765a:	e026      	b.n	80076aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1cd      	bne.n	8007602 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fba4 	bl	8007db8 <SPI_EndRxTxTransaction>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2220      	movs	r2, #32
 800767a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10a      	bne.n	800769a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007684:	2300      	movs	r3, #0
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	613b      	str	r3, [r7, #16]
 8007698:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	77fb      	strb	r3, [r7, #31]
 80076a6:	e000      	b.n	80076aa <HAL_SPI_Transmit+0x24e>
  }

error:
 80076a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3720      	adds	r7, #32
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076e0:	d112      	bne.n	8007708 <HAL_SPI_Receive+0x44>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10e      	bne.n	8007708 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2204      	movs	r2, #4
 80076ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80076f2:	88fa      	ldrh	r2, [r7, #6]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	4613      	mov	r3, r2
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	68f8      	ldr	r0, [r7, #12]
 8007700:	f000 f8e9 	bl	80078d6 <HAL_SPI_TransmitReceive>
 8007704:	4603      	mov	r3, r0
 8007706:	e0e2      	b.n	80078ce <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800770e:	2b01      	cmp	r3, #1
 8007710:	d101      	bne.n	8007716 <HAL_SPI_Receive+0x52>
 8007712:	2302      	movs	r3, #2
 8007714:	e0db      	b.n	80078ce <HAL_SPI_Receive+0x20a>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800771e:	f7fe f813 	bl	8005748 <HAL_GetTick>
 8007722:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b01      	cmp	r3, #1
 800772e:	d002      	beq.n	8007736 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007730:	2302      	movs	r3, #2
 8007732:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007734:	e0c2      	b.n	80078bc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <HAL_SPI_Receive+0x7e>
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007746:	e0b9      	b.n	80078bc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2204      	movs	r2, #4
 800774c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2200      	movs	r2, #0
 800777e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800778e:	d107      	bne.n	80077a0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800779e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d007      	beq.n	80077be <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077bc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d162      	bne.n	800788c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077c6:	e02e      	b.n	8007826 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d115      	bne.n	8007802 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f103 020c 	add.w	r2, r3, #12
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	7812      	ldrb	r2, [r2, #0]
 80077e4:	b2d2      	uxtb	r2, r2
 80077e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	1c5a      	adds	r2, r3, #1
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	3b01      	subs	r3, #1
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007800:	e011      	b.n	8007826 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007802:	f7fd ffa1 	bl	8005748 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	429a      	cmp	r2, r3
 8007810:	d803      	bhi.n	800781a <HAL_SPI_Receive+0x156>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007818:	d102      	bne.n	8007820 <HAL_SPI_Receive+0x15c>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007824:	e04a      	b.n	80078bc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1cb      	bne.n	80077c8 <HAL_SPI_Receive+0x104>
 8007830:	e031      	b.n	8007896 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b01      	cmp	r3, #1
 800783e:	d113      	bne.n	8007868 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	b292      	uxth	r2, r2
 800784c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	1c9a      	adds	r2, r3, #2
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007866:	e011      	b.n	800788c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007868:	f7fd ff6e 	bl	8005748 <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d803      	bhi.n	8007880 <HAL_SPI_Receive+0x1bc>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800787e:	d102      	bne.n	8007886 <HAL_SPI_Receive+0x1c2>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	75fb      	strb	r3, [r7, #23]
          goto error;
 800788a:	e017      	b.n	80078bc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1cd      	bne.n	8007832 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007896:	693a      	ldr	r2, [r7, #16]
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 fa27 	bl	8007cee <SPI_EndRxTransaction>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d002      	beq.n	80078ac <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2220      	movs	r2, #32
 80078aa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	75fb      	strb	r3, [r7, #23]
 80078b8:	e000      	b.n	80078bc <HAL_SPI_Receive+0x1f8>
  }

error :
 80078ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2201      	movs	r2, #1
 80078c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b08c      	sub	sp, #48	; 0x30
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078e4:	2301      	movs	r3, #1
 80078e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078e8:	2300      	movs	r3, #0
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d101      	bne.n	80078fc <HAL_SPI_TransmitReceive+0x26>
 80078f8:	2302      	movs	r3, #2
 80078fa:	e18a      	b.n	8007c12 <HAL_SPI_TransmitReceive+0x33c>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007904:	f7fd ff20 	bl	8005748 <HAL_GetTick>
 8007908:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800791a:	887b      	ldrh	r3, [r7, #2]
 800791c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800791e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007922:	2b01      	cmp	r3, #1
 8007924:	d00f      	beq.n	8007946 <HAL_SPI_TransmitReceive+0x70>
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800792c:	d107      	bne.n	800793e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d103      	bne.n	800793e <HAL_SPI_TransmitReceive+0x68>
 8007936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800793a:	2b04      	cmp	r3, #4
 800793c:	d003      	beq.n	8007946 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800793e:	2302      	movs	r3, #2
 8007940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007944:	e15b      	b.n	8007bfe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d005      	beq.n	8007958 <HAL_SPI_TransmitReceive+0x82>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <HAL_SPI_TransmitReceive+0x82>
 8007952:	887b      	ldrh	r3, [r7, #2]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d103      	bne.n	8007960 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800795e:	e14e      	b.n	8007bfe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b04      	cmp	r3, #4
 800796a:	d003      	beq.n	8007974 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2205      	movs	r2, #5
 8007970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	887a      	ldrh	r2, [r7, #2]
 8007984:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	887a      	ldrh	r2, [r7, #2]
 800798a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	887a      	ldrh	r2, [r7, #2]
 8007996:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	887a      	ldrh	r2, [r7, #2]
 800799c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b4:	2b40      	cmp	r3, #64	; 0x40
 80079b6:	d007      	beq.n	80079c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d0:	d178      	bne.n	8007ac4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <HAL_SPI_TransmitReceive+0x10a>
 80079da:	8b7b      	ldrh	r3, [r7, #26]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d166      	bne.n	8007aae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e4:	881a      	ldrh	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	1c9a      	adds	r2, r3, #2
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a04:	e053      	b.n	8007aae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d11b      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x176>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d016      	beq.n	8007a4c <HAL_SPI_TransmitReceive+0x176>
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d113      	bne.n	8007a4c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	881a      	ldrh	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a34:	1c9a      	adds	r2, r3, #2
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 0301 	and.w	r3, r3, #1
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d119      	bne.n	8007a8e <HAL_SPI_TransmitReceive+0x1b8>
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d014      	beq.n	8007a8e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	b292      	uxth	r2, r2
 8007a70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a76:	1c9a      	adds	r2, r3, #2
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a8e:	f7fd fe5b 	bl	8005748 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d807      	bhi.n	8007aae <HAL_SPI_TransmitReceive+0x1d8>
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa4:	d003      	beq.n	8007aae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007aac:	e0a7      	b.n	8007bfe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1a6      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0x130>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1a1      	bne.n	8007a06 <HAL_SPI_TransmitReceive+0x130>
 8007ac2:	e07c      	b.n	8007bbe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <HAL_SPI_TransmitReceive+0x1fc>
 8007acc:	8b7b      	ldrh	r3, [r7, #26]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d16b      	bne.n	8007baa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	330c      	adds	r3, #12
 8007adc:	7812      	ldrb	r2, [r2, #0]
 8007ade:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae4:	1c5a      	adds	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	3b01      	subs	r3, #1
 8007af2:	b29a      	uxth	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007af8:	e057      	b.n	8007baa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d11c      	bne.n	8007b42 <HAL_SPI_TransmitReceive+0x26c>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d017      	beq.n	8007b42 <HAL_SPI_TransmitReceive+0x26c>
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d114      	bne.n	8007b42 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	7812      	ldrb	r2, [r2, #0]
 8007b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d119      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x2ae>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d014      	beq.n	8007b84 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68da      	ldr	r2, [r3, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b64:	b2d2      	uxtb	r2, r2
 8007b66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b80:	2301      	movs	r3, #1
 8007b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b84:	f7fd fde0 	bl	8005748 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d803      	bhi.n	8007b9c <HAL_SPI_TransmitReceive+0x2c6>
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b9a:	d102      	bne.n	8007ba2 <HAL_SPI_TransmitReceive+0x2cc>
 8007b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d103      	bne.n	8007baa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ba8:	e029      	b.n	8007bfe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1a2      	bne.n	8007afa <HAL_SPI_TransmitReceive+0x224>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d19d      	bne.n	8007afa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 f8f8 	bl	8007db8 <SPI_EndRxTxTransaction>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d006      	beq.n	8007bdc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007bda:	e010      	b.n	8007bfe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10b      	bne.n	8007bfc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	617b      	str	r3, [r7, #20]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	e000      	b.n	8007bfe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007bfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3730      	adds	r7, #48	; 0x30
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	60b9      	str	r1, [r7, #8]
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	4613      	mov	r3, r2
 8007c28:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c2a:	e04c      	b.n	8007cc6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c32:	d048      	beq.n	8007cc6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007c34:	f7fd fd88 	bl	8005748 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d902      	bls.n	8007c4a <SPI_WaitFlagStateUntilTimeout+0x30>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d13d      	bne.n	8007cc6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c62:	d111      	bne.n	8007c88 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c6c:	d004      	beq.n	8007c78 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c76:	d107      	bne.n	8007c88 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c90:	d10f      	bne.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	e00f      	b.n	8007ce6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689a      	ldr	r2, [r3, #8]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4013      	ands	r3, r2
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	bf0c      	ite	eq
 8007cd6:	2301      	moveq	r3, #1
 8007cd8:	2300      	movne	r3, #0
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d1a3      	bne.n	8007c2c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b086      	sub	sp, #24
 8007cf2:	af02      	add	r7, sp, #8
 8007cf4:	60f8      	str	r0, [r7, #12]
 8007cf6:	60b9      	str	r1, [r7, #8]
 8007cf8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d02:	d111      	bne.n	8007d28 <SPI_EndRxTransaction+0x3a>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d0c:	d004      	beq.n	8007d18 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d16:	d107      	bne.n	8007d28 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d26:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d30:	d12a      	bne.n	8007d88 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d3a:	d012      	beq.n	8007d62 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	2200      	movs	r2, #0
 8007d44:	2180      	movs	r1, #128	; 0x80
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f7ff ff67 	bl	8007c1a <SPI_WaitFlagStateUntilTimeout>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d02d      	beq.n	8007dae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d56:	f043 0220 	orr.w	r2, r3, #32
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e026      	b.n	8007db0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2101      	movs	r1, #1
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff ff54 	bl	8007c1a <SPI_WaitFlagStateUntilTimeout>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d01a      	beq.n	8007dae <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7c:	f043 0220 	orr.w	r2, r3, #32
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e013      	b.n	8007db0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2101      	movs	r1, #1
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff ff41 	bl	8007c1a <SPI_WaitFlagStateUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d007      	beq.n	8007dae <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da2:	f043 0220 	orr.w	r2, r3, #32
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e000      	b.n	8007db0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	; (8007e34 <SPI_EndRxTxTransaction+0x7c>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a1b      	ldr	r2, [pc, #108]	; (8007e38 <SPI_EndRxTxTransaction+0x80>)
 8007dca:	fba2 2303 	umull	r2, r3, r2, r3
 8007dce:	0d5b      	lsrs	r3, r3, #21
 8007dd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dd4:	fb02 f303 	mul.w	r3, r2, r3
 8007dd8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007de2:	d112      	bne.n	8007e0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2200      	movs	r2, #0
 8007dec:	2180      	movs	r1, #128	; 0x80
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f7ff ff13 	bl	8007c1a <SPI_WaitFlagStateUntilTimeout>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d016      	beq.n	8007e28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfe:	f043 0220 	orr.w	r2, r3, #32
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e06:	2303      	movs	r3, #3
 8007e08:	e00f      	b.n	8007e2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00a      	beq.n	8007e26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e20:	2b80      	cmp	r3, #128	; 0x80
 8007e22:	d0f2      	beq.n	8007e0a <SPI_EndRxTxTransaction+0x52>
 8007e24:	e000      	b.n	8007e28 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e26:	bf00      	nop
  }

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	20000004 	.word	0x20000004
 8007e38:	165e9f81 	.word	0x165e9f81

08007e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e01d      	b.n	8007e8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fd faf8 	bl	8005458 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	f000 fb58 	bl	8008530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b085      	sub	sp, #20
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f042 0201 	orr.w	r2, r2, #1
 8007ea8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b06      	cmp	r3, #6
 8007eba:	d007      	beq.n	8007ecc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0201 	orr.w	r2, r2, #1
 8007eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr

08007eda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b082      	sub	sp, #8
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e01d      	b.n	8007f28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d106      	bne.n	8007f06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f815 	bl	8007f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2202      	movs	r2, #2
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3304      	adds	r3, #4
 8007f16:	4619      	mov	r1, r3
 8007f18:	4610      	mov	r0, r2
 8007f1a:	f000 fb09 	bl	8008530 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2201      	movs	r2, #1
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 fd90 	bl	8008a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a10      	ldr	r2, [pc, #64]	; (8007fa4 <HAL_TIM_PWM_Start+0x60>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d107      	bne.n	8007f76 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b06      	cmp	r3, #6
 8007f86:	d007      	beq.n	8007f98 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0201 	orr.w	r2, r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40010000 	.word	0x40010000

08007fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d122      	bne.n	8008004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d11b      	bne.n	8008004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0202 	mvn.w	r2, #2
 8007fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa82 	bl	80084f4 <HAL_TIM_IC_CaptureCallback>
 8007ff0:	e005      	b.n	8007ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fa74 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa85 	bl	8008508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b04      	cmp	r3, #4
 8008010:	d122      	bne.n	8008058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b04      	cmp	r3, #4
 800801e:	d11b      	bne.n	8008058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f06f 0204 	mvn.w	r2, #4
 8008028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2202      	movs	r2, #2
 800802e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fa58 	bl	80084f4 <HAL_TIM_IC_CaptureCallback>
 8008044:	e005      	b.n	8008052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fa4a 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fa5b 	bl	8008508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0308 	and.w	r3, r3, #8
 8008062:	2b08      	cmp	r3, #8
 8008064:	d122      	bne.n	80080ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b08      	cmp	r3, #8
 8008072:	d11b      	bne.n	80080ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f06f 0208 	mvn.w	r2, #8
 800807c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2204      	movs	r2, #4
 8008082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f003 0303 	and.w	r3, r3, #3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fa2e 	bl	80084f4 <HAL_TIM_IC_CaptureCallback>
 8008098:	e005      	b.n	80080a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa20 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fa31 	bl	8008508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	f003 0310 	and.w	r3, r3, #16
 80080b6:	2b10      	cmp	r3, #16
 80080b8:	d122      	bne.n	8008100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b10      	cmp	r3, #16
 80080c6:	d11b      	bne.n	8008100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f06f 0210 	mvn.w	r2, #16
 80080d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2208      	movs	r2, #8
 80080d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fa04 	bl	80084f4 <HAL_TIM_IC_CaptureCallback>
 80080ec:	e005      	b.n	80080fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f9f6 	bl	80084e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fa07 	bl	8008508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b01      	cmp	r3, #1
 800810c:	d10e      	bne.n	800812c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b01      	cmp	r3, #1
 800811a:	d107      	bne.n	800812c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0201 	mvn.w	r2, #1
 8008124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f9d0 	bl	80084cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008136:	2b80      	cmp	r3, #128	; 0x80
 8008138:	d10e      	bne.n	8008158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008144:	2b80      	cmp	r3, #128	; 0x80
 8008146:	d107      	bne.n	8008158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fd82 	bl	8008c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008162:	2b40      	cmp	r3, #64	; 0x40
 8008164:	d10e      	bne.n	8008184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008170:	2b40      	cmp	r3, #64	; 0x40
 8008172:	d107      	bne.n	8008184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800817c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f9cc 	bl	800851c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b20      	cmp	r3, #32
 8008190:	d10e      	bne.n	80081b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b20      	cmp	r3, #32
 800819e:	d107      	bne.n	80081b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0220 	mvn.w	r2, #32
 80081a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fd4c 	bl	8008c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80081ce:	2302      	movs	r3, #2
 80081d0:	e0b4      	b.n	800833c <HAL_TIM_PWM_ConfigChannel+0x184>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2202      	movs	r2, #2
 80081de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b0c      	cmp	r3, #12
 80081e6:	f200 809f 	bhi.w	8008328 <HAL_TIM_PWM_ConfigChannel+0x170>
 80081ea:	a201      	add	r2, pc, #4	; (adr r2, 80081f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80081ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f0:	08008225 	.word	0x08008225
 80081f4:	08008329 	.word	0x08008329
 80081f8:	08008329 	.word	0x08008329
 80081fc:	08008329 	.word	0x08008329
 8008200:	08008265 	.word	0x08008265
 8008204:	08008329 	.word	0x08008329
 8008208:	08008329 	.word	0x08008329
 800820c:	08008329 	.word	0x08008329
 8008210:	080082a7 	.word	0x080082a7
 8008214:	08008329 	.word	0x08008329
 8008218:	08008329 	.word	0x08008329
 800821c:	08008329 	.word	0x08008329
 8008220:	080082e7 	.word	0x080082e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68b9      	ldr	r1, [r7, #8]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fa00 	bl	8008630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699a      	ldr	r2, [r3, #24]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0208 	orr.w	r2, r2, #8
 800823e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0204 	bic.w	r2, r2, #4
 800824e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6999      	ldr	r1, [r3, #24]
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	691a      	ldr	r2, [r3, #16]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	430a      	orrs	r2, r1
 8008260:	619a      	str	r2, [r3, #24]
      break;
 8008262:	e062      	b.n	800832a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68b9      	ldr	r1, [r7, #8]
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fa46 	bl	80086fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699a      	ldr	r2, [r3, #24]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800827e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699a      	ldr	r2, [r3, #24]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800828e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6999      	ldr	r1, [r3, #24]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	021a      	lsls	r2, r3, #8
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	619a      	str	r2, [r3, #24]
      break;
 80082a4:	e041      	b.n	800832a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68b9      	ldr	r1, [r7, #8]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 fa91 	bl	80087d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f042 0208 	orr.w	r2, r2, #8
 80082c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69da      	ldr	r2, [r3, #28]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f022 0204 	bic.w	r2, r2, #4
 80082d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69d9      	ldr	r1, [r3, #28]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	691a      	ldr	r2, [r3, #16]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	61da      	str	r2, [r3, #28]
      break;
 80082e4:	e021      	b.n	800832a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f000 fadb 	bl	80088a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	69da      	ldr	r2, [r3, #28]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008300:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69da      	ldr	r2, [r3, #28]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008310:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	69d9      	ldr	r1, [r3, #28]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	021a      	lsls	r2, r3, #8
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	61da      	str	r2, [r3, #28]
      break;
 8008326:	e000      	b.n	800832a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008328:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d101      	bne.n	800835c <HAL_TIM_ConfigClockSource+0x18>
 8008358:	2302      	movs	r3, #2
 800835a:	e0b3      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x180>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800837a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008394:	d03e      	beq.n	8008414 <HAL_TIM_ConfigClockSource+0xd0>
 8008396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800839a:	f200 8087 	bhi.w	80084ac <HAL_TIM_ConfigClockSource+0x168>
 800839e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a2:	f000 8085 	beq.w	80084b0 <HAL_TIM_ConfigClockSource+0x16c>
 80083a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083aa:	d87f      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x168>
 80083ac:	2b70      	cmp	r3, #112	; 0x70
 80083ae:	d01a      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0xa2>
 80083b0:	2b70      	cmp	r3, #112	; 0x70
 80083b2:	d87b      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x168>
 80083b4:	2b60      	cmp	r3, #96	; 0x60
 80083b6:	d050      	beq.n	800845a <HAL_TIM_ConfigClockSource+0x116>
 80083b8:	2b60      	cmp	r3, #96	; 0x60
 80083ba:	d877      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x168>
 80083bc:	2b50      	cmp	r3, #80	; 0x50
 80083be:	d03c      	beq.n	800843a <HAL_TIM_ConfigClockSource+0xf6>
 80083c0:	2b50      	cmp	r3, #80	; 0x50
 80083c2:	d873      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x168>
 80083c4:	2b40      	cmp	r3, #64	; 0x40
 80083c6:	d058      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x136>
 80083c8:	2b40      	cmp	r3, #64	; 0x40
 80083ca:	d86f      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x168>
 80083cc:	2b30      	cmp	r3, #48	; 0x30
 80083ce:	d064      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x156>
 80083d0:	2b30      	cmp	r3, #48	; 0x30
 80083d2:	d86b      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x168>
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	d060      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x156>
 80083d8:	2b20      	cmp	r3, #32
 80083da:	d867      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x168>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d05c      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x156>
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d05a      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80083e4:	e062      	b.n	80084ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6899      	ldr	r1, [r3, #8]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	f000 fb21 	bl	8008a3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008408:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	609a      	str	r2, [r3, #8]
      break;
 8008412:	e04e      	b.n	80084b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	6899      	ldr	r1, [r3, #8]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f000 fb0a 	bl	8008a3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008436:	609a      	str	r2, [r3, #8]
      break;
 8008438:	e03b      	b.n	80084b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	6859      	ldr	r1, [r3, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	461a      	mov	r2, r3
 8008448:	f000 fa7e 	bl	8008948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2150      	movs	r1, #80	; 0x50
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fad7 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 8008458:	e02b      	b.n	80084b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	6859      	ldr	r1, [r3, #4]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	461a      	mov	r2, r3
 8008468:	f000 fa9d 	bl	80089a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2160      	movs	r1, #96	; 0x60
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fac7 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 8008478:	e01b      	b.n	80084b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	6859      	ldr	r1, [r3, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	461a      	mov	r2, r3
 8008488:	f000 fa5e 	bl	8008948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2140      	movs	r1, #64	; 0x40
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fab7 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 8008498:	e00b      	b.n	80084b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f000 faae 	bl	8008a06 <TIM_ITRx_SetConfig>
      break;
 80084aa:	e002      	b.n	80084b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80084ac:	bf00      	nop
 80084ae:	e000      	b.n	80084b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80084b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a34      	ldr	r2, [pc, #208]	; (8008614 <TIM_Base_SetConfig+0xe4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d00f      	beq.n	8008568 <TIM_Base_SetConfig+0x38>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800854e:	d00b      	beq.n	8008568 <TIM_Base_SetConfig+0x38>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a31      	ldr	r2, [pc, #196]	; (8008618 <TIM_Base_SetConfig+0xe8>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d007      	beq.n	8008568 <TIM_Base_SetConfig+0x38>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a30      	ldr	r2, [pc, #192]	; (800861c <TIM_Base_SetConfig+0xec>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d003      	beq.n	8008568 <TIM_Base_SetConfig+0x38>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a2f      	ldr	r2, [pc, #188]	; (8008620 <TIM_Base_SetConfig+0xf0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d108      	bne.n	800857a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800856e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a25      	ldr	r2, [pc, #148]	; (8008614 <TIM_Base_SetConfig+0xe4>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d01b      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008588:	d017      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a22      	ldr	r2, [pc, #136]	; (8008618 <TIM_Base_SetConfig+0xe8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d013      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a21      	ldr	r2, [pc, #132]	; (800861c <TIM_Base_SetConfig+0xec>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d00f      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4a20      	ldr	r2, [pc, #128]	; (8008620 <TIM_Base_SetConfig+0xf0>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d00b      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a1f      	ldr	r2, [pc, #124]	; (8008624 <TIM_Base_SetConfig+0xf4>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d007      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a1e      	ldr	r2, [pc, #120]	; (8008628 <TIM_Base_SetConfig+0xf8>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d003      	beq.n	80085ba <TIM_Base_SetConfig+0x8a>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a1d      	ldr	r2, [pc, #116]	; (800862c <TIM_Base_SetConfig+0xfc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d108      	bne.n	80085cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a08      	ldr	r2, [pc, #32]	; (8008614 <TIM_Base_SetConfig+0xe4>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d103      	bne.n	8008600 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	615a      	str	r2, [r3, #20]
}
 8008606:	bf00      	nop
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	40010000 	.word	0x40010000
 8008618:	40000400 	.word	0x40000400
 800861c:	40000800 	.word	0x40000800
 8008620:	40000c00 	.word	0x40000c00
 8008624:	40014000 	.word	0x40014000
 8008628:	40014400 	.word	0x40014400
 800862c:	40014800 	.word	0x40014800

08008630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	f023 0201 	bic.w	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6a1b      	ldr	r3, [r3, #32]
 800864a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f023 0303 	bic.w	r3, r3, #3
 8008666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	4313      	orrs	r3, r2
 8008670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f023 0302 	bic.w	r3, r3, #2
 8008678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	4313      	orrs	r3, r2
 8008682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <TIM_OC1_SetConfig+0xc8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d10c      	bne.n	80086a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	f023 0308 	bic.w	r3, r3, #8
 8008692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	4313      	orrs	r3, r2
 800869c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f023 0304 	bic.w	r3, r3, #4
 80086a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a13      	ldr	r2, [pc, #76]	; (80086f8 <TIM_OC1_SetConfig+0xc8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d111      	bne.n	80086d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80086bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	621a      	str	r2, [r3, #32]
}
 80086ec:	bf00      	nop
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	40010000 	.word	0x40010000

080086fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	f023 0210 	bic.w	r2, r3, #16
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800872a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	021b      	lsls	r3, r3, #8
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	4313      	orrs	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f023 0320 	bic.w	r3, r3, #32
 8008746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	4313      	orrs	r3, r2
 8008752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a1e      	ldr	r2, [pc, #120]	; (80087d0 <TIM_OC2_SetConfig+0xd4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d10d      	bne.n	8008778 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4313      	orrs	r3, r2
 800876e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a15      	ldr	r2, [pc, #84]	; (80087d0 <TIM_OC2_SetConfig+0xd4>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d113      	bne.n	80087a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800878e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	693a      	ldr	r2, [r7, #16]
 8008798:	4313      	orrs	r3, r2
 800879a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	621a      	str	r2, [r3, #32]
}
 80087c2:	bf00      	nop
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	40010000 	.word	0x40010000

080087d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b087      	sub	sp, #28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0303 	bic.w	r3, r3, #3
 800880a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800881c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	697a      	ldr	r2, [r7, #20]
 8008826:	4313      	orrs	r3, r2
 8008828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <TIM_OC3_SetConfig+0xd0>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d10d      	bne.n	800884e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	021b      	lsls	r3, r3, #8
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800884c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a14      	ldr	r2, [pc, #80]	; (80088a4 <TIM_OC3_SetConfig+0xd0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d113      	bne.n	800887e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800885c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	011b      	lsls	r3, r3, #4
 800886c:	693a      	ldr	r2, [r7, #16]
 800886e:	4313      	orrs	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	699b      	ldr	r3, [r3, #24]
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	621a      	str	r2, [r3, #32]
}
 8008898:	bf00      	nop
 800889a:	371c      	adds	r7, #28
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	40010000 	.word	0x40010000

080088a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a1b      	ldr	r3, [r3, #32]
 80088b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	031b      	lsls	r3, r3, #12
 80088fa:	693a      	ldr	r2, [r7, #16]
 80088fc:	4313      	orrs	r3, r2
 80088fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a10      	ldr	r2, [pc, #64]	; (8008944 <TIM_OC4_SetConfig+0x9c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d109      	bne.n	800891c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800890e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	695b      	ldr	r3, [r3, #20]
 8008914:	019b      	lsls	r3, r3, #6
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	621a      	str	r2, [r3, #32]
}
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	40010000 	.word	0x40010000

08008948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008948:	b480      	push	{r7}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	f023 0201 	bic.w	r2, r3, #1
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f023 030a 	bic.w	r3, r3, #10
 8008984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	621a      	str	r2, [r3, #32]
}
 800899a:	bf00      	nop
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089a6:	b480      	push	{r7}
 80089a8:	b087      	sub	sp, #28
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	60f8      	str	r0, [r7, #12]
 80089ae:	60b9      	str	r1, [r7, #8]
 80089b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f023 0210 	bic.w	r2, r3, #16
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	031b      	lsls	r3, r3, #12
 80089d6:	697a      	ldr	r2, [r7, #20]
 80089d8:	4313      	orrs	r3, r2
 80089da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a06:	b480      	push	{r7}
 8008a08:	b085      	sub	sp, #20
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f043 0307 	orr.w	r3, r3, #7
 8008a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	609a      	str	r2, [r3, #8]
}
 8008a30:	bf00      	nop
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	60f8      	str	r0, [r7, #12]
 8008a44:	60b9      	str	r1, [r7, #8]
 8008a46:	607a      	str	r2, [r7, #4]
 8008a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	021a      	lsls	r2, r3, #8
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	431a      	orrs	r2, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	609a      	str	r2, [r3, #8]
}
 8008a70:	bf00      	nop
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f003 031f 	and.w	r3, r3, #31
 8008a8e:	2201      	movs	r2, #1
 8008a90:	fa02 f303 	lsl.w	r3, r2, r3
 8008a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a1a      	ldr	r2, [r3, #32]
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	43db      	mvns	r3, r3
 8008a9e:	401a      	ands	r2, r3
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6a1a      	ldr	r2, [r3, #32]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f003 031f 	and.w	r3, r3, #31
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	621a      	str	r2, [r3, #32]
}
 8008aba:	bf00      	nop
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
	...

08008ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d101      	bne.n	8008ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008adc:	2302      	movs	r3, #2
 8008ade:	e050      	b.n	8008b82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a1c      	ldr	r2, [pc, #112]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d018      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b2c:	d013      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a18      	ldr	r2, [pc, #96]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00e      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a16      	ldr	r2, [pc, #88]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d009      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a15      	ldr	r2, [pc, #84]	; (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d004      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a13      	ldr	r2, [pc, #76]	; (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d10c      	bne.n	8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	40010000 	.word	0x40010000
 8008b94:	40000400 	.word	0x40000400
 8008b98:	40000800 	.word	0x40000800
 8008b9c:	40000c00 	.word	0x40000c00
 8008ba0:	40014000 	.word	0x40014000

08008ba4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d101      	bne.n	8008bc0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	e03d      	b.n	8008c3c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d101      	bne.n	8008c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e03f      	b.n	8008d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d106      	bne.n	8008c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7fc fc7e 	bl	8005598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2224      	movs	r2, #36	; 0x24
 8008ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68da      	ldr	r2, [r3, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f829 	bl	8008d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	691a      	ldr	r2, [r3, #16]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695a      	ldr	r2, [r3, #20]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	b0bd      	sub	sp, #244	; 0xf4
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d28:	68d9      	ldr	r1, [r3, #12]
 8008d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	ea40 0301 	orr.w	r3, r0, r1
 8008d34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	431a      	orrs	r2, r3
 8008d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d64:	f021 010c 	bic.w	r1, r1, #12
 8008d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008d72:	430b      	orrs	r3, r1
 8008d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d86:	6999      	ldr	r1, [r3, #24]
 8008d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	ea40 0301 	orr.w	r3, r0, r1
 8008d92:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d9e:	f040 81a5 	bne.w	80090ec <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	4bcd      	ldr	r3, [pc, #820]	; (80090e0 <UART_SetConfig+0x3d4>)
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d006      	beq.n	8008dbc <UART_SetConfig+0xb0>
 8008dae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	4bcb      	ldr	r3, [pc, #812]	; (80090e4 <UART_SetConfig+0x3d8>)
 8008db6:	429a      	cmp	r2, r3
 8008db8:	f040 80cb 	bne.w	8008f52 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008dbc:	f7fe fad6 	bl	800736c <HAL_RCC_GetPCLK2Freq>
 8008dc0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008dc8:	461c      	mov	r4, r3
 8008dca:	f04f 0500 	mov.w	r5, #0
 8008dce:	4622      	mov	r2, r4
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	1891      	adds	r1, r2, r2
 8008dd4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008dd8:	415b      	adcs	r3, r3
 8008dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008dde:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008de2:	1912      	adds	r2, r2, r4
 8008de4:	eb45 0303 	adc.w	r3, r5, r3
 8008de8:	f04f 0000 	mov.w	r0, #0
 8008dec:	f04f 0100 	mov.w	r1, #0
 8008df0:	00d9      	lsls	r1, r3, #3
 8008df2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008df6:	00d0      	lsls	r0, r2, #3
 8008df8:	4602      	mov	r2, r0
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	1911      	adds	r1, r2, r4
 8008dfe:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008e02:	416b      	adcs	r3, r5
 8008e04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	1891      	adds	r1, r2, r2
 8008e16:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008e1a:	415b      	adcs	r3, r3
 8008e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e20:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008e24:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008e28:	f7f7 ff16 	bl	8000c58 <__aeabi_uldivmod>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4bad      	ldr	r3, [pc, #692]	; (80090e8 <UART_SetConfig+0x3dc>)
 8008e32:	fba3 2302 	umull	r2, r3, r3, r2
 8008e36:	095b      	lsrs	r3, r3, #5
 8008e38:	011e      	lsls	r6, r3, #4
 8008e3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e3e:	461c      	mov	r4, r3
 8008e40:	f04f 0500 	mov.w	r5, #0
 8008e44:	4622      	mov	r2, r4
 8008e46:	462b      	mov	r3, r5
 8008e48:	1891      	adds	r1, r2, r2
 8008e4a:	67b9      	str	r1, [r7, #120]	; 0x78
 8008e4c:	415b      	adcs	r3, r3
 8008e4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e50:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008e54:	1912      	adds	r2, r2, r4
 8008e56:	eb45 0303 	adc.w	r3, r5, r3
 8008e5a:	f04f 0000 	mov.w	r0, #0
 8008e5e:	f04f 0100 	mov.w	r1, #0
 8008e62:	00d9      	lsls	r1, r3, #3
 8008e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e68:	00d0      	lsls	r0, r2, #3
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	1911      	adds	r1, r2, r4
 8008e70:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008e74:	416b      	adcs	r3, r5
 8008e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	461a      	mov	r2, r3
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	1891      	adds	r1, r2, r2
 8008e88:	6739      	str	r1, [r7, #112]	; 0x70
 8008e8a:	415b      	adcs	r3, r3
 8008e8c:	677b      	str	r3, [r7, #116]	; 0x74
 8008e8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008e92:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008e96:	f7f7 fedf 	bl	8000c58 <__aeabi_uldivmod>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4b92      	ldr	r3, [pc, #584]	; (80090e8 <UART_SetConfig+0x3dc>)
 8008ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8008ea4:	095b      	lsrs	r3, r3, #5
 8008ea6:	2164      	movs	r1, #100	; 0x64
 8008ea8:	fb01 f303 	mul.w	r3, r1, r3
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	3332      	adds	r3, #50	; 0x32
 8008eb2:	4a8d      	ldr	r2, [pc, #564]	; (80090e8 <UART_SetConfig+0x3dc>)
 8008eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb8:	095b      	lsrs	r3, r3, #5
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ec0:	441e      	add	r6, r3
 8008ec2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f04f 0100 	mov.w	r1, #0
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	1894      	adds	r4, r2, r2
 8008ed2:	66bc      	str	r4, [r7, #104]	; 0x68
 8008ed4:	415b      	adcs	r3, r3
 8008ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ed8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008edc:	1812      	adds	r2, r2, r0
 8008ede:	eb41 0303 	adc.w	r3, r1, r3
 8008ee2:	f04f 0400 	mov.w	r4, #0
 8008ee6:	f04f 0500 	mov.w	r5, #0
 8008eea:	00dd      	lsls	r5, r3, #3
 8008eec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ef0:	00d4      	lsls	r4, r2, #3
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	462b      	mov	r3, r5
 8008ef6:	1814      	adds	r4, r2, r0
 8008ef8:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008efc:	414b      	adcs	r3, r1
 8008efe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	f04f 0300 	mov.w	r3, #0
 8008f0e:	1891      	adds	r1, r2, r2
 8008f10:	6639      	str	r1, [r7, #96]	; 0x60
 8008f12:	415b      	adcs	r3, r3
 8008f14:	667b      	str	r3, [r7, #100]	; 0x64
 8008f16:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8008f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f1e:	f7f7 fe9b 	bl	8000c58 <__aeabi_uldivmod>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	4b70      	ldr	r3, [pc, #448]	; (80090e8 <UART_SetConfig+0x3dc>)
 8008f28:	fba3 1302 	umull	r1, r3, r3, r2
 8008f2c:	095b      	lsrs	r3, r3, #5
 8008f2e:	2164      	movs	r1, #100	; 0x64
 8008f30:	fb01 f303 	mul.w	r3, r1, r3
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	3332      	adds	r3, #50	; 0x32
 8008f3a:	4a6b      	ldr	r2, [pc, #428]	; (80090e8 <UART_SetConfig+0x3dc>)
 8008f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f40:	095b      	lsrs	r3, r3, #5
 8008f42:	f003 0207 	and.w	r2, r3, #7
 8008f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4432      	add	r2, r6
 8008f4e:	609a      	str	r2, [r3, #8]
 8008f50:	e26d      	b.n	800942e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f52:	f7fe f9f7 	bl	8007344 <HAL_RCC_GetPCLK1Freq>
 8008f56:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f5e:	461c      	mov	r4, r3
 8008f60:	f04f 0500 	mov.w	r5, #0
 8008f64:	4622      	mov	r2, r4
 8008f66:	462b      	mov	r3, r5
 8008f68:	1891      	adds	r1, r2, r2
 8008f6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f6c:	415b      	adcs	r3, r3
 8008f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008f74:	1912      	adds	r2, r2, r4
 8008f76:	eb45 0303 	adc.w	r3, r5, r3
 8008f7a:	f04f 0000 	mov.w	r0, #0
 8008f7e:	f04f 0100 	mov.w	r1, #0
 8008f82:	00d9      	lsls	r1, r3, #3
 8008f84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f88:	00d0      	lsls	r0, r2, #3
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	1911      	adds	r1, r2, r4
 8008f90:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8008f94:	416b      	adcs	r3, r5
 8008f96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	f04f 0300 	mov.w	r3, #0
 8008fa6:	1891      	adds	r1, r2, r2
 8008fa8:	6539      	str	r1, [r7, #80]	; 0x50
 8008faa:	415b      	adcs	r3, r3
 8008fac:	657b      	str	r3, [r7, #84]	; 0x54
 8008fae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008fb2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8008fb6:	f7f7 fe4f 	bl	8000c58 <__aeabi_uldivmod>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4b4a      	ldr	r3, [pc, #296]	; (80090e8 <UART_SetConfig+0x3dc>)
 8008fc0:	fba3 2302 	umull	r2, r3, r3, r2
 8008fc4:	095b      	lsrs	r3, r3, #5
 8008fc6:	011e      	lsls	r6, r3, #4
 8008fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fcc:	461c      	mov	r4, r3
 8008fce:	f04f 0500 	mov.w	r5, #0
 8008fd2:	4622      	mov	r2, r4
 8008fd4:	462b      	mov	r3, r5
 8008fd6:	1891      	adds	r1, r2, r2
 8008fd8:	64b9      	str	r1, [r7, #72]	; 0x48
 8008fda:	415b      	adcs	r3, r3
 8008fdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008fe2:	1912      	adds	r2, r2, r4
 8008fe4:	eb45 0303 	adc.w	r3, r5, r3
 8008fe8:	f04f 0000 	mov.w	r0, #0
 8008fec:	f04f 0100 	mov.w	r1, #0
 8008ff0:	00d9      	lsls	r1, r3, #3
 8008ff2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008ff6:	00d0      	lsls	r0, r2, #3
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	460b      	mov	r3, r1
 8008ffc:	1911      	adds	r1, r2, r4
 8008ffe:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009002:	416b      	adcs	r3, r5
 8009004:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	461a      	mov	r2, r3
 8009010:	f04f 0300 	mov.w	r3, #0
 8009014:	1891      	adds	r1, r2, r2
 8009016:	6439      	str	r1, [r7, #64]	; 0x40
 8009018:	415b      	adcs	r3, r3
 800901a:	647b      	str	r3, [r7, #68]	; 0x44
 800901c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009020:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009024:	f7f7 fe18 	bl	8000c58 <__aeabi_uldivmod>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4b2e      	ldr	r3, [pc, #184]	; (80090e8 <UART_SetConfig+0x3dc>)
 800902e:	fba3 1302 	umull	r1, r3, r3, r2
 8009032:	095b      	lsrs	r3, r3, #5
 8009034:	2164      	movs	r1, #100	; 0x64
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	3332      	adds	r3, #50	; 0x32
 8009040:	4a29      	ldr	r2, [pc, #164]	; (80090e8 <UART_SetConfig+0x3dc>)
 8009042:	fba2 2303 	umull	r2, r3, r2, r3
 8009046:	095b      	lsrs	r3, r3, #5
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800904e:	441e      	add	r6, r3
 8009050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009054:	4618      	mov	r0, r3
 8009056:	f04f 0100 	mov.w	r1, #0
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	1894      	adds	r4, r2, r2
 8009060:	63bc      	str	r4, [r7, #56]	; 0x38
 8009062:	415b      	adcs	r3, r3
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009066:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800906a:	1812      	adds	r2, r2, r0
 800906c:	eb41 0303 	adc.w	r3, r1, r3
 8009070:	f04f 0400 	mov.w	r4, #0
 8009074:	f04f 0500 	mov.w	r5, #0
 8009078:	00dd      	lsls	r5, r3, #3
 800907a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800907e:	00d4      	lsls	r4, r2, #3
 8009080:	4622      	mov	r2, r4
 8009082:	462b      	mov	r3, r5
 8009084:	1814      	adds	r4, r2, r0
 8009086:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800908a:	414b      	adcs	r3, r1
 800908c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	461a      	mov	r2, r3
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	1891      	adds	r1, r2, r2
 800909e:	6339      	str	r1, [r7, #48]	; 0x30
 80090a0:	415b      	adcs	r3, r3
 80090a2:	637b      	str	r3, [r7, #52]	; 0x34
 80090a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80090a8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80090ac:	f7f7 fdd4 	bl	8000c58 <__aeabi_uldivmod>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <UART_SetConfig+0x3dc>)
 80090b6:	fba3 1302 	umull	r1, r3, r3, r2
 80090ba:	095b      	lsrs	r3, r3, #5
 80090bc:	2164      	movs	r1, #100	; 0x64
 80090be:	fb01 f303 	mul.w	r3, r1, r3
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	3332      	adds	r3, #50	; 0x32
 80090c8:	4a07      	ldr	r2, [pc, #28]	; (80090e8 <UART_SetConfig+0x3dc>)
 80090ca:	fba2 2303 	umull	r2, r3, r2, r3
 80090ce:	095b      	lsrs	r3, r3, #5
 80090d0:	f003 0207 	and.w	r2, r3, #7
 80090d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4432      	add	r2, r6
 80090dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80090de:	e1a6      	b.n	800942e <UART_SetConfig+0x722>
 80090e0:	40011000 	.word	0x40011000
 80090e4:	40011400 	.word	0x40011400
 80090e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	4bd1      	ldr	r3, [pc, #836]	; (8009438 <UART_SetConfig+0x72c>)
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d006      	beq.n	8009106 <UART_SetConfig+0x3fa>
 80090f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4bcf      	ldr	r3, [pc, #828]	; (800943c <UART_SetConfig+0x730>)
 8009100:	429a      	cmp	r2, r3
 8009102:	f040 80ca 	bne.w	800929a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009106:	f7fe f931 	bl	800736c <HAL_RCC_GetPCLK2Freq>
 800910a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800910e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009112:	461c      	mov	r4, r3
 8009114:	f04f 0500 	mov.w	r5, #0
 8009118:	4622      	mov	r2, r4
 800911a:	462b      	mov	r3, r5
 800911c:	1891      	adds	r1, r2, r2
 800911e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009120:	415b      	adcs	r3, r3
 8009122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009124:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009128:	1912      	adds	r2, r2, r4
 800912a:	eb45 0303 	adc.w	r3, r5, r3
 800912e:	f04f 0000 	mov.w	r0, #0
 8009132:	f04f 0100 	mov.w	r1, #0
 8009136:	00d9      	lsls	r1, r3, #3
 8009138:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800913c:	00d0      	lsls	r0, r2, #3
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	eb12 0a04 	adds.w	sl, r2, r4
 8009146:	eb43 0b05 	adc.w	fp, r3, r5
 800914a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	4618      	mov	r0, r3
 8009152:	f04f 0100 	mov.w	r1, #0
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	f04f 0300 	mov.w	r3, #0
 800915e:	008b      	lsls	r3, r1, #2
 8009160:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009164:	0082      	lsls	r2, r0, #2
 8009166:	4650      	mov	r0, sl
 8009168:	4659      	mov	r1, fp
 800916a:	f7f7 fd75 	bl	8000c58 <__aeabi_uldivmod>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4bb3      	ldr	r3, [pc, #716]	; (8009440 <UART_SetConfig+0x734>)
 8009174:	fba3 2302 	umull	r2, r3, r3, r2
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	011e      	lsls	r6, r3, #4
 800917c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009180:	4618      	mov	r0, r3
 8009182:	f04f 0100 	mov.w	r1, #0
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	1894      	adds	r4, r2, r2
 800918c:	623c      	str	r4, [r7, #32]
 800918e:	415b      	adcs	r3, r3
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
 8009192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009196:	1812      	adds	r2, r2, r0
 8009198:	eb41 0303 	adc.w	r3, r1, r3
 800919c:	f04f 0400 	mov.w	r4, #0
 80091a0:	f04f 0500 	mov.w	r5, #0
 80091a4:	00dd      	lsls	r5, r3, #3
 80091a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091aa:	00d4      	lsls	r4, r2, #3
 80091ac:	4622      	mov	r2, r4
 80091ae:	462b      	mov	r3, r5
 80091b0:	1814      	adds	r4, r2, r0
 80091b2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80091b6:	414b      	adcs	r3, r1
 80091b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f04f 0100 	mov.w	r1, #0
 80091c8:	f04f 0200 	mov.w	r2, #0
 80091cc:	f04f 0300 	mov.w	r3, #0
 80091d0:	008b      	lsls	r3, r1, #2
 80091d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091d6:	0082      	lsls	r2, r0, #2
 80091d8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80091dc:	f7f7 fd3c 	bl	8000c58 <__aeabi_uldivmod>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4b96      	ldr	r3, [pc, #600]	; (8009440 <UART_SetConfig+0x734>)
 80091e6:	fba3 1302 	umull	r1, r3, r3, r2
 80091ea:	095b      	lsrs	r3, r3, #5
 80091ec:	2164      	movs	r1, #100	; 0x64
 80091ee:	fb01 f303 	mul.w	r3, r1, r3
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	011b      	lsls	r3, r3, #4
 80091f6:	3332      	adds	r3, #50	; 0x32
 80091f8:	4a91      	ldr	r2, [pc, #580]	; (8009440 <UART_SetConfig+0x734>)
 80091fa:	fba2 2303 	umull	r2, r3, r2, r3
 80091fe:	095b      	lsrs	r3, r3, #5
 8009200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009204:	441e      	add	r6, r3
 8009206:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800920a:	4618      	mov	r0, r3
 800920c:	f04f 0100 	mov.w	r1, #0
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	1894      	adds	r4, r2, r2
 8009216:	61bc      	str	r4, [r7, #24]
 8009218:	415b      	adcs	r3, r3
 800921a:	61fb      	str	r3, [r7, #28]
 800921c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009220:	1812      	adds	r2, r2, r0
 8009222:	eb41 0303 	adc.w	r3, r1, r3
 8009226:	f04f 0400 	mov.w	r4, #0
 800922a:	f04f 0500 	mov.w	r5, #0
 800922e:	00dd      	lsls	r5, r3, #3
 8009230:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009234:	00d4      	lsls	r4, r2, #3
 8009236:	4622      	mov	r2, r4
 8009238:	462b      	mov	r3, r5
 800923a:	1814      	adds	r4, r2, r0
 800923c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009240:	414b      	adcs	r3, r1
 8009242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	4618      	mov	r0, r3
 800924e:	f04f 0100 	mov.w	r1, #0
 8009252:	f04f 0200 	mov.w	r2, #0
 8009256:	f04f 0300 	mov.w	r3, #0
 800925a:	008b      	lsls	r3, r1, #2
 800925c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009260:	0082      	lsls	r2, r0, #2
 8009262:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009266:	f7f7 fcf7 	bl	8000c58 <__aeabi_uldivmod>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4b74      	ldr	r3, [pc, #464]	; (8009440 <UART_SetConfig+0x734>)
 8009270:	fba3 1302 	umull	r1, r3, r3, r2
 8009274:	095b      	lsrs	r3, r3, #5
 8009276:	2164      	movs	r1, #100	; 0x64
 8009278:	fb01 f303 	mul.w	r3, r1, r3
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	3332      	adds	r3, #50	; 0x32
 8009282:	4a6f      	ldr	r2, [pc, #444]	; (8009440 <UART_SetConfig+0x734>)
 8009284:	fba2 2303 	umull	r2, r3, r2, r3
 8009288:	095b      	lsrs	r3, r3, #5
 800928a:	f003 020f 	and.w	r2, r3, #15
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4432      	add	r2, r6
 8009296:	609a      	str	r2, [r3, #8]
 8009298:	e0c9      	b.n	800942e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800929a:	f7fe f853 	bl	8007344 <HAL_RCC_GetPCLK1Freq>
 800929e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092a6:	461c      	mov	r4, r3
 80092a8:	f04f 0500 	mov.w	r5, #0
 80092ac:	4622      	mov	r2, r4
 80092ae:	462b      	mov	r3, r5
 80092b0:	1891      	adds	r1, r2, r2
 80092b2:	6139      	str	r1, [r7, #16]
 80092b4:	415b      	adcs	r3, r3
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80092bc:	1912      	adds	r2, r2, r4
 80092be:	eb45 0303 	adc.w	r3, r5, r3
 80092c2:	f04f 0000 	mov.w	r0, #0
 80092c6:	f04f 0100 	mov.w	r1, #0
 80092ca:	00d9      	lsls	r1, r3, #3
 80092cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092d0:	00d0      	lsls	r0, r2, #3
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	eb12 0804 	adds.w	r8, r2, r4
 80092da:	eb43 0905 	adc.w	r9, r3, r5
 80092de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	4618      	mov	r0, r3
 80092e6:	f04f 0100 	mov.w	r1, #0
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	008b      	lsls	r3, r1, #2
 80092f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80092f8:	0082      	lsls	r2, r0, #2
 80092fa:	4640      	mov	r0, r8
 80092fc:	4649      	mov	r1, r9
 80092fe:	f7f7 fcab 	bl	8000c58 <__aeabi_uldivmod>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4b4e      	ldr	r3, [pc, #312]	; (8009440 <UART_SetConfig+0x734>)
 8009308:	fba3 2302 	umull	r2, r3, r3, r2
 800930c:	095b      	lsrs	r3, r3, #5
 800930e:	011e      	lsls	r6, r3, #4
 8009310:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009314:	4618      	mov	r0, r3
 8009316:	f04f 0100 	mov.w	r1, #0
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	1894      	adds	r4, r2, r2
 8009320:	60bc      	str	r4, [r7, #8]
 8009322:	415b      	adcs	r3, r3
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800932a:	1812      	adds	r2, r2, r0
 800932c:	eb41 0303 	adc.w	r3, r1, r3
 8009330:	f04f 0400 	mov.w	r4, #0
 8009334:	f04f 0500 	mov.w	r5, #0
 8009338:	00dd      	lsls	r5, r3, #3
 800933a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800933e:	00d4      	lsls	r4, r2, #3
 8009340:	4622      	mov	r2, r4
 8009342:	462b      	mov	r3, r5
 8009344:	1814      	adds	r4, r2, r0
 8009346:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800934a:	414b      	adcs	r3, r1
 800934c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	4618      	mov	r0, r3
 8009358:	f04f 0100 	mov.w	r1, #0
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	008b      	lsls	r3, r1, #2
 8009366:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800936a:	0082      	lsls	r2, r0, #2
 800936c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009370:	f7f7 fc72 	bl	8000c58 <__aeabi_uldivmod>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4b31      	ldr	r3, [pc, #196]	; (8009440 <UART_SetConfig+0x734>)
 800937a:	fba3 1302 	umull	r1, r3, r3, r2
 800937e:	095b      	lsrs	r3, r3, #5
 8009380:	2164      	movs	r1, #100	; 0x64
 8009382:	fb01 f303 	mul.w	r3, r1, r3
 8009386:	1ad3      	subs	r3, r2, r3
 8009388:	011b      	lsls	r3, r3, #4
 800938a:	3332      	adds	r3, #50	; 0x32
 800938c:	4a2c      	ldr	r2, [pc, #176]	; (8009440 <UART_SetConfig+0x734>)
 800938e:	fba2 2303 	umull	r2, r3, r2, r3
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009398:	441e      	add	r6, r3
 800939a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800939e:	4618      	mov	r0, r3
 80093a0:	f04f 0100 	mov.w	r1, #0
 80093a4:	4602      	mov	r2, r0
 80093a6:	460b      	mov	r3, r1
 80093a8:	1894      	adds	r4, r2, r2
 80093aa:	603c      	str	r4, [r7, #0]
 80093ac:	415b      	adcs	r3, r3
 80093ae:	607b      	str	r3, [r7, #4]
 80093b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093b4:	1812      	adds	r2, r2, r0
 80093b6:	eb41 0303 	adc.w	r3, r1, r3
 80093ba:	f04f 0400 	mov.w	r4, #0
 80093be:	f04f 0500 	mov.w	r5, #0
 80093c2:	00dd      	lsls	r5, r3, #3
 80093c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093c8:	00d4      	lsls	r4, r2, #3
 80093ca:	4622      	mov	r2, r4
 80093cc:	462b      	mov	r3, r5
 80093ce:	1814      	adds	r4, r2, r0
 80093d0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80093d4:	414b      	adcs	r3, r1
 80093d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f04f 0100 	mov.w	r1, #0
 80093e6:	f04f 0200 	mov.w	r2, #0
 80093ea:	f04f 0300 	mov.w	r3, #0
 80093ee:	008b      	lsls	r3, r1, #2
 80093f0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093f4:	0082      	lsls	r2, r0, #2
 80093f6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80093fa:	f7f7 fc2d 	bl	8000c58 <__aeabi_uldivmod>
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <UART_SetConfig+0x734>)
 8009404:	fba3 1302 	umull	r1, r3, r3, r2
 8009408:	095b      	lsrs	r3, r3, #5
 800940a:	2164      	movs	r1, #100	; 0x64
 800940c:	fb01 f303 	mul.w	r3, r1, r3
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	3332      	adds	r3, #50	; 0x32
 8009416:	4a0a      	ldr	r2, [pc, #40]	; (8009440 <UART_SetConfig+0x734>)
 8009418:	fba2 2303 	umull	r2, r3, r2, r3
 800941c:	095b      	lsrs	r3, r3, #5
 800941e:	f003 020f 	and.w	r2, r3, #15
 8009422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4432      	add	r2, r6
 800942a:	609a      	str	r2, [r3, #8]
}
 800942c:	e7ff      	b.n	800942e <UART_SetConfig+0x722>
 800942e:	bf00      	nop
 8009430:	37f4      	adds	r7, #244	; 0xf4
 8009432:	46bd      	mov	sp, r7
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	40011000 	.word	0x40011000
 800943c:	40011400 	.word	0x40011400
 8009440:	51eb851f 	.word	0x51eb851f

08009444 <__errno>:
 8009444:	4b01      	ldr	r3, [pc, #4]	; (800944c <__errno+0x8>)
 8009446:	6818      	ldr	r0, [r3, #0]
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	20000010 	.word	0x20000010

08009450 <__libc_init_array>:
 8009450:	b570      	push	{r4, r5, r6, lr}
 8009452:	4d0d      	ldr	r5, [pc, #52]	; (8009488 <__libc_init_array+0x38>)
 8009454:	4c0d      	ldr	r4, [pc, #52]	; (800948c <__libc_init_array+0x3c>)
 8009456:	1b64      	subs	r4, r4, r5
 8009458:	10a4      	asrs	r4, r4, #2
 800945a:	2600      	movs	r6, #0
 800945c:	42a6      	cmp	r6, r4
 800945e:	d109      	bne.n	8009474 <__libc_init_array+0x24>
 8009460:	4d0b      	ldr	r5, [pc, #44]	; (8009490 <__libc_init_array+0x40>)
 8009462:	4c0c      	ldr	r4, [pc, #48]	; (8009494 <__libc_init_array+0x44>)
 8009464:	f004 fbca 	bl	800dbfc <_init>
 8009468:	1b64      	subs	r4, r4, r5
 800946a:	10a4      	asrs	r4, r4, #2
 800946c:	2600      	movs	r6, #0
 800946e:	42a6      	cmp	r6, r4
 8009470:	d105      	bne.n	800947e <__libc_init_array+0x2e>
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	f855 3b04 	ldr.w	r3, [r5], #4
 8009478:	4798      	blx	r3
 800947a:	3601      	adds	r6, #1
 800947c:	e7ee      	b.n	800945c <__libc_init_array+0xc>
 800947e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009482:	4798      	blx	r3
 8009484:	3601      	adds	r6, #1
 8009486:	e7f2      	b.n	800946e <__libc_init_array+0x1e>
 8009488:	0800e5e0 	.word	0x0800e5e0
 800948c:	0800e5e0 	.word	0x0800e5e0
 8009490:	0800e5e0 	.word	0x0800e5e0
 8009494:	0800e5e4 	.word	0x0800e5e4

08009498 <memcpy>:
 8009498:	440a      	add	r2, r1
 800949a:	4291      	cmp	r1, r2
 800949c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80094a0:	d100      	bne.n	80094a4 <memcpy+0xc>
 80094a2:	4770      	bx	lr
 80094a4:	b510      	push	{r4, lr}
 80094a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094ae:	4291      	cmp	r1, r2
 80094b0:	d1f9      	bne.n	80094a6 <memcpy+0xe>
 80094b2:	bd10      	pop	{r4, pc}

080094b4 <memset>:
 80094b4:	4402      	add	r2, r0
 80094b6:	4603      	mov	r3, r0
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d100      	bne.n	80094be <memset+0xa>
 80094bc:	4770      	bx	lr
 80094be:	f803 1b01 	strb.w	r1, [r3], #1
 80094c2:	e7f9      	b.n	80094b8 <memset+0x4>

080094c4 <__cvt>:
 80094c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094c8:	ec55 4b10 	vmov	r4, r5, d0
 80094cc:	2d00      	cmp	r5, #0
 80094ce:	460e      	mov	r6, r1
 80094d0:	4619      	mov	r1, r3
 80094d2:	462b      	mov	r3, r5
 80094d4:	bfbb      	ittet	lt
 80094d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80094da:	461d      	movlt	r5, r3
 80094dc:	2300      	movge	r3, #0
 80094de:	232d      	movlt	r3, #45	; 0x2d
 80094e0:	700b      	strb	r3, [r1, #0]
 80094e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80094e8:	4691      	mov	r9, r2
 80094ea:	f023 0820 	bic.w	r8, r3, #32
 80094ee:	bfbc      	itt	lt
 80094f0:	4622      	movlt	r2, r4
 80094f2:	4614      	movlt	r4, r2
 80094f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094f8:	d005      	beq.n	8009506 <__cvt+0x42>
 80094fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80094fe:	d100      	bne.n	8009502 <__cvt+0x3e>
 8009500:	3601      	adds	r6, #1
 8009502:	2102      	movs	r1, #2
 8009504:	e000      	b.n	8009508 <__cvt+0x44>
 8009506:	2103      	movs	r1, #3
 8009508:	ab03      	add	r3, sp, #12
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	ab02      	add	r3, sp, #8
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	ec45 4b10 	vmov	d0, r4, r5
 8009514:	4653      	mov	r3, sl
 8009516:	4632      	mov	r2, r6
 8009518:	f000 fcea 	bl	8009ef0 <_dtoa_r>
 800951c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009520:	4607      	mov	r7, r0
 8009522:	d102      	bne.n	800952a <__cvt+0x66>
 8009524:	f019 0f01 	tst.w	r9, #1
 8009528:	d022      	beq.n	8009570 <__cvt+0xac>
 800952a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800952e:	eb07 0906 	add.w	r9, r7, r6
 8009532:	d110      	bne.n	8009556 <__cvt+0x92>
 8009534:	783b      	ldrb	r3, [r7, #0]
 8009536:	2b30      	cmp	r3, #48	; 0x30
 8009538:	d10a      	bne.n	8009550 <__cvt+0x8c>
 800953a:	2200      	movs	r2, #0
 800953c:	2300      	movs	r3, #0
 800953e:	4620      	mov	r0, r4
 8009540:	4629      	mov	r1, r5
 8009542:	f7f7 fac9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009546:	b918      	cbnz	r0, 8009550 <__cvt+0x8c>
 8009548:	f1c6 0601 	rsb	r6, r6, #1
 800954c:	f8ca 6000 	str.w	r6, [sl]
 8009550:	f8da 3000 	ldr.w	r3, [sl]
 8009554:	4499      	add	r9, r3
 8009556:	2200      	movs	r2, #0
 8009558:	2300      	movs	r3, #0
 800955a:	4620      	mov	r0, r4
 800955c:	4629      	mov	r1, r5
 800955e:	f7f7 fabb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009562:	b108      	cbz	r0, 8009568 <__cvt+0xa4>
 8009564:	f8cd 900c 	str.w	r9, [sp, #12]
 8009568:	2230      	movs	r2, #48	; 0x30
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	454b      	cmp	r3, r9
 800956e:	d307      	bcc.n	8009580 <__cvt+0xbc>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009574:	1bdb      	subs	r3, r3, r7
 8009576:	4638      	mov	r0, r7
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	b004      	add	sp, #16
 800957c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009580:	1c59      	adds	r1, r3, #1
 8009582:	9103      	str	r1, [sp, #12]
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	e7f0      	b.n	800956a <__cvt+0xa6>

08009588 <__exponent>:
 8009588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800958a:	4603      	mov	r3, r0
 800958c:	2900      	cmp	r1, #0
 800958e:	bfb8      	it	lt
 8009590:	4249      	neglt	r1, r1
 8009592:	f803 2b02 	strb.w	r2, [r3], #2
 8009596:	bfb4      	ite	lt
 8009598:	222d      	movlt	r2, #45	; 0x2d
 800959a:	222b      	movge	r2, #43	; 0x2b
 800959c:	2909      	cmp	r1, #9
 800959e:	7042      	strb	r2, [r0, #1]
 80095a0:	dd2a      	ble.n	80095f8 <__exponent+0x70>
 80095a2:	f10d 0407 	add.w	r4, sp, #7
 80095a6:	46a4      	mov	ip, r4
 80095a8:	270a      	movs	r7, #10
 80095aa:	46a6      	mov	lr, r4
 80095ac:	460a      	mov	r2, r1
 80095ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80095b2:	fb07 1516 	mls	r5, r7, r6, r1
 80095b6:	3530      	adds	r5, #48	; 0x30
 80095b8:	2a63      	cmp	r2, #99	; 0x63
 80095ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80095be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80095c2:	4631      	mov	r1, r6
 80095c4:	dcf1      	bgt.n	80095aa <__exponent+0x22>
 80095c6:	3130      	adds	r1, #48	; 0x30
 80095c8:	f1ae 0502 	sub.w	r5, lr, #2
 80095cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80095d0:	1c44      	adds	r4, r0, #1
 80095d2:	4629      	mov	r1, r5
 80095d4:	4561      	cmp	r1, ip
 80095d6:	d30a      	bcc.n	80095ee <__exponent+0x66>
 80095d8:	f10d 0209 	add.w	r2, sp, #9
 80095dc:	eba2 020e 	sub.w	r2, r2, lr
 80095e0:	4565      	cmp	r5, ip
 80095e2:	bf88      	it	hi
 80095e4:	2200      	movhi	r2, #0
 80095e6:	4413      	add	r3, r2
 80095e8:	1a18      	subs	r0, r3, r0
 80095ea:	b003      	add	sp, #12
 80095ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80095f6:	e7ed      	b.n	80095d4 <__exponent+0x4c>
 80095f8:	2330      	movs	r3, #48	; 0x30
 80095fa:	3130      	adds	r1, #48	; 0x30
 80095fc:	7083      	strb	r3, [r0, #2]
 80095fe:	70c1      	strb	r1, [r0, #3]
 8009600:	1d03      	adds	r3, r0, #4
 8009602:	e7f1      	b.n	80095e8 <__exponent+0x60>

08009604 <_printf_float>:
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	ed2d 8b02 	vpush	{d8}
 800960c:	b08d      	sub	sp, #52	; 0x34
 800960e:	460c      	mov	r4, r1
 8009610:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009614:	4616      	mov	r6, r2
 8009616:	461f      	mov	r7, r3
 8009618:	4605      	mov	r5, r0
 800961a:	f001 fa55 	bl	800aac8 <_localeconv_r>
 800961e:	f8d0 a000 	ldr.w	sl, [r0]
 8009622:	4650      	mov	r0, sl
 8009624:	f7f6 fddc 	bl	80001e0 <strlen>
 8009628:	2300      	movs	r3, #0
 800962a:	930a      	str	r3, [sp, #40]	; 0x28
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	9305      	str	r3, [sp, #20]
 8009630:	f8d8 3000 	ldr.w	r3, [r8]
 8009634:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009638:	3307      	adds	r3, #7
 800963a:	f023 0307 	bic.w	r3, r3, #7
 800963e:	f103 0208 	add.w	r2, r3, #8
 8009642:	f8c8 2000 	str.w	r2, [r8]
 8009646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800964e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009652:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009656:	9307      	str	r3, [sp, #28]
 8009658:	f8cd 8018 	str.w	r8, [sp, #24]
 800965c:	ee08 0a10 	vmov	s16, r0
 8009660:	4b9f      	ldr	r3, [pc, #636]	; (80098e0 <_printf_float+0x2dc>)
 8009662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800966a:	f7f7 fa67 	bl	8000b3c <__aeabi_dcmpun>
 800966e:	bb88      	cbnz	r0, 80096d4 <_printf_float+0xd0>
 8009670:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009674:	4b9a      	ldr	r3, [pc, #616]	; (80098e0 <_printf_float+0x2dc>)
 8009676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800967a:	f7f7 fa41 	bl	8000b00 <__aeabi_dcmple>
 800967e:	bb48      	cbnz	r0, 80096d4 <_printf_float+0xd0>
 8009680:	2200      	movs	r2, #0
 8009682:	2300      	movs	r3, #0
 8009684:	4640      	mov	r0, r8
 8009686:	4649      	mov	r1, r9
 8009688:	f7f7 fa30 	bl	8000aec <__aeabi_dcmplt>
 800968c:	b110      	cbz	r0, 8009694 <_printf_float+0x90>
 800968e:	232d      	movs	r3, #45	; 0x2d
 8009690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009694:	4b93      	ldr	r3, [pc, #588]	; (80098e4 <_printf_float+0x2e0>)
 8009696:	4894      	ldr	r0, [pc, #592]	; (80098e8 <_printf_float+0x2e4>)
 8009698:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800969c:	bf94      	ite	ls
 800969e:	4698      	movls	r8, r3
 80096a0:	4680      	movhi	r8, r0
 80096a2:	2303      	movs	r3, #3
 80096a4:	6123      	str	r3, [r4, #16]
 80096a6:	9b05      	ldr	r3, [sp, #20]
 80096a8:	f023 0204 	bic.w	r2, r3, #4
 80096ac:	6022      	str	r2, [r4, #0]
 80096ae:	f04f 0900 	mov.w	r9, #0
 80096b2:	9700      	str	r7, [sp, #0]
 80096b4:	4633      	mov	r3, r6
 80096b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80096b8:	4621      	mov	r1, r4
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 f9d8 	bl	8009a70 <_printf_common>
 80096c0:	3001      	adds	r0, #1
 80096c2:	f040 8090 	bne.w	80097e6 <_printf_float+0x1e2>
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096ca:	b00d      	add	sp, #52	; 0x34
 80096cc:	ecbd 8b02 	vpop	{d8}
 80096d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d4:	4642      	mov	r2, r8
 80096d6:	464b      	mov	r3, r9
 80096d8:	4640      	mov	r0, r8
 80096da:	4649      	mov	r1, r9
 80096dc:	f7f7 fa2e 	bl	8000b3c <__aeabi_dcmpun>
 80096e0:	b140      	cbz	r0, 80096f4 <_printf_float+0xf0>
 80096e2:	464b      	mov	r3, r9
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	bfbc      	itt	lt
 80096e8:	232d      	movlt	r3, #45	; 0x2d
 80096ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80096ee:	487f      	ldr	r0, [pc, #508]	; (80098ec <_printf_float+0x2e8>)
 80096f0:	4b7f      	ldr	r3, [pc, #508]	; (80098f0 <_printf_float+0x2ec>)
 80096f2:	e7d1      	b.n	8009698 <_printf_float+0x94>
 80096f4:	6863      	ldr	r3, [r4, #4]
 80096f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80096fa:	9206      	str	r2, [sp, #24]
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	d13f      	bne.n	8009780 <_printf_float+0x17c>
 8009700:	2306      	movs	r3, #6
 8009702:	6063      	str	r3, [r4, #4]
 8009704:	9b05      	ldr	r3, [sp, #20]
 8009706:	6861      	ldr	r1, [r4, #4]
 8009708:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800970c:	2300      	movs	r3, #0
 800970e:	9303      	str	r3, [sp, #12]
 8009710:	ab0a      	add	r3, sp, #40	; 0x28
 8009712:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009716:	ab09      	add	r3, sp, #36	; 0x24
 8009718:	ec49 8b10 	vmov	d0, r8, r9
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	6022      	str	r2, [r4, #0]
 8009720:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009724:	4628      	mov	r0, r5
 8009726:	f7ff fecd 	bl	80094c4 <__cvt>
 800972a:	9b06      	ldr	r3, [sp, #24]
 800972c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800972e:	2b47      	cmp	r3, #71	; 0x47
 8009730:	4680      	mov	r8, r0
 8009732:	d108      	bne.n	8009746 <_printf_float+0x142>
 8009734:	1cc8      	adds	r0, r1, #3
 8009736:	db02      	blt.n	800973e <_printf_float+0x13a>
 8009738:	6863      	ldr	r3, [r4, #4]
 800973a:	4299      	cmp	r1, r3
 800973c:	dd41      	ble.n	80097c2 <_printf_float+0x1be>
 800973e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009742:	fa5f fb8b 	uxtb.w	fp, fp
 8009746:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800974a:	d820      	bhi.n	800978e <_printf_float+0x18a>
 800974c:	3901      	subs	r1, #1
 800974e:	465a      	mov	r2, fp
 8009750:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009754:	9109      	str	r1, [sp, #36]	; 0x24
 8009756:	f7ff ff17 	bl	8009588 <__exponent>
 800975a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800975c:	1813      	adds	r3, r2, r0
 800975e:	2a01      	cmp	r2, #1
 8009760:	4681      	mov	r9, r0
 8009762:	6123      	str	r3, [r4, #16]
 8009764:	dc02      	bgt.n	800976c <_printf_float+0x168>
 8009766:	6822      	ldr	r2, [r4, #0]
 8009768:	07d2      	lsls	r2, r2, #31
 800976a:	d501      	bpl.n	8009770 <_printf_float+0x16c>
 800976c:	3301      	adds	r3, #1
 800976e:	6123      	str	r3, [r4, #16]
 8009770:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009774:	2b00      	cmp	r3, #0
 8009776:	d09c      	beq.n	80096b2 <_printf_float+0xae>
 8009778:	232d      	movs	r3, #45	; 0x2d
 800977a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800977e:	e798      	b.n	80096b2 <_printf_float+0xae>
 8009780:	9a06      	ldr	r2, [sp, #24]
 8009782:	2a47      	cmp	r2, #71	; 0x47
 8009784:	d1be      	bne.n	8009704 <_printf_float+0x100>
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1bc      	bne.n	8009704 <_printf_float+0x100>
 800978a:	2301      	movs	r3, #1
 800978c:	e7b9      	b.n	8009702 <_printf_float+0xfe>
 800978e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009792:	d118      	bne.n	80097c6 <_printf_float+0x1c2>
 8009794:	2900      	cmp	r1, #0
 8009796:	6863      	ldr	r3, [r4, #4]
 8009798:	dd0b      	ble.n	80097b2 <_printf_float+0x1ae>
 800979a:	6121      	str	r1, [r4, #16]
 800979c:	b913      	cbnz	r3, 80097a4 <_printf_float+0x1a0>
 800979e:	6822      	ldr	r2, [r4, #0]
 80097a0:	07d0      	lsls	r0, r2, #31
 80097a2:	d502      	bpl.n	80097aa <_printf_float+0x1a6>
 80097a4:	3301      	adds	r3, #1
 80097a6:	440b      	add	r3, r1
 80097a8:	6123      	str	r3, [r4, #16]
 80097aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80097ac:	f04f 0900 	mov.w	r9, #0
 80097b0:	e7de      	b.n	8009770 <_printf_float+0x16c>
 80097b2:	b913      	cbnz	r3, 80097ba <_printf_float+0x1b6>
 80097b4:	6822      	ldr	r2, [r4, #0]
 80097b6:	07d2      	lsls	r2, r2, #31
 80097b8:	d501      	bpl.n	80097be <_printf_float+0x1ba>
 80097ba:	3302      	adds	r3, #2
 80097bc:	e7f4      	b.n	80097a8 <_printf_float+0x1a4>
 80097be:	2301      	movs	r3, #1
 80097c0:	e7f2      	b.n	80097a8 <_printf_float+0x1a4>
 80097c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80097c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097c8:	4299      	cmp	r1, r3
 80097ca:	db05      	blt.n	80097d8 <_printf_float+0x1d4>
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	6121      	str	r1, [r4, #16]
 80097d0:	07d8      	lsls	r0, r3, #31
 80097d2:	d5ea      	bpl.n	80097aa <_printf_float+0x1a6>
 80097d4:	1c4b      	adds	r3, r1, #1
 80097d6:	e7e7      	b.n	80097a8 <_printf_float+0x1a4>
 80097d8:	2900      	cmp	r1, #0
 80097da:	bfd4      	ite	le
 80097dc:	f1c1 0202 	rsble	r2, r1, #2
 80097e0:	2201      	movgt	r2, #1
 80097e2:	4413      	add	r3, r2
 80097e4:	e7e0      	b.n	80097a8 <_printf_float+0x1a4>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	055a      	lsls	r2, r3, #21
 80097ea:	d407      	bmi.n	80097fc <_printf_float+0x1f8>
 80097ec:	6923      	ldr	r3, [r4, #16]
 80097ee:	4642      	mov	r2, r8
 80097f0:	4631      	mov	r1, r6
 80097f2:	4628      	mov	r0, r5
 80097f4:	47b8      	blx	r7
 80097f6:	3001      	adds	r0, #1
 80097f8:	d12c      	bne.n	8009854 <_printf_float+0x250>
 80097fa:	e764      	b.n	80096c6 <_printf_float+0xc2>
 80097fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009800:	f240 80e0 	bls.w	80099c4 <_printf_float+0x3c0>
 8009804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009808:	2200      	movs	r2, #0
 800980a:	2300      	movs	r3, #0
 800980c:	f7f7 f964 	bl	8000ad8 <__aeabi_dcmpeq>
 8009810:	2800      	cmp	r0, #0
 8009812:	d034      	beq.n	800987e <_printf_float+0x27a>
 8009814:	4a37      	ldr	r2, [pc, #220]	; (80098f4 <_printf_float+0x2f0>)
 8009816:	2301      	movs	r3, #1
 8009818:	4631      	mov	r1, r6
 800981a:	4628      	mov	r0, r5
 800981c:	47b8      	blx	r7
 800981e:	3001      	adds	r0, #1
 8009820:	f43f af51 	beq.w	80096c6 <_printf_float+0xc2>
 8009824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009828:	429a      	cmp	r2, r3
 800982a:	db02      	blt.n	8009832 <_printf_float+0x22e>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	07d8      	lsls	r0, r3, #31
 8009830:	d510      	bpl.n	8009854 <_printf_float+0x250>
 8009832:	ee18 3a10 	vmov	r3, s16
 8009836:	4652      	mov	r2, sl
 8009838:	4631      	mov	r1, r6
 800983a:	4628      	mov	r0, r5
 800983c:	47b8      	blx	r7
 800983e:	3001      	adds	r0, #1
 8009840:	f43f af41 	beq.w	80096c6 <_printf_float+0xc2>
 8009844:	f04f 0800 	mov.w	r8, #0
 8009848:	f104 091a 	add.w	r9, r4, #26
 800984c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800984e:	3b01      	subs	r3, #1
 8009850:	4543      	cmp	r3, r8
 8009852:	dc09      	bgt.n	8009868 <_printf_float+0x264>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	079b      	lsls	r3, r3, #30
 8009858:	f100 8105 	bmi.w	8009a66 <_printf_float+0x462>
 800985c:	68e0      	ldr	r0, [r4, #12]
 800985e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009860:	4298      	cmp	r0, r3
 8009862:	bfb8      	it	lt
 8009864:	4618      	movlt	r0, r3
 8009866:	e730      	b.n	80096ca <_printf_float+0xc6>
 8009868:	2301      	movs	r3, #1
 800986a:	464a      	mov	r2, r9
 800986c:	4631      	mov	r1, r6
 800986e:	4628      	mov	r0, r5
 8009870:	47b8      	blx	r7
 8009872:	3001      	adds	r0, #1
 8009874:	f43f af27 	beq.w	80096c6 <_printf_float+0xc2>
 8009878:	f108 0801 	add.w	r8, r8, #1
 800987c:	e7e6      	b.n	800984c <_printf_float+0x248>
 800987e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009880:	2b00      	cmp	r3, #0
 8009882:	dc39      	bgt.n	80098f8 <_printf_float+0x2f4>
 8009884:	4a1b      	ldr	r2, [pc, #108]	; (80098f4 <_printf_float+0x2f0>)
 8009886:	2301      	movs	r3, #1
 8009888:	4631      	mov	r1, r6
 800988a:	4628      	mov	r0, r5
 800988c:	47b8      	blx	r7
 800988e:	3001      	adds	r0, #1
 8009890:	f43f af19 	beq.w	80096c6 <_printf_float+0xc2>
 8009894:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009898:	4313      	orrs	r3, r2
 800989a:	d102      	bne.n	80098a2 <_printf_float+0x29e>
 800989c:	6823      	ldr	r3, [r4, #0]
 800989e:	07d9      	lsls	r1, r3, #31
 80098a0:	d5d8      	bpl.n	8009854 <_printf_float+0x250>
 80098a2:	ee18 3a10 	vmov	r3, s16
 80098a6:	4652      	mov	r2, sl
 80098a8:	4631      	mov	r1, r6
 80098aa:	4628      	mov	r0, r5
 80098ac:	47b8      	blx	r7
 80098ae:	3001      	adds	r0, #1
 80098b0:	f43f af09 	beq.w	80096c6 <_printf_float+0xc2>
 80098b4:	f04f 0900 	mov.w	r9, #0
 80098b8:	f104 0a1a 	add.w	sl, r4, #26
 80098bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098be:	425b      	negs	r3, r3
 80098c0:	454b      	cmp	r3, r9
 80098c2:	dc01      	bgt.n	80098c8 <_printf_float+0x2c4>
 80098c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c6:	e792      	b.n	80097ee <_printf_float+0x1ea>
 80098c8:	2301      	movs	r3, #1
 80098ca:	4652      	mov	r2, sl
 80098cc:	4631      	mov	r1, r6
 80098ce:	4628      	mov	r0, r5
 80098d0:	47b8      	blx	r7
 80098d2:	3001      	adds	r0, #1
 80098d4:	f43f aef7 	beq.w	80096c6 <_printf_float+0xc2>
 80098d8:	f109 0901 	add.w	r9, r9, #1
 80098dc:	e7ee      	b.n	80098bc <_printf_float+0x2b8>
 80098de:	bf00      	nop
 80098e0:	7fefffff 	.word	0x7fefffff
 80098e4:	0800dfdc 	.word	0x0800dfdc
 80098e8:	0800dfe0 	.word	0x0800dfe0
 80098ec:	0800dfe8 	.word	0x0800dfe8
 80098f0:	0800dfe4 	.word	0x0800dfe4
 80098f4:	0800dfec 	.word	0x0800dfec
 80098f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80098fc:	429a      	cmp	r2, r3
 80098fe:	bfa8      	it	ge
 8009900:	461a      	movge	r2, r3
 8009902:	2a00      	cmp	r2, #0
 8009904:	4691      	mov	r9, r2
 8009906:	dc37      	bgt.n	8009978 <_printf_float+0x374>
 8009908:	f04f 0b00 	mov.w	fp, #0
 800990c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009910:	f104 021a 	add.w	r2, r4, #26
 8009914:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009916:	9305      	str	r3, [sp, #20]
 8009918:	eba3 0309 	sub.w	r3, r3, r9
 800991c:	455b      	cmp	r3, fp
 800991e:	dc33      	bgt.n	8009988 <_printf_float+0x384>
 8009920:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009924:	429a      	cmp	r2, r3
 8009926:	db3b      	blt.n	80099a0 <_printf_float+0x39c>
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	07da      	lsls	r2, r3, #31
 800992c:	d438      	bmi.n	80099a0 <_printf_float+0x39c>
 800992e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009930:	9b05      	ldr	r3, [sp, #20]
 8009932:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	eba2 0901 	sub.w	r9, r2, r1
 800993a:	4599      	cmp	r9, r3
 800993c:	bfa8      	it	ge
 800993e:	4699      	movge	r9, r3
 8009940:	f1b9 0f00 	cmp.w	r9, #0
 8009944:	dc35      	bgt.n	80099b2 <_printf_float+0x3ae>
 8009946:	f04f 0800 	mov.w	r8, #0
 800994a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800994e:	f104 0a1a 	add.w	sl, r4, #26
 8009952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009956:	1a9b      	subs	r3, r3, r2
 8009958:	eba3 0309 	sub.w	r3, r3, r9
 800995c:	4543      	cmp	r3, r8
 800995e:	f77f af79 	ble.w	8009854 <_printf_float+0x250>
 8009962:	2301      	movs	r3, #1
 8009964:	4652      	mov	r2, sl
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	f43f aeaa 	beq.w	80096c6 <_printf_float+0xc2>
 8009972:	f108 0801 	add.w	r8, r8, #1
 8009976:	e7ec      	b.n	8009952 <_printf_float+0x34e>
 8009978:	4613      	mov	r3, r2
 800997a:	4631      	mov	r1, r6
 800997c:	4642      	mov	r2, r8
 800997e:	4628      	mov	r0, r5
 8009980:	47b8      	blx	r7
 8009982:	3001      	adds	r0, #1
 8009984:	d1c0      	bne.n	8009908 <_printf_float+0x304>
 8009986:	e69e      	b.n	80096c6 <_printf_float+0xc2>
 8009988:	2301      	movs	r3, #1
 800998a:	4631      	mov	r1, r6
 800998c:	4628      	mov	r0, r5
 800998e:	9205      	str	r2, [sp, #20]
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f ae97 	beq.w	80096c6 <_printf_float+0xc2>
 8009998:	9a05      	ldr	r2, [sp, #20]
 800999a:	f10b 0b01 	add.w	fp, fp, #1
 800999e:	e7b9      	b.n	8009914 <_printf_float+0x310>
 80099a0:	ee18 3a10 	vmov	r3, s16
 80099a4:	4652      	mov	r2, sl
 80099a6:	4631      	mov	r1, r6
 80099a8:	4628      	mov	r0, r5
 80099aa:	47b8      	blx	r7
 80099ac:	3001      	adds	r0, #1
 80099ae:	d1be      	bne.n	800992e <_printf_float+0x32a>
 80099b0:	e689      	b.n	80096c6 <_printf_float+0xc2>
 80099b2:	9a05      	ldr	r2, [sp, #20]
 80099b4:	464b      	mov	r3, r9
 80099b6:	4442      	add	r2, r8
 80099b8:	4631      	mov	r1, r6
 80099ba:	4628      	mov	r0, r5
 80099bc:	47b8      	blx	r7
 80099be:	3001      	adds	r0, #1
 80099c0:	d1c1      	bne.n	8009946 <_printf_float+0x342>
 80099c2:	e680      	b.n	80096c6 <_printf_float+0xc2>
 80099c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099c6:	2a01      	cmp	r2, #1
 80099c8:	dc01      	bgt.n	80099ce <_printf_float+0x3ca>
 80099ca:	07db      	lsls	r3, r3, #31
 80099cc:	d538      	bpl.n	8009a40 <_printf_float+0x43c>
 80099ce:	2301      	movs	r3, #1
 80099d0:	4642      	mov	r2, r8
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f ae74 	beq.w	80096c6 <_printf_float+0xc2>
 80099de:	ee18 3a10 	vmov	r3, s16
 80099e2:	4652      	mov	r2, sl
 80099e4:	4631      	mov	r1, r6
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b8      	blx	r7
 80099ea:	3001      	adds	r0, #1
 80099ec:	f43f ae6b 	beq.w	80096c6 <_printf_float+0xc2>
 80099f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099f4:	2200      	movs	r2, #0
 80099f6:	2300      	movs	r3, #0
 80099f8:	f7f7 f86e 	bl	8000ad8 <__aeabi_dcmpeq>
 80099fc:	b9d8      	cbnz	r0, 8009a36 <_printf_float+0x432>
 80099fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a00:	f108 0201 	add.w	r2, r8, #1
 8009a04:	3b01      	subs	r3, #1
 8009a06:	4631      	mov	r1, r6
 8009a08:	4628      	mov	r0, r5
 8009a0a:	47b8      	blx	r7
 8009a0c:	3001      	adds	r0, #1
 8009a0e:	d10e      	bne.n	8009a2e <_printf_float+0x42a>
 8009a10:	e659      	b.n	80096c6 <_printf_float+0xc2>
 8009a12:	2301      	movs	r3, #1
 8009a14:	4652      	mov	r2, sl
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b8      	blx	r7
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	f43f ae52 	beq.w	80096c6 <_printf_float+0xc2>
 8009a22:	f108 0801 	add.w	r8, r8, #1
 8009a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4543      	cmp	r3, r8
 8009a2c:	dcf1      	bgt.n	8009a12 <_printf_float+0x40e>
 8009a2e:	464b      	mov	r3, r9
 8009a30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a34:	e6dc      	b.n	80097f0 <_printf_float+0x1ec>
 8009a36:	f04f 0800 	mov.w	r8, #0
 8009a3a:	f104 0a1a 	add.w	sl, r4, #26
 8009a3e:	e7f2      	b.n	8009a26 <_printf_float+0x422>
 8009a40:	2301      	movs	r3, #1
 8009a42:	4642      	mov	r2, r8
 8009a44:	e7df      	b.n	8009a06 <_printf_float+0x402>
 8009a46:	2301      	movs	r3, #1
 8009a48:	464a      	mov	r2, r9
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	47b8      	blx	r7
 8009a50:	3001      	adds	r0, #1
 8009a52:	f43f ae38 	beq.w	80096c6 <_printf_float+0xc2>
 8009a56:	f108 0801 	add.w	r8, r8, #1
 8009a5a:	68e3      	ldr	r3, [r4, #12]
 8009a5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009a5e:	1a5b      	subs	r3, r3, r1
 8009a60:	4543      	cmp	r3, r8
 8009a62:	dcf0      	bgt.n	8009a46 <_printf_float+0x442>
 8009a64:	e6fa      	b.n	800985c <_printf_float+0x258>
 8009a66:	f04f 0800 	mov.w	r8, #0
 8009a6a:	f104 0919 	add.w	r9, r4, #25
 8009a6e:	e7f4      	b.n	8009a5a <_printf_float+0x456>

08009a70 <_printf_common>:
 8009a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a74:	4616      	mov	r6, r2
 8009a76:	4699      	mov	r9, r3
 8009a78:	688a      	ldr	r2, [r1, #8]
 8009a7a:	690b      	ldr	r3, [r1, #16]
 8009a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a80:	4293      	cmp	r3, r2
 8009a82:	bfb8      	it	lt
 8009a84:	4613      	movlt	r3, r2
 8009a86:	6033      	str	r3, [r6, #0]
 8009a88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	b10a      	cbz	r2, 8009a96 <_printf_common+0x26>
 8009a92:	3301      	adds	r3, #1
 8009a94:	6033      	str	r3, [r6, #0]
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	0699      	lsls	r1, r3, #26
 8009a9a:	bf42      	ittt	mi
 8009a9c:	6833      	ldrmi	r3, [r6, #0]
 8009a9e:	3302      	addmi	r3, #2
 8009aa0:	6033      	strmi	r3, [r6, #0]
 8009aa2:	6825      	ldr	r5, [r4, #0]
 8009aa4:	f015 0506 	ands.w	r5, r5, #6
 8009aa8:	d106      	bne.n	8009ab8 <_printf_common+0x48>
 8009aaa:	f104 0a19 	add.w	sl, r4, #25
 8009aae:	68e3      	ldr	r3, [r4, #12]
 8009ab0:	6832      	ldr	r2, [r6, #0]
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	42ab      	cmp	r3, r5
 8009ab6:	dc26      	bgt.n	8009b06 <_printf_common+0x96>
 8009ab8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009abc:	1e13      	subs	r3, r2, #0
 8009abe:	6822      	ldr	r2, [r4, #0]
 8009ac0:	bf18      	it	ne
 8009ac2:	2301      	movne	r3, #1
 8009ac4:	0692      	lsls	r2, r2, #26
 8009ac6:	d42b      	bmi.n	8009b20 <_printf_common+0xb0>
 8009ac8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009acc:	4649      	mov	r1, r9
 8009ace:	4638      	mov	r0, r7
 8009ad0:	47c0      	blx	r8
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d01e      	beq.n	8009b14 <_printf_common+0xa4>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	68e5      	ldr	r5, [r4, #12]
 8009ada:	6832      	ldr	r2, [r6, #0]
 8009adc:	f003 0306 	and.w	r3, r3, #6
 8009ae0:	2b04      	cmp	r3, #4
 8009ae2:	bf08      	it	eq
 8009ae4:	1aad      	subeq	r5, r5, r2
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	6922      	ldr	r2, [r4, #16]
 8009aea:	bf0c      	ite	eq
 8009aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009af0:	2500      	movne	r5, #0
 8009af2:	4293      	cmp	r3, r2
 8009af4:	bfc4      	itt	gt
 8009af6:	1a9b      	subgt	r3, r3, r2
 8009af8:	18ed      	addgt	r5, r5, r3
 8009afa:	2600      	movs	r6, #0
 8009afc:	341a      	adds	r4, #26
 8009afe:	42b5      	cmp	r5, r6
 8009b00:	d11a      	bne.n	8009b38 <_printf_common+0xc8>
 8009b02:	2000      	movs	r0, #0
 8009b04:	e008      	b.n	8009b18 <_printf_common+0xa8>
 8009b06:	2301      	movs	r3, #1
 8009b08:	4652      	mov	r2, sl
 8009b0a:	4649      	mov	r1, r9
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	47c0      	blx	r8
 8009b10:	3001      	adds	r0, #1
 8009b12:	d103      	bne.n	8009b1c <_printf_common+0xac>
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	e7c6      	b.n	8009aae <_printf_common+0x3e>
 8009b20:	18e1      	adds	r1, r4, r3
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	2030      	movs	r0, #48	; 0x30
 8009b26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b2a:	4422      	add	r2, r4
 8009b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b34:	3302      	adds	r3, #2
 8009b36:	e7c7      	b.n	8009ac8 <_printf_common+0x58>
 8009b38:	2301      	movs	r3, #1
 8009b3a:	4622      	mov	r2, r4
 8009b3c:	4649      	mov	r1, r9
 8009b3e:	4638      	mov	r0, r7
 8009b40:	47c0      	blx	r8
 8009b42:	3001      	adds	r0, #1
 8009b44:	d0e6      	beq.n	8009b14 <_printf_common+0xa4>
 8009b46:	3601      	adds	r6, #1
 8009b48:	e7d9      	b.n	8009afe <_printf_common+0x8e>
	...

08009b4c <_printf_i>:
 8009b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b50:	460c      	mov	r4, r1
 8009b52:	4691      	mov	r9, r2
 8009b54:	7e27      	ldrb	r7, [r4, #24]
 8009b56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009b58:	2f78      	cmp	r7, #120	; 0x78
 8009b5a:	4680      	mov	r8, r0
 8009b5c:	469a      	mov	sl, r3
 8009b5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b62:	d807      	bhi.n	8009b74 <_printf_i+0x28>
 8009b64:	2f62      	cmp	r7, #98	; 0x62
 8009b66:	d80a      	bhi.n	8009b7e <_printf_i+0x32>
 8009b68:	2f00      	cmp	r7, #0
 8009b6a:	f000 80d8 	beq.w	8009d1e <_printf_i+0x1d2>
 8009b6e:	2f58      	cmp	r7, #88	; 0x58
 8009b70:	f000 80a3 	beq.w	8009cba <_printf_i+0x16e>
 8009b74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b7c:	e03a      	b.n	8009bf4 <_printf_i+0xa8>
 8009b7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b82:	2b15      	cmp	r3, #21
 8009b84:	d8f6      	bhi.n	8009b74 <_printf_i+0x28>
 8009b86:	a001      	add	r0, pc, #4	; (adr r0, 8009b8c <_printf_i+0x40>)
 8009b88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b8c:	08009be5 	.word	0x08009be5
 8009b90:	08009bf9 	.word	0x08009bf9
 8009b94:	08009b75 	.word	0x08009b75
 8009b98:	08009b75 	.word	0x08009b75
 8009b9c:	08009b75 	.word	0x08009b75
 8009ba0:	08009b75 	.word	0x08009b75
 8009ba4:	08009bf9 	.word	0x08009bf9
 8009ba8:	08009b75 	.word	0x08009b75
 8009bac:	08009b75 	.word	0x08009b75
 8009bb0:	08009b75 	.word	0x08009b75
 8009bb4:	08009b75 	.word	0x08009b75
 8009bb8:	08009d05 	.word	0x08009d05
 8009bbc:	08009c29 	.word	0x08009c29
 8009bc0:	08009ce7 	.word	0x08009ce7
 8009bc4:	08009b75 	.word	0x08009b75
 8009bc8:	08009b75 	.word	0x08009b75
 8009bcc:	08009d27 	.word	0x08009d27
 8009bd0:	08009b75 	.word	0x08009b75
 8009bd4:	08009c29 	.word	0x08009c29
 8009bd8:	08009b75 	.word	0x08009b75
 8009bdc:	08009b75 	.word	0x08009b75
 8009be0:	08009cef 	.word	0x08009cef
 8009be4:	680b      	ldr	r3, [r1, #0]
 8009be6:	1d1a      	adds	r2, r3, #4
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	600a      	str	r2, [r1, #0]
 8009bec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e0a3      	b.n	8009d40 <_printf_i+0x1f4>
 8009bf8:	6825      	ldr	r5, [r4, #0]
 8009bfa:	6808      	ldr	r0, [r1, #0]
 8009bfc:	062e      	lsls	r6, r5, #24
 8009bfe:	f100 0304 	add.w	r3, r0, #4
 8009c02:	d50a      	bpl.n	8009c1a <_printf_i+0xce>
 8009c04:	6805      	ldr	r5, [r0, #0]
 8009c06:	600b      	str	r3, [r1, #0]
 8009c08:	2d00      	cmp	r5, #0
 8009c0a:	da03      	bge.n	8009c14 <_printf_i+0xc8>
 8009c0c:	232d      	movs	r3, #45	; 0x2d
 8009c0e:	426d      	negs	r5, r5
 8009c10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c14:	485e      	ldr	r0, [pc, #376]	; (8009d90 <_printf_i+0x244>)
 8009c16:	230a      	movs	r3, #10
 8009c18:	e019      	b.n	8009c4e <_printf_i+0x102>
 8009c1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009c1e:	6805      	ldr	r5, [r0, #0]
 8009c20:	600b      	str	r3, [r1, #0]
 8009c22:	bf18      	it	ne
 8009c24:	b22d      	sxthne	r5, r5
 8009c26:	e7ef      	b.n	8009c08 <_printf_i+0xbc>
 8009c28:	680b      	ldr	r3, [r1, #0]
 8009c2a:	6825      	ldr	r5, [r4, #0]
 8009c2c:	1d18      	adds	r0, r3, #4
 8009c2e:	6008      	str	r0, [r1, #0]
 8009c30:	0628      	lsls	r0, r5, #24
 8009c32:	d501      	bpl.n	8009c38 <_printf_i+0xec>
 8009c34:	681d      	ldr	r5, [r3, #0]
 8009c36:	e002      	b.n	8009c3e <_printf_i+0xf2>
 8009c38:	0669      	lsls	r1, r5, #25
 8009c3a:	d5fb      	bpl.n	8009c34 <_printf_i+0xe8>
 8009c3c:	881d      	ldrh	r5, [r3, #0]
 8009c3e:	4854      	ldr	r0, [pc, #336]	; (8009d90 <_printf_i+0x244>)
 8009c40:	2f6f      	cmp	r7, #111	; 0x6f
 8009c42:	bf0c      	ite	eq
 8009c44:	2308      	moveq	r3, #8
 8009c46:	230a      	movne	r3, #10
 8009c48:	2100      	movs	r1, #0
 8009c4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c4e:	6866      	ldr	r6, [r4, #4]
 8009c50:	60a6      	str	r6, [r4, #8]
 8009c52:	2e00      	cmp	r6, #0
 8009c54:	bfa2      	ittt	ge
 8009c56:	6821      	ldrge	r1, [r4, #0]
 8009c58:	f021 0104 	bicge.w	r1, r1, #4
 8009c5c:	6021      	strge	r1, [r4, #0]
 8009c5e:	b90d      	cbnz	r5, 8009c64 <_printf_i+0x118>
 8009c60:	2e00      	cmp	r6, #0
 8009c62:	d04d      	beq.n	8009d00 <_printf_i+0x1b4>
 8009c64:	4616      	mov	r6, r2
 8009c66:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c6a:	fb03 5711 	mls	r7, r3, r1, r5
 8009c6e:	5dc7      	ldrb	r7, [r0, r7]
 8009c70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c74:	462f      	mov	r7, r5
 8009c76:	42bb      	cmp	r3, r7
 8009c78:	460d      	mov	r5, r1
 8009c7a:	d9f4      	bls.n	8009c66 <_printf_i+0x11a>
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d10b      	bne.n	8009c98 <_printf_i+0x14c>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	07df      	lsls	r7, r3, #31
 8009c84:	d508      	bpl.n	8009c98 <_printf_i+0x14c>
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	6861      	ldr	r1, [r4, #4]
 8009c8a:	4299      	cmp	r1, r3
 8009c8c:	bfde      	ittt	le
 8009c8e:	2330      	movle	r3, #48	; 0x30
 8009c90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c94:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8009c98:	1b92      	subs	r2, r2, r6
 8009c9a:	6122      	str	r2, [r4, #16]
 8009c9c:	f8cd a000 	str.w	sl, [sp]
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	aa03      	add	r2, sp, #12
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	4640      	mov	r0, r8
 8009ca8:	f7ff fee2 	bl	8009a70 <_printf_common>
 8009cac:	3001      	adds	r0, #1
 8009cae:	d14c      	bne.n	8009d4a <_printf_i+0x1fe>
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cb4:	b004      	add	sp, #16
 8009cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cba:	4835      	ldr	r0, [pc, #212]	; (8009d90 <_printf_i+0x244>)
 8009cbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	680e      	ldr	r6, [r1, #0]
 8009cc4:	061f      	lsls	r7, r3, #24
 8009cc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8009cca:	600e      	str	r6, [r1, #0]
 8009ccc:	d514      	bpl.n	8009cf8 <_printf_i+0x1ac>
 8009cce:	07d9      	lsls	r1, r3, #31
 8009cd0:	bf44      	itt	mi
 8009cd2:	f043 0320 	orrmi.w	r3, r3, #32
 8009cd6:	6023      	strmi	r3, [r4, #0]
 8009cd8:	b91d      	cbnz	r5, 8009ce2 <_printf_i+0x196>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	f023 0320 	bic.w	r3, r3, #32
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	2310      	movs	r3, #16
 8009ce4:	e7b0      	b.n	8009c48 <_printf_i+0xfc>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	f043 0320 	orr.w	r3, r3, #32
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	2378      	movs	r3, #120	; 0x78
 8009cf0:	4828      	ldr	r0, [pc, #160]	; (8009d94 <_printf_i+0x248>)
 8009cf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cf6:	e7e3      	b.n	8009cc0 <_printf_i+0x174>
 8009cf8:	065e      	lsls	r6, r3, #25
 8009cfa:	bf48      	it	mi
 8009cfc:	b2ad      	uxthmi	r5, r5
 8009cfe:	e7e6      	b.n	8009cce <_printf_i+0x182>
 8009d00:	4616      	mov	r6, r2
 8009d02:	e7bb      	b.n	8009c7c <_printf_i+0x130>
 8009d04:	680b      	ldr	r3, [r1, #0]
 8009d06:	6826      	ldr	r6, [r4, #0]
 8009d08:	6960      	ldr	r0, [r4, #20]
 8009d0a:	1d1d      	adds	r5, r3, #4
 8009d0c:	600d      	str	r5, [r1, #0]
 8009d0e:	0635      	lsls	r5, r6, #24
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	d501      	bpl.n	8009d18 <_printf_i+0x1cc>
 8009d14:	6018      	str	r0, [r3, #0]
 8009d16:	e002      	b.n	8009d1e <_printf_i+0x1d2>
 8009d18:	0671      	lsls	r1, r6, #25
 8009d1a:	d5fb      	bpl.n	8009d14 <_printf_i+0x1c8>
 8009d1c:	8018      	strh	r0, [r3, #0]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	4616      	mov	r6, r2
 8009d24:	e7ba      	b.n	8009c9c <_printf_i+0x150>
 8009d26:	680b      	ldr	r3, [r1, #0]
 8009d28:	1d1a      	adds	r2, r3, #4
 8009d2a:	600a      	str	r2, [r1, #0]
 8009d2c:	681e      	ldr	r6, [r3, #0]
 8009d2e:	6862      	ldr	r2, [r4, #4]
 8009d30:	2100      	movs	r1, #0
 8009d32:	4630      	mov	r0, r6
 8009d34:	f7f6 fa5c 	bl	80001f0 <memchr>
 8009d38:	b108      	cbz	r0, 8009d3e <_printf_i+0x1f2>
 8009d3a:	1b80      	subs	r0, r0, r6
 8009d3c:	6060      	str	r0, [r4, #4]
 8009d3e:	6863      	ldr	r3, [r4, #4]
 8009d40:	6123      	str	r3, [r4, #16]
 8009d42:	2300      	movs	r3, #0
 8009d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d48:	e7a8      	b.n	8009c9c <_printf_i+0x150>
 8009d4a:	6923      	ldr	r3, [r4, #16]
 8009d4c:	4632      	mov	r2, r6
 8009d4e:	4649      	mov	r1, r9
 8009d50:	4640      	mov	r0, r8
 8009d52:	47d0      	blx	sl
 8009d54:	3001      	adds	r0, #1
 8009d56:	d0ab      	beq.n	8009cb0 <_printf_i+0x164>
 8009d58:	6823      	ldr	r3, [r4, #0]
 8009d5a:	079b      	lsls	r3, r3, #30
 8009d5c:	d413      	bmi.n	8009d86 <_printf_i+0x23a>
 8009d5e:	68e0      	ldr	r0, [r4, #12]
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	4298      	cmp	r0, r3
 8009d64:	bfb8      	it	lt
 8009d66:	4618      	movlt	r0, r3
 8009d68:	e7a4      	b.n	8009cb4 <_printf_i+0x168>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4632      	mov	r2, r6
 8009d6e:	4649      	mov	r1, r9
 8009d70:	4640      	mov	r0, r8
 8009d72:	47d0      	blx	sl
 8009d74:	3001      	adds	r0, #1
 8009d76:	d09b      	beq.n	8009cb0 <_printf_i+0x164>
 8009d78:	3501      	adds	r5, #1
 8009d7a:	68e3      	ldr	r3, [r4, #12]
 8009d7c:	9903      	ldr	r1, [sp, #12]
 8009d7e:	1a5b      	subs	r3, r3, r1
 8009d80:	42ab      	cmp	r3, r5
 8009d82:	dcf2      	bgt.n	8009d6a <_printf_i+0x21e>
 8009d84:	e7eb      	b.n	8009d5e <_printf_i+0x212>
 8009d86:	2500      	movs	r5, #0
 8009d88:	f104 0619 	add.w	r6, r4, #25
 8009d8c:	e7f5      	b.n	8009d7a <_printf_i+0x22e>
 8009d8e:	bf00      	nop
 8009d90:	0800dfee 	.word	0x0800dfee
 8009d94:	0800dfff 	.word	0x0800dfff

08009d98 <siprintf>:
 8009d98:	b40e      	push	{r1, r2, r3}
 8009d9a:	b500      	push	{lr}
 8009d9c:	b09c      	sub	sp, #112	; 0x70
 8009d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8009da0:	9002      	str	r0, [sp, #8]
 8009da2:	9006      	str	r0, [sp, #24]
 8009da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009da8:	4809      	ldr	r0, [pc, #36]	; (8009dd0 <siprintf+0x38>)
 8009daa:	9107      	str	r1, [sp, #28]
 8009dac:	9104      	str	r1, [sp, #16]
 8009dae:	4909      	ldr	r1, [pc, #36]	; (8009dd4 <siprintf+0x3c>)
 8009db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db4:	9105      	str	r1, [sp, #20]
 8009db6:	6800      	ldr	r0, [r0, #0]
 8009db8:	9301      	str	r3, [sp, #4]
 8009dba:	a902      	add	r1, sp, #8
 8009dbc:	f001 fb24 	bl	800b408 <_svfiprintf_r>
 8009dc0:	9b02      	ldr	r3, [sp, #8]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	701a      	strb	r2, [r3, #0]
 8009dc6:	b01c      	add	sp, #112	; 0x70
 8009dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dcc:	b003      	add	sp, #12
 8009dce:	4770      	bx	lr
 8009dd0:	20000010 	.word	0x20000010
 8009dd4:	ffff0208 	.word	0xffff0208

08009dd8 <quorem>:
 8009dd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	6903      	ldr	r3, [r0, #16]
 8009dde:	690c      	ldr	r4, [r1, #16]
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	4607      	mov	r7, r0
 8009de4:	f2c0 8081 	blt.w	8009eea <quorem+0x112>
 8009de8:	3c01      	subs	r4, #1
 8009dea:	f101 0814 	add.w	r8, r1, #20
 8009dee:	f100 0514 	add.w	r5, r0, #20
 8009df2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009df6:	9301      	str	r3, [sp, #4]
 8009df8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009dfc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e00:	3301      	adds	r3, #1
 8009e02:	429a      	cmp	r2, r3
 8009e04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e10:	d331      	bcc.n	8009e76 <quorem+0x9e>
 8009e12:	f04f 0e00 	mov.w	lr, #0
 8009e16:	4640      	mov	r0, r8
 8009e18:	46ac      	mov	ip, r5
 8009e1a:	46f2      	mov	sl, lr
 8009e1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e20:	b293      	uxth	r3, r2
 8009e22:	fb06 e303 	mla	r3, r6, r3, lr
 8009e26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	ebaa 0303 	sub.w	r3, sl, r3
 8009e30:	0c12      	lsrs	r2, r2, #16
 8009e32:	f8dc a000 	ldr.w	sl, [ip]
 8009e36:	fb06 e202 	mla	r2, r6, r2, lr
 8009e3a:	fa13 f38a 	uxtah	r3, r3, sl
 8009e3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e42:	fa1f fa82 	uxth.w	sl, r2
 8009e46:	f8dc 2000 	ldr.w	r2, [ip]
 8009e4a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009e4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e58:	4581      	cmp	r9, r0
 8009e5a:	f84c 3b04 	str.w	r3, [ip], #4
 8009e5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e62:	d2db      	bcs.n	8009e1c <quorem+0x44>
 8009e64:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e68:	b92b      	cbnz	r3, 8009e76 <quorem+0x9e>
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	3b04      	subs	r3, #4
 8009e6e:	429d      	cmp	r5, r3
 8009e70:	461a      	mov	r2, r3
 8009e72:	d32e      	bcc.n	8009ed2 <quorem+0xfa>
 8009e74:	613c      	str	r4, [r7, #16]
 8009e76:	4638      	mov	r0, r7
 8009e78:	f001 f8b0 	bl	800afdc <__mcmp>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	db24      	blt.n	8009eca <quorem+0xf2>
 8009e80:	3601      	adds	r6, #1
 8009e82:	4628      	mov	r0, r5
 8009e84:	f04f 0c00 	mov.w	ip, #0
 8009e88:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e8c:	f8d0 e000 	ldr.w	lr, [r0]
 8009e90:	b293      	uxth	r3, r2
 8009e92:	ebac 0303 	sub.w	r3, ip, r3
 8009e96:	0c12      	lsrs	r2, r2, #16
 8009e98:	fa13 f38e 	uxtah	r3, r3, lr
 8009e9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ea0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eaa:	45c1      	cmp	r9, r8
 8009eac:	f840 3b04 	str.w	r3, [r0], #4
 8009eb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009eb4:	d2e8      	bcs.n	8009e88 <quorem+0xb0>
 8009eb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ebe:	b922      	cbnz	r2, 8009eca <quorem+0xf2>
 8009ec0:	3b04      	subs	r3, #4
 8009ec2:	429d      	cmp	r5, r3
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	d30a      	bcc.n	8009ede <quorem+0x106>
 8009ec8:	613c      	str	r4, [r7, #16]
 8009eca:	4630      	mov	r0, r6
 8009ecc:	b003      	add	sp, #12
 8009ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	3b04      	subs	r3, #4
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	d1cc      	bne.n	8009e74 <quorem+0x9c>
 8009eda:	3c01      	subs	r4, #1
 8009edc:	e7c7      	b.n	8009e6e <quorem+0x96>
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	3b04      	subs	r3, #4
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	d1f0      	bne.n	8009ec8 <quorem+0xf0>
 8009ee6:	3c01      	subs	r4, #1
 8009ee8:	e7eb      	b.n	8009ec2 <quorem+0xea>
 8009eea:	2000      	movs	r0, #0
 8009eec:	e7ee      	b.n	8009ecc <quorem+0xf4>
	...

08009ef0 <_dtoa_r>:
 8009ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	ed2d 8b02 	vpush	{d8}
 8009ef8:	ec57 6b10 	vmov	r6, r7, d0
 8009efc:	b095      	sub	sp, #84	; 0x54
 8009efe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f04:	9105      	str	r1, [sp, #20]
 8009f06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f10:	b975      	cbnz	r5, 8009f30 <_dtoa_r+0x40>
 8009f12:	2010      	movs	r0, #16
 8009f14:	f000 fddc 	bl	800aad0 <malloc>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	6260      	str	r0, [r4, #36]	; 0x24
 8009f1c:	b920      	cbnz	r0, 8009f28 <_dtoa_r+0x38>
 8009f1e:	4bb2      	ldr	r3, [pc, #712]	; (800a1e8 <_dtoa_r+0x2f8>)
 8009f20:	21ea      	movs	r1, #234	; 0xea
 8009f22:	48b2      	ldr	r0, [pc, #712]	; (800a1ec <_dtoa_r+0x2fc>)
 8009f24:	f001 fb80 	bl	800b628 <__assert_func>
 8009f28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f2c:	6005      	str	r5, [r0, #0]
 8009f2e:	60c5      	str	r5, [r0, #12]
 8009f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	b151      	cbz	r1, 8009f4c <_dtoa_r+0x5c>
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	604a      	str	r2, [r1, #4]
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	4093      	lsls	r3, r2
 8009f3e:	608b      	str	r3, [r1, #8]
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 fe0d 	bl	800ab60 <_Bfree>
 8009f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	1e3b      	subs	r3, r7, #0
 8009f4e:	bfb9      	ittee	lt
 8009f50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f54:	9303      	strlt	r3, [sp, #12]
 8009f56:	2300      	movge	r3, #0
 8009f58:	f8c8 3000 	strge.w	r3, [r8]
 8009f5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009f60:	4ba3      	ldr	r3, [pc, #652]	; (800a1f0 <_dtoa_r+0x300>)
 8009f62:	bfbc      	itt	lt
 8009f64:	2201      	movlt	r2, #1
 8009f66:	f8c8 2000 	strlt.w	r2, [r8]
 8009f6a:	ea33 0309 	bics.w	r3, r3, r9
 8009f6e:	d11b      	bne.n	8009fa8 <_dtoa_r+0xb8>
 8009f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f72:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f7c:	4333      	orrs	r3, r6
 8009f7e:	f000 857a 	beq.w	800aa76 <_dtoa_r+0xb86>
 8009f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f84:	b963      	cbnz	r3, 8009fa0 <_dtoa_r+0xb0>
 8009f86:	4b9b      	ldr	r3, [pc, #620]	; (800a1f4 <_dtoa_r+0x304>)
 8009f88:	e024      	b.n	8009fd4 <_dtoa_r+0xe4>
 8009f8a:	4b9b      	ldr	r3, [pc, #620]	; (800a1f8 <_dtoa_r+0x308>)
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f92:	6013      	str	r3, [r2, #0]
 8009f94:	9800      	ldr	r0, [sp, #0]
 8009f96:	b015      	add	sp, #84	; 0x54
 8009f98:	ecbd 8b02 	vpop	{d8}
 8009f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa0:	4b94      	ldr	r3, [pc, #592]	; (800a1f4 <_dtoa_r+0x304>)
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	3303      	adds	r3, #3
 8009fa6:	e7f3      	b.n	8009f90 <_dtoa_r+0xa0>
 8009fa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fac:	2200      	movs	r2, #0
 8009fae:	ec51 0b17 	vmov	r0, r1, d7
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009fb8:	f7f6 fd8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fbc:	4680      	mov	r8, r0
 8009fbe:	b158      	cbz	r0, 8009fd8 <_dtoa_r+0xe8>
 8009fc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	6013      	str	r3, [r2, #0]
 8009fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 8551 	beq.w	800aa70 <_dtoa_r+0xb80>
 8009fce:	488b      	ldr	r0, [pc, #556]	; (800a1fc <_dtoa_r+0x30c>)
 8009fd0:	6018      	str	r0, [r3, #0]
 8009fd2:	1e43      	subs	r3, r0, #1
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	e7dd      	b.n	8009f94 <_dtoa_r+0xa4>
 8009fd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009fdc:	aa12      	add	r2, sp, #72	; 0x48
 8009fde:	a913      	add	r1, sp, #76	; 0x4c
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f001 f89f 	bl	800b124 <__d2b>
 8009fe6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fea:	4683      	mov	fp, r0
 8009fec:	2d00      	cmp	r5, #0
 8009fee:	d07c      	beq.n	800a0ea <_dtoa_r+0x1fa>
 8009ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ffa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009ffe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a002:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a00a:	4b7d      	ldr	r3, [pc, #500]	; (800a200 <_dtoa_r+0x310>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	4630      	mov	r0, r6
 800a010:	4639      	mov	r1, r7
 800a012:	f7f6 f941 	bl	8000298 <__aeabi_dsub>
 800a016:	a36e      	add	r3, pc, #440	; (adr r3, 800a1d0 <_dtoa_r+0x2e0>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f7f6 faf4 	bl	8000608 <__aeabi_dmul>
 800a020:	a36d      	add	r3, pc, #436	; (adr r3, 800a1d8 <_dtoa_r+0x2e8>)
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f7f6 f939 	bl	800029c <__adddf3>
 800a02a:	4606      	mov	r6, r0
 800a02c:	4628      	mov	r0, r5
 800a02e:	460f      	mov	r7, r1
 800a030:	f7f6 fa80 	bl	8000534 <__aeabi_i2d>
 800a034:	a36a      	add	r3, pc, #424	; (adr r3, 800a1e0 <_dtoa_r+0x2f0>)
 800a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03a:	f7f6 fae5 	bl	8000608 <__aeabi_dmul>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4630      	mov	r0, r6
 800a044:	4639      	mov	r1, r7
 800a046:	f7f6 f929 	bl	800029c <__adddf3>
 800a04a:	4606      	mov	r6, r0
 800a04c:	460f      	mov	r7, r1
 800a04e:	f7f6 fd8b 	bl	8000b68 <__aeabi_d2iz>
 800a052:	2200      	movs	r2, #0
 800a054:	4682      	mov	sl, r0
 800a056:	2300      	movs	r3, #0
 800a058:	4630      	mov	r0, r6
 800a05a:	4639      	mov	r1, r7
 800a05c:	f7f6 fd46 	bl	8000aec <__aeabi_dcmplt>
 800a060:	b148      	cbz	r0, 800a076 <_dtoa_r+0x186>
 800a062:	4650      	mov	r0, sl
 800a064:	f7f6 fa66 	bl	8000534 <__aeabi_i2d>
 800a068:	4632      	mov	r2, r6
 800a06a:	463b      	mov	r3, r7
 800a06c:	f7f6 fd34 	bl	8000ad8 <__aeabi_dcmpeq>
 800a070:	b908      	cbnz	r0, 800a076 <_dtoa_r+0x186>
 800a072:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a076:	f1ba 0f16 	cmp.w	sl, #22
 800a07a:	d854      	bhi.n	800a126 <_dtoa_r+0x236>
 800a07c:	4b61      	ldr	r3, [pc, #388]	; (800a204 <_dtoa_r+0x314>)
 800a07e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a08a:	f7f6 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d04b      	beq.n	800a12a <_dtoa_r+0x23a>
 800a092:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a096:	2300      	movs	r3, #0
 800a098:	930e      	str	r3, [sp, #56]	; 0x38
 800a09a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a09c:	1b5d      	subs	r5, r3, r5
 800a09e:	1e6b      	subs	r3, r5, #1
 800a0a0:	9304      	str	r3, [sp, #16]
 800a0a2:	bf43      	ittte	mi
 800a0a4:	2300      	movmi	r3, #0
 800a0a6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a0aa:	9304      	strmi	r3, [sp, #16]
 800a0ac:	f04f 0800 	movpl.w	r8, #0
 800a0b0:	f1ba 0f00 	cmp.w	sl, #0
 800a0b4:	db3b      	blt.n	800a12e <_dtoa_r+0x23e>
 800a0b6:	9b04      	ldr	r3, [sp, #16]
 800a0b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a0bc:	4453      	add	r3, sl
 800a0be:	9304      	str	r3, [sp, #16]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	9306      	str	r3, [sp, #24]
 800a0c4:	9b05      	ldr	r3, [sp, #20]
 800a0c6:	2b09      	cmp	r3, #9
 800a0c8:	d869      	bhi.n	800a19e <_dtoa_r+0x2ae>
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	bfc4      	itt	gt
 800a0ce:	3b04      	subgt	r3, #4
 800a0d0:	9305      	strgt	r3, [sp, #20]
 800a0d2:	9b05      	ldr	r3, [sp, #20]
 800a0d4:	f1a3 0302 	sub.w	r3, r3, #2
 800a0d8:	bfcc      	ite	gt
 800a0da:	2500      	movgt	r5, #0
 800a0dc:	2501      	movle	r5, #1
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d869      	bhi.n	800a1b6 <_dtoa_r+0x2c6>
 800a0e2:	e8df f003 	tbb	[pc, r3]
 800a0e6:	4e2c      	.short	0x4e2c
 800a0e8:	5a4c      	.short	0x5a4c
 800a0ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a0ee:	441d      	add	r5, r3
 800a0f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0f4:	2b20      	cmp	r3, #32
 800a0f6:	bfc1      	itttt	gt
 800a0f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a0fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a100:	fa09 f303 	lslgt.w	r3, r9, r3
 800a104:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a108:	bfda      	itte	le
 800a10a:	f1c3 0320 	rsble	r3, r3, #32
 800a10e:	fa06 f003 	lslle.w	r0, r6, r3
 800a112:	4318      	orrgt	r0, r3
 800a114:	f7f6 f9fe 	bl	8000514 <__aeabi_ui2d>
 800a118:	2301      	movs	r3, #1
 800a11a:	4606      	mov	r6, r0
 800a11c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a120:	3d01      	subs	r5, #1
 800a122:	9310      	str	r3, [sp, #64]	; 0x40
 800a124:	e771      	b.n	800a00a <_dtoa_r+0x11a>
 800a126:	2301      	movs	r3, #1
 800a128:	e7b6      	b.n	800a098 <_dtoa_r+0x1a8>
 800a12a:	900e      	str	r0, [sp, #56]	; 0x38
 800a12c:	e7b5      	b.n	800a09a <_dtoa_r+0x1aa>
 800a12e:	f1ca 0300 	rsb	r3, sl, #0
 800a132:	9306      	str	r3, [sp, #24]
 800a134:	2300      	movs	r3, #0
 800a136:	eba8 080a 	sub.w	r8, r8, sl
 800a13a:	930d      	str	r3, [sp, #52]	; 0x34
 800a13c:	e7c2      	b.n	800a0c4 <_dtoa_r+0x1d4>
 800a13e:	2300      	movs	r3, #0
 800a140:	9308      	str	r3, [sp, #32]
 800a142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a144:	2b00      	cmp	r3, #0
 800a146:	dc39      	bgt.n	800a1bc <_dtoa_r+0x2cc>
 800a148:	f04f 0901 	mov.w	r9, #1
 800a14c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a150:	464b      	mov	r3, r9
 800a152:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a156:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a158:	2200      	movs	r2, #0
 800a15a:	6042      	str	r2, [r0, #4]
 800a15c:	2204      	movs	r2, #4
 800a15e:	f102 0614 	add.w	r6, r2, #20
 800a162:	429e      	cmp	r6, r3
 800a164:	6841      	ldr	r1, [r0, #4]
 800a166:	d92f      	bls.n	800a1c8 <_dtoa_r+0x2d8>
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fcb9 	bl	800aae0 <_Balloc>
 800a16e:	9000      	str	r0, [sp, #0]
 800a170:	2800      	cmp	r0, #0
 800a172:	d14b      	bne.n	800a20c <_dtoa_r+0x31c>
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <_dtoa_r+0x318>)
 800a176:	4602      	mov	r2, r0
 800a178:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a17c:	e6d1      	b.n	8009f22 <_dtoa_r+0x32>
 800a17e:	2301      	movs	r3, #1
 800a180:	e7de      	b.n	800a140 <_dtoa_r+0x250>
 800a182:	2300      	movs	r3, #0
 800a184:	9308      	str	r3, [sp, #32]
 800a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a188:	eb0a 0903 	add.w	r9, sl, r3
 800a18c:	f109 0301 	add.w	r3, r9, #1
 800a190:	2b01      	cmp	r3, #1
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	bfb8      	it	lt
 800a196:	2301      	movlt	r3, #1
 800a198:	e7dd      	b.n	800a156 <_dtoa_r+0x266>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e7f2      	b.n	800a184 <_dtoa_r+0x294>
 800a19e:	2501      	movs	r5, #1
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9305      	str	r3, [sp, #20]
 800a1a4:	9508      	str	r5, [sp, #32]
 800a1a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1b0:	2312      	movs	r3, #18
 800a1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800a1b4:	e7cf      	b.n	800a156 <_dtoa_r+0x266>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	9308      	str	r3, [sp, #32]
 800a1ba:	e7f4      	b.n	800a1a6 <_dtoa_r+0x2b6>
 800a1bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a1c0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1c4:	464b      	mov	r3, r9
 800a1c6:	e7c6      	b.n	800a156 <_dtoa_r+0x266>
 800a1c8:	3101      	adds	r1, #1
 800a1ca:	6041      	str	r1, [r0, #4]
 800a1cc:	0052      	lsls	r2, r2, #1
 800a1ce:	e7c6      	b.n	800a15e <_dtoa_r+0x26e>
 800a1d0:	636f4361 	.word	0x636f4361
 800a1d4:	3fd287a7 	.word	0x3fd287a7
 800a1d8:	8b60c8b3 	.word	0x8b60c8b3
 800a1dc:	3fc68a28 	.word	0x3fc68a28
 800a1e0:	509f79fb 	.word	0x509f79fb
 800a1e4:	3fd34413 	.word	0x3fd34413
 800a1e8:	0800e01d 	.word	0x0800e01d
 800a1ec:	0800e034 	.word	0x0800e034
 800a1f0:	7ff00000 	.word	0x7ff00000
 800a1f4:	0800e019 	.word	0x0800e019
 800a1f8:	0800e010 	.word	0x0800e010
 800a1fc:	0800dfed 	.word	0x0800dfed
 800a200:	3ff80000 	.word	0x3ff80000
 800a204:	0800e130 	.word	0x0800e130
 800a208:	0800e093 	.word	0x0800e093
 800a20c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a20e:	9a00      	ldr	r2, [sp, #0]
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	2b0e      	cmp	r3, #14
 800a216:	f200 80ad 	bhi.w	800a374 <_dtoa_r+0x484>
 800a21a:	2d00      	cmp	r5, #0
 800a21c:	f000 80aa 	beq.w	800a374 <_dtoa_r+0x484>
 800a220:	f1ba 0f00 	cmp.w	sl, #0
 800a224:	dd36      	ble.n	800a294 <_dtoa_r+0x3a4>
 800a226:	4ac3      	ldr	r2, [pc, #780]	; (800a534 <_dtoa_r+0x644>)
 800a228:	f00a 030f 	and.w	r3, sl, #15
 800a22c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a230:	ed93 7b00 	vldr	d7, [r3]
 800a234:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a238:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a23c:	eeb0 8a47 	vmov.f32	s16, s14
 800a240:	eef0 8a67 	vmov.f32	s17, s15
 800a244:	d016      	beq.n	800a274 <_dtoa_r+0x384>
 800a246:	4bbc      	ldr	r3, [pc, #752]	; (800a538 <_dtoa_r+0x648>)
 800a248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a24c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a250:	f7f6 fb04 	bl	800085c <__aeabi_ddiv>
 800a254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a258:	f007 070f 	and.w	r7, r7, #15
 800a25c:	2503      	movs	r5, #3
 800a25e:	4eb6      	ldr	r6, [pc, #728]	; (800a538 <_dtoa_r+0x648>)
 800a260:	b957      	cbnz	r7, 800a278 <_dtoa_r+0x388>
 800a262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a266:	ec53 2b18 	vmov	r2, r3, d8
 800a26a:	f7f6 faf7 	bl	800085c <__aeabi_ddiv>
 800a26e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a272:	e029      	b.n	800a2c8 <_dtoa_r+0x3d8>
 800a274:	2502      	movs	r5, #2
 800a276:	e7f2      	b.n	800a25e <_dtoa_r+0x36e>
 800a278:	07f9      	lsls	r1, r7, #31
 800a27a:	d508      	bpl.n	800a28e <_dtoa_r+0x39e>
 800a27c:	ec51 0b18 	vmov	r0, r1, d8
 800a280:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a284:	f7f6 f9c0 	bl	8000608 <__aeabi_dmul>
 800a288:	ec41 0b18 	vmov	d8, r0, r1
 800a28c:	3501      	adds	r5, #1
 800a28e:	107f      	asrs	r7, r7, #1
 800a290:	3608      	adds	r6, #8
 800a292:	e7e5      	b.n	800a260 <_dtoa_r+0x370>
 800a294:	f000 80a6 	beq.w	800a3e4 <_dtoa_r+0x4f4>
 800a298:	f1ca 0600 	rsb	r6, sl, #0
 800a29c:	4ba5      	ldr	r3, [pc, #660]	; (800a534 <_dtoa_r+0x644>)
 800a29e:	4fa6      	ldr	r7, [pc, #664]	; (800a538 <_dtoa_r+0x648>)
 800a2a0:	f006 020f 	and.w	r2, r6, #15
 800a2a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2b0:	f7f6 f9aa 	bl	8000608 <__aeabi_dmul>
 800a2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2b8:	1136      	asrs	r6, r6, #4
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2502      	movs	r5, #2
 800a2be:	2e00      	cmp	r6, #0
 800a2c0:	f040 8085 	bne.w	800a3ce <_dtoa_r+0x4de>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1d2      	bne.n	800a26e <_dtoa_r+0x37e>
 800a2c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 808c 	beq.w	800a3e8 <_dtoa_r+0x4f8>
 800a2d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a2d4:	4b99      	ldr	r3, [pc, #612]	; (800a53c <_dtoa_r+0x64c>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	4630      	mov	r0, r6
 800a2da:	4639      	mov	r1, r7
 800a2dc:	f7f6 fc06 	bl	8000aec <__aeabi_dcmplt>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	f000 8081 	beq.w	800a3e8 <_dtoa_r+0x4f8>
 800a2e6:	9b01      	ldr	r3, [sp, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d07d      	beq.n	800a3e8 <_dtoa_r+0x4f8>
 800a2ec:	f1b9 0f00 	cmp.w	r9, #0
 800a2f0:	dd3c      	ble.n	800a36c <_dtoa_r+0x47c>
 800a2f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a2f6:	9307      	str	r3, [sp, #28]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	4b91      	ldr	r3, [pc, #580]	; (800a540 <_dtoa_r+0x650>)
 800a2fc:	4630      	mov	r0, r6
 800a2fe:	4639      	mov	r1, r7
 800a300:	f7f6 f982 	bl	8000608 <__aeabi_dmul>
 800a304:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a308:	3501      	adds	r5, #1
 800a30a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a30e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a312:	4628      	mov	r0, r5
 800a314:	f7f6 f90e 	bl	8000534 <__aeabi_i2d>
 800a318:	4632      	mov	r2, r6
 800a31a:	463b      	mov	r3, r7
 800a31c:	f7f6 f974 	bl	8000608 <__aeabi_dmul>
 800a320:	4b88      	ldr	r3, [pc, #544]	; (800a544 <_dtoa_r+0x654>)
 800a322:	2200      	movs	r2, #0
 800a324:	f7f5 ffba 	bl	800029c <__adddf3>
 800a328:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a32c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a330:	9303      	str	r3, [sp, #12]
 800a332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a334:	2b00      	cmp	r3, #0
 800a336:	d15c      	bne.n	800a3f2 <_dtoa_r+0x502>
 800a338:	4b83      	ldr	r3, [pc, #524]	; (800a548 <_dtoa_r+0x658>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	4630      	mov	r0, r6
 800a33e:	4639      	mov	r1, r7
 800a340:	f7f5 ffaa 	bl	8000298 <__aeabi_dsub>
 800a344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a348:	4606      	mov	r6, r0
 800a34a:	460f      	mov	r7, r1
 800a34c:	f7f6 fbec 	bl	8000b28 <__aeabi_dcmpgt>
 800a350:	2800      	cmp	r0, #0
 800a352:	f040 8296 	bne.w	800a882 <_dtoa_r+0x992>
 800a356:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a35a:	4630      	mov	r0, r6
 800a35c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a360:	4639      	mov	r1, r7
 800a362:	f7f6 fbc3 	bl	8000aec <__aeabi_dcmplt>
 800a366:	2800      	cmp	r0, #0
 800a368:	f040 8288 	bne.w	800a87c <_dtoa_r+0x98c>
 800a36c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a370:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a376:	2b00      	cmp	r3, #0
 800a378:	f2c0 8158 	blt.w	800a62c <_dtoa_r+0x73c>
 800a37c:	f1ba 0f0e 	cmp.w	sl, #14
 800a380:	f300 8154 	bgt.w	800a62c <_dtoa_r+0x73c>
 800a384:	4b6b      	ldr	r3, [pc, #428]	; (800a534 <_dtoa_r+0x644>)
 800a386:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a38a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a38e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a390:	2b00      	cmp	r3, #0
 800a392:	f280 80e3 	bge.w	800a55c <_dtoa_r+0x66c>
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f300 80df 	bgt.w	800a55c <_dtoa_r+0x66c>
 800a39e:	f040 826d 	bne.w	800a87c <_dtoa_r+0x98c>
 800a3a2:	4b69      	ldr	r3, [pc, #420]	; (800a548 <_dtoa_r+0x658>)
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4640      	mov	r0, r8
 800a3a8:	4649      	mov	r1, r9
 800a3aa:	f7f6 f92d 	bl	8000608 <__aeabi_dmul>
 800a3ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3b2:	f7f6 fbaf 	bl	8000b14 <__aeabi_dcmpge>
 800a3b6:	9e01      	ldr	r6, [sp, #4]
 800a3b8:	4637      	mov	r7, r6
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	f040 8243 	bne.w	800a846 <_dtoa_r+0x956>
 800a3c0:	9d00      	ldr	r5, [sp, #0]
 800a3c2:	2331      	movs	r3, #49	; 0x31
 800a3c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a3c8:	f10a 0a01 	add.w	sl, sl, #1
 800a3cc:	e23f      	b.n	800a84e <_dtoa_r+0x95e>
 800a3ce:	07f2      	lsls	r2, r6, #31
 800a3d0:	d505      	bpl.n	800a3de <_dtoa_r+0x4ee>
 800a3d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3d6:	f7f6 f917 	bl	8000608 <__aeabi_dmul>
 800a3da:	3501      	adds	r5, #1
 800a3dc:	2301      	movs	r3, #1
 800a3de:	1076      	asrs	r6, r6, #1
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	e76c      	b.n	800a2be <_dtoa_r+0x3ce>
 800a3e4:	2502      	movs	r5, #2
 800a3e6:	e76f      	b.n	800a2c8 <_dtoa_r+0x3d8>
 800a3e8:	9b01      	ldr	r3, [sp, #4]
 800a3ea:	f8cd a01c 	str.w	sl, [sp, #28]
 800a3ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a3f0:	e78d      	b.n	800a30e <_dtoa_r+0x41e>
 800a3f2:	9900      	ldr	r1, [sp, #0]
 800a3f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a3f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3f8:	4b4e      	ldr	r3, [pc, #312]	; (800a534 <_dtoa_r+0x644>)
 800a3fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3fe:	4401      	add	r1, r0
 800a400:	9102      	str	r1, [sp, #8]
 800a402:	9908      	ldr	r1, [sp, #32]
 800a404:	eeb0 8a47 	vmov.f32	s16, s14
 800a408:	eef0 8a67 	vmov.f32	s17, s15
 800a40c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a410:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a414:	2900      	cmp	r1, #0
 800a416:	d045      	beq.n	800a4a4 <_dtoa_r+0x5b4>
 800a418:	494c      	ldr	r1, [pc, #304]	; (800a54c <_dtoa_r+0x65c>)
 800a41a:	2000      	movs	r0, #0
 800a41c:	f7f6 fa1e 	bl	800085c <__aeabi_ddiv>
 800a420:	ec53 2b18 	vmov	r2, r3, d8
 800a424:	f7f5 ff38 	bl	8000298 <__aeabi_dsub>
 800a428:	9d00      	ldr	r5, [sp, #0]
 800a42a:	ec41 0b18 	vmov	d8, r0, r1
 800a42e:	4639      	mov	r1, r7
 800a430:	4630      	mov	r0, r6
 800a432:	f7f6 fb99 	bl	8000b68 <__aeabi_d2iz>
 800a436:	900c      	str	r0, [sp, #48]	; 0x30
 800a438:	f7f6 f87c 	bl	8000534 <__aeabi_i2d>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4630      	mov	r0, r6
 800a442:	4639      	mov	r1, r7
 800a444:	f7f5 ff28 	bl	8000298 <__aeabi_dsub>
 800a448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a44a:	3330      	adds	r3, #48	; 0x30
 800a44c:	f805 3b01 	strb.w	r3, [r5], #1
 800a450:	ec53 2b18 	vmov	r2, r3, d8
 800a454:	4606      	mov	r6, r0
 800a456:	460f      	mov	r7, r1
 800a458:	f7f6 fb48 	bl	8000aec <__aeabi_dcmplt>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d165      	bne.n	800a52c <_dtoa_r+0x63c>
 800a460:	4632      	mov	r2, r6
 800a462:	463b      	mov	r3, r7
 800a464:	4935      	ldr	r1, [pc, #212]	; (800a53c <_dtoa_r+0x64c>)
 800a466:	2000      	movs	r0, #0
 800a468:	f7f5 ff16 	bl	8000298 <__aeabi_dsub>
 800a46c:	ec53 2b18 	vmov	r2, r3, d8
 800a470:	f7f6 fb3c 	bl	8000aec <__aeabi_dcmplt>
 800a474:	2800      	cmp	r0, #0
 800a476:	f040 80b9 	bne.w	800a5ec <_dtoa_r+0x6fc>
 800a47a:	9b02      	ldr	r3, [sp, #8]
 800a47c:	429d      	cmp	r5, r3
 800a47e:	f43f af75 	beq.w	800a36c <_dtoa_r+0x47c>
 800a482:	4b2f      	ldr	r3, [pc, #188]	; (800a540 <_dtoa_r+0x650>)
 800a484:	ec51 0b18 	vmov	r0, r1, d8
 800a488:	2200      	movs	r2, #0
 800a48a:	f7f6 f8bd 	bl	8000608 <__aeabi_dmul>
 800a48e:	4b2c      	ldr	r3, [pc, #176]	; (800a540 <_dtoa_r+0x650>)
 800a490:	ec41 0b18 	vmov	d8, r0, r1
 800a494:	2200      	movs	r2, #0
 800a496:	4630      	mov	r0, r6
 800a498:	4639      	mov	r1, r7
 800a49a:	f7f6 f8b5 	bl	8000608 <__aeabi_dmul>
 800a49e:	4606      	mov	r6, r0
 800a4a0:	460f      	mov	r7, r1
 800a4a2:	e7c4      	b.n	800a42e <_dtoa_r+0x53e>
 800a4a4:	ec51 0b17 	vmov	r0, r1, d7
 800a4a8:	f7f6 f8ae 	bl	8000608 <__aeabi_dmul>
 800a4ac:	9b02      	ldr	r3, [sp, #8]
 800a4ae:	9d00      	ldr	r5, [sp, #0]
 800a4b0:	930c      	str	r3, [sp, #48]	; 0x30
 800a4b2:	ec41 0b18 	vmov	d8, r0, r1
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f7f6 fb55 	bl	8000b68 <__aeabi_d2iz>
 800a4be:	9011      	str	r0, [sp, #68]	; 0x44
 800a4c0:	f7f6 f838 	bl	8000534 <__aeabi_i2d>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	4639      	mov	r1, r7
 800a4cc:	f7f5 fee4 	bl	8000298 <__aeabi_dsub>
 800a4d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4d2:	3330      	adds	r3, #48	; 0x30
 800a4d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	429d      	cmp	r5, r3
 800a4dc:	4606      	mov	r6, r0
 800a4de:	460f      	mov	r7, r1
 800a4e0:	f04f 0200 	mov.w	r2, #0
 800a4e4:	d134      	bne.n	800a550 <_dtoa_r+0x660>
 800a4e6:	4b19      	ldr	r3, [pc, #100]	; (800a54c <_dtoa_r+0x65c>)
 800a4e8:	ec51 0b18 	vmov	r0, r1, d8
 800a4ec:	f7f5 fed6 	bl	800029c <__adddf3>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	f7f6 fb16 	bl	8000b28 <__aeabi_dcmpgt>
 800a4fc:	2800      	cmp	r0, #0
 800a4fe:	d175      	bne.n	800a5ec <_dtoa_r+0x6fc>
 800a500:	ec53 2b18 	vmov	r2, r3, d8
 800a504:	4911      	ldr	r1, [pc, #68]	; (800a54c <_dtoa_r+0x65c>)
 800a506:	2000      	movs	r0, #0
 800a508:	f7f5 fec6 	bl	8000298 <__aeabi_dsub>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	4630      	mov	r0, r6
 800a512:	4639      	mov	r1, r7
 800a514:	f7f6 faea 	bl	8000aec <__aeabi_dcmplt>
 800a518:	2800      	cmp	r0, #0
 800a51a:	f43f af27 	beq.w	800a36c <_dtoa_r+0x47c>
 800a51e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a520:	1e6b      	subs	r3, r5, #1
 800a522:	930c      	str	r3, [sp, #48]	; 0x30
 800a524:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a528:	2b30      	cmp	r3, #48	; 0x30
 800a52a:	d0f8      	beq.n	800a51e <_dtoa_r+0x62e>
 800a52c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a530:	e04a      	b.n	800a5c8 <_dtoa_r+0x6d8>
 800a532:	bf00      	nop
 800a534:	0800e130 	.word	0x0800e130
 800a538:	0800e108 	.word	0x0800e108
 800a53c:	3ff00000 	.word	0x3ff00000
 800a540:	40240000 	.word	0x40240000
 800a544:	401c0000 	.word	0x401c0000
 800a548:	40140000 	.word	0x40140000
 800a54c:	3fe00000 	.word	0x3fe00000
 800a550:	4baf      	ldr	r3, [pc, #700]	; (800a810 <_dtoa_r+0x920>)
 800a552:	f7f6 f859 	bl	8000608 <__aeabi_dmul>
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	e7ac      	b.n	800a4b6 <_dtoa_r+0x5c6>
 800a55c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a560:	9d00      	ldr	r5, [sp, #0]
 800a562:	4642      	mov	r2, r8
 800a564:	464b      	mov	r3, r9
 800a566:	4630      	mov	r0, r6
 800a568:	4639      	mov	r1, r7
 800a56a:	f7f6 f977 	bl	800085c <__aeabi_ddiv>
 800a56e:	f7f6 fafb 	bl	8000b68 <__aeabi_d2iz>
 800a572:	9002      	str	r0, [sp, #8]
 800a574:	f7f5 ffde 	bl	8000534 <__aeabi_i2d>
 800a578:	4642      	mov	r2, r8
 800a57a:	464b      	mov	r3, r9
 800a57c:	f7f6 f844 	bl	8000608 <__aeabi_dmul>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f5 fe86 	bl	8000298 <__aeabi_dsub>
 800a58c:	9e02      	ldr	r6, [sp, #8]
 800a58e:	9f01      	ldr	r7, [sp, #4]
 800a590:	3630      	adds	r6, #48	; 0x30
 800a592:	f805 6b01 	strb.w	r6, [r5], #1
 800a596:	9e00      	ldr	r6, [sp, #0]
 800a598:	1bae      	subs	r6, r5, r6
 800a59a:	42b7      	cmp	r7, r6
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	d137      	bne.n	800a612 <_dtoa_r+0x722>
 800a5a2:	f7f5 fe7b 	bl	800029c <__adddf3>
 800a5a6:	4642      	mov	r2, r8
 800a5a8:	464b      	mov	r3, r9
 800a5aa:	4606      	mov	r6, r0
 800a5ac:	460f      	mov	r7, r1
 800a5ae:	f7f6 fabb 	bl	8000b28 <__aeabi_dcmpgt>
 800a5b2:	b9c8      	cbnz	r0, 800a5e8 <_dtoa_r+0x6f8>
 800a5b4:	4642      	mov	r2, r8
 800a5b6:	464b      	mov	r3, r9
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f6 fa8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5c0:	b110      	cbz	r0, 800a5c8 <_dtoa_r+0x6d8>
 800a5c2:	9b02      	ldr	r3, [sp, #8]
 800a5c4:	07d9      	lsls	r1, r3, #31
 800a5c6:	d40f      	bmi.n	800a5e8 <_dtoa_r+0x6f8>
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	4659      	mov	r1, fp
 800a5cc:	f000 fac8 	bl	800ab60 <_Bfree>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	702b      	strb	r3, [r5, #0]
 800a5d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5d6:	f10a 0001 	add.w	r0, sl, #1
 800a5da:	6018      	str	r0, [r3, #0]
 800a5dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f43f acd8 	beq.w	8009f94 <_dtoa_r+0xa4>
 800a5e4:	601d      	str	r5, [r3, #0]
 800a5e6:	e4d5      	b.n	8009f94 <_dtoa_r+0xa4>
 800a5e8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a5ec:	462b      	mov	r3, r5
 800a5ee:	461d      	mov	r5, r3
 800a5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5f4:	2a39      	cmp	r2, #57	; 0x39
 800a5f6:	d108      	bne.n	800a60a <_dtoa_r+0x71a>
 800a5f8:	9a00      	ldr	r2, [sp, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d1f7      	bne.n	800a5ee <_dtoa_r+0x6fe>
 800a5fe:	9a07      	ldr	r2, [sp, #28]
 800a600:	9900      	ldr	r1, [sp, #0]
 800a602:	3201      	adds	r2, #1
 800a604:	9207      	str	r2, [sp, #28]
 800a606:	2230      	movs	r2, #48	; 0x30
 800a608:	700a      	strb	r2, [r1, #0]
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	3201      	adds	r2, #1
 800a60e:	701a      	strb	r2, [r3, #0]
 800a610:	e78c      	b.n	800a52c <_dtoa_r+0x63c>
 800a612:	4b7f      	ldr	r3, [pc, #508]	; (800a810 <_dtoa_r+0x920>)
 800a614:	2200      	movs	r2, #0
 800a616:	f7f5 fff7 	bl	8000608 <__aeabi_dmul>
 800a61a:	2200      	movs	r2, #0
 800a61c:	2300      	movs	r3, #0
 800a61e:	4606      	mov	r6, r0
 800a620:	460f      	mov	r7, r1
 800a622:	f7f6 fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 800a626:	2800      	cmp	r0, #0
 800a628:	d09b      	beq.n	800a562 <_dtoa_r+0x672>
 800a62a:	e7cd      	b.n	800a5c8 <_dtoa_r+0x6d8>
 800a62c:	9a08      	ldr	r2, [sp, #32]
 800a62e:	2a00      	cmp	r2, #0
 800a630:	f000 80c4 	beq.w	800a7bc <_dtoa_r+0x8cc>
 800a634:	9a05      	ldr	r2, [sp, #20]
 800a636:	2a01      	cmp	r2, #1
 800a638:	f300 80a8 	bgt.w	800a78c <_dtoa_r+0x89c>
 800a63c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a63e:	2a00      	cmp	r2, #0
 800a640:	f000 80a0 	beq.w	800a784 <_dtoa_r+0x894>
 800a644:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a648:	9e06      	ldr	r6, [sp, #24]
 800a64a:	4645      	mov	r5, r8
 800a64c:	9a04      	ldr	r2, [sp, #16]
 800a64e:	2101      	movs	r1, #1
 800a650:	441a      	add	r2, r3
 800a652:	4620      	mov	r0, r4
 800a654:	4498      	add	r8, r3
 800a656:	9204      	str	r2, [sp, #16]
 800a658:	f000 fb3e 	bl	800acd8 <__i2b>
 800a65c:	4607      	mov	r7, r0
 800a65e:	2d00      	cmp	r5, #0
 800a660:	dd0b      	ble.n	800a67a <_dtoa_r+0x78a>
 800a662:	9b04      	ldr	r3, [sp, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd08      	ble.n	800a67a <_dtoa_r+0x78a>
 800a668:	42ab      	cmp	r3, r5
 800a66a:	9a04      	ldr	r2, [sp, #16]
 800a66c:	bfa8      	it	ge
 800a66e:	462b      	movge	r3, r5
 800a670:	eba8 0803 	sub.w	r8, r8, r3
 800a674:	1aed      	subs	r5, r5, r3
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	9304      	str	r3, [sp, #16]
 800a67a:	9b06      	ldr	r3, [sp, #24]
 800a67c:	b1fb      	cbz	r3, 800a6be <_dtoa_r+0x7ce>
 800a67e:	9b08      	ldr	r3, [sp, #32]
 800a680:	2b00      	cmp	r3, #0
 800a682:	f000 809f 	beq.w	800a7c4 <_dtoa_r+0x8d4>
 800a686:	2e00      	cmp	r6, #0
 800a688:	dd11      	ble.n	800a6ae <_dtoa_r+0x7be>
 800a68a:	4639      	mov	r1, r7
 800a68c:	4632      	mov	r2, r6
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 fbde 	bl	800ae50 <__pow5mult>
 800a694:	465a      	mov	r2, fp
 800a696:	4601      	mov	r1, r0
 800a698:	4607      	mov	r7, r0
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fb32 	bl	800ad04 <__multiply>
 800a6a0:	4659      	mov	r1, fp
 800a6a2:	9007      	str	r0, [sp, #28]
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fa5b 	bl	800ab60 <_Bfree>
 800a6aa:	9b07      	ldr	r3, [sp, #28]
 800a6ac:	469b      	mov	fp, r3
 800a6ae:	9b06      	ldr	r3, [sp, #24]
 800a6b0:	1b9a      	subs	r2, r3, r6
 800a6b2:	d004      	beq.n	800a6be <_dtoa_r+0x7ce>
 800a6b4:	4659      	mov	r1, fp
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f000 fbca 	bl	800ae50 <__pow5mult>
 800a6bc:	4683      	mov	fp, r0
 800a6be:	2101      	movs	r1, #1
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f000 fb09 	bl	800acd8 <__i2b>
 800a6c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	dd7c      	ble.n	800a7c8 <_dtoa_r+0x8d8>
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fbbc 	bl	800ae50 <__pow5mult>
 800a6d8:	9b05      	ldr	r3, [sp, #20]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	4606      	mov	r6, r0
 800a6de:	dd76      	ble.n	800a7ce <_dtoa_r+0x8de>
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	9306      	str	r3, [sp, #24]
 800a6e4:	6933      	ldr	r3, [r6, #16]
 800a6e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6ea:	6918      	ldr	r0, [r3, #16]
 800a6ec:	f000 faa4 	bl	800ac38 <__hi0bits>
 800a6f0:	f1c0 0020 	rsb	r0, r0, #32
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	4418      	add	r0, r3
 800a6f8:	f010 001f 	ands.w	r0, r0, #31
 800a6fc:	f000 8086 	beq.w	800a80c <_dtoa_r+0x91c>
 800a700:	f1c0 0320 	rsb	r3, r0, #32
 800a704:	2b04      	cmp	r3, #4
 800a706:	dd7f      	ble.n	800a808 <_dtoa_r+0x918>
 800a708:	f1c0 001c 	rsb	r0, r0, #28
 800a70c:	9b04      	ldr	r3, [sp, #16]
 800a70e:	4403      	add	r3, r0
 800a710:	4480      	add	r8, r0
 800a712:	4405      	add	r5, r0
 800a714:	9304      	str	r3, [sp, #16]
 800a716:	f1b8 0f00 	cmp.w	r8, #0
 800a71a:	dd05      	ble.n	800a728 <_dtoa_r+0x838>
 800a71c:	4659      	mov	r1, fp
 800a71e:	4642      	mov	r2, r8
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fbef 	bl	800af04 <__lshift>
 800a726:	4683      	mov	fp, r0
 800a728:	9b04      	ldr	r3, [sp, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dd05      	ble.n	800a73a <_dtoa_r+0x84a>
 800a72e:	4631      	mov	r1, r6
 800a730:	461a      	mov	r2, r3
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fbe6 	bl	800af04 <__lshift>
 800a738:	4606      	mov	r6, r0
 800a73a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d069      	beq.n	800a814 <_dtoa_r+0x924>
 800a740:	4631      	mov	r1, r6
 800a742:	4658      	mov	r0, fp
 800a744:	f000 fc4a 	bl	800afdc <__mcmp>
 800a748:	2800      	cmp	r0, #0
 800a74a:	da63      	bge.n	800a814 <_dtoa_r+0x924>
 800a74c:	2300      	movs	r3, #0
 800a74e:	4659      	mov	r1, fp
 800a750:	220a      	movs	r2, #10
 800a752:	4620      	mov	r0, r4
 800a754:	f000 fa26 	bl	800aba4 <__multadd>
 800a758:	9b08      	ldr	r3, [sp, #32]
 800a75a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a75e:	4683      	mov	fp, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 818f 	beq.w	800aa84 <_dtoa_r+0xb94>
 800a766:	4639      	mov	r1, r7
 800a768:	2300      	movs	r3, #0
 800a76a:	220a      	movs	r2, #10
 800a76c:	4620      	mov	r0, r4
 800a76e:	f000 fa19 	bl	800aba4 <__multadd>
 800a772:	f1b9 0f00 	cmp.w	r9, #0
 800a776:	4607      	mov	r7, r0
 800a778:	f300 808e 	bgt.w	800a898 <_dtoa_r+0x9a8>
 800a77c:	9b05      	ldr	r3, [sp, #20]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	dc50      	bgt.n	800a824 <_dtoa_r+0x934>
 800a782:	e089      	b.n	800a898 <_dtoa_r+0x9a8>
 800a784:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a78a:	e75d      	b.n	800a648 <_dtoa_r+0x758>
 800a78c:	9b01      	ldr	r3, [sp, #4]
 800a78e:	1e5e      	subs	r6, r3, #1
 800a790:	9b06      	ldr	r3, [sp, #24]
 800a792:	42b3      	cmp	r3, r6
 800a794:	bfbf      	itttt	lt
 800a796:	9b06      	ldrlt	r3, [sp, #24]
 800a798:	9606      	strlt	r6, [sp, #24]
 800a79a:	1af2      	sublt	r2, r6, r3
 800a79c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a79e:	bfb6      	itet	lt
 800a7a0:	189b      	addlt	r3, r3, r2
 800a7a2:	1b9e      	subge	r6, r3, r6
 800a7a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	bfb8      	it	lt
 800a7aa:	2600      	movlt	r6, #0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bfb5      	itete	lt
 800a7b0:	eba8 0503 	sublt.w	r5, r8, r3
 800a7b4:	9b01      	ldrge	r3, [sp, #4]
 800a7b6:	2300      	movlt	r3, #0
 800a7b8:	4645      	movge	r5, r8
 800a7ba:	e747      	b.n	800a64c <_dtoa_r+0x75c>
 800a7bc:	9e06      	ldr	r6, [sp, #24]
 800a7be:	9f08      	ldr	r7, [sp, #32]
 800a7c0:	4645      	mov	r5, r8
 800a7c2:	e74c      	b.n	800a65e <_dtoa_r+0x76e>
 800a7c4:	9a06      	ldr	r2, [sp, #24]
 800a7c6:	e775      	b.n	800a6b4 <_dtoa_r+0x7c4>
 800a7c8:	9b05      	ldr	r3, [sp, #20]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	dc18      	bgt.n	800a800 <_dtoa_r+0x910>
 800a7ce:	9b02      	ldr	r3, [sp, #8]
 800a7d0:	b9b3      	cbnz	r3, 800a800 <_dtoa_r+0x910>
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7d8:	b9a3      	cbnz	r3, 800a804 <_dtoa_r+0x914>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7e0:	0d1b      	lsrs	r3, r3, #20
 800a7e2:	051b      	lsls	r3, r3, #20
 800a7e4:	b12b      	cbz	r3, 800a7f2 <_dtoa_r+0x902>
 800a7e6:	9b04      	ldr	r3, [sp, #16]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	9304      	str	r3, [sp, #16]
 800a7ec:	f108 0801 	add.w	r8, r8, #1
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	9306      	str	r3, [sp, #24]
 800a7f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f47f af74 	bne.w	800a6e4 <_dtoa_r+0x7f4>
 800a7fc:	2001      	movs	r0, #1
 800a7fe:	e779      	b.n	800a6f4 <_dtoa_r+0x804>
 800a800:	2300      	movs	r3, #0
 800a802:	e7f6      	b.n	800a7f2 <_dtoa_r+0x902>
 800a804:	9b02      	ldr	r3, [sp, #8]
 800a806:	e7f4      	b.n	800a7f2 <_dtoa_r+0x902>
 800a808:	d085      	beq.n	800a716 <_dtoa_r+0x826>
 800a80a:	4618      	mov	r0, r3
 800a80c:	301c      	adds	r0, #28
 800a80e:	e77d      	b.n	800a70c <_dtoa_r+0x81c>
 800a810:	40240000 	.word	0x40240000
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	dc38      	bgt.n	800a88c <_dtoa_r+0x99c>
 800a81a:	9b05      	ldr	r3, [sp, #20]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	dd35      	ble.n	800a88c <_dtoa_r+0x99c>
 800a820:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a824:	f1b9 0f00 	cmp.w	r9, #0
 800a828:	d10d      	bne.n	800a846 <_dtoa_r+0x956>
 800a82a:	4631      	mov	r1, r6
 800a82c:	464b      	mov	r3, r9
 800a82e:	2205      	movs	r2, #5
 800a830:	4620      	mov	r0, r4
 800a832:	f000 f9b7 	bl	800aba4 <__multadd>
 800a836:	4601      	mov	r1, r0
 800a838:	4606      	mov	r6, r0
 800a83a:	4658      	mov	r0, fp
 800a83c:	f000 fbce 	bl	800afdc <__mcmp>
 800a840:	2800      	cmp	r0, #0
 800a842:	f73f adbd 	bgt.w	800a3c0 <_dtoa_r+0x4d0>
 800a846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a848:	9d00      	ldr	r5, [sp, #0]
 800a84a:	ea6f 0a03 	mvn.w	sl, r3
 800a84e:	f04f 0800 	mov.w	r8, #0
 800a852:	4631      	mov	r1, r6
 800a854:	4620      	mov	r0, r4
 800a856:	f000 f983 	bl	800ab60 <_Bfree>
 800a85a:	2f00      	cmp	r7, #0
 800a85c:	f43f aeb4 	beq.w	800a5c8 <_dtoa_r+0x6d8>
 800a860:	f1b8 0f00 	cmp.w	r8, #0
 800a864:	d005      	beq.n	800a872 <_dtoa_r+0x982>
 800a866:	45b8      	cmp	r8, r7
 800a868:	d003      	beq.n	800a872 <_dtoa_r+0x982>
 800a86a:	4641      	mov	r1, r8
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 f977 	bl	800ab60 <_Bfree>
 800a872:	4639      	mov	r1, r7
 800a874:	4620      	mov	r0, r4
 800a876:	f000 f973 	bl	800ab60 <_Bfree>
 800a87a:	e6a5      	b.n	800a5c8 <_dtoa_r+0x6d8>
 800a87c:	2600      	movs	r6, #0
 800a87e:	4637      	mov	r7, r6
 800a880:	e7e1      	b.n	800a846 <_dtoa_r+0x956>
 800a882:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a884:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a888:	4637      	mov	r7, r6
 800a88a:	e599      	b.n	800a3c0 <_dtoa_r+0x4d0>
 800a88c:	9b08      	ldr	r3, [sp, #32]
 800a88e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a892:	2b00      	cmp	r3, #0
 800a894:	f000 80fd 	beq.w	800aa92 <_dtoa_r+0xba2>
 800a898:	2d00      	cmp	r5, #0
 800a89a:	dd05      	ble.n	800a8a8 <_dtoa_r+0x9b8>
 800a89c:	4639      	mov	r1, r7
 800a89e:	462a      	mov	r2, r5
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f000 fb2f 	bl	800af04 <__lshift>
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	9b06      	ldr	r3, [sp, #24]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d05c      	beq.n	800a968 <_dtoa_r+0xa78>
 800a8ae:	6879      	ldr	r1, [r7, #4]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 f915 	bl	800aae0 <_Balloc>
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	b928      	cbnz	r0, 800a8c6 <_dtoa_r+0x9d6>
 800a8ba:	4b80      	ldr	r3, [pc, #512]	; (800aabc <_dtoa_r+0xbcc>)
 800a8bc:	4602      	mov	r2, r0
 800a8be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a8c2:	f7ff bb2e 	b.w	8009f22 <_dtoa_r+0x32>
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	3202      	adds	r2, #2
 800a8ca:	0092      	lsls	r2, r2, #2
 800a8cc:	f107 010c 	add.w	r1, r7, #12
 800a8d0:	300c      	adds	r0, #12
 800a8d2:	f7fe fde1 	bl	8009498 <memcpy>
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	4629      	mov	r1, r5
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 fb12 	bl	800af04 <__lshift>
 800a8e0:	9b00      	ldr	r3, [sp, #0]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	444b      	add	r3, r9
 800a8ea:	9307      	str	r3, [sp, #28]
 800a8ec:	9b02      	ldr	r3, [sp, #8]
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	46b8      	mov	r8, r7
 800a8f4:	9306      	str	r3, [sp, #24]
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	4631      	mov	r1, r6
 800a8fc:	3b01      	subs	r3, #1
 800a8fe:	4658      	mov	r0, fp
 800a900:	9302      	str	r3, [sp, #8]
 800a902:	f7ff fa69 	bl	8009dd8 <quorem>
 800a906:	4603      	mov	r3, r0
 800a908:	3330      	adds	r3, #48	; 0x30
 800a90a:	9004      	str	r0, [sp, #16]
 800a90c:	4641      	mov	r1, r8
 800a90e:	4658      	mov	r0, fp
 800a910:	9308      	str	r3, [sp, #32]
 800a912:	f000 fb63 	bl	800afdc <__mcmp>
 800a916:	463a      	mov	r2, r7
 800a918:	4681      	mov	r9, r0
 800a91a:	4631      	mov	r1, r6
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 fb79 	bl	800b014 <__mdiff>
 800a922:	68c2      	ldr	r2, [r0, #12]
 800a924:	9b08      	ldr	r3, [sp, #32]
 800a926:	4605      	mov	r5, r0
 800a928:	bb02      	cbnz	r2, 800a96c <_dtoa_r+0xa7c>
 800a92a:	4601      	mov	r1, r0
 800a92c:	4658      	mov	r0, fp
 800a92e:	f000 fb55 	bl	800afdc <__mcmp>
 800a932:	9b08      	ldr	r3, [sp, #32]
 800a934:	4602      	mov	r2, r0
 800a936:	4629      	mov	r1, r5
 800a938:	4620      	mov	r0, r4
 800a93a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a93e:	f000 f90f 	bl	800ab60 <_Bfree>
 800a942:	9b05      	ldr	r3, [sp, #20]
 800a944:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a946:	9d01      	ldr	r5, [sp, #4]
 800a948:	ea43 0102 	orr.w	r1, r3, r2
 800a94c:	9b06      	ldr	r3, [sp, #24]
 800a94e:	430b      	orrs	r3, r1
 800a950:	9b08      	ldr	r3, [sp, #32]
 800a952:	d10d      	bne.n	800a970 <_dtoa_r+0xa80>
 800a954:	2b39      	cmp	r3, #57	; 0x39
 800a956:	d029      	beq.n	800a9ac <_dtoa_r+0xabc>
 800a958:	f1b9 0f00 	cmp.w	r9, #0
 800a95c:	dd01      	ble.n	800a962 <_dtoa_r+0xa72>
 800a95e:	9b04      	ldr	r3, [sp, #16]
 800a960:	3331      	adds	r3, #49	; 0x31
 800a962:	9a02      	ldr	r2, [sp, #8]
 800a964:	7013      	strb	r3, [r2, #0]
 800a966:	e774      	b.n	800a852 <_dtoa_r+0x962>
 800a968:	4638      	mov	r0, r7
 800a96a:	e7b9      	b.n	800a8e0 <_dtoa_r+0x9f0>
 800a96c:	2201      	movs	r2, #1
 800a96e:	e7e2      	b.n	800a936 <_dtoa_r+0xa46>
 800a970:	f1b9 0f00 	cmp.w	r9, #0
 800a974:	db06      	blt.n	800a984 <_dtoa_r+0xa94>
 800a976:	9905      	ldr	r1, [sp, #20]
 800a978:	ea41 0909 	orr.w	r9, r1, r9
 800a97c:	9906      	ldr	r1, [sp, #24]
 800a97e:	ea59 0101 	orrs.w	r1, r9, r1
 800a982:	d120      	bne.n	800a9c6 <_dtoa_r+0xad6>
 800a984:	2a00      	cmp	r2, #0
 800a986:	ddec      	ble.n	800a962 <_dtoa_r+0xa72>
 800a988:	4659      	mov	r1, fp
 800a98a:	2201      	movs	r2, #1
 800a98c:	4620      	mov	r0, r4
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	f000 fab8 	bl	800af04 <__lshift>
 800a994:	4631      	mov	r1, r6
 800a996:	4683      	mov	fp, r0
 800a998:	f000 fb20 	bl	800afdc <__mcmp>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	dc02      	bgt.n	800a9a8 <_dtoa_r+0xab8>
 800a9a2:	d1de      	bne.n	800a962 <_dtoa_r+0xa72>
 800a9a4:	07da      	lsls	r2, r3, #31
 800a9a6:	d5dc      	bpl.n	800a962 <_dtoa_r+0xa72>
 800a9a8:	2b39      	cmp	r3, #57	; 0x39
 800a9aa:	d1d8      	bne.n	800a95e <_dtoa_r+0xa6e>
 800a9ac:	9a02      	ldr	r2, [sp, #8]
 800a9ae:	2339      	movs	r3, #57	; 0x39
 800a9b0:	7013      	strb	r3, [r2, #0]
 800a9b2:	462b      	mov	r3, r5
 800a9b4:	461d      	mov	r5, r3
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9bc:	2a39      	cmp	r2, #57	; 0x39
 800a9be:	d050      	beq.n	800aa62 <_dtoa_r+0xb72>
 800a9c0:	3201      	adds	r2, #1
 800a9c2:	701a      	strb	r2, [r3, #0]
 800a9c4:	e745      	b.n	800a852 <_dtoa_r+0x962>
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	dd03      	ble.n	800a9d2 <_dtoa_r+0xae2>
 800a9ca:	2b39      	cmp	r3, #57	; 0x39
 800a9cc:	d0ee      	beq.n	800a9ac <_dtoa_r+0xabc>
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	e7c7      	b.n	800a962 <_dtoa_r+0xa72>
 800a9d2:	9a01      	ldr	r2, [sp, #4]
 800a9d4:	9907      	ldr	r1, [sp, #28]
 800a9d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a9da:	428a      	cmp	r2, r1
 800a9dc:	d02a      	beq.n	800aa34 <_dtoa_r+0xb44>
 800a9de:	4659      	mov	r1, fp
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	220a      	movs	r2, #10
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f000 f8dd 	bl	800aba4 <__multadd>
 800a9ea:	45b8      	cmp	r8, r7
 800a9ec:	4683      	mov	fp, r0
 800a9ee:	f04f 0300 	mov.w	r3, #0
 800a9f2:	f04f 020a 	mov.w	r2, #10
 800a9f6:	4641      	mov	r1, r8
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	d107      	bne.n	800aa0c <_dtoa_r+0xb1c>
 800a9fc:	f000 f8d2 	bl	800aba4 <__multadd>
 800aa00:	4680      	mov	r8, r0
 800aa02:	4607      	mov	r7, r0
 800aa04:	9b01      	ldr	r3, [sp, #4]
 800aa06:	3301      	adds	r3, #1
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	e775      	b.n	800a8f8 <_dtoa_r+0xa08>
 800aa0c:	f000 f8ca 	bl	800aba4 <__multadd>
 800aa10:	4639      	mov	r1, r7
 800aa12:	4680      	mov	r8, r0
 800aa14:	2300      	movs	r3, #0
 800aa16:	220a      	movs	r2, #10
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f000 f8c3 	bl	800aba4 <__multadd>
 800aa1e:	4607      	mov	r7, r0
 800aa20:	e7f0      	b.n	800aa04 <_dtoa_r+0xb14>
 800aa22:	f1b9 0f00 	cmp.w	r9, #0
 800aa26:	9a00      	ldr	r2, [sp, #0]
 800aa28:	bfcc      	ite	gt
 800aa2a:	464d      	movgt	r5, r9
 800aa2c:	2501      	movle	r5, #1
 800aa2e:	4415      	add	r5, r2
 800aa30:	f04f 0800 	mov.w	r8, #0
 800aa34:	4659      	mov	r1, fp
 800aa36:	2201      	movs	r2, #1
 800aa38:	4620      	mov	r0, r4
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	f000 fa62 	bl	800af04 <__lshift>
 800aa40:	4631      	mov	r1, r6
 800aa42:	4683      	mov	fp, r0
 800aa44:	f000 faca 	bl	800afdc <__mcmp>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	dcb2      	bgt.n	800a9b2 <_dtoa_r+0xac2>
 800aa4c:	d102      	bne.n	800aa54 <_dtoa_r+0xb64>
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	07db      	lsls	r3, r3, #31
 800aa52:	d4ae      	bmi.n	800a9b2 <_dtoa_r+0xac2>
 800aa54:	462b      	mov	r3, r5
 800aa56:	461d      	mov	r5, r3
 800aa58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa5c:	2a30      	cmp	r2, #48	; 0x30
 800aa5e:	d0fa      	beq.n	800aa56 <_dtoa_r+0xb66>
 800aa60:	e6f7      	b.n	800a852 <_dtoa_r+0x962>
 800aa62:	9a00      	ldr	r2, [sp, #0]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d1a5      	bne.n	800a9b4 <_dtoa_r+0xac4>
 800aa68:	f10a 0a01 	add.w	sl, sl, #1
 800aa6c:	2331      	movs	r3, #49	; 0x31
 800aa6e:	e779      	b.n	800a964 <_dtoa_r+0xa74>
 800aa70:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <_dtoa_r+0xbd0>)
 800aa72:	f7ff baaf 	b.w	8009fd4 <_dtoa_r+0xe4>
 800aa76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f47f aa86 	bne.w	8009f8a <_dtoa_r+0x9a>
 800aa7e:	4b11      	ldr	r3, [pc, #68]	; (800aac4 <_dtoa_r+0xbd4>)
 800aa80:	f7ff baa8 	b.w	8009fd4 <_dtoa_r+0xe4>
 800aa84:	f1b9 0f00 	cmp.w	r9, #0
 800aa88:	dc03      	bgt.n	800aa92 <_dtoa_r+0xba2>
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	f73f aec9 	bgt.w	800a824 <_dtoa_r+0x934>
 800aa92:	9d00      	ldr	r5, [sp, #0]
 800aa94:	4631      	mov	r1, r6
 800aa96:	4658      	mov	r0, fp
 800aa98:	f7ff f99e 	bl	8009dd8 <quorem>
 800aa9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aaa0:	f805 3b01 	strb.w	r3, [r5], #1
 800aaa4:	9a00      	ldr	r2, [sp, #0]
 800aaa6:	1aaa      	subs	r2, r5, r2
 800aaa8:	4591      	cmp	r9, r2
 800aaaa:	ddba      	ble.n	800aa22 <_dtoa_r+0xb32>
 800aaac:	4659      	mov	r1, fp
 800aaae:	2300      	movs	r3, #0
 800aab0:	220a      	movs	r2, #10
 800aab2:	4620      	mov	r0, r4
 800aab4:	f000 f876 	bl	800aba4 <__multadd>
 800aab8:	4683      	mov	fp, r0
 800aaba:	e7eb      	b.n	800aa94 <_dtoa_r+0xba4>
 800aabc:	0800e093 	.word	0x0800e093
 800aac0:	0800dfec 	.word	0x0800dfec
 800aac4:	0800e010 	.word	0x0800e010

0800aac8 <_localeconv_r>:
 800aac8:	4800      	ldr	r0, [pc, #0]	; (800aacc <_localeconv_r+0x4>)
 800aaca:	4770      	bx	lr
 800aacc:	20000164 	.word	0x20000164

0800aad0 <malloc>:
 800aad0:	4b02      	ldr	r3, [pc, #8]	; (800aadc <malloc+0xc>)
 800aad2:	4601      	mov	r1, r0
 800aad4:	6818      	ldr	r0, [r3, #0]
 800aad6:	f000 bbe1 	b.w	800b29c <_malloc_r>
 800aada:	bf00      	nop
 800aadc:	20000010 	.word	0x20000010

0800aae0 <_Balloc>:
 800aae0:	b570      	push	{r4, r5, r6, lr}
 800aae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aae4:	4604      	mov	r4, r0
 800aae6:	460d      	mov	r5, r1
 800aae8:	b976      	cbnz	r6, 800ab08 <_Balloc+0x28>
 800aaea:	2010      	movs	r0, #16
 800aaec:	f7ff fff0 	bl	800aad0 <malloc>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	6260      	str	r0, [r4, #36]	; 0x24
 800aaf4:	b920      	cbnz	r0, 800ab00 <_Balloc+0x20>
 800aaf6:	4b18      	ldr	r3, [pc, #96]	; (800ab58 <_Balloc+0x78>)
 800aaf8:	4818      	ldr	r0, [pc, #96]	; (800ab5c <_Balloc+0x7c>)
 800aafa:	2166      	movs	r1, #102	; 0x66
 800aafc:	f000 fd94 	bl	800b628 <__assert_func>
 800ab00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab04:	6006      	str	r6, [r0, #0]
 800ab06:	60c6      	str	r6, [r0, #12]
 800ab08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab0a:	68f3      	ldr	r3, [r6, #12]
 800ab0c:	b183      	cbz	r3, 800ab30 <_Balloc+0x50>
 800ab0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab16:	b9b8      	cbnz	r0, 800ab48 <_Balloc+0x68>
 800ab18:	2101      	movs	r1, #1
 800ab1a:	fa01 f605 	lsl.w	r6, r1, r5
 800ab1e:	1d72      	adds	r2, r6, #5
 800ab20:	0092      	lsls	r2, r2, #2
 800ab22:	4620      	mov	r0, r4
 800ab24:	f000 fb5a 	bl	800b1dc <_calloc_r>
 800ab28:	b160      	cbz	r0, 800ab44 <_Balloc+0x64>
 800ab2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab2e:	e00e      	b.n	800ab4e <_Balloc+0x6e>
 800ab30:	2221      	movs	r2, #33	; 0x21
 800ab32:	2104      	movs	r1, #4
 800ab34:	4620      	mov	r0, r4
 800ab36:	f000 fb51 	bl	800b1dc <_calloc_r>
 800ab3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab3c:	60f0      	str	r0, [r6, #12]
 800ab3e:	68db      	ldr	r3, [r3, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1e4      	bne.n	800ab0e <_Balloc+0x2e>
 800ab44:	2000      	movs	r0, #0
 800ab46:	bd70      	pop	{r4, r5, r6, pc}
 800ab48:	6802      	ldr	r2, [r0, #0]
 800ab4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab54:	e7f7      	b.n	800ab46 <_Balloc+0x66>
 800ab56:	bf00      	nop
 800ab58:	0800e01d 	.word	0x0800e01d
 800ab5c:	0800e0a4 	.word	0x0800e0a4

0800ab60 <_Bfree>:
 800ab60:	b570      	push	{r4, r5, r6, lr}
 800ab62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab64:	4605      	mov	r5, r0
 800ab66:	460c      	mov	r4, r1
 800ab68:	b976      	cbnz	r6, 800ab88 <_Bfree+0x28>
 800ab6a:	2010      	movs	r0, #16
 800ab6c:	f7ff ffb0 	bl	800aad0 <malloc>
 800ab70:	4602      	mov	r2, r0
 800ab72:	6268      	str	r0, [r5, #36]	; 0x24
 800ab74:	b920      	cbnz	r0, 800ab80 <_Bfree+0x20>
 800ab76:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <_Bfree+0x3c>)
 800ab78:	4809      	ldr	r0, [pc, #36]	; (800aba0 <_Bfree+0x40>)
 800ab7a:	218a      	movs	r1, #138	; 0x8a
 800ab7c:	f000 fd54 	bl	800b628 <__assert_func>
 800ab80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab84:	6006      	str	r6, [r0, #0]
 800ab86:	60c6      	str	r6, [r0, #12]
 800ab88:	b13c      	cbz	r4, 800ab9a <_Bfree+0x3a>
 800ab8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab8c:	6862      	ldr	r2, [r4, #4]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab94:	6021      	str	r1, [r4, #0]
 800ab96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab9a:	bd70      	pop	{r4, r5, r6, pc}
 800ab9c:	0800e01d 	.word	0x0800e01d
 800aba0:	0800e0a4 	.word	0x0800e0a4

0800aba4 <__multadd>:
 800aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aba8:	690e      	ldr	r6, [r1, #16]
 800abaa:	4607      	mov	r7, r0
 800abac:	4698      	mov	r8, r3
 800abae:	460c      	mov	r4, r1
 800abb0:	f101 0014 	add.w	r0, r1, #20
 800abb4:	2300      	movs	r3, #0
 800abb6:	6805      	ldr	r5, [r0, #0]
 800abb8:	b2a9      	uxth	r1, r5
 800abba:	fb02 8101 	mla	r1, r2, r1, r8
 800abbe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800abc2:	0c2d      	lsrs	r5, r5, #16
 800abc4:	fb02 c505 	mla	r5, r2, r5, ip
 800abc8:	b289      	uxth	r1, r1
 800abca:	3301      	adds	r3, #1
 800abcc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800abd0:	429e      	cmp	r6, r3
 800abd2:	f840 1b04 	str.w	r1, [r0], #4
 800abd6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800abda:	dcec      	bgt.n	800abb6 <__multadd+0x12>
 800abdc:	f1b8 0f00 	cmp.w	r8, #0
 800abe0:	d022      	beq.n	800ac28 <__multadd+0x84>
 800abe2:	68a3      	ldr	r3, [r4, #8]
 800abe4:	42b3      	cmp	r3, r6
 800abe6:	dc19      	bgt.n	800ac1c <__multadd+0x78>
 800abe8:	6861      	ldr	r1, [r4, #4]
 800abea:	4638      	mov	r0, r7
 800abec:	3101      	adds	r1, #1
 800abee:	f7ff ff77 	bl	800aae0 <_Balloc>
 800abf2:	4605      	mov	r5, r0
 800abf4:	b928      	cbnz	r0, 800ac02 <__multadd+0x5e>
 800abf6:	4602      	mov	r2, r0
 800abf8:	4b0d      	ldr	r3, [pc, #52]	; (800ac30 <__multadd+0x8c>)
 800abfa:	480e      	ldr	r0, [pc, #56]	; (800ac34 <__multadd+0x90>)
 800abfc:	21b5      	movs	r1, #181	; 0xb5
 800abfe:	f000 fd13 	bl	800b628 <__assert_func>
 800ac02:	6922      	ldr	r2, [r4, #16]
 800ac04:	3202      	adds	r2, #2
 800ac06:	f104 010c 	add.w	r1, r4, #12
 800ac0a:	0092      	lsls	r2, r2, #2
 800ac0c:	300c      	adds	r0, #12
 800ac0e:	f7fe fc43 	bl	8009498 <memcpy>
 800ac12:	4621      	mov	r1, r4
 800ac14:	4638      	mov	r0, r7
 800ac16:	f7ff ffa3 	bl	800ab60 <_Bfree>
 800ac1a:	462c      	mov	r4, r5
 800ac1c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ac20:	3601      	adds	r6, #1
 800ac22:	f8c3 8014 	str.w	r8, [r3, #20]
 800ac26:	6126      	str	r6, [r4, #16]
 800ac28:	4620      	mov	r0, r4
 800ac2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac2e:	bf00      	nop
 800ac30:	0800e093 	.word	0x0800e093
 800ac34:	0800e0a4 	.word	0x0800e0a4

0800ac38 <__hi0bits>:
 800ac38:	0c03      	lsrs	r3, r0, #16
 800ac3a:	041b      	lsls	r3, r3, #16
 800ac3c:	b9d3      	cbnz	r3, 800ac74 <__hi0bits+0x3c>
 800ac3e:	0400      	lsls	r0, r0, #16
 800ac40:	2310      	movs	r3, #16
 800ac42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac46:	bf04      	itt	eq
 800ac48:	0200      	lsleq	r0, r0, #8
 800ac4a:	3308      	addeq	r3, #8
 800ac4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac50:	bf04      	itt	eq
 800ac52:	0100      	lsleq	r0, r0, #4
 800ac54:	3304      	addeq	r3, #4
 800ac56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac5a:	bf04      	itt	eq
 800ac5c:	0080      	lsleq	r0, r0, #2
 800ac5e:	3302      	addeq	r3, #2
 800ac60:	2800      	cmp	r0, #0
 800ac62:	db05      	blt.n	800ac70 <__hi0bits+0x38>
 800ac64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac68:	f103 0301 	add.w	r3, r3, #1
 800ac6c:	bf08      	it	eq
 800ac6e:	2320      	moveq	r3, #32
 800ac70:	4618      	mov	r0, r3
 800ac72:	4770      	bx	lr
 800ac74:	2300      	movs	r3, #0
 800ac76:	e7e4      	b.n	800ac42 <__hi0bits+0xa>

0800ac78 <__lo0bits>:
 800ac78:	6803      	ldr	r3, [r0, #0]
 800ac7a:	f013 0207 	ands.w	r2, r3, #7
 800ac7e:	4601      	mov	r1, r0
 800ac80:	d00b      	beq.n	800ac9a <__lo0bits+0x22>
 800ac82:	07da      	lsls	r2, r3, #31
 800ac84:	d424      	bmi.n	800acd0 <__lo0bits+0x58>
 800ac86:	0798      	lsls	r0, r3, #30
 800ac88:	bf49      	itett	mi
 800ac8a:	085b      	lsrmi	r3, r3, #1
 800ac8c:	089b      	lsrpl	r3, r3, #2
 800ac8e:	2001      	movmi	r0, #1
 800ac90:	600b      	strmi	r3, [r1, #0]
 800ac92:	bf5c      	itt	pl
 800ac94:	600b      	strpl	r3, [r1, #0]
 800ac96:	2002      	movpl	r0, #2
 800ac98:	4770      	bx	lr
 800ac9a:	b298      	uxth	r0, r3
 800ac9c:	b9b0      	cbnz	r0, 800accc <__lo0bits+0x54>
 800ac9e:	0c1b      	lsrs	r3, r3, #16
 800aca0:	2010      	movs	r0, #16
 800aca2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aca6:	bf04      	itt	eq
 800aca8:	0a1b      	lsreq	r3, r3, #8
 800acaa:	3008      	addeq	r0, #8
 800acac:	071a      	lsls	r2, r3, #28
 800acae:	bf04      	itt	eq
 800acb0:	091b      	lsreq	r3, r3, #4
 800acb2:	3004      	addeq	r0, #4
 800acb4:	079a      	lsls	r2, r3, #30
 800acb6:	bf04      	itt	eq
 800acb8:	089b      	lsreq	r3, r3, #2
 800acba:	3002      	addeq	r0, #2
 800acbc:	07da      	lsls	r2, r3, #31
 800acbe:	d403      	bmi.n	800acc8 <__lo0bits+0x50>
 800acc0:	085b      	lsrs	r3, r3, #1
 800acc2:	f100 0001 	add.w	r0, r0, #1
 800acc6:	d005      	beq.n	800acd4 <__lo0bits+0x5c>
 800acc8:	600b      	str	r3, [r1, #0]
 800acca:	4770      	bx	lr
 800accc:	4610      	mov	r0, r2
 800acce:	e7e8      	b.n	800aca2 <__lo0bits+0x2a>
 800acd0:	2000      	movs	r0, #0
 800acd2:	4770      	bx	lr
 800acd4:	2020      	movs	r0, #32
 800acd6:	4770      	bx	lr

0800acd8 <__i2b>:
 800acd8:	b510      	push	{r4, lr}
 800acda:	460c      	mov	r4, r1
 800acdc:	2101      	movs	r1, #1
 800acde:	f7ff feff 	bl	800aae0 <_Balloc>
 800ace2:	4602      	mov	r2, r0
 800ace4:	b928      	cbnz	r0, 800acf2 <__i2b+0x1a>
 800ace6:	4b05      	ldr	r3, [pc, #20]	; (800acfc <__i2b+0x24>)
 800ace8:	4805      	ldr	r0, [pc, #20]	; (800ad00 <__i2b+0x28>)
 800acea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800acee:	f000 fc9b 	bl	800b628 <__assert_func>
 800acf2:	2301      	movs	r3, #1
 800acf4:	6144      	str	r4, [r0, #20]
 800acf6:	6103      	str	r3, [r0, #16]
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	0800e093 	.word	0x0800e093
 800ad00:	0800e0a4 	.word	0x0800e0a4

0800ad04 <__multiply>:
 800ad04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad08:	4614      	mov	r4, r2
 800ad0a:	690a      	ldr	r2, [r1, #16]
 800ad0c:	6923      	ldr	r3, [r4, #16]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	bfb8      	it	lt
 800ad12:	460b      	movlt	r3, r1
 800ad14:	460d      	mov	r5, r1
 800ad16:	bfbc      	itt	lt
 800ad18:	4625      	movlt	r5, r4
 800ad1a:	461c      	movlt	r4, r3
 800ad1c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ad20:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad24:	68ab      	ldr	r3, [r5, #8]
 800ad26:	6869      	ldr	r1, [r5, #4]
 800ad28:	eb0a 0709 	add.w	r7, sl, r9
 800ad2c:	42bb      	cmp	r3, r7
 800ad2e:	b085      	sub	sp, #20
 800ad30:	bfb8      	it	lt
 800ad32:	3101      	addlt	r1, #1
 800ad34:	f7ff fed4 	bl	800aae0 <_Balloc>
 800ad38:	b930      	cbnz	r0, 800ad48 <__multiply+0x44>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	4b42      	ldr	r3, [pc, #264]	; (800ae48 <__multiply+0x144>)
 800ad3e:	4843      	ldr	r0, [pc, #268]	; (800ae4c <__multiply+0x148>)
 800ad40:	f240 115d 	movw	r1, #349	; 0x15d
 800ad44:	f000 fc70 	bl	800b628 <__assert_func>
 800ad48:	f100 0614 	add.w	r6, r0, #20
 800ad4c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ad50:	4633      	mov	r3, r6
 800ad52:	2200      	movs	r2, #0
 800ad54:	4543      	cmp	r3, r8
 800ad56:	d31e      	bcc.n	800ad96 <__multiply+0x92>
 800ad58:	f105 0c14 	add.w	ip, r5, #20
 800ad5c:	f104 0314 	add.w	r3, r4, #20
 800ad60:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ad64:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ad68:	9202      	str	r2, [sp, #8]
 800ad6a:	ebac 0205 	sub.w	r2, ip, r5
 800ad6e:	3a15      	subs	r2, #21
 800ad70:	f022 0203 	bic.w	r2, r2, #3
 800ad74:	3204      	adds	r2, #4
 800ad76:	f105 0115 	add.w	r1, r5, #21
 800ad7a:	458c      	cmp	ip, r1
 800ad7c:	bf38      	it	cc
 800ad7e:	2204      	movcc	r2, #4
 800ad80:	9201      	str	r2, [sp, #4]
 800ad82:	9a02      	ldr	r2, [sp, #8]
 800ad84:	9303      	str	r3, [sp, #12]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d808      	bhi.n	800ad9c <__multiply+0x98>
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	dc55      	bgt.n	800ae3a <__multiply+0x136>
 800ad8e:	6107      	str	r7, [r0, #16]
 800ad90:	b005      	add	sp, #20
 800ad92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad96:	f843 2b04 	str.w	r2, [r3], #4
 800ad9a:	e7db      	b.n	800ad54 <__multiply+0x50>
 800ad9c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ada0:	f1ba 0f00 	cmp.w	sl, #0
 800ada4:	d020      	beq.n	800ade8 <__multiply+0xe4>
 800ada6:	f105 0e14 	add.w	lr, r5, #20
 800adaa:	46b1      	mov	r9, r6
 800adac:	2200      	movs	r2, #0
 800adae:	f85e 4b04 	ldr.w	r4, [lr], #4
 800adb2:	f8d9 b000 	ldr.w	fp, [r9]
 800adb6:	b2a1      	uxth	r1, r4
 800adb8:	fa1f fb8b 	uxth.w	fp, fp
 800adbc:	fb0a b101 	mla	r1, sl, r1, fp
 800adc0:	4411      	add	r1, r2
 800adc2:	f8d9 2000 	ldr.w	r2, [r9]
 800adc6:	0c24      	lsrs	r4, r4, #16
 800adc8:	0c12      	lsrs	r2, r2, #16
 800adca:	fb0a 2404 	mla	r4, sl, r4, r2
 800adce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800add2:	b289      	uxth	r1, r1
 800add4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800add8:	45f4      	cmp	ip, lr
 800adda:	f849 1b04 	str.w	r1, [r9], #4
 800adde:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ade2:	d8e4      	bhi.n	800adae <__multiply+0xaa>
 800ade4:	9901      	ldr	r1, [sp, #4]
 800ade6:	5072      	str	r2, [r6, r1]
 800ade8:	9a03      	ldr	r2, [sp, #12]
 800adea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800adee:	3304      	adds	r3, #4
 800adf0:	f1b9 0f00 	cmp.w	r9, #0
 800adf4:	d01f      	beq.n	800ae36 <__multiply+0x132>
 800adf6:	6834      	ldr	r4, [r6, #0]
 800adf8:	f105 0114 	add.w	r1, r5, #20
 800adfc:	46b6      	mov	lr, r6
 800adfe:	f04f 0a00 	mov.w	sl, #0
 800ae02:	880a      	ldrh	r2, [r1, #0]
 800ae04:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae08:	fb09 b202 	mla	r2, r9, r2, fp
 800ae0c:	4492      	add	sl, r2
 800ae0e:	b2a4      	uxth	r4, r4
 800ae10:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ae14:	f84e 4b04 	str.w	r4, [lr], #4
 800ae18:	f851 4b04 	ldr.w	r4, [r1], #4
 800ae1c:	f8be 2000 	ldrh.w	r2, [lr]
 800ae20:	0c24      	lsrs	r4, r4, #16
 800ae22:	fb09 2404 	mla	r4, r9, r4, r2
 800ae26:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ae2a:	458c      	cmp	ip, r1
 800ae2c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae30:	d8e7      	bhi.n	800ae02 <__multiply+0xfe>
 800ae32:	9a01      	ldr	r2, [sp, #4]
 800ae34:	50b4      	str	r4, [r6, r2]
 800ae36:	3604      	adds	r6, #4
 800ae38:	e7a3      	b.n	800ad82 <__multiply+0x7e>
 800ae3a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1a5      	bne.n	800ad8e <__multiply+0x8a>
 800ae42:	3f01      	subs	r7, #1
 800ae44:	e7a1      	b.n	800ad8a <__multiply+0x86>
 800ae46:	bf00      	nop
 800ae48:	0800e093 	.word	0x0800e093
 800ae4c:	0800e0a4 	.word	0x0800e0a4

0800ae50 <__pow5mult>:
 800ae50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae54:	4615      	mov	r5, r2
 800ae56:	f012 0203 	ands.w	r2, r2, #3
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	460f      	mov	r7, r1
 800ae5e:	d007      	beq.n	800ae70 <__pow5mult+0x20>
 800ae60:	4c25      	ldr	r4, [pc, #148]	; (800aef8 <__pow5mult+0xa8>)
 800ae62:	3a01      	subs	r2, #1
 800ae64:	2300      	movs	r3, #0
 800ae66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae6a:	f7ff fe9b 	bl	800aba4 <__multadd>
 800ae6e:	4607      	mov	r7, r0
 800ae70:	10ad      	asrs	r5, r5, #2
 800ae72:	d03d      	beq.n	800aef0 <__pow5mult+0xa0>
 800ae74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae76:	b97c      	cbnz	r4, 800ae98 <__pow5mult+0x48>
 800ae78:	2010      	movs	r0, #16
 800ae7a:	f7ff fe29 	bl	800aad0 <malloc>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	6270      	str	r0, [r6, #36]	; 0x24
 800ae82:	b928      	cbnz	r0, 800ae90 <__pow5mult+0x40>
 800ae84:	4b1d      	ldr	r3, [pc, #116]	; (800aefc <__pow5mult+0xac>)
 800ae86:	481e      	ldr	r0, [pc, #120]	; (800af00 <__pow5mult+0xb0>)
 800ae88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae8c:	f000 fbcc 	bl	800b628 <__assert_func>
 800ae90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae94:	6004      	str	r4, [r0, #0]
 800ae96:	60c4      	str	r4, [r0, #12]
 800ae98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aea0:	b94c      	cbnz	r4, 800aeb6 <__pow5mult+0x66>
 800aea2:	f240 2171 	movw	r1, #625	; 0x271
 800aea6:	4630      	mov	r0, r6
 800aea8:	f7ff ff16 	bl	800acd8 <__i2b>
 800aeac:	2300      	movs	r3, #0
 800aeae:	f8c8 0008 	str.w	r0, [r8, #8]
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	6003      	str	r3, [r0, #0]
 800aeb6:	f04f 0900 	mov.w	r9, #0
 800aeba:	07eb      	lsls	r3, r5, #31
 800aebc:	d50a      	bpl.n	800aed4 <__pow5mult+0x84>
 800aebe:	4639      	mov	r1, r7
 800aec0:	4622      	mov	r2, r4
 800aec2:	4630      	mov	r0, r6
 800aec4:	f7ff ff1e 	bl	800ad04 <__multiply>
 800aec8:	4639      	mov	r1, r7
 800aeca:	4680      	mov	r8, r0
 800aecc:	4630      	mov	r0, r6
 800aece:	f7ff fe47 	bl	800ab60 <_Bfree>
 800aed2:	4647      	mov	r7, r8
 800aed4:	106d      	asrs	r5, r5, #1
 800aed6:	d00b      	beq.n	800aef0 <__pow5mult+0xa0>
 800aed8:	6820      	ldr	r0, [r4, #0]
 800aeda:	b938      	cbnz	r0, 800aeec <__pow5mult+0x9c>
 800aedc:	4622      	mov	r2, r4
 800aede:	4621      	mov	r1, r4
 800aee0:	4630      	mov	r0, r6
 800aee2:	f7ff ff0f 	bl	800ad04 <__multiply>
 800aee6:	6020      	str	r0, [r4, #0]
 800aee8:	f8c0 9000 	str.w	r9, [r0]
 800aeec:	4604      	mov	r4, r0
 800aeee:	e7e4      	b.n	800aeba <__pow5mult+0x6a>
 800aef0:	4638      	mov	r0, r7
 800aef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aef6:	bf00      	nop
 800aef8:	0800e1f8 	.word	0x0800e1f8
 800aefc:	0800e01d 	.word	0x0800e01d
 800af00:	0800e0a4 	.word	0x0800e0a4

0800af04 <__lshift>:
 800af04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af08:	460c      	mov	r4, r1
 800af0a:	6849      	ldr	r1, [r1, #4]
 800af0c:	6923      	ldr	r3, [r4, #16]
 800af0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af12:	68a3      	ldr	r3, [r4, #8]
 800af14:	4607      	mov	r7, r0
 800af16:	4691      	mov	r9, r2
 800af18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af1c:	f108 0601 	add.w	r6, r8, #1
 800af20:	42b3      	cmp	r3, r6
 800af22:	db0b      	blt.n	800af3c <__lshift+0x38>
 800af24:	4638      	mov	r0, r7
 800af26:	f7ff fddb 	bl	800aae0 <_Balloc>
 800af2a:	4605      	mov	r5, r0
 800af2c:	b948      	cbnz	r0, 800af42 <__lshift+0x3e>
 800af2e:	4602      	mov	r2, r0
 800af30:	4b28      	ldr	r3, [pc, #160]	; (800afd4 <__lshift+0xd0>)
 800af32:	4829      	ldr	r0, [pc, #164]	; (800afd8 <__lshift+0xd4>)
 800af34:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af38:	f000 fb76 	bl	800b628 <__assert_func>
 800af3c:	3101      	adds	r1, #1
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	e7ee      	b.n	800af20 <__lshift+0x1c>
 800af42:	2300      	movs	r3, #0
 800af44:	f100 0114 	add.w	r1, r0, #20
 800af48:	f100 0210 	add.w	r2, r0, #16
 800af4c:	4618      	mov	r0, r3
 800af4e:	4553      	cmp	r3, sl
 800af50:	db33      	blt.n	800afba <__lshift+0xb6>
 800af52:	6920      	ldr	r0, [r4, #16]
 800af54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af58:	f104 0314 	add.w	r3, r4, #20
 800af5c:	f019 091f 	ands.w	r9, r9, #31
 800af60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af68:	d02b      	beq.n	800afc2 <__lshift+0xbe>
 800af6a:	f1c9 0e20 	rsb	lr, r9, #32
 800af6e:	468a      	mov	sl, r1
 800af70:	2200      	movs	r2, #0
 800af72:	6818      	ldr	r0, [r3, #0]
 800af74:	fa00 f009 	lsl.w	r0, r0, r9
 800af78:	4302      	orrs	r2, r0
 800af7a:	f84a 2b04 	str.w	r2, [sl], #4
 800af7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af82:	459c      	cmp	ip, r3
 800af84:	fa22 f20e 	lsr.w	r2, r2, lr
 800af88:	d8f3      	bhi.n	800af72 <__lshift+0x6e>
 800af8a:	ebac 0304 	sub.w	r3, ip, r4
 800af8e:	3b15      	subs	r3, #21
 800af90:	f023 0303 	bic.w	r3, r3, #3
 800af94:	3304      	adds	r3, #4
 800af96:	f104 0015 	add.w	r0, r4, #21
 800af9a:	4584      	cmp	ip, r0
 800af9c:	bf38      	it	cc
 800af9e:	2304      	movcc	r3, #4
 800afa0:	50ca      	str	r2, [r1, r3]
 800afa2:	b10a      	cbz	r2, 800afa8 <__lshift+0xa4>
 800afa4:	f108 0602 	add.w	r6, r8, #2
 800afa8:	3e01      	subs	r6, #1
 800afaa:	4638      	mov	r0, r7
 800afac:	612e      	str	r6, [r5, #16]
 800afae:	4621      	mov	r1, r4
 800afb0:	f7ff fdd6 	bl	800ab60 <_Bfree>
 800afb4:	4628      	mov	r0, r5
 800afb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afba:	f842 0f04 	str.w	r0, [r2, #4]!
 800afbe:	3301      	adds	r3, #1
 800afc0:	e7c5      	b.n	800af4e <__lshift+0x4a>
 800afc2:	3904      	subs	r1, #4
 800afc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800afcc:	459c      	cmp	ip, r3
 800afce:	d8f9      	bhi.n	800afc4 <__lshift+0xc0>
 800afd0:	e7ea      	b.n	800afa8 <__lshift+0xa4>
 800afd2:	bf00      	nop
 800afd4:	0800e093 	.word	0x0800e093
 800afd8:	0800e0a4 	.word	0x0800e0a4

0800afdc <__mcmp>:
 800afdc:	b530      	push	{r4, r5, lr}
 800afde:	6902      	ldr	r2, [r0, #16]
 800afe0:	690c      	ldr	r4, [r1, #16]
 800afe2:	1b12      	subs	r2, r2, r4
 800afe4:	d10e      	bne.n	800b004 <__mcmp+0x28>
 800afe6:	f100 0314 	add.w	r3, r0, #20
 800afea:	3114      	adds	r1, #20
 800afec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800affc:	42a5      	cmp	r5, r4
 800affe:	d003      	beq.n	800b008 <__mcmp+0x2c>
 800b000:	d305      	bcc.n	800b00e <__mcmp+0x32>
 800b002:	2201      	movs	r2, #1
 800b004:	4610      	mov	r0, r2
 800b006:	bd30      	pop	{r4, r5, pc}
 800b008:	4283      	cmp	r3, r0
 800b00a:	d3f3      	bcc.n	800aff4 <__mcmp+0x18>
 800b00c:	e7fa      	b.n	800b004 <__mcmp+0x28>
 800b00e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b012:	e7f7      	b.n	800b004 <__mcmp+0x28>

0800b014 <__mdiff>:
 800b014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b018:	460c      	mov	r4, r1
 800b01a:	4606      	mov	r6, r0
 800b01c:	4611      	mov	r1, r2
 800b01e:	4620      	mov	r0, r4
 800b020:	4617      	mov	r7, r2
 800b022:	f7ff ffdb 	bl	800afdc <__mcmp>
 800b026:	1e05      	subs	r5, r0, #0
 800b028:	d110      	bne.n	800b04c <__mdiff+0x38>
 800b02a:	4629      	mov	r1, r5
 800b02c:	4630      	mov	r0, r6
 800b02e:	f7ff fd57 	bl	800aae0 <_Balloc>
 800b032:	b930      	cbnz	r0, 800b042 <__mdiff+0x2e>
 800b034:	4b39      	ldr	r3, [pc, #228]	; (800b11c <__mdiff+0x108>)
 800b036:	4602      	mov	r2, r0
 800b038:	f240 2132 	movw	r1, #562	; 0x232
 800b03c:	4838      	ldr	r0, [pc, #224]	; (800b120 <__mdiff+0x10c>)
 800b03e:	f000 faf3 	bl	800b628 <__assert_func>
 800b042:	2301      	movs	r3, #1
 800b044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04c:	bfa4      	itt	ge
 800b04e:	463b      	movge	r3, r7
 800b050:	4627      	movge	r7, r4
 800b052:	4630      	mov	r0, r6
 800b054:	6879      	ldr	r1, [r7, #4]
 800b056:	bfa6      	itte	ge
 800b058:	461c      	movge	r4, r3
 800b05a:	2500      	movge	r5, #0
 800b05c:	2501      	movlt	r5, #1
 800b05e:	f7ff fd3f 	bl	800aae0 <_Balloc>
 800b062:	b920      	cbnz	r0, 800b06e <__mdiff+0x5a>
 800b064:	4b2d      	ldr	r3, [pc, #180]	; (800b11c <__mdiff+0x108>)
 800b066:	4602      	mov	r2, r0
 800b068:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b06c:	e7e6      	b.n	800b03c <__mdiff+0x28>
 800b06e:	693e      	ldr	r6, [r7, #16]
 800b070:	60c5      	str	r5, [r0, #12]
 800b072:	6925      	ldr	r5, [r4, #16]
 800b074:	f107 0114 	add.w	r1, r7, #20
 800b078:	f104 0914 	add.w	r9, r4, #20
 800b07c:	f100 0e14 	add.w	lr, r0, #20
 800b080:	f107 0210 	add.w	r2, r7, #16
 800b084:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b088:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b08c:	46f2      	mov	sl, lr
 800b08e:	2700      	movs	r7, #0
 800b090:	f859 3b04 	ldr.w	r3, [r9], #4
 800b094:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b098:	fa1f f883 	uxth.w	r8, r3
 800b09c:	fa17 f78b 	uxtah	r7, r7, fp
 800b0a0:	0c1b      	lsrs	r3, r3, #16
 800b0a2:	eba7 0808 	sub.w	r8, r7, r8
 800b0a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0ae:	fa1f f888 	uxth.w	r8, r8
 800b0b2:	141f      	asrs	r7, r3, #16
 800b0b4:	454d      	cmp	r5, r9
 800b0b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0ba:	f84a 3b04 	str.w	r3, [sl], #4
 800b0be:	d8e7      	bhi.n	800b090 <__mdiff+0x7c>
 800b0c0:	1b2b      	subs	r3, r5, r4
 800b0c2:	3b15      	subs	r3, #21
 800b0c4:	f023 0303 	bic.w	r3, r3, #3
 800b0c8:	3304      	adds	r3, #4
 800b0ca:	3415      	adds	r4, #21
 800b0cc:	42a5      	cmp	r5, r4
 800b0ce:	bf38      	it	cc
 800b0d0:	2304      	movcc	r3, #4
 800b0d2:	4419      	add	r1, r3
 800b0d4:	4473      	add	r3, lr
 800b0d6:	469e      	mov	lr, r3
 800b0d8:	460d      	mov	r5, r1
 800b0da:	4565      	cmp	r5, ip
 800b0dc:	d30e      	bcc.n	800b0fc <__mdiff+0xe8>
 800b0de:	f10c 0203 	add.w	r2, ip, #3
 800b0e2:	1a52      	subs	r2, r2, r1
 800b0e4:	f022 0203 	bic.w	r2, r2, #3
 800b0e8:	3903      	subs	r1, #3
 800b0ea:	458c      	cmp	ip, r1
 800b0ec:	bf38      	it	cc
 800b0ee:	2200      	movcc	r2, #0
 800b0f0:	441a      	add	r2, r3
 800b0f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b0f6:	b17b      	cbz	r3, 800b118 <__mdiff+0x104>
 800b0f8:	6106      	str	r6, [r0, #16]
 800b0fa:	e7a5      	b.n	800b048 <__mdiff+0x34>
 800b0fc:	f855 8b04 	ldr.w	r8, [r5], #4
 800b100:	fa17 f488 	uxtah	r4, r7, r8
 800b104:	1422      	asrs	r2, r4, #16
 800b106:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b10a:	b2a4      	uxth	r4, r4
 800b10c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b110:	f84e 4b04 	str.w	r4, [lr], #4
 800b114:	1417      	asrs	r7, r2, #16
 800b116:	e7e0      	b.n	800b0da <__mdiff+0xc6>
 800b118:	3e01      	subs	r6, #1
 800b11a:	e7ea      	b.n	800b0f2 <__mdiff+0xde>
 800b11c:	0800e093 	.word	0x0800e093
 800b120:	0800e0a4 	.word	0x0800e0a4

0800b124 <__d2b>:
 800b124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b128:	4689      	mov	r9, r1
 800b12a:	2101      	movs	r1, #1
 800b12c:	ec57 6b10 	vmov	r6, r7, d0
 800b130:	4690      	mov	r8, r2
 800b132:	f7ff fcd5 	bl	800aae0 <_Balloc>
 800b136:	4604      	mov	r4, r0
 800b138:	b930      	cbnz	r0, 800b148 <__d2b+0x24>
 800b13a:	4602      	mov	r2, r0
 800b13c:	4b25      	ldr	r3, [pc, #148]	; (800b1d4 <__d2b+0xb0>)
 800b13e:	4826      	ldr	r0, [pc, #152]	; (800b1d8 <__d2b+0xb4>)
 800b140:	f240 310a 	movw	r1, #778	; 0x30a
 800b144:	f000 fa70 	bl	800b628 <__assert_func>
 800b148:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b14c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b150:	bb35      	cbnz	r5, 800b1a0 <__d2b+0x7c>
 800b152:	2e00      	cmp	r6, #0
 800b154:	9301      	str	r3, [sp, #4]
 800b156:	d028      	beq.n	800b1aa <__d2b+0x86>
 800b158:	4668      	mov	r0, sp
 800b15a:	9600      	str	r6, [sp, #0]
 800b15c:	f7ff fd8c 	bl	800ac78 <__lo0bits>
 800b160:	9900      	ldr	r1, [sp, #0]
 800b162:	b300      	cbz	r0, 800b1a6 <__d2b+0x82>
 800b164:	9a01      	ldr	r2, [sp, #4]
 800b166:	f1c0 0320 	rsb	r3, r0, #32
 800b16a:	fa02 f303 	lsl.w	r3, r2, r3
 800b16e:	430b      	orrs	r3, r1
 800b170:	40c2      	lsrs	r2, r0
 800b172:	6163      	str	r3, [r4, #20]
 800b174:	9201      	str	r2, [sp, #4]
 800b176:	9b01      	ldr	r3, [sp, #4]
 800b178:	61a3      	str	r3, [r4, #24]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	bf14      	ite	ne
 800b17e:	2202      	movne	r2, #2
 800b180:	2201      	moveq	r2, #1
 800b182:	6122      	str	r2, [r4, #16]
 800b184:	b1d5      	cbz	r5, 800b1bc <__d2b+0x98>
 800b186:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b18a:	4405      	add	r5, r0
 800b18c:	f8c9 5000 	str.w	r5, [r9]
 800b190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b194:	f8c8 0000 	str.w	r0, [r8]
 800b198:	4620      	mov	r0, r4
 800b19a:	b003      	add	sp, #12
 800b19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1a4:	e7d5      	b.n	800b152 <__d2b+0x2e>
 800b1a6:	6161      	str	r1, [r4, #20]
 800b1a8:	e7e5      	b.n	800b176 <__d2b+0x52>
 800b1aa:	a801      	add	r0, sp, #4
 800b1ac:	f7ff fd64 	bl	800ac78 <__lo0bits>
 800b1b0:	9b01      	ldr	r3, [sp, #4]
 800b1b2:	6163      	str	r3, [r4, #20]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	6122      	str	r2, [r4, #16]
 800b1b8:	3020      	adds	r0, #32
 800b1ba:	e7e3      	b.n	800b184 <__d2b+0x60>
 800b1bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1c4:	f8c9 0000 	str.w	r0, [r9]
 800b1c8:	6918      	ldr	r0, [r3, #16]
 800b1ca:	f7ff fd35 	bl	800ac38 <__hi0bits>
 800b1ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1d2:	e7df      	b.n	800b194 <__d2b+0x70>
 800b1d4:	0800e093 	.word	0x0800e093
 800b1d8:	0800e0a4 	.word	0x0800e0a4

0800b1dc <_calloc_r>:
 800b1dc:	b513      	push	{r0, r1, r4, lr}
 800b1de:	434a      	muls	r2, r1
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	9201      	str	r2, [sp, #4]
 800b1e4:	f000 f85a 	bl	800b29c <_malloc_r>
 800b1e8:	4604      	mov	r4, r0
 800b1ea:	b118      	cbz	r0, 800b1f4 <_calloc_r+0x18>
 800b1ec:	9a01      	ldr	r2, [sp, #4]
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	f7fe f960 	bl	80094b4 <memset>
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	b002      	add	sp, #8
 800b1f8:	bd10      	pop	{r4, pc}
	...

0800b1fc <_free_r>:
 800b1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1fe:	2900      	cmp	r1, #0
 800b200:	d048      	beq.n	800b294 <_free_r+0x98>
 800b202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b206:	9001      	str	r0, [sp, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f1a1 0404 	sub.w	r4, r1, #4
 800b20e:	bfb8      	it	lt
 800b210:	18e4      	addlt	r4, r4, r3
 800b212:	f000 fa65 	bl	800b6e0 <__malloc_lock>
 800b216:	4a20      	ldr	r2, [pc, #128]	; (800b298 <_free_r+0x9c>)
 800b218:	9801      	ldr	r0, [sp, #4]
 800b21a:	6813      	ldr	r3, [r2, #0]
 800b21c:	4615      	mov	r5, r2
 800b21e:	b933      	cbnz	r3, 800b22e <_free_r+0x32>
 800b220:	6063      	str	r3, [r4, #4]
 800b222:	6014      	str	r4, [r2, #0]
 800b224:	b003      	add	sp, #12
 800b226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b22a:	f000 ba5f 	b.w	800b6ec <__malloc_unlock>
 800b22e:	42a3      	cmp	r3, r4
 800b230:	d90b      	bls.n	800b24a <_free_r+0x4e>
 800b232:	6821      	ldr	r1, [r4, #0]
 800b234:	1862      	adds	r2, r4, r1
 800b236:	4293      	cmp	r3, r2
 800b238:	bf04      	itt	eq
 800b23a:	681a      	ldreq	r2, [r3, #0]
 800b23c:	685b      	ldreq	r3, [r3, #4]
 800b23e:	6063      	str	r3, [r4, #4]
 800b240:	bf04      	itt	eq
 800b242:	1852      	addeq	r2, r2, r1
 800b244:	6022      	streq	r2, [r4, #0]
 800b246:	602c      	str	r4, [r5, #0]
 800b248:	e7ec      	b.n	800b224 <_free_r+0x28>
 800b24a:	461a      	mov	r2, r3
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	b10b      	cbz	r3, 800b254 <_free_r+0x58>
 800b250:	42a3      	cmp	r3, r4
 800b252:	d9fa      	bls.n	800b24a <_free_r+0x4e>
 800b254:	6811      	ldr	r1, [r2, #0]
 800b256:	1855      	adds	r5, r2, r1
 800b258:	42a5      	cmp	r5, r4
 800b25a:	d10b      	bne.n	800b274 <_free_r+0x78>
 800b25c:	6824      	ldr	r4, [r4, #0]
 800b25e:	4421      	add	r1, r4
 800b260:	1854      	adds	r4, r2, r1
 800b262:	42a3      	cmp	r3, r4
 800b264:	6011      	str	r1, [r2, #0]
 800b266:	d1dd      	bne.n	800b224 <_free_r+0x28>
 800b268:	681c      	ldr	r4, [r3, #0]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	6053      	str	r3, [r2, #4]
 800b26e:	4421      	add	r1, r4
 800b270:	6011      	str	r1, [r2, #0]
 800b272:	e7d7      	b.n	800b224 <_free_r+0x28>
 800b274:	d902      	bls.n	800b27c <_free_r+0x80>
 800b276:	230c      	movs	r3, #12
 800b278:	6003      	str	r3, [r0, #0]
 800b27a:	e7d3      	b.n	800b224 <_free_r+0x28>
 800b27c:	6825      	ldr	r5, [r4, #0]
 800b27e:	1961      	adds	r1, r4, r5
 800b280:	428b      	cmp	r3, r1
 800b282:	bf04      	itt	eq
 800b284:	6819      	ldreq	r1, [r3, #0]
 800b286:	685b      	ldreq	r3, [r3, #4]
 800b288:	6063      	str	r3, [r4, #4]
 800b28a:	bf04      	itt	eq
 800b28c:	1949      	addeq	r1, r1, r5
 800b28e:	6021      	streq	r1, [r4, #0]
 800b290:	6054      	str	r4, [r2, #4]
 800b292:	e7c7      	b.n	800b224 <_free_r+0x28>
 800b294:	b003      	add	sp, #12
 800b296:	bd30      	pop	{r4, r5, pc}
 800b298:	20000254 	.word	0x20000254

0800b29c <_malloc_r>:
 800b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29e:	1ccd      	adds	r5, r1, #3
 800b2a0:	f025 0503 	bic.w	r5, r5, #3
 800b2a4:	3508      	adds	r5, #8
 800b2a6:	2d0c      	cmp	r5, #12
 800b2a8:	bf38      	it	cc
 800b2aa:	250c      	movcc	r5, #12
 800b2ac:	2d00      	cmp	r5, #0
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	db01      	blt.n	800b2b6 <_malloc_r+0x1a>
 800b2b2:	42a9      	cmp	r1, r5
 800b2b4:	d903      	bls.n	800b2be <_malloc_r+0x22>
 800b2b6:	230c      	movs	r3, #12
 800b2b8:	6033      	str	r3, [r6, #0]
 800b2ba:	2000      	movs	r0, #0
 800b2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2be:	f000 fa0f 	bl	800b6e0 <__malloc_lock>
 800b2c2:	4921      	ldr	r1, [pc, #132]	; (800b348 <_malloc_r+0xac>)
 800b2c4:	680a      	ldr	r2, [r1, #0]
 800b2c6:	4614      	mov	r4, r2
 800b2c8:	b99c      	cbnz	r4, 800b2f2 <_malloc_r+0x56>
 800b2ca:	4f20      	ldr	r7, [pc, #128]	; (800b34c <_malloc_r+0xb0>)
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	b923      	cbnz	r3, 800b2da <_malloc_r+0x3e>
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f000 f998 	bl	800b608 <_sbrk_r>
 800b2d8:	6038      	str	r0, [r7, #0]
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4630      	mov	r0, r6
 800b2de:	f000 f993 	bl	800b608 <_sbrk_r>
 800b2e2:	1c43      	adds	r3, r0, #1
 800b2e4:	d123      	bne.n	800b32e <_malloc_r+0x92>
 800b2e6:	230c      	movs	r3, #12
 800b2e8:	6033      	str	r3, [r6, #0]
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	f000 f9fe 	bl	800b6ec <__malloc_unlock>
 800b2f0:	e7e3      	b.n	800b2ba <_malloc_r+0x1e>
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	1b5b      	subs	r3, r3, r5
 800b2f6:	d417      	bmi.n	800b328 <_malloc_r+0x8c>
 800b2f8:	2b0b      	cmp	r3, #11
 800b2fa:	d903      	bls.n	800b304 <_malloc_r+0x68>
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	441c      	add	r4, r3
 800b300:	6025      	str	r5, [r4, #0]
 800b302:	e004      	b.n	800b30e <_malloc_r+0x72>
 800b304:	6863      	ldr	r3, [r4, #4]
 800b306:	42a2      	cmp	r2, r4
 800b308:	bf0c      	ite	eq
 800b30a:	600b      	streq	r3, [r1, #0]
 800b30c:	6053      	strne	r3, [r2, #4]
 800b30e:	4630      	mov	r0, r6
 800b310:	f000 f9ec 	bl	800b6ec <__malloc_unlock>
 800b314:	f104 000b 	add.w	r0, r4, #11
 800b318:	1d23      	adds	r3, r4, #4
 800b31a:	f020 0007 	bic.w	r0, r0, #7
 800b31e:	1ac2      	subs	r2, r0, r3
 800b320:	d0cc      	beq.n	800b2bc <_malloc_r+0x20>
 800b322:	1a1b      	subs	r3, r3, r0
 800b324:	50a3      	str	r3, [r4, r2]
 800b326:	e7c9      	b.n	800b2bc <_malloc_r+0x20>
 800b328:	4622      	mov	r2, r4
 800b32a:	6864      	ldr	r4, [r4, #4]
 800b32c:	e7cc      	b.n	800b2c8 <_malloc_r+0x2c>
 800b32e:	1cc4      	adds	r4, r0, #3
 800b330:	f024 0403 	bic.w	r4, r4, #3
 800b334:	42a0      	cmp	r0, r4
 800b336:	d0e3      	beq.n	800b300 <_malloc_r+0x64>
 800b338:	1a21      	subs	r1, r4, r0
 800b33a:	4630      	mov	r0, r6
 800b33c:	f000 f964 	bl	800b608 <_sbrk_r>
 800b340:	3001      	adds	r0, #1
 800b342:	d1dd      	bne.n	800b300 <_malloc_r+0x64>
 800b344:	e7cf      	b.n	800b2e6 <_malloc_r+0x4a>
 800b346:	bf00      	nop
 800b348:	20000254 	.word	0x20000254
 800b34c:	20000258 	.word	0x20000258

0800b350 <__ssputs_r>:
 800b350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b354:	688e      	ldr	r6, [r1, #8]
 800b356:	429e      	cmp	r6, r3
 800b358:	4682      	mov	sl, r0
 800b35a:	460c      	mov	r4, r1
 800b35c:	4690      	mov	r8, r2
 800b35e:	461f      	mov	r7, r3
 800b360:	d838      	bhi.n	800b3d4 <__ssputs_r+0x84>
 800b362:	898a      	ldrh	r2, [r1, #12]
 800b364:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b368:	d032      	beq.n	800b3d0 <__ssputs_r+0x80>
 800b36a:	6825      	ldr	r5, [r4, #0]
 800b36c:	6909      	ldr	r1, [r1, #16]
 800b36e:	eba5 0901 	sub.w	r9, r5, r1
 800b372:	6965      	ldr	r5, [r4, #20]
 800b374:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b378:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b37c:	3301      	adds	r3, #1
 800b37e:	444b      	add	r3, r9
 800b380:	106d      	asrs	r5, r5, #1
 800b382:	429d      	cmp	r5, r3
 800b384:	bf38      	it	cc
 800b386:	461d      	movcc	r5, r3
 800b388:	0553      	lsls	r3, r2, #21
 800b38a:	d531      	bpl.n	800b3f0 <__ssputs_r+0xa0>
 800b38c:	4629      	mov	r1, r5
 800b38e:	f7ff ff85 	bl	800b29c <_malloc_r>
 800b392:	4606      	mov	r6, r0
 800b394:	b950      	cbnz	r0, 800b3ac <__ssputs_r+0x5c>
 800b396:	230c      	movs	r3, #12
 800b398:	f8ca 3000 	str.w	r3, [sl]
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ac:	6921      	ldr	r1, [r4, #16]
 800b3ae:	464a      	mov	r2, r9
 800b3b0:	f7fe f872 	bl	8009498 <memcpy>
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3be:	81a3      	strh	r3, [r4, #12]
 800b3c0:	6126      	str	r6, [r4, #16]
 800b3c2:	6165      	str	r5, [r4, #20]
 800b3c4:	444e      	add	r6, r9
 800b3c6:	eba5 0509 	sub.w	r5, r5, r9
 800b3ca:	6026      	str	r6, [r4, #0]
 800b3cc:	60a5      	str	r5, [r4, #8]
 800b3ce:	463e      	mov	r6, r7
 800b3d0:	42be      	cmp	r6, r7
 800b3d2:	d900      	bls.n	800b3d6 <__ssputs_r+0x86>
 800b3d4:	463e      	mov	r6, r7
 800b3d6:	4632      	mov	r2, r6
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	4641      	mov	r1, r8
 800b3dc:	f000 f966 	bl	800b6ac <memmove>
 800b3e0:	68a3      	ldr	r3, [r4, #8]
 800b3e2:	6822      	ldr	r2, [r4, #0]
 800b3e4:	1b9b      	subs	r3, r3, r6
 800b3e6:	4432      	add	r2, r6
 800b3e8:	60a3      	str	r3, [r4, #8]
 800b3ea:	6022      	str	r2, [r4, #0]
 800b3ec:	2000      	movs	r0, #0
 800b3ee:	e7db      	b.n	800b3a8 <__ssputs_r+0x58>
 800b3f0:	462a      	mov	r2, r5
 800b3f2:	f000 f981 	bl	800b6f8 <_realloc_r>
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	2800      	cmp	r0, #0
 800b3fa:	d1e1      	bne.n	800b3c0 <__ssputs_r+0x70>
 800b3fc:	6921      	ldr	r1, [r4, #16]
 800b3fe:	4650      	mov	r0, sl
 800b400:	f7ff fefc 	bl	800b1fc <_free_r>
 800b404:	e7c7      	b.n	800b396 <__ssputs_r+0x46>
	...

0800b408 <_svfiprintf_r>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	4698      	mov	r8, r3
 800b40e:	898b      	ldrh	r3, [r1, #12]
 800b410:	061b      	lsls	r3, r3, #24
 800b412:	b09d      	sub	sp, #116	; 0x74
 800b414:	4607      	mov	r7, r0
 800b416:	460d      	mov	r5, r1
 800b418:	4614      	mov	r4, r2
 800b41a:	d50e      	bpl.n	800b43a <_svfiprintf_r+0x32>
 800b41c:	690b      	ldr	r3, [r1, #16]
 800b41e:	b963      	cbnz	r3, 800b43a <_svfiprintf_r+0x32>
 800b420:	2140      	movs	r1, #64	; 0x40
 800b422:	f7ff ff3b 	bl	800b29c <_malloc_r>
 800b426:	6028      	str	r0, [r5, #0]
 800b428:	6128      	str	r0, [r5, #16]
 800b42a:	b920      	cbnz	r0, 800b436 <_svfiprintf_r+0x2e>
 800b42c:	230c      	movs	r3, #12
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b434:	e0d1      	b.n	800b5da <_svfiprintf_r+0x1d2>
 800b436:	2340      	movs	r3, #64	; 0x40
 800b438:	616b      	str	r3, [r5, #20]
 800b43a:	2300      	movs	r3, #0
 800b43c:	9309      	str	r3, [sp, #36]	; 0x24
 800b43e:	2320      	movs	r3, #32
 800b440:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b444:	f8cd 800c 	str.w	r8, [sp, #12]
 800b448:	2330      	movs	r3, #48	; 0x30
 800b44a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b5f4 <_svfiprintf_r+0x1ec>
 800b44e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b452:	f04f 0901 	mov.w	r9, #1
 800b456:	4623      	mov	r3, r4
 800b458:	469a      	mov	sl, r3
 800b45a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b45e:	b10a      	cbz	r2, 800b464 <_svfiprintf_r+0x5c>
 800b460:	2a25      	cmp	r2, #37	; 0x25
 800b462:	d1f9      	bne.n	800b458 <_svfiprintf_r+0x50>
 800b464:	ebba 0b04 	subs.w	fp, sl, r4
 800b468:	d00b      	beq.n	800b482 <_svfiprintf_r+0x7a>
 800b46a:	465b      	mov	r3, fp
 800b46c:	4622      	mov	r2, r4
 800b46e:	4629      	mov	r1, r5
 800b470:	4638      	mov	r0, r7
 800b472:	f7ff ff6d 	bl	800b350 <__ssputs_r>
 800b476:	3001      	adds	r0, #1
 800b478:	f000 80aa 	beq.w	800b5d0 <_svfiprintf_r+0x1c8>
 800b47c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b47e:	445a      	add	r2, fp
 800b480:	9209      	str	r2, [sp, #36]	; 0x24
 800b482:	f89a 3000 	ldrb.w	r3, [sl]
 800b486:	2b00      	cmp	r3, #0
 800b488:	f000 80a2 	beq.w	800b5d0 <_svfiprintf_r+0x1c8>
 800b48c:	2300      	movs	r3, #0
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b492:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b496:	f10a 0a01 	add.w	sl, sl, #1
 800b49a:	9304      	str	r3, [sp, #16]
 800b49c:	9307      	str	r3, [sp, #28]
 800b49e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4a2:	931a      	str	r3, [sp, #104]	; 0x68
 800b4a4:	4654      	mov	r4, sl
 800b4a6:	2205      	movs	r2, #5
 800b4a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ac:	4851      	ldr	r0, [pc, #324]	; (800b5f4 <_svfiprintf_r+0x1ec>)
 800b4ae:	f7f4 fe9f 	bl	80001f0 <memchr>
 800b4b2:	9a04      	ldr	r2, [sp, #16]
 800b4b4:	b9d8      	cbnz	r0, 800b4ee <_svfiprintf_r+0xe6>
 800b4b6:	06d0      	lsls	r0, r2, #27
 800b4b8:	bf44      	itt	mi
 800b4ba:	2320      	movmi	r3, #32
 800b4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4c0:	0711      	lsls	r1, r2, #28
 800b4c2:	bf44      	itt	mi
 800b4c4:	232b      	movmi	r3, #43	; 0x2b
 800b4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b4d0:	d015      	beq.n	800b4fe <_svfiprintf_r+0xf6>
 800b4d2:	9a07      	ldr	r2, [sp, #28]
 800b4d4:	4654      	mov	r4, sl
 800b4d6:	2000      	movs	r0, #0
 800b4d8:	f04f 0c0a 	mov.w	ip, #10
 800b4dc:	4621      	mov	r1, r4
 800b4de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4e2:	3b30      	subs	r3, #48	; 0x30
 800b4e4:	2b09      	cmp	r3, #9
 800b4e6:	d94e      	bls.n	800b586 <_svfiprintf_r+0x17e>
 800b4e8:	b1b0      	cbz	r0, 800b518 <_svfiprintf_r+0x110>
 800b4ea:	9207      	str	r2, [sp, #28]
 800b4ec:	e014      	b.n	800b518 <_svfiprintf_r+0x110>
 800b4ee:	eba0 0308 	sub.w	r3, r0, r8
 800b4f2:	fa09 f303 	lsl.w	r3, r9, r3
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	9304      	str	r3, [sp, #16]
 800b4fa:	46a2      	mov	sl, r4
 800b4fc:	e7d2      	b.n	800b4a4 <_svfiprintf_r+0x9c>
 800b4fe:	9b03      	ldr	r3, [sp, #12]
 800b500:	1d19      	adds	r1, r3, #4
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	9103      	str	r1, [sp, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	bfbb      	ittet	lt
 800b50a:	425b      	neglt	r3, r3
 800b50c:	f042 0202 	orrlt.w	r2, r2, #2
 800b510:	9307      	strge	r3, [sp, #28]
 800b512:	9307      	strlt	r3, [sp, #28]
 800b514:	bfb8      	it	lt
 800b516:	9204      	strlt	r2, [sp, #16]
 800b518:	7823      	ldrb	r3, [r4, #0]
 800b51a:	2b2e      	cmp	r3, #46	; 0x2e
 800b51c:	d10c      	bne.n	800b538 <_svfiprintf_r+0x130>
 800b51e:	7863      	ldrb	r3, [r4, #1]
 800b520:	2b2a      	cmp	r3, #42	; 0x2a
 800b522:	d135      	bne.n	800b590 <_svfiprintf_r+0x188>
 800b524:	9b03      	ldr	r3, [sp, #12]
 800b526:	1d1a      	adds	r2, r3, #4
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	9203      	str	r2, [sp, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	bfb8      	it	lt
 800b530:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b534:	3402      	adds	r4, #2
 800b536:	9305      	str	r3, [sp, #20]
 800b538:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b604 <_svfiprintf_r+0x1fc>
 800b53c:	7821      	ldrb	r1, [r4, #0]
 800b53e:	2203      	movs	r2, #3
 800b540:	4650      	mov	r0, sl
 800b542:	f7f4 fe55 	bl	80001f0 <memchr>
 800b546:	b140      	cbz	r0, 800b55a <_svfiprintf_r+0x152>
 800b548:	2340      	movs	r3, #64	; 0x40
 800b54a:	eba0 000a 	sub.w	r0, r0, sl
 800b54e:	fa03 f000 	lsl.w	r0, r3, r0
 800b552:	9b04      	ldr	r3, [sp, #16]
 800b554:	4303      	orrs	r3, r0
 800b556:	3401      	adds	r4, #1
 800b558:	9304      	str	r3, [sp, #16]
 800b55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b55e:	4826      	ldr	r0, [pc, #152]	; (800b5f8 <_svfiprintf_r+0x1f0>)
 800b560:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b564:	2206      	movs	r2, #6
 800b566:	f7f4 fe43 	bl	80001f0 <memchr>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	d038      	beq.n	800b5e0 <_svfiprintf_r+0x1d8>
 800b56e:	4b23      	ldr	r3, [pc, #140]	; (800b5fc <_svfiprintf_r+0x1f4>)
 800b570:	bb1b      	cbnz	r3, 800b5ba <_svfiprintf_r+0x1b2>
 800b572:	9b03      	ldr	r3, [sp, #12]
 800b574:	3307      	adds	r3, #7
 800b576:	f023 0307 	bic.w	r3, r3, #7
 800b57a:	3308      	adds	r3, #8
 800b57c:	9303      	str	r3, [sp, #12]
 800b57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b580:	4433      	add	r3, r6
 800b582:	9309      	str	r3, [sp, #36]	; 0x24
 800b584:	e767      	b.n	800b456 <_svfiprintf_r+0x4e>
 800b586:	fb0c 3202 	mla	r2, ip, r2, r3
 800b58a:	460c      	mov	r4, r1
 800b58c:	2001      	movs	r0, #1
 800b58e:	e7a5      	b.n	800b4dc <_svfiprintf_r+0xd4>
 800b590:	2300      	movs	r3, #0
 800b592:	3401      	adds	r4, #1
 800b594:	9305      	str	r3, [sp, #20]
 800b596:	4619      	mov	r1, r3
 800b598:	f04f 0c0a 	mov.w	ip, #10
 800b59c:	4620      	mov	r0, r4
 800b59e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a2:	3a30      	subs	r2, #48	; 0x30
 800b5a4:	2a09      	cmp	r2, #9
 800b5a6:	d903      	bls.n	800b5b0 <_svfiprintf_r+0x1a8>
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d0c5      	beq.n	800b538 <_svfiprintf_r+0x130>
 800b5ac:	9105      	str	r1, [sp, #20]
 800b5ae:	e7c3      	b.n	800b538 <_svfiprintf_r+0x130>
 800b5b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e7f0      	b.n	800b59c <_svfiprintf_r+0x194>
 800b5ba:	ab03      	add	r3, sp, #12
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	462a      	mov	r2, r5
 800b5c0:	4b0f      	ldr	r3, [pc, #60]	; (800b600 <_svfiprintf_r+0x1f8>)
 800b5c2:	a904      	add	r1, sp, #16
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f7fe f81d 	bl	8009604 <_printf_float>
 800b5ca:	1c42      	adds	r2, r0, #1
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	d1d6      	bne.n	800b57e <_svfiprintf_r+0x176>
 800b5d0:	89ab      	ldrh	r3, [r5, #12]
 800b5d2:	065b      	lsls	r3, r3, #25
 800b5d4:	f53f af2c 	bmi.w	800b430 <_svfiprintf_r+0x28>
 800b5d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5da:	b01d      	add	sp, #116	; 0x74
 800b5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e0:	ab03      	add	r3, sp, #12
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	462a      	mov	r2, r5
 800b5e6:	4b06      	ldr	r3, [pc, #24]	; (800b600 <_svfiprintf_r+0x1f8>)
 800b5e8:	a904      	add	r1, sp, #16
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	f7fe faae 	bl	8009b4c <_printf_i>
 800b5f0:	e7eb      	b.n	800b5ca <_svfiprintf_r+0x1c2>
 800b5f2:	bf00      	nop
 800b5f4:	0800e204 	.word	0x0800e204
 800b5f8:	0800e20e 	.word	0x0800e20e
 800b5fc:	08009605 	.word	0x08009605
 800b600:	0800b351 	.word	0x0800b351
 800b604:	0800e20a 	.word	0x0800e20a

0800b608 <_sbrk_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	4d06      	ldr	r5, [pc, #24]	; (800b624 <_sbrk_r+0x1c>)
 800b60c:	2300      	movs	r3, #0
 800b60e:	4604      	mov	r4, r0
 800b610:	4608      	mov	r0, r1
 800b612:	602b      	str	r3, [r5, #0]
 800b614:	f7f9 fdcc 	bl	80051b0 <_sbrk>
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d102      	bne.n	800b622 <_sbrk_r+0x1a>
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	b103      	cbz	r3, 800b622 <_sbrk_r+0x1a>
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	20000924 	.word	0x20000924

0800b628 <__assert_func>:
 800b628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b62a:	4614      	mov	r4, r2
 800b62c:	461a      	mov	r2, r3
 800b62e:	4b09      	ldr	r3, [pc, #36]	; (800b654 <__assert_func+0x2c>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4605      	mov	r5, r0
 800b634:	68d8      	ldr	r0, [r3, #12]
 800b636:	b14c      	cbz	r4, 800b64c <__assert_func+0x24>
 800b638:	4b07      	ldr	r3, [pc, #28]	; (800b658 <__assert_func+0x30>)
 800b63a:	9100      	str	r1, [sp, #0]
 800b63c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b640:	4906      	ldr	r1, [pc, #24]	; (800b65c <__assert_func+0x34>)
 800b642:	462b      	mov	r3, r5
 800b644:	f000 f80e 	bl	800b664 <fiprintf>
 800b648:	f000 faa4 	bl	800bb94 <abort>
 800b64c:	4b04      	ldr	r3, [pc, #16]	; (800b660 <__assert_func+0x38>)
 800b64e:	461c      	mov	r4, r3
 800b650:	e7f3      	b.n	800b63a <__assert_func+0x12>
 800b652:	bf00      	nop
 800b654:	20000010 	.word	0x20000010
 800b658:	0800e215 	.word	0x0800e215
 800b65c:	0800e222 	.word	0x0800e222
 800b660:	0800e250 	.word	0x0800e250

0800b664 <fiprintf>:
 800b664:	b40e      	push	{r1, r2, r3}
 800b666:	b503      	push	{r0, r1, lr}
 800b668:	4601      	mov	r1, r0
 800b66a:	ab03      	add	r3, sp, #12
 800b66c:	4805      	ldr	r0, [pc, #20]	; (800b684 <fiprintf+0x20>)
 800b66e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b672:	6800      	ldr	r0, [r0, #0]
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	f000 f88f 	bl	800b798 <_vfiprintf_r>
 800b67a:	b002      	add	sp, #8
 800b67c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b680:	b003      	add	sp, #12
 800b682:	4770      	bx	lr
 800b684:	20000010 	.word	0x20000010

0800b688 <__ascii_mbtowc>:
 800b688:	b082      	sub	sp, #8
 800b68a:	b901      	cbnz	r1, 800b68e <__ascii_mbtowc+0x6>
 800b68c:	a901      	add	r1, sp, #4
 800b68e:	b142      	cbz	r2, 800b6a2 <__ascii_mbtowc+0x1a>
 800b690:	b14b      	cbz	r3, 800b6a6 <__ascii_mbtowc+0x1e>
 800b692:	7813      	ldrb	r3, [r2, #0]
 800b694:	600b      	str	r3, [r1, #0]
 800b696:	7812      	ldrb	r2, [r2, #0]
 800b698:	1e10      	subs	r0, r2, #0
 800b69a:	bf18      	it	ne
 800b69c:	2001      	movne	r0, #1
 800b69e:	b002      	add	sp, #8
 800b6a0:	4770      	bx	lr
 800b6a2:	4610      	mov	r0, r2
 800b6a4:	e7fb      	b.n	800b69e <__ascii_mbtowc+0x16>
 800b6a6:	f06f 0001 	mvn.w	r0, #1
 800b6aa:	e7f8      	b.n	800b69e <__ascii_mbtowc+0x16>

0800b6ac <memmove>:
 800b6ac:	4288      	cmp	r0, r1
 800b6ae:	b510      	push	{r4, lr}
 800b6b0:	eb01 0402 	add.w	r4, r1, r2
 800b6b4:	d902      	bls.n	800b6bc <memmove+0x10>
 800b6b6:	4284      	cmp	r4, r0
 800b6b8:	4623      	mov	r3, r4
 800b6ba:	d807      	bhi.n	800b6cc <memmove+0x20>
 800b6bc:	1e43      	subs	r3, r0, #1
 800b6be:	42a1      	cmp	r1, r4
 800b6c0:	d008      	beq.n	800b6d4 <memmove+0x28>
 800b6c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6ca:	e7f8      	b.n	800b6be <memmove+0x12>
 800b6cc:	4402      	add	r2, r0
 800b6ce:	4601      	mov	r1, r0
 800b6d0:	428a      	cmp	r2, r1
 800b6d2:	d100      	bne.n	800b6d6 <memmove+0x2a>
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6de:	e7f7      	b.n	800b6d0 <memmove+0x24>

0800b6e0 <__malloc_lock>:
 800b6e0:	4801      	ldr	r0, [pc, #4]	; (800b6e8 <__malloc_lock+0x8>)
 800b6e2:	f000 bc17 	b.w	800bf14 <__retarget_lock_acquire_recursive>
 800b6e6:	bf00      	nop
 800b6e8:	2000092c 	.word	0x2000092c

0800b6ec <__malloc_unlock>:
 800b6ec:	4801      	ldr	r0, [pc, #4]	; (800b6f4 <__malloc_unlock+0x8>)
 800b6ee:	f000 bc12 	b.w	800bf16 <__retarget_lock_release_recursive>
 800b6f2:	bf00      	nop
 800b6f4:	2000092c 	.word	0x2000092c

0800b6f8 <_realloc_r>:
 800b6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6fa:	4607      	mov	r7, r0
 800b6fc:	4614      	mov	r4, r2
 800b6fe:	460e      	mov	r6, r1
 800b700:	b921      	cbnz	r1, 800b70c <_realloc_r+0x14>
 800b702:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b706:	4611      	mov	r1, r2
 800b708:	f7ff bdc8 	b.w	800b29c <_malloc_r>
 800b70c:	b922      	cbnz	r2, 800b718 <_realloc_r+0x20>
 800b70e:	f7ff fd75 	bl	800b1fc <_free_r>
 800b712:	4625      	mov	r5, r4
 800b714:	4628      	mov	r0, r5
 800b716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b718:	f000 fc62 	bl	800bfe0 <_malloc_usable_size_r>
 800b71c:	42a0      	cmp	r0, r4
 800b71e:	d20f      	bcs.n	800b740 <_realloc_r+0x48>
 800b720:	4621      	mov	r1, r4
 800b722:	4638      	mov	r0, r7
 800b724:	f7ff fdba 	bl	800b29c <_malloc_r>
 800b728:	4605      	mov	r5, r0
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d0f2      	beq.n	800b714 <_realloc_r+0x1c>
 800b72e:	4631      	mov	r1, r6
 800b730:	4622      	mov	r2, r4
 800b732:	f7fd feb1 	bl	8009498 <memcpy>
 800b736:	4631      	mov	r1, r6
 800b738:	4638      	mov	r0, r7
 800b73a:	f7ff fd5f 	bl	800b1fc <_free_r>
 800b73e:	e7e9      	b.n	800b714 <_realloc_r+0x1c>
 800b740:	4635      	mov	r5, r6
 800b742:	e7e7      	b.n	800b714 <_realloc_r+0x1c>

0800b744 <__sfputc_r>:
 800b744:	6893      	ldr	r3, [r2, #8]
 800b746:	3b01      	subs	r3, #1
 800b748:	2b00      	cmp	r3, #0
 800b74a:	b410      	push	{r4}
 800b74c:	6093      	str	r3, [r2, #8]
 800b74e:	da08      	bge.n	800b762 <__sfputc_r+0x1e>
 800b750:	6994      	ldr	r4, [r2, #24]
 800b752:	42a3      	cmp	r3, r4
 800b754:	db01      	blt.n	800b75a <__sfputc_r+0x16>
 800b756:	290a      	cmp	r1, #10
 800b758:	d103      	bne.n	800b762 <__sfputc_r+0x1e>
 800b75a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b75e:	f000 b94b 	b.w	800b9f8 <__swbuf_r>
 800b762:	6813      	ldr	r3, [r2, #0]
 800b764:	1c58      	adds	r0, r3, #1
 800b766:	6010      	str	r0, [r2, #0]
 800b768:	7019      	strb	r1, [r3, #0]
 800b76a:	4608      	mov	r0, r1
 800b76c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <__sfputs_r>:
 800b772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b774:	4606      	mov	r6, r0
 800b776:	460f      	mov	r7, r1
 800b778:	4614      	mov	r4, r2
 800b77a:	18d5      	adds	r5, r2, r3
 800b77c:	42ac      	cmp	r4, r5
 800b77e:	d101      	bne.n	800b784 <__sfputs_r+0x12>
 800b780:	2000      	movs	r0, #0
 800b782:	e007      	b.n	800b794 <__sfputs_r+0x22>
 800b784:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b788:	463a      	mov	r2, r7
 800b78a:	4630      	mov	r0, r6
 800b78c:	f7ff ffda 	bl	800b744 <__sfputc_r>
 800b790:	1c43      	adds	r3, r0, #1
 800b792:	d1f3      	bne.n	800b77c <__sfputs_r+0xa>
 800b794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b798 <_vfiprintf_r>:
 800b798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b79c:	460d      	mov	r5, r1
 800b79e:	b09d      	sub	sp, #116	; 0x74
 800b7a0:	4614      	mov	r4, r2
 800b7a2:	4698      	mov	r8, r3
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	b118      	cbz	r0, 800b7b0 <_vfiprintf_r+0x18>
 800b7a8:	6983      	ldr	r3, [r0, #24]
 800b7aa:	b90b      	cbnz	r3, 800b7b0 <_vfiprintf_r+0x18>
 800b7ac:	f000 fb14 	bl	800bdd8 <__sinit>
 800b7b0:	4b89      	ldr	r3, [pc, #548]	; (800b9d8 <_vfiprintf_r+0x240>)
 800b7b2:	429d      	cmp	r5, r3
 800b7b4:	d11b      	bne.n	800b7ee <_vfiprintf_r+0x56>
 800b7b6:	6875      	ldr	r5, [r6, #4]
 800b7b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7ba:	07d9      	lsls	r1, r3, #31
 800b7bc:	d405      	bmi.n	800b7ca <_vfiprintf_r+0x32>
 800b7be:	89ab      	ldrh	r3, [r5, #12]
 800b7c0:	059a      	lsls	r2, r3, #22
 800b7c2:	d402      	bmi.n	800b7ca <_vfiprintf_r+0x32>
 800b7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7c6:	f000 fba5 	bl	800bf14 <__retarget_lock_acquire_recursive>
 800b7ca:	89ab      	ldrh	r3, [r5, #12]
 800b7cc:	071b      	lsls	r3, r3, #28
 800b7ce:	d501      	bpl.n	800b7d4 <_vfiprintf_r+0x3c>
 800b7d0:	692b      	ldr	r3, [r5, #16]
 800b7d2:	b9eb      	cbnz	r3, 800b810 <_vfiprintf_r+0x78>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f000 f96e 	bl	800bab8 <__swsetup_r>
 800b7dc:	b1c0      	cbz	r0, 800b810 <_vfiprintf_r+0x78>
 800b7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7e0:	07dc      	lsls	r4, r3, #31
 800b7e2:	d50e      	bpl.n	800b802 <_vfiprintf_r+0x6a>
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7e8:	b01d      	add	sp, #116	; 0x74
 800b7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ee:	4b7b      	ldr	r3, [pc, #492]	; (800b9dc <_vfiprintf_r+0x244>)
 800b7f0:	429d      	cmp	r5, r3
 800b7f2:	d101      	bne.n	800b7f8 <_vfiprintf_r+0x60>
 800b7f4:	68b5      	ldr	r5, [r6, #8]
 800b7f6:	e7df      	b.n	800b7b8 <_vfiprintf_r+0x20>
 800b7f8:	4b79      	ldr	r3, [pc, #484]	; (800b9e0 <_vfiprintf_r+0x248>)
 800b7fa:	429d      	cmp	r5, r3
 800b7fc:	bf08      	it	eq
 800b7fe:	68f5      	ldreq	r5, [r6, #12]
 800b800:	e7da      	b.n	800b7b8 <_vfiprintf_r+0x20>
 800b802:	89ab      	ldrh	r3, [r5, #12]
 800b804:	0598      	lsls	r0, r3, #22
 800b806:	d4ed      	bmi.n	800b7e4 <_vfiprintf_r+0x4c>
 800b808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b80a:	f000 fb84 	bl	800bf16 <__retarget_lock_release_recursive>
 800b80e:	e7e9      	b.n	800b7e4 <_vfiprintf_r+0x4c>
 800b810:	2300      	movs	r3, #0
 800b812:	9309      	str	r3, [sp, #36]	; 0x24
 800b814:	2320      	movs	r3, #32
 800b816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b81a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b81e:	2330      	movs	r3, #48	; 0x30
 800b820:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9e4 <_vfiprintf_r+0x24c>
 800b824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b828:	f04f 0901 	mov.w	r9, #1
 800b82c:	4623      	mov	r3, r4
 800b82e:	469a      	mov	sl, r3
 800b830:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b834:	b10a      	cbz	r2, 800b83a <_vfiprintf_r+0xa2>
 800b836:	2a25      	cmp	r2, #37	; 0x25
 800b838:	d1f9      	bne.n	800b82e <_vfiprintf_r+0x96>
 800b83a:	ebba 0b04 	subs.w	fp, sl, r4
 800b83e:	d00b      	beq.n	800b858 <_vfiprintf_r+0xc0>
 800b840:	465b      	mov	r3, fp
 800b842:	4622      	mov	r2, r4
 800b844:	4629      	mov	r1, r5
 800b846:	4630      	mov	r0, r6
 800b848:	f7ff ff93 	bl	800b772 <__sfputs_r>
 800b84c:	3001      	adds	r0, #1
 800b84e:	f000 80aa 	beq.w	800b9a6 <_vfiprintf_r+0x20e>
 800b852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b854:	445a      	add	r2, fp
 800b856:	9209      	str	r2, [sp, #36]	; 0x24
 800b858:	f89a 3000 	ldrb.w	r3, [sl]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 80a2 	beq.w	800b9a6 <_vfiprintf_r+0x20e>
 800b862:	2300      	movs	r3, #0
 800b864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b86c:	f10a 0a01 	add.w	sl, sl, #1
 800b870:	9304      	str	r3, [sp, #16]
 800b872:	9307      	str	r3, [sp, #28]
 800b874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b878:	931a      	str	r3, [sp, #104]	; 0x68
 800b87a:	4654      	mov	r4, sl
 800b87c:	2205      	movs	r2, #5
 800b87e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b882:	4858      	ldr	r0, [pc, #352]	; (800b9e4 <_vfiprintf_r+0x24c>)
 800b884:	f7f4 fcb4 	bl	80001f0 <memchr>
 800b888:	9a04      	ldr	r2, [sp, #16]
 800b88a:	b9d8      	cbnz	r0, 800b8c4 <_vfiprintf_r+0x12c>
 800b88c:	06d1      	lsls	r1, r2, #27
 800b88e:	bf44      	itt	mi
 800b890:	2320      	movmi	r3, #32
 800b892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b896:	0713      	lsls	r3, r2, #28
 800b898:	bf44      	itt	mi
 800b89a:	232b      	movmi	r3, #43	; 0x2b
 800b89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a4:	2b2a      	cmp	r3, #42	; 0x2a
 800b8a6:	d015      	beq.n	800b8d4 <_vfiprintf_r+0x13c>
 800b8a8:	9a07      	ldr	r2, [sp, #28]
 800b8aa:	4654      	mov	r4, sl
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	f04f 0c0a 	mov.w	ip, #10
 800b8b2:	4621      	mov	r1, r4
 800b8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8b8:	3b30      	subs	r3, #48	; 0x30
 800b8ba:	2b09      	cmp	r3, #9
 800b8bc:	d94e      	bls.n	800b95c <_vfiprintf_r+0x1c4>
 800b8be:	b1b0      	cbz	r0, 800b8ee <_vfiprintf_r+0x156>
 800b8c0:	9207      	str	r2, [sp, #28]
 800b8c2:	e014      	b.n	800b8ee <_vfiprintf_r+0x156>
 800b8c4:	eba0 0308 	sub.w	r3, r0, r8
 800b8c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	9304      	str	r3, [sp, #16]
 800b8d0:	46a2      	mov	sl, r4
 800b8d2:	e7d2      	b.n	800b87a <_vfiprintf_r+0xe2>
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	1d19      	adds	r1, r3, #4
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	9103      	str	r1, [sp, #12]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	bfbb      	ittet	lt
 800b8e0:	425b      	neglt	r3, r3
 800b8e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b8e6:	9307      	strge	r3, [sp, #28]
 800b8e8:	9307      	strlt	r3, [sp, #28]
 800b8ea:	bfb8      	it	lt
 800b8ec:	9204      	strlt	r2, [sp, #16]
 800b8ee:	7823      	ldrb	r3, [r4, #0]
 800b8f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b8f2:	d10c      	bne.n	800b90e <_vfiprintf_r+0x176>
 800b8f4:	7863      	ldrb	r3, [r4, #1]
 800b8f6:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f8:	d135      	bne.n	800b966 <_vfiprintf_r+0x1ce>
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	1d1a      	adds	r2, r3, #4
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	9203      	str	r2, [sp, #12]
 800b902:	2b00      	cmp	r3, #0
 800b904:	bfb8      	it	lt
 800b906:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b90a:	3402      	adds	r4, #2
 800b90c:	9305      	str	r3, [sp, #20]
 800b90e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9f4 <_vfiprintf_r+0x25c>
 800b912:	7821      	ldrb	r1, [r4, #0]
 800b914:	2203      	movs	r2, #3
 800b916:	4650      	mov	r0, sl
 800b918:	f7f4 fc6a 	bl	80001f0 <memchr>
 800b91c:	b140      	cbz	r0, 800b930 <_vfiprintf_r+0x198>
 800b91e:	2340      	movs	r3, #64	; 0x40
 800b920:	eba0 000a 	sub.w	r0, r0, sl
 800b924:	fa03 f000 	lsl.w	r0, r3, r0
 800b928:	9b04      	ldr	r3, [sp, #16]
 800b92a:	4303      	orrs	r3, r0
 800b92c:	3401      	adds	r4, #1
 800b92e:	9304      	str	r3, [sp, #16]
 800b930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b934:	482c      	ldr	r0, [pc, #176]	; (800b9e8 <_vfiprintf_r+0x250>)
 800b936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b93a:	2206      	movs	r2, #6
 800b93c:	f7f4 fc58 	bl	80001f0 <memchr>
 800b940:	2800      	cmp	r0, #0
 800b942:	d03f      	beq.n	800b9c4 <_vfiprintf_r+0x22c>
 800b944:	4b29      	ldr	r3, [pc, #164]	; (800b9ec <_vfiprintf_r+0x254>)
 800b946:	bb1b      	cbnz	r3, 800b990 <_vfiprintf_r+0x1f8>
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	3307      	adds	r3, #7
 800b94c:	f023 0307 	bic.w	r3, r3, #7
 800b950:	3308      	adds	r3, #8
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b956:	443b      	add	r3, r7
 800b958:	9309      	str	r3, [sp, #36]	; 0x24
 800b95a:	e767      	b.n	800b82c <_vfiprintf_r+0x94>
 800b95c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b960:	460c      	mov	r4, r1
 800b962:	2001      	movs	r0, #1
 800b964:	e7a5      	b.n	800b8b2 <_vfiprintf_r+0x11a>
 800b966:	2300      	movs	r3, #0
 800b968:	3401      	adds	r4, #1
 800b96a:	9305      	str	r3, [sp, #20]
 800b96c:	4619      	mov	r1, r3
 800b96e:	f04f 0c0a 	mov.w	ip, #10
 800b972:	4620      	mov	r0, r4
 800b974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b978:	3a30      	subs	r2, #48	; 0x30
 800b97a:	2a09      	cmp	r2, #9
 800b97c:	d903      	bls.n	800b986 <_vfiprintf_r+0x1ee>
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d0c5      	beq.n	800b90e <_vfiprintf_r+0x176>
 800b982:	9105      	str	r1, [sp, #20]
 800b984:	e7c3      	b.n	800b90e <_vfiprintf_r+0x176>
 800b986:	fb0c 2101 	mla	r1, ip, r1, r2
 800b98a:	4604      	mov	r4, r0
 800b98c:	2301      	movs	r3, #1
 800b98e:	e7f0      	b.n	800b972 <_vfiprintf_r+0x1da>
 800b990:	ab03      	add	r3, sp, #12
 800b992:	9300      	str	r3, [sp, #0]
 800b994:	462a      	mov	r2, r5
 800b996:	4b16      	ldr	r3, [pc, #88]	; (800b9f0 <_vfiprintf_r+0x258>)
 800b998:	a904      	add	r1, sp, #16
 800b99a:	4630      	mov	r0, r6
 800b99c:	f7fd fe32 	bl	8009604 <_printf_float>
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	1c78      	adds	r0, r7, #1
 800b9a4:	d1d6      	bne.n	800b954 <_vfiprintf_r+0x1bc>
 800b9a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9a8:	07d9      	lsls	r1, r3, #31
 800b9aa:	d405      	bmi.n	800b9b8 <_vfiprintf_r+0x220>
 800b9ac:	89ab      	ldrh	r3, [r5, #12]
 800b9ae:	059a      	lsls	r2, r3, #22
 800b9b0:	d402      	bmi.n	800b9b8 <_vfiprintf_r+0x220>
 800b9b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9b4:	f000 faaf 	bl	800bf16 <__retarget_lock_release_recursive>
 800b9b8:	89ab      	ldrh	r3, [r5, #12]
 800b9ba:	065b      	lsls	r3, r3, #25
 800b9bc:	f53f af12 	bmi.w	800b7e4 <_vfiprintf_r+0x4c>
 800b9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9c2:	e711      	b.n	800b7e8 <_vfiprintf_r+0x50>
 800b9c4:	ab03      	add	r3, sp, #12
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	462a      	mov	r2, r5
 800b9ca:	4b09      	ldr	r3, [pc, #36]	; (800b9f0 <_vfiprintf_r+0x258>)
 800b9cc:	a904      	add	r1, sp, #16
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	f7fe f8bc 	bl	8009b4c <_printf_i>
 800b9d4:	e7e4      	b.n	800b9a0 <_vfiprintf_r+0x208>
 800b9d6:	bf00      	nop
 800b9d8:	0800e37c 	.word	0x0800e37c
 800b9dc:	0800e39c 	.word	0x0800e39c
 800b9e0:	0800e35c 	.word	0x0800e35c
 800b9e4:	0800e204 	.word	0x0800e204
 800b9e8:	0800e20e 	.word	0x0800e20e
 800b9ec:	08009605 	.word	0x08009605
 800b9f0:	0800b773 	.word	0x0800b773
 800b9f4:	0800e20a 	.word	0x0800e20a

0800b9f8 <__swbuf_r>:
 800b9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fa:	460e      	mov	r6, r1
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	4605      	mov	r5, r0
 800ba00:	b118      	cbz	r0, 800ba0a <__swbuf_r+0x12>
 800ba02:	6983      	ldr	r3, [r0, #24]
 800ba04:	b90b      	cbnz	r3, 800ba0a <__swbuf_r+0x12>
 800ba06:	f000 f9e7 	bl	800bdd8 <__sinit>
 800ba0a:	4b21      	ldr	r3, [pc, #132]	; (800ba90 <__swbuf_r+0x98>)
 800ba0c:	429c      	cmp	r4, r3
 800ba0e:	d12b      	bne.n	800ba68 <__swbuf_r+0x70>
 800ba10:	686c      	ldr	r4, [r5, #4]
 800ba12:	69a3      	ldr	r3, [r4, #24]
 800ba14:	60a3      	str	r3, [r4, #8]
 800ba16:	89a3      	ldrh	r3, [r4, #12]
 800ba18:	071a      	lsls	r2, r3, #28
 800ba1a:	d52f      	bpl.n	800ba7c <__swbuf_r+0x84>
 800ba1c:	6923      	ldr	r3, [r4, #16]
 800ba1e:	b36b      	cbz	r3, 800ba7c <__swbuf_r+0x84>
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	6820      	ldr	r0, [r4, #0]
 800ba24:	1ac0      	subs	r0, r0, r3
 800ba26:	6963      	ldr	r3, [r4, #20]
 800ba28:	b2f6      	uxtb	r6, r6
 800ba2a:	4283      	cmp	r3, r0
 800ba2c:	4637      	mov	r7, r6
 800ba2e:	dc04      	bgt.n	800ba3a <__swbuf_r+0x42>
 800ba30:	4621      	mov	r1, r4
 800ba32:	4628      	mov	r0, r5
 800ba34:	f000 f93c 	bl	800bcb0 <_fflush_r>
 800ba38:	bb30      	cbnz	r0, 800ba88 <__swbuf_r+0x90>
 800ba3a:	68a3      	ldr	r3, [r4, #8]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	60a3      	str	r3, [r4, #8]
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	6022      	str	r2, [r4, #0]
 800ba46:	701e      	strb	r6, [r3, #0]
 800ba48:	6963      	ldr	r3, [r4, #20]
 800ba4a:	3001      	adds	r0, #1
 800ba4c:	4283      	cmp	r3, r0
 800ba4e:	d004      	beq.n	800ba5a <__swbuf_r+0x62>
 800ba50:	89a3      	ldrh	r3, [r4, #12]
 800ba52:	07db      	lsls	r3, r3, #31
 800ba54:	d506      	bpl.n	800ba64 <__swbuf_r+0x6c>
 800ba56:	2e0a      	cmp	r6, #10
 800ba58:	d104      	bne.n	800ba64 <__swbuf_r+0x6c>
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f000 f927 	bl	800bcb0 <_fflush_r>
 800ba62:	b988      	cbnz	r0, 800ba88 <__swbuf_r+0x90>
 800ba64:	4638      	mov	r0, r7
 800ba66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba68:	4b0a      	ldr	r3, [pc, #40]	; (800ba94 <__swbuf_r+0x9c>)
 800ba6a:	429c      	cmp	r4, r3
 800ba6c:	d101      	bne.n	800ba72 <__swbuf_r+0x7a>
 800ba6e:	68ac      	ldr	r4, [r5, #8]
 800ba70:	e7cf      	b.n	800ba12 <__swbuf_r+0x1a>
 800ba72:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <__swbuf_r+0xa0>)
 800ba74:	429c      	cmp	r4, r3
 800ba76:	bf08      	it	eq
 800ba78:	68ec      	ldreq	r4, [r5, #12]
 800ba7a:	e7ca      	b.n	800ba12 <__swbuf_r+0x1a>
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f000 f81a 	bl	800bab8 <__swsetup_r>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	d0cb      	beq.n	800ba20 <__swbuf_r+0x28>
 800ba88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ba8c:	e7ea      	b.n	800ba64 <__swbuf_r+0x6c>
 800ba8e:	bf00      	nop
 800ba90:	0800e37c 	.word	0x0800e37c
 800ba94:	0800e39c 	.word	0x0800e39c
 800ba98:	0800e35c 	.word	0x0800e35c

0800ba9c <__ascii_wctomb>:
 800ba9c:	b149      	cbz	r1, 800bab2 <__ascii_wctomb+0x16>
 800ba9e:	2aff      	cmp	r2, #255	; 0xff
 800baa0:	bf85      	ittet	hi
 800baa2:	238a      	movhi	r3, #138	; 0x8a
 800baa4:	6003      	strhi	r3, [r0, #0]
 800baa6:	700a      	strbls	r2, [r1, #0]
 800baa8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800baac:	bf98      	it	ls
 800baae:	2001      	movls	r0, #1
 800bab0:	4770      	bx	lr
 800bab2:	4608      	mov	r0, r1
 800bab4:	4770      	bx	lr
	...

0800bab8 <__swsetup_r>:
 800bab8:	4b32      	ldr	r3, [pc, #200]	; (800bb84 <__swsetup_r+0xcc>)
 800baba:	b570      	push	{r4, r5, r6, lr}
 800babc:	681d      	ldr	r5, [r3, #0]
 800babe:	4606      	mov	r6, r0
 800bac0:	460c      	mov	r4, r1
 800bac2:	b125      	cbz	r5, 800bace <__swsetup_r+0x16>
 800bac4:	69ab      	ldr	r3, [r5, #24]
 800bac6:	b913      	cbnz	r3, 800bace <__swsetup_r+0x16>
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 f985 	bl	800bdd8 <__sinit>
 800bace:	4b2e      	ldr	r3, [pc, #184]	; (800bb88 <__swsetup_r+0xd0>)
 800bad0:	429c      	cmp	r4, r3
 800bad2:	d10f      	bne.n	800baf4 <__swsetup_r+0x3c>
 800bad4:	686c      	ldr	r4, [r5, #4]
 800bad6:	89a3      	ldrh	r3, [r4, #12]
 800bad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800badc:	0719      	lsls	r1, r3, #28
 800bade:	d42c      	bmi.n	800bb3a <__swsetup_r+0x82>
 800bae0:	06dd      	lsls	r5, r3, #27
 800bae2:	d411      	bmi.n	800bb08 <__swsetup_r+0x50>
 800bae4:	2309      	movs	r3, #9
 800bae6:	6033      	str	r3, [r6, #0]
 800bae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800baec:	81a3      	strh	r3, [r4, #12]
 800baee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baf2:	e03e      	b.n	800bb72 <__swsetup_r+0xba>
 800baf4:	4b25      	ldr	r3, [pc, #148]	; (800bb8c <__swsetup_r+0xd4>)
 800baf6:	429c      	cmp	r4, r3
 800baf8:	d101      	bne.n	800bafe <__swsetup_r+0x46>
 800bafa:	68ac      	ldr	r4, [r5, #8]
 800bafc:	e7eb      	b.n	800bad6 <__swsetup_r+0x1e>
 800bafe:	4b24      	ldr	r3, [pc, #144]	; (800bb90 <__swsetup_r+0xd8>)
 800bb00:	429c      	cmp	r4, r3
 800bb02:	bf08      	it	eq
 800bb04:	68ec      	ldreq	r4, [r5, #12]
 800bb06:	e7e6      	b.n	800bad6 <__swsetup_r+0x1e>
 800bb08:	0758      	lsls	r0, r3, #29
 800bb0a:	d512      	bpl.n	800bb32 <__swsetup_r+0x7a>
 800bb0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb0e:	b141      	cbz	r1, 800bb22 <__swsetup_r+0x6a>
 800bb10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb14:	4299      	cmp	r1, r3
 800bb16:	d002      	beq.n	800bb1e <__swsetup_r+0x66>
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7ff fb6f 	bl	800b1fc <_free_r>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	6363      	str	r3, [r4, #52]	; 0x34
 800bb22:	89a3      	ldrh	r3, [r4, #12]
 800bb24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb28:	81a3      	strh	r3, [r4, #12]
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	6063      	str	r3, [r4, #4]
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	f043 0308 	orr.w	r3, r3, #8
 800bb38:	81a3      	strh	r3, [r4, #12]
 800bb3a:	6923      	ldr	r3, [r4, #16]
 800bb3c:	b94b      	cbnz	r3, 800bb52 <__swsetup_r+0x9a>
 800bb3e:	89a3      	ldrh	r3, [r4, #12]
 800bb40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb48:	d003      	beq.n	800bb52 <__swsetup_r+0x9a>
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	f000 fa07 	bl	800bf60 <__smakebuf_r>
 800bb52:	89a0      	ldrh	r0, [r4, #12]
 800bb54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb58:	f010 0301 	ands.w	r3, r0, #1
 800bb5c:	d00a      	beq.n	800bb74 <__swsetup_r+0xbc>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60a3      	str	r3, [r4, #8]
 800bb62:	6963      	ldr	r3, [r4, #20]
 800bb64:	425b      	negs	r3, r3
 800bb66:	61a3      	str	r3, [r4, #24]
 800bb68:	6923      	ldr	r3, [r4, #16]
 800bb6a:	b943      	cbnz	r3, 800bb7e <__swsetup_r+0xc6>
 800bb6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb70:	d1ba      	bne.n	800bae8 <__swsetup_r+0x30>
 800bb72:	bd70      	pop	{r4, r5, r6, pc}
 800bb74:	0781      	lsls	r1, r0, #30
 800bb76:	bf58      	it	pl
 800bb78:	6963      	ldrpl	r3, [r4, #20]
 800bb7a:	60a3      	str	r3, [r4, #8]
 800bb7c:	e7f4      	b.n	800bb68 <__swsetup_r+0xb0>
 800bb7e:	2000      	movs	r0, #0
 800bb80:	e7f7      	b.n	800bb72 <__swsetup_r+0xba>
 800bb82:	bf00      	nop
 800bb84:	20000010 	.word	0x20000010
 800bb88:	0800e37c 	.word	0x0800e37c
 800bb8c:	0800e39c 	.word	0x0800e39c
 800bb90:	0800e35c 	.word	0x0800e35c

0800bb94 <abort>:
 800bb94:	b508      	push	{r3, lr}
 800bb96:	2006      	movs	r0, #6
 800bb98:	f000 fa52 	bl	800c040 <raise>
 800bb9c:	2001      	movs	r0, #1
 800bb9e:	f7f9 fa8f 	bl	80050c0 <_exit>
	...

0800bba4 <__sflush_r>:
 800bba4:	898a      	ldrh	r2, [r1, #12]
 800bba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbaa:	4605      	mov	r5, r0
 800bbac:	0710      	lsls	r0, r2, #28
 800bbae:	460c      	mov	r4, r1
 800bbb0:	d458      	bmi.n	800bc64 <__sflush_r+0xc0>
 800bbb2:	684b      	ldr	r3, [r1, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dc05      	bgt.n	800bbc4 <__sflush_r+0x20>
 800bbb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	dc02      	bgt.n	800bbc4 <__sflush_r+0x20>
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbc6:	2e00      	cmp	r6, #0
 800bbc8:	d0f9      	beq.n	800bbbe <__sflush_r+0x1a>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbd0:	682f      	ldr	r7, [r5, #0]
 800bbd2:	602b      	str	r3, [r5, #0]
 800bbd4:	d032      	beq.n	800bc3c <__sflush_r+0x98>
 800bbd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbd8:	89a3      	ldrh	r3, [r4, #12]
 800bbda:	075a      	lsls	r2, r3, #29
 800bbdc:	d505      	bpl.n	800bbea <__sflush_r+0x46>
 800bbde:	6863      	ldr	r3, [r4, #4]
 800bbe0:	1ac0      	subs	r0, r0, r3
 800bbe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbe4:	b10b      	cbz	r3, 800bbea <__sflush_r+0x46>
 800bbe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbe8:	1ac0      	subs	r0, r0, r3
 800bbea:	2300      	movs	r3, #0
 800bbec:	4602      	mov	r2, r0
 800bbee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbf0:	6a21      	ldr	r1, [r4, #32]
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	47b0      	blx	r6
 800bbf6:	1c43      	adds	r3, r0, #1
 800bbf8:	89a3      	ldrh	r3, [r4, #12]
 800bbfa:	d106      	bne.n	800bc0a <__sflush_r+0x66>
 800bbfc:	6829      	ldr	r1, [r5, #0]
 800bbfe:	291d      	cmp	r1, #29
 800bc00:	d82c      	bhi.n	800bc5c <__sflush_r+0xb8>
 800bc02:	4a2a      	ldr	r2, [pc, #168]	; (800bcac <__sflush_r+0x108>)
 800bc04:	40ca      	lsrs	r2, r1
 800bc06:	07d6      	lsls	r6, r2, #31
 800bc08:	d528      	bpl.n	800bc5c <__sflush_r+0xb8>
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	6062      	str	r2, [r4, #4]
 800bc0e:	04d9      	lsls	r1, r3, #19
 800bc10:	6922      	ldr	r2, [r4, #16]
 800bc12:	6022      	str	r2, [r4, #0]
 800bc14:	d504      	bpl.n	800bc20 <__sflush_r+0x7c>
 800bc16:	1c42      	adds	r2, r0, #1
 800bc18:	d101      	bne.n	800bc1e <__sflush_r+0x7a>
 800bc1a:	682b      	ldr	r3, [r5, #0]
 800bc1c:	b903      	cbnz	r3, 800bc20 <__sflush_r+0x7c>
 800bc1e:	6560      	str	r0, [r4, #84]	; 0x54
 800bc20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc22:	602f      	str	r7, [r5, #0]
 800bc24:	2900      	cmp	r1, #0
 800bc26:	d0ca      	beq.n	800bbbe <__sflush_r+0x1a>
 800bc28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc2c:	4299      	cmp	r1, r3
 800bc2e:	d002      	beq.n	800bc36 <__sflush_r+0x92>
 800bc30:	4628      	mov	r0, r5
 800bc32:	f7ff fae3 	bl	800b1fc <_free_r>
 800bc36:	2000      	movs	r0, #0
 800bc38:	6360      	str	r0, [r4, #52]	; 0x34
 800bc3a:	e7c1      	b.n	800bbc0 <__sflush_r+0x1c>
 800bc3c:	6a21      	ldr	r1, [r4, #32]
 800bc3e:	2301      	movs	r3, #1
 800bc40:	4628      	mov	r0, r5
 800bc42:	47b0      	blx	r6
 800bc44:	1c41      	adds	r1, r0, #1
 800bc46:	d1c7      	bne.n	800bbd8 <__sflush_r+0x34>
 800bc48:	682b      	ldr	r3, [r5, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d0c4      	beq.n	800bbd8 <__sflush_r+0x34>
 800bc4e:	2b1d      	cmp	r3, #29
 800bc50:	d001      	beq.n	800bc56 <__sflush_r+0xb2>
 800bc52:	2b16      	cmp	r3, #22
 800bc54:	d101      	bne.n	800bc5a <__sflush_r+0xb6>
 800bc56:	602f      	str	r7, [r5, #0]
 800bc58:	e7b1      	b.n	800bbbe <__sflush_r+0x1a>
 800bc5a:	89a3      	ldrh	r3, [r4, #12]
 800bc5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc60:	81a3      	strh	r3, [r4, #12]
 800bc62:	e7ad      	b.n	800bbc0 <__sflush_r+0x1c>
 800bc64:	690f      	ldr	r7, [r1, #16]
 800bc66:	2f00      	cmp	r7, #0
 800bc68:	d0a9      	beq.n	800bbbe <__sflush_r+0x1a>
 800bc6a:	0793      	lsls	r3, r2, #30
 800bc6c:	680e      	ldr	r6, [r1, #0]
 800bc6e:	bf08      	it	eq
 800bc70:	694b      	ldreq	r3, [r1, #20]
 800bc72:	600f      	str	r7, [r1, #0]
 800bc74:	bf18      	it	ne
 800bc76:	2300      	movne	r3, #0
 800bc78:	eba6 0807 	sub.w	r8, r6, r7
 800bc7c:	608b      	str	r3, [r1, #8]
 800bc7e:	f1b8 0f00 	cmp.w	r8, #0
 800bc82:	dd9c      	ble.n	800bbbe <__sflush_r+0x1a>
 800bc84:	6a21      	ldr	r1, [r4, #32]
 800bc86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc88:	4643      	mov	r3, r8
 800bc8a:	463a      	mov	r2, r7
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	47b0      	blx	r6
 800bc90:	2800      	cmp	r0, #0
 800bc92:	dc06      	bgt.n	800bca2 <__sflush_r+0xfe>
 800bc94:	89a3      	ldrh	r3, [r4, #12]
 800bc96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc9a:	81a3      	strh	r3, [r4, #12]
 800bc9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bca0:	e78e      	b.n	800bbc0 <__sflush_r+0x1c>
 800bca2:	4407      	add	r7, r0
 800bca4:	eba8 0800 	sub.w	r8, r8, r0
 800bca8:	e7e9      	b.n	800bc7e <__sflush_r+0xda>
 800bcaa:	bf00      	nop
 800bcac:	20400001 	.word	0x20400001

0800bcb0 <_fflush_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	690b      	ldr	r3, [r1, #16]
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	b913      	cbnz	r3, 800bcc0 <_fflush_r+0x10>
 800bcba:	2500      	movs	r5, #0
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	b118      	cbz	r0, 800bcca <_fflush_r+0x1a>
 800bcc2:	6983      	ldr	r3, [r0, #24]
 800bcc4:	b90b      	cbnz	r3, 800bcca <_fflush_r+0x1a>
 800bcc6:	f000 f887 	bl	800bdd8 <__sinit>
 800bcca:	4b14      	ldr	r3, [pc, #80]	; (800bd1c <_fflush_r+0x6c>)
 800bccc:	429c      	cmp	r4, r3
 800bcce:	d11b      	bne.n	800bd08 <_fflush_r+0x58>
 800bcd0:	686c      	ldr	r4, [r5, #4]
 800bcd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d0ef      	beq.n	800bcba <_fflush_r+0xa>
 800bcda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcdc:	07d0      	lsls	r0, r2, #31
 800bcde:	d404      	bmi.n	800bcea <_fflush_r+0x3a>
 800bce0:	0599      	lsls	r1, r3, #22
 800bce2:	d402      	bmi.n	800bcea <_fflush_r+0x3a>
 800bce4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bce6:	f000 f915 	bl	800bf14 <__retarget_lock_acquire_recursive>
 800bcea:	4628      	mov	r0, r5
 800bcec:	4621      	mov	r1, r4
 800bcee:	f7ff ff59 	bl	800bba4 <__sflush_r>
 800bcf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcf4:	07da      	lsls	r2, r3, #31
 800bcf6:	4605      	mov	r5, r0
 800bcf8:	d4e0      	bmi.n	800bcbc <_fflush_r+0xc>
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	059b      	lsls	r3, r3, #22
 800bcfe:	d4dd      	bmi.n	800bcbc <_fflush_r+0xc>
 800bd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd02:	f000 f908 	bl	800bf16 <__retarget_lock_release_recursive>
 800bd06:	e7d9      	b.n	800bcbc <_fflush_r+0xc>
 800bd08:	4b05      	ldr	r3, [pc, #20]	; (800bd20 <_fflush_r+0x70>)
 800bd0a:	429c      	cmp	r4, r3
 800bd0c:	d101      	bne.n	800bd12 <_fflush_r+0x62>
 800bd0e:	68ac      	ldr	r4, [r5, #8]
 800bd10:	e7df      	b.n	800bcd2 <_fflush_r+0x22>
 800bd12:	4b04      	ldr	r3, [pc, #16]	; (800bd24 <_fflush_r+0x74>)
 800bd14:	429c      	cmp	r4, r3
 800bd16:	bf08      	it	eq
 800bd18:	68ec      	ldreq	r4, [r5, #12]
 800bd1a:	e7da      	b.n	800bcd2 <_fflush_r+0x22>
 800bd1c:	0800e37c 	.word	0x0800e37c
 800bd20:	0800e39c 	.word	0x0800e39c
 800bd24:	0800e35c 	.word	0x0800e35c

0800bd28 <std>:
 800bd28:	2300      	movs	r3, #0
 800bd2a:	b510      	push	{r4, lr}
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd36:	6083      	str	r3, [r0, #8]
 800bd38:	8181      	strh	r1, [r0, #12]
 800bd3a:	6643      	str	r3, [r0, #100]	; 0x64
 800bd3c:	81c2      	strh	r2, [r0, #14]
 800bd3e:	6183      	str	r3, [r0, #24]
 800bd40:	4619      	mov	r1, r3
 800bd42:	2208      	movs	r2, #8
 800bd44:	305c      	adds	r0, #92	; 0x5c
 800bd46:	f7fd fbb5 	bl	80094b4 <memset>
 800bd4a:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <std+0x38>)
 800bd4c:	6263      	str	r3, [r4, #36]	; 0x24
 800bd4e:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <std+0x3c>)
 800bd50:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd52:	4b05      	ldr	r3, [pc, #20]	; (800bd68 <std+0x40>)
 800bd54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd56:	4b05      	ldr	r3, [pc, #20]	; (800bd6c <std+0x44>)
 800bd58:	6224      	str	r4, [r4, #32]
 800bd5a:	6323      	str	r3, [r4, #48]	; 0x30
 800bd5c:	bd10      	pop	{r4, pc}
 800bd5e:	bf00      	nop
 800bd60:	0800c079 	.word	0x0800c079
 800bd64:	0800c09b 	.word	0x0800c09b
 800bd68:	0800c0d3 	.word	0x0800c0d3
 800bd6c:	0800c0f7 	.word	0x0800c0f7

0800bd70 <_cleanup_r>:
 800bd70:	4901      	ldr	r1, [pc, #4]	; (800bd78 <_cleanup_r+0x8>)
 800bd72:	f000 b8af 	b.w	800bed4 <_fwalk_reent>
 800bd76:	bf00      	nop
 800bd78:	0800bcb1 	.word	0x0800bcb1

0800bd7c <__sfmoreglue>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	1e4a      	subs	r2, r1, #1
 800bd80:	2568      	movs	r5, #104	; 0x68
 800bd82:	4355      	muls	r5, r2
 800bd84:	460e      	mov	r6, r1
 800bd86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd8a:	f7ff fa87 	bl	800b29c <_malloc_r>
 800bd8e:	4604      	mov	r4, r0
 800bd90:	b140      	cbz	r0, 800bda4 <__sfmoreglue+0x28>
 800bd92:	2100      	movs	r1, #0
 800bd94:	e9c0 1600 	strd	r1, r6, [r0]
 800bd98:	300c      	adds	r0, #12
 800bd9a:	60a0      	str	r0, [r4, #8]
 800bd9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bda0:	f7fd fb88 	bl	80094b4 <memset>
 800bda4:	4620      	mov	r0, r4
 800bda6:	bd70      	pop	{r4, r5, r6, pc}

0800bda8 <__sfp_lock_acquire>:
 800bda8:	4801      	ldr	r0, [pc, #4]	; (800bdb0 <__sfp_lock_acquire+0x8>)
 800bdaa:	f000 b8b3 	b.w	800bf14 <__retarget_lock_acquire_recursive>
 800bdae:	bf00      	nop
 800bdb0:	20000930 	.word	0x20000930

0800bdb4 <__sfp_lock_release>:
 800bdb4:	4801      	ldr	r0, [pc, #4]	; (800bdbc <__sfp_lock_release+0x8>)
 800bdb6:	f000 b8ae 	b.w	800bf16 <__retarget_lock_release_recursive>
 800bdba:	bf00      	nop
 800bdbc:	20000930 	.word	0x20000930

0800bdc0 <__sinit_lock_acquire>:
 800bdc0:	4801      	ldr	r0, [pc, #4]	; (800bdc8 <__sinit_lock_acquire+0x8>)
 800bdc2:	f000 b8a7 	b.w	800bf14 <__retarget_lock_acquire_recursive>
 800bdc6:	bf00      	nop
 800bdc8:	2000092b 	.word	0x2000092b

0800bdcc <__sinit_lock_release>:
 800bdcc:	4801      	ldr	r0, [pc, #4]	; (800bdd4 <__sinit_lock_release+0x8>)
 800bdce:	f000 b8a2 	b.w	800bf16 <__retarget_lock_release_recursive>
 800bdd2:	bf00      	nop
 800bdd4:	2000092b 	.word	0x2000092b

0800bdd8 <__sinit>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	4604      	mov	r4, r0
 800bddc:	f7ff fff0 	bl	800bdc0 <__sinit_lock_acquire>
 800bde0:	69a3      	ldr	r3, [r4, #24]
 800bde2:	b11b      	cbz	r3, 800bdec <__sinit+0x14>
 800bde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde8:	f7ff bff0 	b.w	800bdcc <__sinit_lock_release>
 800bdec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bdf0:	6523      	str	r3, [r4, #80]	; 0x50
 800bdf2:	4b13      	ldr	r3, [pc, #76]	; (800be40 <__sinit+0x68>)
 800bdf4:	4a13      	ldr	r2, [pc, #76]	; (800be44 <__sinit+0x6c>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	62a2      	str	r2, [r4, #40]	; 0x28
 800bdfa:	42a3      	cmp	r3, r4
 800bdfc:	bf04      	itt	eq
 800bdfe:	2301      	moveq	r3, #1
 800be00:	61a3      	streq	r3, [r4, #24]
 800be02:	4620      	mov	r0, r4
 800be04:	f000 f820 	bl	800be48 <__sfp>
 800be08:	6060      	str	r0, [r4, #4]
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 f81c 	bl	800be48 <__sfp>
 800be10:	60a0      	str	r0, [r4, #8]
 800be12:	4620      	mov	r0, r4
 800be14:	f000 f818 	bl	800be48 <__sfp>
 800be18:	2200      	movs	r2, #0
 800be1a:	60e0      	str	r0, [r4, #12]
 800be1c:	2104      	movs	r1, #4
 800be1e:	6860      	ldr	r0, [r4, #4]
 800be20:	f7ff ff82 	bl	800bd28 <std>
 800be24:	68a0      	ldr	r0, [r4, #8]
 800be26:	2201      	movs	r2, #1
 800be28:	2109      	movs	r1, #9
 800be2a:	f7ff ff7d 	bl	800bd28 <std>
 800be2e:	68e0      	ldr	r0, [r4, #12]
 800be30:	2202      	movs	r2, #2
 800be32:	2112      	movs	r1, #18
 800be34:	f7ff ff78 	bl	800bd28 <std>
 800be38:	2301      	movs	r3, #1
 800be3a:	61a3      	str	r3, [r4, #24]
 800be3c:	e7d2      	b.n	800bde4 <__sinit+0xc>
 800be3e:	bf00      	nop
 800be40:	0800dfd8 	.word	0x0800dfd8
 800be44:	0800bd71 	.word	0x0800bd71

0800be48 <__sfp>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	4607      	mov	r7, r0
 800be4c:	f7ff ffac 	bl	800bda8 <__sfp_lock_acquire>
 800be50:	4b1e      	ldr	r3, [pc, #120]	; (800becc <__sfp+0x84>)
 800be52:	681e      	ldr	r6, [r3, #0]
 800be54:	69b3      	ldr	r3, [r6, #24]
 800be56:	b913      	cbnz	r3, 800be5e <__sfp+0x16>
 800be58:	4630      	mov	r0, r6
 800be5a:	f7ff ffbd 	bl	800bdd8 <__sinit>
 800be5e:	3648      	adds	r6, #72	; 0x48
 800be60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be64:	3b01      	subs	r3, #1
 800be66:	d503      	bpl.n	800be70 <__sfp+0x28>
 800be68:	6833      	ldr	r3, [r6, #0]
 800be6a:	b30b      	cbz	r3, 800beb0 <__sfp+0x68>
 800be6c:	6836      	ldr	r6, [r6, #0]
 800be6e:	e7f7      	b.n	800be60 <__sfp+0x18>
 800be70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be74:	b9d5      	cbnz	r5, 800beac <__sfp+0x64>
 800be76:	4b16      	ldr	r3, [pc, #88]	; (800bed0 <__sfp+0x88>)
 800be78:	60e3      	str	r3, [r4, #12]
 800be7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be7e:	6665      	str	r5, [r4, #100]	; 0x64
 800be80:	f000 f847 	bl	800bf12 <__retarget_lock_init_recursive>
 800be84:	f7ff ff96 	bl	800bdb4 <__sfp_lock_release>
 800be88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be90:	6025      	str	r5, [r4, #0]
 800be92:	61a5      	str	r5, [r4, #24]
 800be94:	2208      	movs	r2, #8
 800be96:	4629      	mov	r1, r5
 800be98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be9c:	f7fd fb0a 	bl	80094b4 <memset>
 800bea0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bea4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bea8:	4620      	mov	r0, r4
 800beaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beac:	3468      	adds	r4, #104	; 0x68
 800beae:	e7d9      	b.n	800be64 <__sfp+0x1c>
 800beb0:	2104      	movs	r1, #4
 800beb2:	4638      	mov	r0, r7
 800beb4:	f7ff ff62 	bl	800bd7c <__sfmoreglue>
 800beb8:	4604      	mov	r4, r0
 800beba:	6030      	str	r0, [r6, #0]
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d1d5      	bne.n	800be6c <__sfp+0x24>
 800bec0:	f7ff ff78 	bl	800bdb4 <__sfp_lock_release>
 800bec4:	230c      	movs	r3, #12
 800bec6:	603b      	str	r3, [r7, #0]
 800bec8:	e7ee      	b.n	800bea8 <__sfp+0x60>
 800beca:	bf00      	nop
 800becc:	0800dfd8 	.word	0x0800dfd8
 800bed0:	ffff0001 	.word	0xffff0001

0800bed4 <_fwalk_reent>:
 800bed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed8:	4606      	mov	r6, r0
 800beda:	4688      	mov	r8, r1
 800bedc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bee0:	2700      	movs	r7, #0
 800bee2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bee6:	f1b9 0901 	subs.w	r9, r9, #1
 800beea:	d505      	bpl.n	800bef8 <_fwalk_reent+0x24>
 800beec:	6824      	ldr	r4, [r4, #0]
 800beee:	2c00      	cmp	r4, #0
 800bef0:	d1f7      	bne.n	800bee2 <_fwalk_reent+0xe>
 800bef2:	4638      	mov	r0, r7
 800bef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef8:	89ab      	ldrh	r3, [r5, #12]
 800befa:	2b01      	cmp	r3, #1
 800befc:	d907      	bls.n	800bf0e <_fwalk_reent+0x3a>
 800befe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf02:	3301      	adds	r3, #1
 800bf04:	d003      	beq.n	800bf0e <_fwalk_reent+0x3a>
 800bf06:	4629      	mov	r1, r5
 800bf08:	4630      	mov	r0, r6
 800bf0a:	47c0      	blx	r8
 800bf0c:	4307      	orrs	r7, r0
 800bf0e:	3568      	adds	r5, #104	; 0x68
 800bf10:	e7e9      	b.n	800bee6 <_fwalk_reent+0x12>

0800bf12 <__retarget_lock_init_recursive>:
 800bf12:	4770      	bx	lr

0800bf14 <__retarget_lock_acquire_recursive>:
 800bf14:	4770      	bx	lr

0800bf16 <__retarget_lock_release_recursive>:
 800bf16:	4770      	bx	lr

0800bf18 <__swhatbuf_r>:
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	460e      	mov	r6, r1
 800bf1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf20:	2900      	cmp	r1, #0
 800bf22:	b096      	sub	sp, #88	; 0x58
 800bf24:	4614      	mov	r4, r2
 800bf26:	461d      	mov	r5, r3
 800bf28:	da07      	bge.n	800bf3a <__swhatbuf_r+0x22>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	602b      	str	r3, [r5, #0]
 800bf2e:	89b3      	ldrh	r3, [r6, #12]
 800bf30:	061a      	lsls	r2, r3, #24
 800bf32:	d410      	bmi.n	800bf56 <__swhatbuf_r+0x3e>
 800bf34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf38:	e00e      	b.n	800bf58 <__swhatbuf_r+0x40>
 800bf3a:	466a      	mov	r2, sp
 800bf3c:	f000 f902 	bl	800c144 <_fstat_r>
 800bf40:	2800      	cmp	r0, #0
 800bf42:	dbf2      	blt.n	800bf2a <__swhatbuf_r+0x12>
 800bf44:	9a01      	ldr	r2, [sp, #4]
 800bf46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf4e:	425a      	negs	r2, r3
 800bf50:	415a      	adcs	r2, r3
 800bf52:	602a      	str	r2, [r5, #0]
 800bf54:	e7ee      	b.n	800bf34 <__swhatbuf_r+0x1c>
 800bf56:	2340      	movs	r3, #64	; 0x40
 800bf58:	2000      	movs	r0, #0
 800bf5a:	6023      	str	r3, [r4, #0]
 800bf5c:	b016      	add	sp, #88	; 0x58
 800bf5e:	bd70      	pop	{r4, r5, r6, pc}

0800bf60 <__smakebuf_r>:
 800bf60:	898b      	ldrh	r3, [r1, #12]
 800bf62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf64:	079d      	lsls	r5, r3, #30
 800bf66:	4606      	mov	r6, r0
 800bf68:	460c      	mov	r4, r1
 800bf6a:	d507      	bpl.n	800bf7c <__smakebuf_r+0x1c>
 800bf6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf70:	6023      	str	r3, [r4, #0]
 800bf72:	6123      	str	r3, [r4, #16]
 800bf74:	2301      	movs	r3, #1
 800bf76:	6163      	str	r3, [r4, #20]
 800bf78:	b002      	add	sp, #8
 800bf7a:	bd70      	pop	{r4, r5, r6, pc}
 800bf7c:	ab01      	add	r3, sp, #4
 800bf7e:	466a      	mov	r2, sp
 800bf80:	f7ff ffca 	bl	800bf18 <__swhatbuf_r>
 800bf84:	9900      	ldr	r1, [sp, #0]
 800bf86:	4605      	mov	r5, r0
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f7ff f987 	bl	800b29c <_malloc_r>
 800bf8e:	b948      	cbnz	r0, 800bfa4 <__smakebuf_r+0x44>
 800bf90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf94:	059a      	lsls	r2, r3, #22
 800bf96:	d4ef      	bmi.n	800bf78 <__smakebuf_r+0x18>
 800bf98:	f023 0303 	bic.w	r3, r3, #3
 800bf9c:	f043 0302 	orr.w	r3, r3, #2
 800bfa0:	81a3      	strh	r3, [r4, #12]
 800bfa2:	e7e3      	b.n	800bf6c <__smakebuf_r+0xc>
 800bfa4:	4b0d      	ldr	r3, [pc, #52]	; (800bfdc <__smakebuf_r+0x7c>)
 800bfa6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfa8:	89a3      	ldrh	r3, [r4, #12]
 800bfaa:	6020      	str	r0, [r4, #0]
 800bfac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb0:	81a3      	strh	r3, [r4, #12]
 800bfb2:	9b00      	ldr	r3, [sp, #0]
 800bfb4:	6163      	str	r3, [r4, #20]
 800bfb6:	9b01      	ldr	r3, [sp, #4]
 800bfb8:	6120      	str	r0, [r4, #16]
 800bfba:	b15b      	cbz	r3, 800bfd4 <__smakebuf_r+0x74>
 800bfbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f000 f8d1 	bl	800c168 <_isatty_r>
 800bfc6:	b128      	cbz	r0, 800bfd4 <__smakebuf_r+0x74>
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	f023 0303 	bic.w	r3, r3, #3
 800bfce:	f043 0301 	orr.w	r3, r3, #1
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	89a0      	ldrh	r0, [r4, #12]
 800bfd6:	4305      	orrs	r5, r0
 800bfd8:	81a5      	strh	r5, [r4, #12]
 800bfda:	e7cd      	b.n	800bf78 <__smakebuf_r+0x18>
 800bfdc:	0800bd71 	.word	0x0800bd71

0800bfe0 <_malloc_usable_size_r>:
 800bfe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe4:	1f18      	subs	r0, r3, #4
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	bfbc      	itt	lt
 800bfea:	580b      	ldrlt	r3, [r1, r0]
 800bfec:	18c0      	addlt	r0, r0, r3
 800bfee:	4770      	bx	lr

0800bff0 <_raise_r>:
 800bff0:	291f      	cmp	r1, #31
 800bff2:	b538      	push	{r3, r4, r5, lr}
 800bff4:	4604      	mov	r4, r0
 800bff6:	460d      	mov	r5, r1
 800bff8:	d904      	bls.n	800c004 <_raise_r+0x14>
 800bffa:	2316      	movs	r3, #22
 800bffc:	6003      	str	r3, [r0, #0]
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c002:	bd38      	pop	{r3, r4, r5, pc}
 800c004:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c006:	b112      	cbz	r2, 800c00e <_raise_r+0x1e>
 800c008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c00c:	b94b      	cbnz	r3, 800c022 <_raise_r+0x32>
 800c00e:	4620      	mov	r0, r4
 800c010:	f000 f830 	bl	800c074 <_getpid_r>
 800c014:	462a      	mov	r2, r5
 800c016:	4601      	mov	r1, r0
 800c018:	4620      	mov	r0, r4
 800c01a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c01e:	f000 b817 	b.w	800c050 <_kill_r>
 800c022:	2b01      	cmp	r3, #1
 800c024:	d00a      	beq.n	800c03c <_raise_r+0x4c>
 800c026:	1c59      	adds	r1, r3, #1
 800c028:	d103      	bne.n	800c032 <_raise_r+0x42>
 800c02a:	2316      	movs	r3, #22
 800c02c:	6003      	str	r3, [r0, #0]
 800c02e:	2001      	movs	r0, #1
 800c030:	e7e7      	b.n	800c002 <_raise_r+0x12>
 800c032:	2400      	movs	r4, #0
 800c034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c038:	4628      	mov	r0, r5
 800c03a:	4798      	blx	r3
 800c03c:	2000      	movs	r0, #0
 800c03e:	e7e0      	b.n	800c002 <_raise_r+0x12>

0800c040 <raise>:
 800c040:	4b02      	ldr	r3, [pc, #8]	; (800c04c <raise+0xc>)
 800c042:	4601      	mov	r1, r0
 800c044:	6818      	ldr	r0, [r3, #0]
 800c046:	f7ff bfd3 	b.w	800bff0 <_raise_r>
 800c04a:	bf00      	nop
 800c04c:	20000010 	.word	0x20000010

0800c050 <_kill_r>:
 800c050:	b538      	push	{r3, r4, r5, lr}
 800c052:	4d07      	ldr	r5, [pc, #28]	; (800c070 <_kill_r+0x20>)
 800c054:	2300      	movs	r3, #0
 800c056:	4604      	mov	r4, r0
 800c058:	4608      	mov	r0, r1
 800c05a:	4611      	mov	r1, r2
 800c05c:	602b      	str	r3, [r5, #0]
 800c05e:	f7f9 f81f 	bl	80050a0 <_kill>
 800c062:	1c43      	adds	r3, r0, #1
 800c064:	d102      	bne.n	800c06c <_kill_r+0x1c>
 800c066:	682b      	ldr	r3, [r5, #0]
 800c068:	b103      	cbz	r3, 800c06c <_kill_r+0x1c>
 800c06a:	6023      	str	r3, [r4, #0]
 800c06c:	bd38      	pop	{r3, r4, r5, pc}
 800c06e:	bf00      	nop
 800c070:	20000924 	.word	0x20000924

0800c074 <_getpid_r>:
 800c074:	f7f9 b80c 	b.w	8005090 <_getpid>

0800c078 <__sread>:
 800c078:	b510      	push	{r4, lr}
 800c07a:	460c      	mov	r4, r1
 800c07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c080:	f000 f894 	bl	800c1ac <_read_r>
 800c084:	2800      	cmp	r0, #0
 800c086:	bfab      	itete	ge
 800c088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c08a:	89a3      	ldrhlt	r3, [r4, #12]
 800c08c:	181b      	addge	r3, r3, r0
 800c08e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c092:	bfac      	ite	ge
 800c094:	6563      	strge	r3, [r4, #84]	; 0x54
 800c096:	81a3      	strhlt	r3, [r4, #12]
 800c098:	bd10      	pop	{r4, pc}

0800c09a <__swrite>:
 800c09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c09e:	461f      	mov	r7, r3
 800c0a0:	898b      	ldrh	r3, [r1, #12]
 800c0a2:	05db      	lsls	r3, r3, #23
 800c0a4:	4605      	mov	r5, r0
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	4616      	mov	r6, r2
 800c0aa:	d505      	bpl.n	800c0b8 <__swrite+0x1e>
 800c0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b0:	2302      	movs	r3, #2
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f000 f868 	bl	800c188 <_lseek_r>
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0c2:	81a3      	strh	r3, [r4, #12]
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	463b      	mov	r3, r7
 800c0c8:	4628      	mov	r0, r5
 800c0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ce:	f000 b817 	b.w	800c100 <_write_r>

0800c0d2 <__sseek>:
 800c0d2:	b510      	push	{r4, lr}
 800c0d4:	460c      	mov	r4, r1
 800c0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0da:	f000 f855 	bl	800c188 <_lseek_r>
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	bf15      	itete	ne
 800c0e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0ee:	81a3      	strheq	r3, [r4, #12]
 800c0f0:	bf18      	it	ne
 800c0f2:	81a3      	strhne	r3, [r4, #12]
 800c0f4:	bd10      	pop	{r4, pc}

0800c0f6 <__sclose>:
 800c0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0fa:	f000 b813 	b.w	800c124 <_close_r>
	...

0800c100 <_write_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d07      	ldr	r5, [pc, #28]	; (800c120 <_write_r+0x20>)
 800c104:	4604      	mov	r4, r0
 800c106:	4608      	mov	r0, r1
 800c108:	4611      	mov	r1, r2
 800c10a:	2200      	movs	r2, #0
 800c10c:	602a      	str	r2, [r5, #0]
 800c10e:	461a      	mov	r2, r3
 800c110:	f7f8 fffd 	bl	800510e <_write>
 800c114:	1c43      	adds	r3, r0, #1
 800c116:	d102      	bne.n	800c11e <_write_r+0x1e>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	b103      	cbz	r3, 800c11e <_write_r+0x1e>
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	bd38      	pop	{r3, r4, r5, pc}
 800c120:	20000924 	.word	0x20000924

0800c124 <_close_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d06      	ldr	r5, [pc, #24]	; (800c140 <_close_r+0x1c>)
 800c128:	2300      	movs	r3, #0
 800c12a:	4604      	mov	r4, r0
 800c12c:	4608      	mov	r0, r1
 800c12e:	602b      	str	r3, [r5, #0]
 800c130:	f7f9 f809 	bl	8005146 <_close>
 800c134:	1c43      	adds	r3, r0, #1
 800c136:	d102      	bne.n	800c13e <_close_r+0x1a>
 800c138:	682b      	ldr	r3, [r5, #0]
 800c13a:	b103      	cbz	r3, 800c13e <_close_r+0x1a>
 800c13c:	6023      	str	r3, [r4, #0]
 800c13e:	bd38      	pop	{r3, r4, r5, pc}
 800c140:	20000924 	.word	0x20000924

0800c144 <_fstat_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	4d07      	ldr	r5, [pc, #28]	; (800c164 <_fstat_r+0x20>)
 800c148:	2300      	movs	r3, #0
 800c14a:	4604      	mov	r4, r0
 800c14c:	4608      	mov	r0, r1
 800c14e:	4611      	mov	r1, r2
 800c150:	602b      	str	r3, [r5, #0]
 800c152:	f7f9 f804 	bl	800515e <_fstat>
 800c156:	1c43      	adds	r3, r0, #1
 800c158:	d102      	bne.n	800c160 <_fstat_r+0x1c>
 800c15a:	682b      	ldr	r3, [r5, #0]
 800c15c:	b103      	cbz	r3, 800c160 <_fstat_r+0x1c>
 800c15e:	6023      	str	r3, [r4, #0]
 800c160:	bd38      	pop	{r3, r4, r5, pc}
 800c162:	bf00      	nop
 800c164:	20000924 	.word	0x20000924

0800c168 <_isatty_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	4d06      	ldr	r5, [pc, #24]	; (800c184 <_isatty_r+0x1c>)
 800c16c:	2300      	movs	r3, #0
 800c16e:	4604      	mov	r4, r0
 800c170:	4608      	mov	r0, r1
 800c172:	602b      	str	r3, [r5, #0]
 800c174:	f7f9 f803 	bl	800517e <_isatty>
 800c178:	1c43      	adds	r3, r0, #1
 800c17a:	d102      	bne.n	800c182 <_isatty_r+0x1a>
 800c17c:	682b      	ldr	r3, [r5, #0]
 800c17e:	b103      	cbz	r3, 800c182 <_isatty_r+0x1a>
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	20000924 	.word	0x20000924

0800c188 <_lseek_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d07      	ldr	r5, [pc, #28]	; (800c1a8 <_lseek_r+0x20>)
 800c18c:	4604      	mov	r4, r0
 800c18e:	4608      	mov	r0, r1
 800c190:	4611      	mov	r1, r2
 800c192:	2200      	movs	r2, #0
 800c194:	602a      	str	r2, [r5, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	f7f8 fffc 	bl	8005194 <_lseek>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d102      	bne.n	800c1a6 <_lseek_r+0x1e>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	b103      	cbz	r3, 800c1a6 <_lseek_r+0x1e>
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	20000924 	.word	0x20000924

0800c1ac <_read_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	4d07      	ldr	r5, [pc, #28]	; (800c1cc <_read_r+0x20>)
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	4608      	mov	r0, r1
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	602a      	str	r2, [r5, #0]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f7f8 ff8a 	bl	80050d4 <_read>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d102      	bne.n	800c1ca <_read_r+0x1e>
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	b103      	cbz	r3, 800c1ca <_read_r+0x1e>
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}
 800c1cc:	20000924 	.word	0x20000924

0800c1d0 <atan>:
 800c1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d4:	ec55 4b10 	vmov	r4, r5, d0
 800c1d8:	4bc3      	ldr	r3, [pc, #780]	; (800c4e8 <atan+0x318>)
 800c1da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c1de:	429e      	cmp	r6, r3
 800c1e0:	46ab      	mov	fp, r5
 800c1e2:	dd18      	ble.n	800c216 <atan+0x46>
 800c1e4:	4bc1      	ldr	r3, [pc, #772]	; (800c4ec <atan+0x31c>)
 800c1e6:	429e      	cmp	r6, r3
 800c1e8:	dc01      	bgt.n	800c1ee <atan+0x1e>
 800c1ea:	d109      	bne.n	800c200 <atan+0x30>
 800c1ec:	b144      	cbz	r4, 800c200 <atan+0x30>
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	462b      	mov	r3, r5
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	f7f4 f851 	bl	800029c <__adddf3>
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	460d      	mov	r5, r1
 800c1fe:	e006      	b.n	800c20e <atan+0x3e>
 800c200:	f1bb 0f00 	cmp.w	fp, #0
 800c204:	f300 8131 	bgt.w	800c46a <atan+0x29a>
 800c208:	a59b      	add	r5, pc, #620	; (adr r5, 800c478 <atan+0x2a8>)
 800c20a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c20e:	ec45 4b10 	vmov	d0, r4, r5
 800c212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c216:	4bb6      	ldr	r3, [pc, #728]	; (800c4f0 <atan+0x320>)
 800c218:	429e      	cmp	r6, r3
 800c21a:	dc14      	bgt.n	800c246 <atan+0x76>
 800c21c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c220:	429e      	cmp	r6, r3
 800c222:	dc0d      	bgt.n	800c240 <atan+0x70>
 800c224:	a396      	add	r3, pc, #600	; (adr r3, 800c480 <atan+0x2b0>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	ee10 0a10 	vmov	r0, s0
 800c22e:	4629      	mov	r1, r5
 800c230:	f7f4 f834 	bl	800029c <__adddf3>
 800c234:	4baf      	ldr	r3, [pc, #700]	; (800c4f4 <atan+0x324>)
 800c236:	2200      	movs	r2, #0
 800c238:	f7f4 fc76 	bl	8000b28 <__aeabi_dcmpgt>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d1e6      	bne.n	800c20e <atan+0x3e>
 800c240:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c244:	e02b      	b.n	800c29e <atan+0xce>
 800c246:	f000 f9b3 	bl	800c5b0 <fabs>
 800c24a:	4bab      	ldr	r3, [pc, #684]	; (800c4f8 <atan+0x328>)
 800c24c:	429e      	cmp	r6, r3
 800c24e:	ec55 4b10 	vmov	r4, r5, d0
 800c252:	f300 80bf 	bgt.w	800c3d4 <atan+0x204>
 800c256:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c25a:	429e      	cmp	r6, r3
 800c25c:	f300 80a0 	bgt.w	800c3a0 <atan+0x1d0>
 800c260:	ee10 2a10 	vmov	r2, s0
 800c264:	ee10 0a10 	vmov	r0, s0
 800c268:	462b      	mov	r3, r5
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7f4 f816 	bl	800029c <__adddf3>
 800c270:	4ba0      	ldr	r3, [pc, #640]	; (800c4f4 <atan+0x324>)
 800c272:	2200      	movs	r2, #0
 800c274:	f7f4 f810 	bl	8000298 <__aeabi_dsub>
 800c278:	2200      	movs	r2, #0
 800c27a:	4606      	mov	r6, r0
 800c27c:	460f      	mov	r7, r1
 800c27e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c282:	4620      	mov	r0, r4
 800c284:	4629      	mov	r1, r5
 800c286:	f7f4 f809 	bl	800029c <__adddf3>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4630      	mov	r0, r6
 800c290:	4639      	mov	r1, r7
 800c292:	f7f4 fae3 	bl	800085c <__aeabi_ddiv>
 800c296:	f04f 0a00 	mov.w	sl, #0
 800c29a:	4604      	mov	r4, r0
 800c29c:	460d      	mov	r5, r1
 800c29e:	4622      	mov	r2, r4
 800c2a0:	462b      	mov	r3, r5
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7f4 f9af 	bl	8000608 <__aeabi_dmul>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4680      	mov	r8, r0
 800c2b0:	4689      	mov	r9, r1
 800c2b2:	f7f4 f9a9 	bl	8000608 <__aeabi_dmul>
 800c2b6:	a374      	add	r3, pc, #464	; (adr r3, 800c488 <atan+0x2b8>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	4606      	mov	r6, r0
 800c2be:	460f      	mov	r7, r1
 800c2c0:	f7f4 f9a2 	bl	8000608 <__aeabi_dmul>
 800c2c4:	a372      	add	r3, pc, #456	; (adr r3, 800c490 <atan+0x2c0>)
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	f7f3 ffe7 	bl	800029c <__adddf3>
 800c2ce:	4632      	mov	r2, r6
 800c2d0:	463b      	mov	r3, r7
 800c2d2:	f7f4 f999 	bl	8000608 <__aeabi_dmul>
 800c2d6:	a370      	add	r3, pc, #448	; (adr r3, 800c498 <atan+0x2c8>)
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f3 ffde 	bl	800029c <__adddf3>
 800c2e0:	4632      	mov	r2, r6
 800c2e2:	463b      	mov	r3, r7
 800c2e4:	f7f4 f990 	bl	8000608 <__aeabi_dmul>
 800c2e8:	a36d      	add	r3, pc, #436	; (adr r3, 800c4a0 <atan+0x2d0>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	f7f3 ffd5 	bl	800029c <__adddf3>
 800c2f2:	4632      	mov	r2, r6
 800c2f4:	463b      	mov	r3, r7
 800c2f6:	f7f4 f987 	bl	8000608 <__aeabi_dmul>
 800c2fa:	a36b      	add	r3, pc, #428	; (adr r3, 800c4a8 <atan+0x2d8>)
 800c2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c300:	f7f3 ffcc 	bl	800029c <__adddf3>
 800c304:	4632      	mov	r2, r6
 800c306:	463b      	mov	r3, r7
 800c308:	f7f4 f97e 	bl	8000608 <__aeabi_dmul>
 800c30c:	a368      	add	r3, pc, #416	; (adr r3, 800c4b0 <atan+0x2e0>)
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	f7f3 ffc3 	bl	800029c <__adddf3>
 800c316:	4642      	mov	r2, r8
 800c318:	464b      	mov	r3, r9
 800c31a:	f7f4 f975 	bl	8000608 <__aeabi_dmul>
 800c31e:	a366      	add	r3, pc, #408	; (adr r3, 800c4b8 <atan+0x2e8>)
 800c320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c324:	4680      	mov	r8, r0
 800c326:	4689      	mov	r9, r1
 800c328:	4630      	mov	r0, r6
 800c32a:	4639      	mov	r1, r7
 800c32c:	f7f4 f96c 	bl	8000608 <__aeabi_dmul>
 800c330:	a363      	add	r3, pc, #396	; (adr r3, 800c4c0 <atan+0x2f0>)
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	f7f3 ffaf 	bl	8000298 <__aeabi_dsub>
 800c33a:	4632      	mov	r2, r6
 800c33c:	463b      	mov	r3, r7
 800c33e:	f7f4 f963 	bl	8000608 <__aeabi_dmul>
 800c342:	a361      	add	r3, pc, #388	; (adr r3, 800c4c8 <atan+0x2f8>)
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	f7f3 ffa6 	bl	8000298 <__aeabi_dsub>
 800c34c:	4632      	mov	r2, r6
 800c34e:	463b      	mov	r3, r7
 800c350:	f7f4 f95a 	bl	8000608 <__aeabi_dmul>
 800c354:	a35e      	add	r3, pc, #376	; (adr r3, 800c4d0 <atan+0x300>)
 800c356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35a:	f7f3 ff9d 	bl	8000298 <__aeabi_dsub>
 800c35e:	4632      	mov	r2, r6
 800c360:	463b      	mov	r3, r7
 800c362:	f7f4 f951 	bl	8000608 <__aeabi_dmul>
 800c366:	a35c      	add	r3, pc, #368	; (adr r3, 800c4d8 <atan+0x308>)
 800c368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36c:	f7f3 ff94 	bl	8000298 <__aeabi_dsub>
 800c370:	4632      	mov	r2, r6
 800c372:	463b      	mov	r3, r7
 800c374:	f7f4 f948 	bl	8000608 <__aeabi_dmul>
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	4640      	mov	r0, r8
 800c37e:	4649      	mov	r1, r9
 800c380:	f7f3 ff8c 	bl	800029c <__adddf3>
 800c384:	4622      	mov	r2, r4
 800c386:	462b      	mov	r3, r5
 800c388:	f7f4 f93e 	bl	8000608 <__aeabi_dmul>
 800c38c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	d14b      	bne.n	800c42e <atan+0x25e>
 800c396:	4620      	mov	r0, r4
 800c398:	4629      	mov	r1, r5
 800c39a:	f7f3 ff7d 	bl	8000298 <__aeabi_dsub>
 800c39e:	e72c      	b.n	800c1fa <atan+0x2a>
 800c3a0:	ee10 0a10 	vmov	r0, s0
 800c3a4:	4b53      	ldr	r3, [pc, #332]	; (800c4f4 <atan+0x324>)
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	4629      	mov	r1, r5
 800c3aa:	f7f3 ff75 	bl	8000298 <__aeabi_dsub>
 800c3ae:	4b51      	ldr	r3, [pc, #324]	; (800c4f4 <atan+0x324>)
 800c3b0:	4606      	mov	r6, r0
 800c3b2:	460f      	mov	r7, r1
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	f7f3 ff6f 	bl	800029c <__adddf3>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	4639      	mov	r1, r7
 800c3c6:	f7f4 fa49 	bl	800085c <__aeabi_ddiv>
 800c3ca:	f04f 0a01 	mov.w	sl, #1
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	e764      	b.n	800c29e <atan+0xce>
 800c3d4:	4b49      	ldr	r3, [pc, #292]	; (800c4fc <atan+0x32c>)
 800c3d6:	429e      	cmp	r6, r3
 800c3d8:	da1d      	bge.n	800c416 <atan+0x246>
 800c3da:	ee10 0a10 	vmov	r0, s0
 800c3de:	4b48      	ldr	r3, [pc, #288]	; (800c500 <atan+0x330>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	f7f3 ff58 	bl	8000298 <__aeabi_dsub>
 800c3e8:	4b45      	ldr	r3, [pc, #276]	; (800c500 <atan+0x330>)
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	460f      	mov	r7, r1
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	f7f4 f908 	bl	8000608 <__aeabi_dmul>
 800c3f8:	4b3e      	ldr	r3, [pc, #248]	; (800c4f4 <atan+0x324>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f7f3 ff4e 	bl	800029c <__adddf3>
 800c400:	4602      	mov	r2, r0
 800c402:	460b      	mov	r3, r1
 800c404:	4630      	mov	r0, r6
 800c406:	4639      	mov	r1, r7
 800c408:	f7f4 fa28 	bl	800085c <__aeabi_ddiv>
 800c40c:	f04f 0a02 	mov.w	sl, #2
 800c410:	4604      	mov	r4, r0
 800c412:	460d      	mov	r5, r1
 800c414:	e743      	b.n	800c29e <atan+0xce>
 800c416:	462b      	mov	r3, r5
 800c418:	ee10 2a10 	vmov	r2, s0
 800c41c:	4939      	ldr	r1, [pc, #228]	; (800c504 <atan+0x334>)
 800c41e:	2000      	movs	r0, #0
 800c420:	f7f4 fa1c 	bl	800085c <__aeabi_ddiv>
 800c424:	f04f 0a03 	mov.w	sl, #3
 800c428:	4604      	mov	r4, r0
 800c42a:	460d      	mov	r5, r1
 800c42c:	e737      	b.n	800c29e <atan+0xce>
 800c42e:	4b36      	ldr	r3, [pc, #216]	; (800c508 <atan+0x338>)
 800c430:	4e36      	ldr	r6, [pc, #216]	; (800c50c <atan+0x33c>)
 800c432:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c436:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c43a:	e9da 2300 	ldrd	r2, r3, [sl]
 800c43e:	f7f3 ff2b 	bl	8000298 <__aeabi_dsub>
 800c442:	4622      	mov	r2, r4
 800c444:	462b      	mov	r3, r5
 800c446:	f7f3 ff27 	bl	8000298 <__aeabi_dsub>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c452:	f7f3 ff21 	bl	8000298 <__aeabi_dsub>
 800c456:	f1bb 0f00 	cmp.w	fp, #0
 800c45a:	4604      	mov	r4, r0
 800c45c:	460d      	mov	r5, r1
 800c45e:	f6bf aed6 	bge.w	800c20e <atan+0x3e>
 800c462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c466:	461d      	mov	r5, r3
 800c468:	e6d1      	b.n	800c20e <atan+0x3e>
 800c46a:	a51d      	add	r5, pc, #116	; (adr r5, 800c4e0 <atan+0x310>)
 800c46c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c470:	e6cd      	b.n	800c20e <atan+0x3e>
 800c472:	bf00      	nop
 800c474:	f3af 8000 	nop.w
 800c478:	54442d18 	.word	0x54442d18
 800c47c:	bff921fb 	.word	0xbff921fb
 800c480:	8800759c 	.word	0x8800759c
 800c484:	7e37e43c 	.word	0x7e37e43c
 800c488:	e322da11 	.word	0xe322da11
 800c48c:	3f90ad3a 	.word	0x3f90ad3a
 800c490:	24760deb 	.word	0x24760deb
 800c494:	3fa97b4b 	.word	0x3fa97b4b
 800c498:	a0d03d51 	.word	0xa0d03d51
 800c49c:	3fb10d66 	.word	0x3fb10d66
 800c4a0:	c54c206e 	.word	0xc54c206e
 800c4a4:	3fb745cd 	.word	0x3fb745cd
 800c4a8:	920083ff 	.word	0x920083ff
 800c4ac:	3fc24924 	.word	0x3fc24924
 800c4b0:	5555550d 	.word	0x5555550d
 800c4b4:	3fd55555 	.word	0x3fd55555
 800c4b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800c4bc:	bfa2b444 	.word	0xbfa2b444
 800c4c0:	52defd9a 	.word	0x52defd9a
 800c4c4:	3fadde2d 	.word	0x3fadde2d
 800c4c8:	af749a6d 	.word	0xaf749a6d
 800c4cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800c4d0:	fe231671 	.word	0xfe231671
 800c4d4:	3fbc71c6 	.word	0x3fbc71c6
 800c4d8:	9998ebc4 	.word	0x9998ebc4
 800c4dc:	3fc99999 	.word	0x3fc99999
 800c4e0:	54442d18 	.word	0x54442d18
 800c4e4:	3ff921fb 	.word	0x3ff921fb
 800c4e8:	440fffff 	.word	0x440fffff
 800c4ec:	7ff00000 	.word	0x7ff00000
 800c4f0:	3fdbffff 	.word	0x3fdbffff
 800c4f4:	3ff00000 	.word	0x3ff00000
 800c4f8:	3ff2ffff 	.word	0x3ff2ffff
 800c4fc:	40038000 	.word	0x40038000
 800c500:	3ff80000 	.word	0x3ff80000
 800c504:	bff00000 	.word	0xbff00000
 800c508:	0800e3e0 	.word	0x0800e3e0
 800c50c:	0800e3c0 	.word	0x0800e3c0

0800c510 <cos>:
 800c510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c512:	ec53 2b10 	vmov	r2, r3, d0
 800c516:	4824      	ldr	r0, [pc, #144]	; (800c5a8 <cos+0x98>)
 800c518:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c51c:	4281      	cmp	r1, r0
 800c51e:	dc06      	bgt.n	800c52e <cos+0x1e>
 800c520:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800c5a0 <cos+0x90>
 800c524:	f000 fbc8 	bl	800ccb8 <__kernel_cos>
 800c528:	ec51 0b10 	vmov	r0, r1, d0
 800c52c:	e007      	b.n	800c53e <cos+0x2e>
 800c52e:	481f      	ldr	r0, [pc, #124]	; (800c5ac <cos+0x9c>)
 800c530:	4281      	cmp	r1, r0
 800c532:	dd09      	ble.n	800c548 <cos+0x38>
 800c534:	ee10 0a10 	vmov	r0, s0
 800c538:	4619      	mov	r1, r3
 800c53a:	f7f3 fead 	bl	8000298 <__aeabi_dsub>
 800c53e:	ec41 0b10 	vmov	d0, r0, r1
 800c542:	b005      	add	sp, #20
 800c544:	f85d fb04 	ldr.w	pc, [sp], #4
 800c548:	4668      	mov	r0, sp
 800c54a:	f000 f8f5 	bl	800c738 <__ieee754_rem_pio2>
 800c54e:	f000 0003 	and.w	r0, r0, #3
 800c552:	2801      	cmp	r0, #1
 800c554:	d007      	beq.n	800c566 <cos+0x56>
 800c556:	2802      	cmp	r0, #2
 800c558:	d012      	beq.n	800c580 <cos+0x70>
 800c55a:	b9c0      	cbnz	r0, 800c58e <cos+0x7e>
 800c55c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c560:	ed9d 0b00 	vldr	d0, [sp]
 800c564:	e7de      	b.n	800c524 <cos+0x14>
 800c566:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c56a:	ed9d 0b00 	vldr	d0, [sp]
 800c56e:	f000 ffab 	bl	800d4c8 <__kernel_sin>
 800c572:	ec53 2b10 	vmov	r2, r3, d0
 800c576:	ee10 0a10 	vmov	r0, s0
 800c57a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c57e:	e7de      	b.n	800c53e <cos+0x2e>
 800c580:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c584:	ed9d 0b00 	vldr	d0, [sp]
 800c588:	f000 fb96 	bl	800ccb8 <__kernel_cos>
 800c58c:	e7f1      	b.n	800c572 <cos+0x62>
 800c58e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c592:	ed9d 0b00 	vldr	d0, [sp]
 800c596:	2001      	movs	r0, #1
 800c598:	f000 ff96 	bl	800d4c8 <__kernel_sin>
 800c59c:	e7c4      	b.n	800c528 <cos+0x18>
 800c59e:	bf00      	nop
	...
 800c5a8:	3fe921fb 	.word	0x3fe921fb
 800c5ac:	7fefffff 	.word	0x7fefffff

0800c5b0 <fabs>:
 800c5b0:	ec51 0b10 	vmov	r0, r1, d0
 800c5b4:	ee10 2a10 	vmov	r2, s0
 800c5b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c5bc:	ec43 2b10 	vmov	d0, r2, r3
 800c5c0:	4770      	bx	lr
 800c5c2:	0000      	movs	r0, r0
 800c5c4:	0000      	movs	r0, r0
	...

0800c5c8 <sin>:
 800c5c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5ca:	ec53 2b10 	vmov	r2, r3, d0
 800c5ce:	4826      	ldr	r0, [pc, #152]	; (800c668 <sin+0xa0>)
 800c5d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c5d4:	4281      	cmp	r1, r0
 800c5d6:	dc07      	bgt.n	800c5e8 <sin+0x20>
 800c5d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c660 <sin+0x98>
 800c5dc:	2000      	movs	r0, #0
 800c5de:	f000 ff73 	bl	800d4c8 <__kernel_sin>
 800c5e2:	ec51 0b10 	vmov	r0, r1, d0
 800c5e6:	e007      	b.n	800c5f8 <sin+0x30>
 800c5e8:	4820      	ldr	r0, [pc, #128]	; (800c66c <sin+0xa4>)
 800c5ea:	4281      	cmp	r1, r0
 800c5ec:	dd09      	ble.n	800c602 <sin+0x3a>
 800c5ee:	ee10 0a10 	vmov	r0, s0
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	f7f3 fe50 	bl	8000298 <__aeabi_dsub>
 800c5f8:	ec41 0b10 	vmov	d0, r0, r1
 800c5fc:	b005      	add	sp, #20
 800c5fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800c602:	4668      	mov	r0, sp
 800c604:	f000 f898 	bl	800c738 <__ieee754_rem_pio2>
 800c608:	f000 0003 	and.w	r0, r0, #3
 800c60c:	2801      	cmp	r0, #1
 800c60e:	d008      	beq.n	800c622 <sin+0x5a>
 800c610:	2802      	cmp	r0, #2
 800c612:	d00d      	beq.n	800c630 <sin+0x68>
 800c614:	b9d0      	cbnz	r0, 800c64c <sin+0x84>
 800c616:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c61a:	ed9d 0b00 	vldr	d0, [sp]
 800c61e:	2001      	movs	r0, #1
 800c620:	e7dd      	b.n	800c5de <sin+0x16>
 800c622:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c626:	ed9d 0b00 	vldr	d0, [sp]
 800c62a:	f000 fb45 	bl	800ccb8 <__kernel_cos>
 800c62e:	e7d8      	b.n	800c5e2 <sin+0x1a>
 800c630:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c634:	ed9d 0b00 	vldr	d0, [sp]
 800c638:	2001      	movs	r0, #1
 800c63a:	f000 ff45 	bl	800d4c8 <__kernel_sin>
 800c63e:	ec53 2b10 	vmov	r2, r3, d0
 800c642:	ee10 0a10 	vmov	r0, s0
 800c646:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c64a:	e7d5      	b.n	800c5f8 <sin+0x30>
 800c64c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c650:	ed9d 0b00 	vldr	d0, [sp]
 800c654:	f000 fb30 	bl	800ccb8 <__kernel_cos>
 800c658:	e7f1      	b.n	800c63e <sin+0x76>
 800c65a:	bf00      	nop
 800c65c:	f3af 8000 	nop.w
	...
 800c668:	3fe921fb 	.word	0x3fe921fb
 800c66c:	7fefffff 	.word	0x7fefffff

0800c670 <tan>:
 800c670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c672:	ec53 2b10 	vmov	r2, r3, d0
 800c676:	4814      	ldr	r0, [pc, #80]	; (800c6c8 <tan+0x58>)
 800c678:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c67c:	4281      	cmp	r1, r0
 800c67e:	dc05      	bgt.n	800c68c <tan+0x1c>
 800c680:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 800c6c0 <tan+0x50>
 800c684:	2001      	movs	r0, #1
 800c686:	f000 ffdf 	bl	800d648 <__kernel_tan>
 800c68a:	e009      	b.n	800c6a0 <tan+0x30>
 800c68c:	480f      	ldr	r0, [pc, #60]	; (800c6cc <tan+0x5c>)
 800c68e:	4281      	cmp	r1, r0
 800c690:	dd09      	ble.n	800c6a6 <tan+0x36>
 800c692:	ee10 0a10 	vmov	r0, s0
 800c696:	4619      	mov	r1, r3
 800c698:	f7f3 fdfe 	bl	8000298 <__aeabi_dsub>
 800c69c:	ec41 0b10 	vmov	d0, r0, r1
 800c6a0:	b005      	add	sp, #20
 800c6a2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6a6:	4668      	mov	r0, sp
 800c6a8:	f000 f846 	bl	800c738 <__ieee754_rem_pio2>
 800c6ac:	0040      	lsls	r0, r0, #1
 800c6ae:	f000 0002 	and.w	r0, r0, #2
 800c6b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c6b6:	ed9d 0b00 	vldr	d0, [sp]
 800c6ba:	f1c0 0001 	rsb	r0, r0, #1
 800c6be:	e7e2      	b.n	800c686 <tan+0x16>
	...
 800c6c8:	3fe921fb 	.word	0x3fe921fb
 800c6cc:	7fefffff 	.word	0x7fefffff

0800c6d0 <sqrt>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	ed2d 8b02 	vpush	{d8}
 800c6d6:	ec55 4b10 	vmov	r4, r5, d0
 800c6da:	f000 fa37 	bl	800cb4c <__ieee754_sqrt>
 800c6de:	4b15      	ldr	r3, [pc, #84]	; (800c734 <sqrt+0x64>)
 800c6e0:	eeb0 8a40 	vmov.f32	s16, s0
 800c6e4:	eef0 8a60 	vmov.f32	s17, s1
 800c6e8:	f993 3000 	ldrsb.w	r3, [r3]
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	d019      	beq.n	800c724 <sqrt+0x54>
 800c6f0:	4622      	mov	r2, r4
 800c6f2:	462b      	mov	r3, r5
 800c6f4:	4620      	mov	r0, r4
 800c6f6:	4629      	mov	r1, r5
 800c6f8:	f7f4 fa20 	bl	8000b3c <__aeabi_dcmpun>
 800c6fc:	b990      	cbnz	r0, 800c724 <sqrt+0x54>
 800c6fe:	2200      	movs	r2, #0
 800c700:	2300      	movs	r3, #0
 800c702:	4620      	mov	r0, r4
 800c704:	4629      	mov	r1, r5
 800c706:	f7f4 f9f1 	bl	8000aec <__aeabi_dcmplt>
 800c70a:	b158      	cbz	r0, 800c724 <sqrt+0x54>
 800c70c:	f7fc fe9a 	bl	8009444 <__errno>
 800c710:	2321      	movs	r3, #33	; 0x21
 800c712:	6003      	str	r3, [r0, #0]
 800c714:	2200      	movs	r2, #0
 800c716:	2300      	movs	r3, #0
 800c718:	4610      	mov	r0, r2
 800c71a:	4619      	mov	r1, r3
 800c71c:	f7f4 f89e 	bl	800085c <__aeabi_ddiv>
 800c720:	ec41 0b18 	vmov	d8, r0, r1
 800c724:	eeb0 0a48 	vmov.f32	s0, s16
 800c728:	eef0 0a68 	vmov.f32	s1, s17
 800c72c:	ecbd 8b02 	vpop	{d8}
 800c730:	bd38      	pop	{r3, r4, r5, pc}
 800c732:	bf00      	nop
 800c734:	200001e0 	.word	0x200001e0

0800c738 <__ieee754_rem_pio2>:
 800c738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c73c:	ed2d 8b02 	vpush	{d8}
 800c740:	ec55 4b10 	vmov	r4, r5, d0
 800c744:	4bca      	ldr	r3, [pc, #808]	; (800ca70 <__ieee754_rem_pio2+0x338>)
 800c746:	b08b      	sub	sp, #44	; 0x2c
 800c748:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c74c:	4598      	cmp	r8, r3
 800c74e:	4682      	mov	sl, r0
 800c750:	9502      	str	r5, [sp, #8]
 800c752:	dc08      	bgt.n	800c766 <__ieee754_rem_pio2+0x2e>
 800c754:	2200      	movs	r2, #0
 800c756:	2300      	movs	r3, #0
 800c758:	ed80 0b00 	vstr	d0, [r0]
 800c75c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c760:	f04f 0b00 	mov.w	fp, #0
 800c764:	e028      	b.n	800c7b8 <__ieee754_rem_pio2+0x80>
 800c766:	4bc3      	ldr	r3, [pc, #780]	; (800ca74 <__ieee754_rem_pio2+0x33c>)
 800c768:	4598      	cmp	r8, r3
 800c76a:	dc78      	bgt.n	800c85e <__ieee754_rem_pio2+0x126>
 800c76c:	9b02      	ldr	r3, [sp, #8]
 800c76e:	4ec2      	ldr	r6, [pc, #776]	; (800ca78 <__ieee754_rem_pio2+0x340>)
 800c770:	2b00      	cmp	r3, #0
 800c772:	ee10 0a10 	vmov	r0, s0
 800c776:	a3b0      	add	r3, pc, #704	; (adr r3, 800ca38 <__ieee754_rem_pio2+0x300>)
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	4629      	mov	r1, r5
 800c77e:	dd39      	ble.n	800c7f4 <__ieee754_rem_pio2+0xbc>
 800c780:	f7f3 fd8a 	bl	8000298 <__aeabi_dsub>
 800c784:	45b0      	cmp	r8, r6
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	d01b      	beq.n	800c7c4 <__ieee754_rem_pio2+0x8c>
 800c78c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ca40 <__ieee754_rem_pio2+0x308>)
 800c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c792:	f7f3 fd81 	bl	8000298 <__aeabi_dsub>
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	e9ca 2300 	strd	r2, r3, [sl]
 800c79e:	4620      	mov	r0, r4
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	f7f3 fd79 	bl	8000298 <__aeabi_dsub>
 800c7a6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ca40 <__ieee754_rem_pio2+0x308>)
 800c7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ac:	f7f3 fd74 	bl	8000298 <__aeabi_dsub>
 800c7b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c7b4:	f04f 0b01 	mov.w	fp, #1
 800c7b8:	4658      	mov	r0, fp
 800c7ba:	b00b      	add	sp, #44	; 0x2c
 800c7bc:	ecbd 8b02 	vpop	{d8}
 800c7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ca48 <__ieee754_rem_pio2+0x310>)
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f7f3 fd65 	bl	8000298 <__aeabi_dsub>
 800c7ce:	a3a0      	add	r3, pc, #640	; (adr r3, 800ca50 <__ieee754_rem_pio2+0x318>)
 800c7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d4:	4604      	mov	r4, r0
 800c7d6:	460d      	mov	r5, r1
 800c7d8:	f7f3 fd5e 	bl	8000298 <__aeabi_dsub>
 800c7dc:	4602      	mov	r2, r0
 800c7de:	460b      	mov	r3, r1
 800c7e0:	e9ca 2300 	strd	r2, r3, [sl]
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	4629      	mov	r1, r5
 800c7e8:	f7f3 fd56 	bl	8000298 <__aeabi_dsub>
 800c7ec:	a398      	add	r3, pc, #608	; (adr r3, 800ca50 <__ieee754_rem_pio2+0x318>)
 800c7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f2:	e7db      	b.n	800c7ac <__ieee754_rem_pio2+0x74>
 800c7f4:	f7f3 fd52 	bl	800029c <__adddf3>
 800c7f8:	45b0      	cmp	r8, r6
 800c7fa:	4604      	mov	r4, r0
 800c7fc:	460d      	mov	r5, r1
 800c7fe:	d016      	beq.n	800c82e <__ieee754_rem_pio2+0xf6>
 800c800:	a38f      	add	r3, pc, #572	; (adr r3, 800ca40 <__ieee754_rem_pio2+0x308>)
 800c802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c806:	f7f3 fd49 	bl	800029c <__adddf3>
 800c80a:	4602      	mov	r2, r0
 800c80c:	460b      	mov	r3, r1
 800c80e:	e9ca 2300 	strd	r2, r3, [sl]
 800c812:	4620      	mov	r0, r4
 800c814:	4629      	mov	r1, r5
 800c816:	f7f3 fd3f 	bl	8000298 <__aeabi_dsub>
 800c81a:	a389      	add	r3, pc, #548	; (adr r3, 800ca40 <__ieee754_rem_pio2+0x308>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 fd3c 	bl	800029c <__adddf3>
 800c824:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c828:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c82c:	e7c4      	b.n	800c7b8 <__ieee754_rem_pio2+0x80>
 800c82e:	a386      	add	r3, pc, #536	; (adr r3, 800ca48 <__ieee754_rem_pio2+0x310>)
 800c830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c834:	f7f3 fd32 	bl	800029c <__adddf3>
 800c838:	a385      	add	r3, pc, #532	; (adr r3, 800ca50 <__ieee754_rem_pio2+0x318>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	4604      	mov	r4, r0
 800c840:	460d      	mov	r5, r1
 800c842:	f7f3 fd2b 	bl	800029c <__adddf3>
 800c846:	4602      	mov	r2, r0
 800c848:	460b      	mov	r3, r1
 800c84a:	e9ca 2300 	strd	r2, r3, [sl]
 800c84e:	4620      	mov	r0, r4
 800c850:	4629      	mov	r1, r5
 800c852:	f7f3 fd21 	bl	8000298 <__aeabi_dsub>
 800c856:	a37e      	add	r3, pc, #504	; (adr r3, 800ca50 <__ieee754_rem_pio2+0x318>)
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	e7e0      	b.n	800c820 <__ieee754_rem_pio2+0xe8>
 800c85e:	4b87      	ldr	r3, [pc, #540]	; (800ca7c <__ieee754_rem_pio2+0x344>)
 800c860:	4598      	cmp	r8, r3
 800c862:	f300 80d9 	bgt.w	800ca18 <__ieee754_rem_pio2+0x2e0>
 800c866:	f7ff fea3 	bl	800c5b0 <fabs>
 800c86a:	ec55 4b10 	vmov	r4, r5, d0
 800c86e:	ee10 0a10 	vmov	r0, s0
 800c872:	a379      	add	r3, pc, #484	; (adr r3, 800ca58 <__ieee754_rem_pio2+0x320>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f3 fec5 	bl	8000608 <__aeabi_dmul>
 800c87e:	4b80      	ldr	r3, [pc, #512]	; (800ca80 <__ieee754_rem_pio2+0x348>)
 800c880:	2200      	movs	r2, #0
 800c882:	f7f3 fd0b 	bl	800029c <__adddf3>
 800c886:	f7f4 f96f 	bl	8000b68 <__aeabi_d2iz>
 800c88a:	4683      	mov	fp, r0
 800c88c:	f7f3 fe52 	bl	8000534 <__aeabi_i2d>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	ec43 2b18 	vmov	d8, r2, r3
 800c898:	a367      	add	r3, pc, #412	; (adr r3, 800ca38 <__ieee754_rem_pio2+0x300>)
 800c89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89e:	f7f3 feb3 	bl	8000608 <__aeabi_dmul>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	f7f3 fcf5 	bl	8000298 <__aeabi_dsub>
 800c8ae:	a364      	add	r3, pc, #400	; (adr r3, 800ca40 <__ieee754_rem_pio2+0x308>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	460f      	mov	r7, r1
 800c8b8:	ec51 0b18 	vmov	r0, r1, d8
 800c8bc:	f7f3 fea4 	bl	8000608 <__aeabi_dmul>
 800c8c0:	f1bb 0f1f 	cmp.w	fp, #31
 800c8c4:	4604      	mov	r4, r0
 800c8c6:	460d      	mov	r5, r1
 800c8c8:	dc0d      	bgt.n	800c8e6 <__ieee754_rem_pio2+0x1ae>
 800c8ca:	4b6e      	ldr	r3, [pc, #440]	; (800ca84 <__ieee754_rem_pio2+0x34c>)
 800c8cc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800c8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d4:	4543      	cmp	r3, r8
 800c8d6:	d006      	beq.n	800c8e6 <__ieee754_rem_pio2+0x1ae>
 800c8d8:	4622      	mov	r2, r4
 800c8da:	462b      	mov	r3, r5
 800c8dc:	4630      	mov	r0, r6
 800c8de:	4639      	mov	r1, r7
 800c8e0:	f7f3 fcda 	bl	8000298 <__aeabi_dsub>
 800c8e4:	e00f      	b.n	800c906 <__ieee754_rem_pio2+0x1ce>
 800c8e6:	462b      	mov	r3, r5
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	4639      	mov	r1, r7
 800c8ee:	f7f3 fcd3 	bl	8000298 <__aeabi_dsub>
 800c8f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c8f6:	9303      	str	r3, [sp, #12]
 800c8f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c8fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800c900:	f1b8 0f10 	cmp.w	r8, #16
 800c904:	dc02      	bgt.n	800c90c <__ieee754_rem_pio2+0x1d4>
 800c906:	e9ca 0100 	strd	r0, r1, [sl]
 800c90a:	e039      	b.n	800c980 <__ieee754_rem_pio2+0x248>
 800c90c:	a34e      	add	r3, pc, #312	; (adr r3, 800ca48 <__ieee754_rem_pio2+0x310>)
 800c90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c912:	ec51 0b18 	vmov	r0, r1, d8
 800c916:	f7f3 fe77 	bl	8000608 <__aeabi_dmul>
 800c91a:	4604      	mov	r4, r0
 800c91c:	460d      	mov	r5, r1
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	4630      	mov	r0, r6
 800c924:	4639      	mov	r1, r7
 800c926:	f7f3 fcb7 	bl	8000298 <__aeabi_dsub>
 800c92a:	4602      	mov	r2, r0
 800c92c:	460b      	mov	r3, r1
 800c92e:	4680      	mov	r8, r0
 800c930:	4689      	mov	r9, r1
 800c932:	4630      	mov	r0, r6
 800c934:	4639      	mov	r1, r7
 800c936:	f7f3 fcaf 	bl	8000298 <__aeabi_dsub>
 800c93a:	4622      	mov	r2, r4
 800c93c:	462b      	mov	r3, r5
 800c93e:	f7f3 fcab 	bl	8000298 <__aeabi_dsub>
 800c942:	a343      	add	r3, pc, #268	; (adr r3, 800ca50 <__ieee754_rem_pio2+0x318>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	4604      	mov	r4, r0
 800c94a:	460d      	mov	r5, r1
 800c94c:	ec51 0b18 	vmov	r0, r1, d8
 800c950:	f7f3 fe5a 	bl	8000608 <__aeabi_dmul>
 800c954:	4622      	mov	r2, r4
 800c956:	462b      	mov	r3, r5
 800c958:	f7f3 fc9e 	bl	8000298 <__aeabi_dsub>
 800c95c:	4602      	mov	r2, r0
 800c95e:	460b      	mov	r3, r1
 800c960:	4604      	mov	r4, r0
 800c962:	460d      	mov	r5, r1
 800c964:	4640      	mov	r0, r8
 800c966:	4649      	mov	r1, r9
 800c968:	f7f3 fc96 	bl	8000298 <__aeabi_dsub>
 800c96c:	9a03      	ldr	r2, [sp, #12]
 800c96e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	2b31      	cmp	r3, #49	; 0x31
 800c976:	dc24      	bgt.n	800c9c2 <__ieee754_rem_pio2+0x28a>
 800c978:	e9ca 0100 	strd	r0, r1, [sl]
 800c97c:	4646      	mov	r6, r8
 800c97e:	464f      	mov	r7, r9
 800c980:	e9da 8900 	ldrd	r8, r9, [sl]
 800c984:	4630      	mov	r0, r6
 800c986:	4642      	mov	r2, r8
 800c988:	464b      	mov	r3, r9
 800c98a:	4639      	mov	r1, r7
 800c98c:	f7f3 fc84 	bl	8000298 <__aeabi_dsub>
 800c990:	462b      	mov	r3, r5
 800c992:	4622      	mov	r2, r4
 800c994:	f7f3 fc80 	bl	8000298 <__aeabi_dsub>
 800c998:	9b02      	ldr	r3, [sp, #8]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c9a0:	f6bf af0a 	bge.w	800c7b8 <__ieee754_rem_pio2+0x80>
 800c9a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c9a8:	f8ca 3004 	str.w	r3, [sl, #4]
 800c9ac:	f8ca 8000 	str.w	r8, [sl]
 800c9b0:	f8ca 0008 	str.w	r0, [sl, #8]
 800c9b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9b8:	f8ca 300c 	str.w	r3, [sl, #12]
 800c9bc:	f1cb 0b00 	rsb	fp, fp, #0
 800c9c0:	e6fa      	b.n	800c7b8 <__ieee754_rem_pio2+0x80>
 800c9c2:	a327      	add	r3, pc, #156	; (adr r3, 800ca60 <__ieee754_rem_pio2+0x328>)
 800c9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c8:	ec51 0b18 	vmov	r0, r1, d8
 800c9cc:	f7f3 fe1c 	bl	8000608 <__aeabi_dmul>
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	460d      	mov	r5, r1
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	4640      	mov	r0, r8
 800c9da:	4649      	mov	r1, r9
 800c9dc:	f7f3 fc5c 	bl	8000298 <__aeabi_dsub>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	4606      	mov	r6, r0
 800c9e6:	460f      	mov	r7, r1
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	f7f3 fc54 	bl	8000298 <__aeabi_dsub>
 800c9f0:	4622      	mov	r2, r4
 800c9f2:	462b      	mov	r3, r5
 800c9f4:	f7f3 fc50 	bl	8000298 <__aeabi_dsub>
 800c9f8:	a31b      	add	r3, pc, #108	; (adr r3, 800ca68 <__ieee754_rem_pio2+0x330>)
 800c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fe:	4604      	mov	r4, r0
 800ca00:	460d      	mov	r5, r1
 800ca02:	ec51 0b18 	vmov	r0, r1, d8
 800ca06:	f7f3 fdff 	bl	8000608 <__aeabi_dmul>
 800ca0a:	4622      	mov	r2, r4
 800ca0c:	462b      	mov	r3, r5
 800ca0e:	f7f3 fc43 	bl	8000298 <__aeabi_dsub>
 800ca12:	4604      	mov	r4, r0
 800ca14:	460d      	mov	r5, r1
 800ca16:	e75f      	b.n	800c8d8 <__ieee754_rem_pio2+0x1a0>
 800ca18:	4b1b      	ldr	r3, [pc, #108]	; (800ca88 <__ieee754_rem_pio2+0x350>)
 800ca1a:	4598      	cmp	r8, r3
 800ca1c:	dd36      	ble.n	800ca8c <__ieee754_rem_pio2+0x354>
 800ca1e:	ee10 2a10 	vmov	r2, s0
 800ca22:	462b      	mov	r3, r5
 800ca24:	4620      	mov	r0, r4
 800ca26:	4629      	mov	r1, r5
 800ca28:	f7f3 fc36 	bl	8000298 <__aeabi_dsub>
 800ca2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ca30:	e9ca 0100 	strd	r0, r1, [sl]
 800ca34:	e694      	b.n	800c760 <__ieee754_rem_pio2+0x28>
 800ca36:	bf00      	nop
 800ca38:	54400000 	.word	0x54400000
 800ca3c:	3ff921fb 	.word	0x3ff921fb
 800ca40:	1a626331 	.word	0x1a626331
 800ca44:	3dd0b461 	.word	0x3dd0b461
 800ca48:	1a600000 	.word	0x1a600000
 800ca4c:	3dd0b461 	.word	0x3dd0b461
 800ca50:	2e037073 	.word	0x2e037073
 800ca54:	3ba3198a 	.word	0x3ba3198a
 800ca58:	6dc9c883 	.word	0x6dc9c883
 800ca5c:	3fe45f30 	.word	0x3fe45f30
 800ca60:	2e000000 	.word	0x2e000000
 800ca64:	3ba3198a 	.word	0x3ba3198a
 800ca68:	252049c1 	.word	0x252049c1
 800ca6c:	397b839a 	.word	0x397b839a
 800ca70:	3fe921fb 	.word	0x3fe921fb
 800ca74:	4002d97b 	.word	0x4002d97b
 800ca78:	3ff921fb 	.word	0x3ff921fb
 800ca7c:	413921fb 	.word	0x413921fb
 800ca80:	3fe00000 	.word	0x3fe00000
 800ca84:	0800e400 	.word	0x0800e400
 800ca88:	7fefffff 	.word	0x7fefffff
 800ca8c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ca90:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ca94:	ee10 0a10 	vmov	r0, s0
 800ca98:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ca9c:	ee10 6a10 	vmov	r6, s0
 800caa0:	460f      	mov	r7, r1
 800caa2:	f7f4 f861 	bl	8000b68 <__aeabi_d2iz>
 800caa6:	f7f3 fd45 	bl	8000534 <__aeabi_i2d>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4630      	mov	r0, r6
 800cab0:	4639      	mov	r1, r7
 800cab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cab6:	f7f3 fbef 	bl	8000298 <__aeabi_dsub>
 800caba:	4b22      	ldr	r3, [pc, #136]	; (800cb44 <__ieee754_rem_pio2+0x40c>)
 800cabc:	2200      	movs	r2, #0
 800cabe:	f7f3 fda3 	bl	8000608 <__aeabi_dmul>
 800cac2:	460f      	mov	r7, r1
 800cac4:	4606      	mov	r6, r0
 800cac6:	f7f4 f84f 	bl	8000b68 <__aeabi_d2iz>
 800caca:	f7f3 fd33 	bl	8000534 <__aeabi_i2d>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	4630      	mov	r0, r6
 800cad4:	4639      	mov	r1, r7
 800cad6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cada:	f7f3 fbdd 	bl	8000298 <__aeabi_dsub>
 800cade:	4b19      	ldr	r3, [pc, #100]	; (800cb44 <__ieee754_rem_pio2+0x40c>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	f7f3 fd91 	bl	8000608 <__aeabi_dmul>
 800cae6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800caea:	ad04      	add	r5, sp, #16
 800caec:	f04f 0803 	mov.w	r8, #3
 800caf0:	46a9      	mov	r9, r5
 800caf2:	2600      	movs	r6, #0
 800caf4:	2700      	movs	r7, #0
 800caf6:	4632      	mov	r2, r6
 800caf8:	463b      	mov	r3, r7
 800cafa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800cafe:	46c3      	mov	fp, r8
 800cb00:	3d08      	subs	r5, #8
 800cb02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cb06:	f7f3 ffe7 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d1f3      	bne.n	800caf6 <__ieee754_rem_pio2+0x3be>
 800cb0e:	4b0e      	ldr	r3, [pc, #56]	; (800cb48 <__ieee754_rem_pio2+0x410>)
 800cb10:	9301      	str	r3, [sp, #4]
 800cb12:	2302      	movs	r3, #2
 800cb14:	9300      	str	r3, [sp, #0]
 800cb16:	4622      	mov	r2, r4
 800cb18:	465b      	mov	r3, fp
 800cb1a:	4651      	mov	r1, sl
 800cb1c:	4648      	mov	r0, r9
 800cb1e:	f000 f993 	bl	800ce48 <__kernel_rem_pio2>
 800cb22:	9b02      	ldr	r3, [sp, #8]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	4683      	mov	fp, r0
 800cb28:	f6bf ae46 	bge.w	800c7b8 <__ieee754_rem_pio2+0x80>
 800cb2c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800cb30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cb34:	f8ca 3004 	str.w	r3, [sl, #4]
 800cb38:	f8da 300c 	ldr.w	r3, [sl, #12]
 800cb3c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cb40:	e73a      	b.n	800c9b8 <__ieee754_rem_pio2+0x280>
 800cb42:	bf00      	nop
 800cb44:	41700000 	.word	0x41700000
 800cb48:	0800e480 	.word	0x0800e480

0800cb4c <__ieee754_sqrt>:
 800cb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb50:	ec55 4b10 	vmov	r4, r5, d0
 800cb54:	4e56      	ldr	r6, [pc, #344]	; (800ccb0 <__ieee754_sqrt+0x164>)
 800cb56:	43ae      	bics	r6, r5
 800cb58:	ee10 0a10 	vmov	r0, s0
 800cb5c:	ee10 3a10 	vmov	r3, s0
 800cb60:	4629      	mov	r1, r5
 800cb62:	462a      	mov	r2, r5
 800cb64:	d110      	bne.n	800cb88 <__ieee754_sqrt+0x3c>
 800cb66:	ee10 2a10 	vmov	r2, s0
 800cb6a:	462b      	mov	r3, r5
 800cb6c:	f7f3 fd4c 	bl	8000608 <__aeabi_dmul>
 800cb70:	4602      	mov	r2, r0
 800cb72:	460b      	mov	r3, r1
 800cb74:	4620      	mov	r0, r4
 800cb76:	4629      	mov	r1, r5
 800cb78:	f7f3 fb90 	bl	800029c <__adddf3>
 800cb7c:	4604      	mov	r4, r0
 800cb7e:	460d      	mov	r5, r1
 800cb80:	ec45 4b10 	vmov	d0, r4, r5
 800cb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb88:	2d00      	cmp	r5, #0
 800cb8a:	dc10      	bgt.n	800cbae <__ieee754_sqrt+0x62>
 800cb8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cb90:	4330      	orrs	r0, r6
 800cb92:	d0f5      	beq.n	800cb80 <__ieee754_sqrt+0x34>
 800cb94:	b15d      	cbz	r5, 800cbae <__ieee754_sqrt+0x62>
 800cb96:	ee10 2a10 	vmov	r2, s0
 800cb9a:	462b      	mov	r3, r5
 800cb9c:	ee10 0a10 	vmov	r0, s0
 800cba0:	f7f3 fb7a 	bl	8000298 <__aeabi_dsub>
 800cba4:	4602      	mov	r2, r0
 800cba6:	460b      	mov	r3, r1
 800cba8:	f7f3 fe58 	bl	800085c <__aeabi_ddiv>
 800cbac:	e7e6      	b.n	800cb7c <__ieee754_sqrt+0x30>
 800cbae:	1509      	asrs	r1, r1, #20
 800cbb0:	d076      	beq.n	800cca0 <__ieee754_sqrt+0x154>
 800cbb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cbb6:	07ce      	lsls	r6, r1, #31
 800cbb8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800cbbc:	bf5e      	ittt	pl
 800cbbe:	0fda      	lsrpl	r2, r3, #31
 800cbc0:	005b      	lslpl	r3, r3, #1
 800cbc2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800cbc6:	0fda      	lsrs	r2, r3, #31
 800cbc8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800cbcc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	106d      	asrs	r5, r5, #1
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	f04f 0e16 	mov.w	lr, #22
 800cbda:	4684      	mov	ip, r0
 800cbdc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cbe0:	eb0c 0401 	add.w	r4, ip, r1
 800cbe4:	4294      	cmp	r4, r2
 800cbe6:	bfde      	ittt	le
 800cbe8:	1b12      	suble	r2, r2, r4
 800cbea:	eb04 0c01 	addle.w	ip, r4, r1
 800cbee:	1840      	addle	r0, r0, r1
 800cbf0:	0052      	lsls	r2, r2, #1
 800cbf2:	f1be 0e01 	subs.w	lr, lr, #1
 800cbf6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cbfa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cbfe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc02:	d1ed      	bne.n	800cbe0 <__ieee754_sqrt+0x94>
 800cc04:	4671      	mov	r1, lr
 800cc06:	2720      	movs	r7, #32
 800cc08:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cc0c:	4562      	cmp	r2, ip
 800cc0e:	eb04 060e 	add.w	r6, r4, lr
 800cc12:	dc02      	bgt.n	800cc1a <__ieee754_sqrt+0xce>
 800cc14:	d113      	bne.n	800cc3e <__ieee754_sqrt+0xf2>
 800cc16:	429e      	cmp	r6, r3
 800cc18:	d811      	bhi.n	800cc3e <__ieee754_sqrt+0xf2>
 800cc1a:	2e00      	cmp	r6, #0
 800cc1c:	eb06 0e04 	add.w	lr, r6, r4
 800cc20:	da43      	bge.n	800ccaa <__ieee754_sqrt+0x15e>
 800cc22:	f1be 0f00 	cmp.w	lr, #0
 800cc26:	db40      	blt.n	800ccaa <__ieee754_sqrt+0x15e>
 800cc28:	f10c 0801 	add.w	r8, ip, #1
 800cc2c:	eba2 020c 	sub.w	r2, r2, ip
 800cc30:	429e      	cmp	r6, r3
 800cc32:	bf88      	it	hi
 800cc34:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800cc38:	1b9b      	subs	r3, r3, r6
 800cc3a:	4421      	add	r1, r4
 800cc3c:	46c4      	mov	ip, r8
 800cc3e:	0052      	lsls	r2, r2, #1
 800cc40:	3f01      	subs	r7, #1
 800cc42:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cc46:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cc4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc4e:	d1dd      	bne.n	800cc0c <__ieee754_sqrt+0xc0>
 800cc50:	4313      	orrs	r3, r2
 800cc52:	d006      	beq.n	800cc62 <__ieee754_sqrt+0x116>
 800cc54:	1c4c      	adds	r4, r1, #1
 800cc56:	bf13      	iteet	ne
 800cc58:	3101      	addne	r1, #1
 800cc5a:	3001      	addeq	r0, #1
 800cc5c:	4639      	moveq	r1, r7
 800cc5e:	f021 0101 	bicne.w	r1, r1, #1
 800cc62:	1043      	asrs	r3, r0, #1
 800cc64:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cc68:	0849      	lsrs	r1, r1, #1
 800cc6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cc6e:	07c2      	lsls	r2, r0, #31
 800cc70:	bf48      	it	mi
 800cc72:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cc76:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800cc7a:	460c      	mov	r4, r1
 800cc7c:	463d      	mov	r5, r7
 800cc7e:	e77f      	b.n	800cb80 <__ieee754_sqrt+0x34>
 800cc80:	0ada      	lsrs	r2, r3, #11
 800cc82:	3815      	subs	r0, #21
 800cc84:	055b      	lsls	r3, r3, #21
 800cc86:	2a00      	cmp	r2, #0
 800cc88:	d0fa      	beq.n	800cc80 <__ieee754_sqrt+0x134>
 800cc8a:	02d7      	lsls	r7, r2, #11
 800cc8c:	d50a      	bpl.n	800cca4 <__ieee754_sqrt+0x158>
 800cc8e:	f1c1 0420 	rsb	r4, r1, #32
 800cc92:	fa23 f404 	lsr.w	r4, r3, r4
 800cc96:	1e4d      	subs	r5, r1, #1
 800cc98:	408b      	lsls	r3, r1
 800cc9a:	4322      	orrs	r2, r4
 800cc9c:	1b41      	subs	r1, r0, r5
 800cc9e:	e788      	b.n	800cbb2 <__ieee754_sqrt+0x66>
 800cca0:	4608      	mov	r0, r1
 800cca2:	e7f0      	b.n	800cc86 <__ieee754_sqrt+0x13a>
 800cca4:	0052      	lsls	r2, r2, #1
 800cca6:	3101      	adds	r1, #1
 800cca8:	e7ef      	b.n	800cc8a <__ieee754_sqrt+0x13e>
 800ccaa:	46e0      	mov	r8, ip
 800ccac:	e7be      	b.n	800cc2c <__ieee754_sqrt+0xe0>
 800ccae:	bf00      	nop
 800ccb0:	7ff00000 	.word	0x7ff00000
 800ccb4:	00000000 	.word	0x00000000

0800ccb8 <__kernel_cos>:
 800ccb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccbc:	ec57 6b10 	vmov	r6, r7, d0
 800ccc0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ccc4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ccc8:	ed8d 1b00 	vstr	d1, [sp]
 800cccc:	da07      	bge.n	800ccde <__kernel_cos+0x26>
 800ccce:	ee10 0a10 	vmov	r0, s0
 800ccd2:	4639      	mov	r1, r7
 800ccd4:	f7f3 ff48 	bl	8000b68 <__aeabi_d2iz>
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	f000 8088 	beq.w	800cdee <__kernel_cos+0x136>
 800ccde:	4632      	mov	r2, r6
 800cce0:	463b      	mov	r3, r7
 800cce2:	4630      	mov	r0, r6
 800cce4:	4639      	mov	r1, r7
 800cce6:	f7f3 fc8f 	bl	8000608 <__aeabi_dmul>
 800ccea:	4b51      	ldr	r3, [pc, #324]	; (800ce30 <__kernel_cos+0x178>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	4604      	mov	r4, r0
 800ccf0:	460d      	mov	r5, r1
 800ccf2:	f7f3 fc89 	bl	8000608 <__aeabi_dmul>
 800ccf6:	a340      	add	r3, pc, #256	; (adr r3, 800cdf8 <__kernel_cos+0x140>)
 800ccf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfc:	4682      	mov	sl, r0
 800ccfe:	468b      	mov	fp, r1
 800cd00:	4620      	mov	r0, r4
 800cd02:	4629      	mov	r1, r5
 800cd04:	f7f3 fc80 	bl	8000608 <__aeabi_dmul>
 800cd08:	a33d      	add	r3, pc, #244	; (adr r3, 800ce00 <__kernel_cos+0x148>)
 800cd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0e:	f7f3 fac5 	bl	800029c <__adddf3>
 800cd12:	4622      	mov	r2, r4
 800cd14:	462b      	mov	r3, r5
 800cd16:	f7f3 fc77 	bl	8000608 <__aeabi_dmul>
 800cd1a:	a33b      	add	r3, pc, #236	; (adr r3, 800ce08 <__kernel_cos+0x150>)
 800cd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd20:	f7f3 faba 	bl	8000298 <__aeabi_dsub>
 800cd24:	4622      	mov	r2, r4
 800cd26:	462b      	mov	r3, r5
 800cd28:	f7f3 fc6e 	bl	8000608 <__aeabi_dmul>
 800cd2c:	a338      	add	r3, pc, #224	; (adr r3, 800ce10 <__kernel_cos+0x158>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	f7f3 fab3 	bl	800029c <__adddf3>
 800cd36:	4622      	mov	r2, r4
 800cd38:	462b      	mov	r3, r5
 800cd3a:	f7f3 fc65 	bl	8000608 <__aeabi_dmul>
 800cd3e:	a336      	add	r3, pc, #216	; (adr r3, 800ce18 <__kernel_cos+0x160>)
 800cd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd44:	f7f3 faa8 	bl	8000298 <__aeabi_dsub>
 800cd48:	4622      	mov	r2, r4
 800cd4a:	462b      	mov	r3, r5
 800cd4c:	f7f3 fc5c 	bl	8000608 <__aeabi_dmul>
 800cd50:	a333      	add	r3, pc, #204	; (adr r3, 800ce20 <__kernel_cos+0x168>)
 800cd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd56:	f7f3 faa1 	bl	800029c <__adddf3>
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	462b      	mov	r3, r5
 800cd5e:	f7f3 fc53 	bl	8000608 <__aeabi_dmul>
 800cd62:	4622      	mov	r2, r4
 800cd64:	462b      	mov	r3, r5
 800cd66:	f7f3 fc4f 	bl	8000608 <__aeabi_dmul>
 800cd6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd6e:	4604      	mov	r4, r0
 800cd70:	460d      	mov	r5, r1
 800cd72:	4630      	mov	r0, r6
 800cd74:	4639      	mov	r1, r7
 800cd76:	f7f3 fc47 	bl	8000608 <__aeabi_dmul>
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	4629      	mov	r1, r5
 800cd80:	4620      	mov	r0, r4
 800cd82:	f7f3 fa89 	bl	8000298 <__aeabi_dsub>
 800cd86:	4b2b      	ldr	r3, [pc, #172]	; (800ce34 <__kernel_cos+0x17c>)
 800cd88:	4598      	cmp	r8, r3
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460f      	mov	r7, r1
 800cd8e:	dc10      	bgt.n	800cdb2 <__kernel_cos+0xfa>
 800cd90:	4602      	mov	r2, r0
 800cd92:	460b      	mov	r3, r1
 800cd94:	4650      	mov	r0, sl
 800cd96:	4659      	mov	r1, fp
 800cd98:	f7f3 fa7e 	bl	8000298 <__aeabi_dsub>
 800cd9c:	460b      	mov	r3, r1
 800cd9e:	4926      	ldr	r1, [pc, #152]	; (800ce38 <__kernel_cos+0x180>)
 800cda0:	4602      	mov	r2, r0
 800cda2:	2000      	movs	r0, #0
 800cda4:	f7f3 fa78 	bl	8000298 <__aeabi_dsub>
 800cda8:	ec41 0b10 	vmov	d0, r0, r1
 800cdac:	b003      	add	sp, #12
 800cdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb2:	4b22      	ldr	r3, [pc, #136]	; (800ce3c <__kernel_cos+0x184>)
 800cdb4:	4920      	ldr	r1, [pc, #128]	; (800ce38 <__kernel_cos+0x180>)
 800cdb6:	4598      	cmp	r8, r3
 800cdb8:	bfcc      	ite	gt
 800cdba:	4d21      	ldrgt	r5, [pc, #132]	; (800ce40 <__kernel_cos+0x188>)
 800cdbc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800cdc0:	2400      	movs	r4, #0
 800cdc2:	4622      	mov	r2, r4
 800cdc4:	462b      	mov	r3, r5
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	f7f3 fa66 	bl	8000298 <__aeabi_dsub>
 800cdcc:	4622      	mov	r2, r4
 800cdce:	4680      	mov	r8, r0
 800cdd0:	4689      	mov	r9, r1
 800cdd2:	462b      	mov	r3, r5
 800cdd4:	4650      	mov	r0, sl
 800cdd6:	4659      	mov	r1, fp
 800cdd8:	f7f3 fa5e 	bl	8000298 <__aeabi_dsub>
 800cddc:	4632      	mov	r2, r6
 800cdde:	463b      	mov	r3, r7
 800cde0:	f7f3 fa5a 	bl	8000298 <__aeabi_dsub>
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	4640      	mov	r0, r8
 800cdea:	4649      	mov	r1, r9
 800cdec:	e7da      	b.n	800cda4 <__kernel_cos+0xec>
 800cdee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ce28 <__kernel_cos+0x170>
 800cdf2:	e7db      	b.n	800cdac <__kernel_cos+0xf4>
 800cdf4:	f3af 8000 	nop.w
 800cdf8:	be8838d4 	.word	0xbe8838d4
 800cdfc:	bda8fae9 	.word	0xbda8fae9
 800ce00:	bdb4b1c4 	.word	0xbdb4b1c4
 800ce04:	3e21ee9e 	.word	0x3e21ee9e
 800ce08:	809c52ad 	.word	0x809c52ad
 800ce0c:	3e927e4f 	.word	0x3e927e4f
 800ce10:	19cb1590 	.word	0x19cb1590
 800ce14:	3efa01a0 	.word	0x3efa01a0
 800ce18:	16c15177 	.word	0x16c15177
 800ce1c:	3f56c16c 	.word	0x3f56c16c
 800ce20:	5555554c 	.word	0x5555554c
 800ce24:	3fa55555 	.word	0x3fa55555
 800ce28:	00000000 	.word	0x00000000
 800ce2c:	3ff00000 	.word	0x3ff00000
 800ce30:	3fe00000 	.word	0x3fe00000
 800ce34:	3fd33332 	.word	0x3fd33332
 800ce38:	3ff00000 	.word	0x3ff00000
 800ce3c:	3fe90000 	.word	0x3fe90000
 800ce40:	3fd20000 	.word	0x3fd20000
 800ce44:	00000000 	.word	0x00000000

0800ce48 <__kernel_rem_pio2>:
 800ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce4c:	ed2d 8b02 	vpush	{d8}
 800ce50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ce54:	f112 0f14 	cmn.w	r2, #20
 800ce58:	9308      	str	r3, [sp, #32]
 800ce5a:	9101      	str	r1, [sp, #4]
 800ce5c:	4bc6      	ldr	r3, [pc, #792]	; (800d178 <__kernel_rem_pio2+0x330>)
 800ce5e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ce60:	9009      	str	r0, [sp, #36]	; 0x24
 800ce62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce66:	9304      	str	r3, [sp, #16]
 800ce68:	9b08      	ldr	r3, [sp, #32]
 800ce6a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ce6e:	bfa8      	it	ge
 800ce70:	1ed4      	subge	r4, r2, #3
 800ce72:	9306      	str	r3, [sp, #24]
 800ce74:	bfb2      	itee	lt
 800ce76:	2400      	movlt	r4, #0
 800ce78:	2318      	movge	r3, #24
 800ce7a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ce7e:	f06f 0317 	mvn.w	r3, #23
 800ce82:	fb04 3303 	mla	r3, r4, r3, r3
 800ce86:	eb03 0a02 	add.w	sl, r3, r2
 800ce8a:	9b04      	ldr	r3, [sp, #16]
 800ce8c:	9a06      	ldr	r2, [sp, #24]
 800ce8e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d168 <__kernel_rem_pio2+0x320>
 800ce92:	eb03 0802 	add.w	r8, r3, r2
 800ce96:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ce98:	1aa7      	subs	r7, r4, r2
 800ce9a:	ae20      	add	r6, sp, #128	; 0x80
 800ce9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cea0:	2500      	movs	r5, #0
 800cea2:	4545      	cmp	r5, r8
 800cea4:	dd18      	ble.n	800ced8 <__kernel_rem_pio2+0x90>
 800cea6:	9b08      	ldr	r3, [sp, #32]
 800cea8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ceac:	aa20      	add	r2, sp, #128	; 0x80
 800ceae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800d168 <__kernel_rem_pio2+0x320>
 800ceb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ceb6:	f1c3 0301 	rsb	r3, r3, #1
 800ceba:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800cebe:	9307      	str	r3, [sp, #28]
 800cec0:	9b07      	ldr	r3, [sp, #28]
 800cec2:	9a04      	ldr	r2, [sp, #16]
 800cec4:	4443      	add	r3, r8
 800cec6:	429a      	cmp	r2, r3
 800cec8:	db2f      	blt.n	800cf2a <__kernel_rem_pio2+0xe2>
 800ceca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cece:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ced2:	462f      	mov	r7, r5
 800ced4:	2600      	movs	r6, #0
 800ced6:	e01b      	b.n	800cf10 <__kernel_rem_pio2+0xc8>
 800ced8:	42ef      	cmn	r7, r5
 800ceda:	d407      	bmi.n	800ceec <__kernel_rem_pio2+0xa4>
 800cedc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cee0:	f7f3 fb28 	bl	8000534 <__aeabi_i2d>
 800cee4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cee8:	3501      	adds	r5, #1
 800ceea:	e7da      	b.n	800cea2 <__kernel_rem_pio2+0x5a>
 800ceec:	ec51 0b18 	vmov	r0, r1, d8
 800cef0:	e7f8      	b.n	800cee4 <__kernel_rem_pio2+0x9c>
 800cef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cef6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cefa:	f7f3 fb85 	bl	8000608 <__aeabi_dmul>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf06:	f7f3 f9c9 	bl	800029c <__adddf3>
 800cf0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf0e:	3601      	adds	r6, #1
 800cf10:	9b06      	ldr	r3, [sp, #24]
 800cf12:	429e      	cmp	r6, r3
 800cf14:	f1a7 0708 	sub.w	r7, r7, #8
 800cf18:	ddeb      	ble.n	800cef2 <__kernel_rem_pio2+0xaa>
 800cf1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf1e:	3508      	adds	r5, #8
 800cf20:	ecab 7b02 	vstmia	fp!, {d7}
 800cf24:	f108 0801 	add.w	r8, r8, #1
 800cf28:	e7ca      	b.n	800cec0 <__kernel_rem_pio2+0x78>
 800cf2a:	9b04      	ldr	r3, [sp, #16]
 800cf2c:	aa0c      	add	r2, sp, #48	; 0x30
 800cf2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cf32:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf34:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cf36:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cf3a:	9c04      	ldr	r4, [sp, #16]
 800cf3c:	930a      	str	r3, [sp, #40]	; 0x28
 800cf3e:	ab98      	add	r3, sp, #608	; 0x260
 800cf40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf44:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cf48:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800cf4c:	f8cd b008 	str.w	fp, [sp, #8]
 800cf50:	4625      	mov	r5, r4
 800cf52:	2d00      	cmp	r5, #0
 800cf54:	dc78      	bgt.n	800d048 <__kernel_rem_pio2+0x200>
 800cf56:	ec47 6b10 	vmov	d0, r6, r7
 800cf5a:	4650      	mov	r0, sl
 800cf5c:	f000 fdc8 	bl	800daf0 <scalbn>
 800cf60:	ec57 6b10 	vmov	r6, r7, d0
 800cf64:	2200      	movs	r2, #0
 800cf66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cf6a:	ee10 0a10 	vmov	r0, s0
 800cf6e:	4639      	mov	r1, r7
 800cf70:	f7f3 fb4a 	bl	8000608 <__aeabi_dmul>
 800cf74:	ec41 0b10 	vmov	d0, r0, r1
 800cf78:	f000 fd3a 	bl	800d9f0 <floor>
 800cf7c:	4b7f      	ldr	r3, [pc, #508]	; (800d17c <__kernel_rem_pio2+0x334>)
 800cf7e:	ec51 0b10 	vmov	r0, r1, d0
 800cf82:	2200      	movs	r2, #0
 800cf84:	f7f3 fb40 	bl	8000608 <__aeabi_dmul>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 f982 	bl	8000298 <__aeabi_dsub>
 800cf94:	460f      	mov	r7, r1
 800cf96:	4606      	mov	r6, r0
 800cf98:	f7f3 fde6 	bl	8000b68 <__aeabi_d2iz>
 800cf9c:	9007      	str	r0, [sp, #28]
 800cf9e:	f7f3 fac9 	bl	8000534 <__aeabi_i2d>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	4639      	mov	r1, r7
 800cfaa:	f7f3 f975 	bl	8000298 <__aeabi_dsub>
 800cfae:	f1ba 0f00 	cmp.w	sl, #0
 800cfb2:	4606      	mov	r6, r0
 800cfb4:	460f      	mov	r7, r1
 800cfb6:	dd70      	ble.n	800d09a <__kernel_rem_pio2+0x252>
 800cfb8:	1e62      	subs	r2, r4, #1
 800cfba:	ab0c      	add	r3, sp, #48	; 0x30
 800cfbc:	9d07      	ldr	r5, [sp, #28]
 800cfbe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800cfc2:	f1ca 0118 	rsb	r1, sl, #24
 800cfc6:	fa40 f301 	asr.w	r3, r0, r1
 800cfca:	441d      	add	r5, r3
 800cfcc:	408b      	lsls	r3, r1
 800cfce:	1ac0      	subs	r0, r0, r3
 800cfd0:	ab0c      	add	r3, sp, #48	; 0x30
 800cfd2:	9507      	str	r5, [sp, #28]
 800cfd4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800cfd8:	f1ca 0317 	rsb	r3, sl, #23
 800cfdc:	fa40 f303 	asr.w	r3, r0, r3
 800cfe0:	9302      	str	r3, [sp, #8]
 800cfe2:	9b02      	ldr	r3, [sp, #8]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	dd66      	ble.n	800d0b6 <__kernel_rem_pio2+0x26e>
 800cfe8:	9b07      	ldr	r3, [sp, #28]
 800cfea:	2200      	movs	r2, #0
 800cfec:	3301      	adds	r3, #1
 800cfee:	9307      	str	r3, [sp, #28]
 800cff0:	4615      	mov	r5, r2
 800cff2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cff6:	4294      	cmp	r4, r2
 800cff8:	f300 8099 	bgt.w	800d12e <__kernel_rem_pio2+0x2e6>
 800cffc:	f1ba 0f00 	cmp.w	sl, #0
 800d000:	dd07      	ble.n	800d012 <__kernel_rem_pio2+0x1ca>
 800d002:	f1ba 0f01 	cmp.w	sl, #1
 800d006:	f000 80a5 	beq.w	800d154 <__kernel_rem_pio2+0x30c>
 800d00a:	f1ba 0f02 	cmp.w	sl, #2
 800d00e:	f000 80c1 	beq.w	800d194 <__kernel_rem_pio2+0x34c>
 800d012:	9b02      	ldr	r3, [sp, #8]
 800d014:	2b02      	cmp	r3, #2
 800d016:	d14e      	bne.n	800d0b6 <__kernel_rem_pio2+0x26e>
 800d018:	4632      	mov	r2, r6
 800d01a:	463b      	mov	r3, r7
 800d01c:	4958      	ldr	r1, [pc, #352]	; (800d180 <__kernel_rem_pio2+0x338>)
 800d01e:	2000      	movs	r0, #0
 800d020:	f7f3 f93a 	bl	8000298 <__aeabi_dsub>
 800d024:	4606      	mov	r6, r0
 800d026:	460f      	mov	r7, r1
 800d028:	2d00      	cmp	r5, #0
 800d02a:	d044      	beq.n	800d0b6 <__kernel_rem_pio2+0x26e>
 800d02c:	4650      	mov	r0, sl
 800d02e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d170 <__kernel_rem_pio2+0x328>
 800d032:	f000 fd5d 	bl	800daf0 <scalbn>
 800d036:	4630      	mov	r0, r6
 800d038:	4639      	mov	r1, r7
 800d03a:	ec53 2b10 	vmov	r2, r3, d0
 800d03e:	f7f3 f92b 	bl	8000298 <__aeabi_dsub>
 800d042:	4606      	mov	r6, r0
 800d044:	460f      	mov	r7, r1
 800d046:	e036      	b.n	800d0b6 <__kernel_rem_pio2+0x26e>
 800d048:	4b4e      	ldr	r3, [pc, #312]	; (800d184 <__kernel_rem_pio2+0x33c>)
 800d04a:	2200      	movs	r2, #0
 800d04c:	4630      	mov	r0, r6
 800d04e:	4639      	mov	r1, r7
 800d050:	f7f3 fada 	bl	8000608 <__aeabi_dmul>
 800d054:	f7f3 fd88 	bl	8000b68 <__aeabi_d2iz>
 800d058:	f7f3 fa6c 	bl	8000534 <__aeabi_i2d>
 800d05c:	4b4a      	ldr	r3, [pc, #296]	; (800d188 <__kernel_rem_pio2+0x340>)
 800d05e:	2200      	movs	r2, #0
 800d060:	4680      	mov	r8, r0
 800d062:	4689      	mov	r9, r1
 800d064:	f7f3 fad0 	bl	8000608 <__aeabi_dmul>
 800d068:	4602      	mov	r2, r0
 800d06a:	460b      	mov	r3, r1
 800d06c:	4630      	mov	r0, r6
 800d06e:	4639      	mov	r1, r7
 800d070:	f7f3 f912 	bl	8000298 <__aeabi_dsub>
 800d074:	f7f3 fd78 	bl	8000b68 <__aeabi_d2iz>
 800d078:	9b02      	ldr	r3, [sp, #8]
 800d07a:	f843 0b04 	str.w	r0, [r3], #4
 800d07e:	3d01      	subs	r5, #1
 800d080:	9302      	str	r3, [sp, #8]
 800d082:	ab70      	add	r3, sp, #448	; 0x1c0
 800d084:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d08c:	4640      	mov	r0, r8
 800d08e:	4649      	mov	r1, r9
 800d090:	f7f3 f904 	bl	800029c <__adddf3>
 800d094:	4606      	mov	r6, r0
 800d096:	460f      	mov	r7, r1
 800d098:	e75b      	b.n	800cf52 <__kernel_rem_pio2+0x10a>
 800d09a:	d105      	bne.n	800d0a8 <__kernel_rem_pio2+0x260>
 800d09c:	1e63      	subs	r3, r4, #1
 800d09e:	aa0c      	add	r2, sp, #48	; 0x30
 800d0a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d0a4:	15c3      	asrs	r3, r0, #23
 800d0a6:	e79b      	b.n	800cfe0 <__kernel_rem_pio2+0x198>
 800d0a8:	4b38      	ldr	r3, [pc, #224]	; (800d18c <__kernel_rem_pio2+0x344>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f7f3 fd32 	bl	8000b14 <__aeabi_dcmpge>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d139      	bne.n	800d128 <__kernel_rem_pio2+0x2e0>
 800d0b4:	9002      	str	r0, [sp, #8]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	4639      	mov	r1, r7
 800d0be:	f7f3 fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	f000 80b4 	beq.w	800d230 <__kernel_rem_pio2+0x3e8>
 800d0c8:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800d0cc:	465b      	mov	r3, fp
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	9904      	ldr	r1, [sp, #16]
 800d0d2:	428b      	cmp	r3, r1
 800d0d4:	da65      	bge.n	800d1a2 <__kernel_rem_pio2+0x35a>
 800d0d6:	2a00      	cmp	r2, #0
 800d0d8:	d07b      	beq.n	800d1d2 <__kernel_rem_pio2+0x38a>
 800d0da:	ab0c      	add	r3, sp, #48	; 0x30
 800d0dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800d0e0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	f000 80a0 	beq.w	800d22a <__kernel_rem_pio2+0x3e2>
 800d0ea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800d170 <__kernel_rem_pio2+0x328>
 800d0ee:	4650      	mov	r0, sl
 800d0f0:	f000 fcfe 	bl	800daf0 <scalbn>
 800d0f4:	4f23      	ldr	r7, [pc, #140]	; (800d184 <__kernel_rem_pio2+0x33c>)
 800d0f6:	ec55 4b10 	vmov	r4, r5, d0
 800d0fa:	46d8      	mov	r8, fp
 800d0fc:	2600      	movs	r6, #0
 800d0fe:	f1b8 0f00 	cmp.w	r8, #0
 800d102:	f280 80cf 	bge.w	800d2a4 <__kernel_rem_pio2+0x45c>
 800d106:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800d168 <__kernel_rem_pio2+0x320>
 800d10a:	465f      	mov	r7, fp
 800d10c:	f04f 0800 	mov.w	r8, #0
 800d110:	2f00      	cmp	r7, #0
 800d112:	f2c0 80fd 	blt.w	800d310 <__kernel_rem_pio2+0x4c8>
 800d116:	ab70      	add	r3, sp, #448	; 0x1c0
 800d118:	f8df a074 	ldr.w	sl, [pc, #116]	; 800d190 <__kernel_rem_pio2+0x348>
 800d11c:	ec55 4b18 	vmov	r4, r5, d8
 800d120:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800d124:	2600      	movs	r6, #0
 800d126:	e0e5      	b.n	800d2f4 <__kernel_rem_pio2+0x4ac>
 800d128:	2302      	movs	r3, #2
 800d12a:	9302      	str	r3, [sp, #8]
 800d12c:	e75c      	b.n	800cfe8 <__kernel_rem_pio2+0x1a0>
 800d12e:	f8db 3000 	ldr.w	r3, [fp]
 800d132:	b955      	cbnz	r5, 800d14a <__kernel_rem_pio2+0x302>
 800d134:	b123      	cbz	r3, 800d140 <__kernel_rem_pio2+0x2f8>
 800d136:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d13a:	f8cb 3000 	str.w	r3, [fp]
 800d13e:	2301      	movs	r3, #1
 800d140:	3201      	adds	r2, #1
 800d142:	f10b 0b04 	add.w	fp, fp, #4
 800d146:	461d      	mov	r5, r3
 800d148:	e755      	b.n	800cff6 <__kernel_rem_pio2+0x1ae>
 800d14a:	1acb      	subs	r3, r1, r3
 800d14c:	f8cb 3000 	str.w	r3, [fp]
 800d150:	462b      	mov	r3, r5
 800d152:	e7f5      	b.n	800d140 <__kernel_rem_pio2+0x2f8>
 800d154:	1e62      	subs	r2, r4, #1
 800d156:	ab0c      	add	r3, sp, #48	; 0x30
 800d158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d15c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d160:	a90c      	add	r1, sp, #48	; 0x30
 800d162:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d166:	e754      	b.n	800d012 <__kernel_rem_pio2+0x1ca>
	...
 800d174:	3ff00000 	.word	0x3ff00000
 800d178:	0800e5c8 	.word	0x0800e5c8
 800d17c:	40200000 	.word	0x40200000
 800d180:	3ff00000 	.word	0x3ff00000
 800d184:	3e700000 	.word	0x3e700000
 800d188:	41700000 	.word	0x41700000
 800d18c:	3fe00000 	.word	0x3fe00000
 800d190:	0800e588 	.word	0x0800e588
 800d194:	1e62      	subs	r2, r4, #1
 800d196:	ab0c      	add	r3, sp, #48	; 0x30
 800d198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d19c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d1a0:	e7de      	b.n	800d160 <__kernel_rem_pio2+0x318>
 800d1a2:	a90c      	add	r1, sp, #48	; 0x30
 800d1a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d1a8:	3b01      	subs	r3, #1
 800d1aa:	430a      	orrs	r2, r1
 800d1ac:	e790      	b.n	800d0d0 <__kernel_rem_pio2+0x288>
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d1b4:	2900      	cmp	r1, #0
 800d1b6:	d0fa      	beq.n	800d1ae <__kernel_rem_pio2+0x366>
 800d1b8:	9a08      	ldr	r2, [sp, #32]
 800d1ba:	18e3      	adds	r3, r4, r3
 800d1bc:	18a6      	adds	r6, r4, r2
 800d1be:	aa20      	add	r2, sp, #128	; 0x80
 800d1c0:	1c65      	adds	r5, r4, #1
 800d1c2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800d1c6:	9302      	str	r3, [sp, #8]
 800d1c8:	9b02      	ldr	r3, [sp, #8]
 800d1ca:	42ab      	cmp	r3, r5
 800d1cc:	da04      	bge.n	800d1d8 <__kernel_rem_pio2+0x390>
 800d1ce:	461c      	mov	r4, r3
 800d1d0:	e6b5      	b.n	800cf3e <__kernel_rem_pio2+0xf6>
 800d1d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e7eb      	b.n	800d1b0 <__kernel_rem_pio2+0x368>
 800d1d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1de:	f7f3 f9a9 	bl	8000534 <__aeabi_i2d>
 800d1e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1e8:	46b3      	mov	fp, r6
 800d1ea:	461c      	mov	r4, r3
 800d1ec:	2700      	movs	r7, #0
 800d1ee:	f04f 0800 	mov.w	r8, #0
 800d1f2:	f04f 0900 	mov.w	r9, #0
 800d1f6:	9b06      	ldr	r3, [sp, #24]
 800d1f8:	429f      	cmp	r7, r3
 800d1fa:	dd06      	ble.n	800d20a <__kernel_rem_pio2+0x3c2>
 800d1fc:	ab70      	add	r3, sp, #448	; 0x1c0
 800d1fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d202:	e9c3 8900 	strd	r8, r9, [r3]
 800d206:	3501      	adds	r5, #1
 800d208:	e7de      	b.n	800d1c8 <__kernel_rem_pio2+0x380>
 800d20a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d20e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d212:	f7f3 f9f9 	bl	8000608 <__aeabi_dmul>
 800d216:	4602      	mov	r2, r0
 800d218:	460b      	mov	r3, r1
 800d21a:	4640      	mov	r0, r8
 800d21c:	4649      	mov	r1, r9
 800d21e:	f7f3 f83d 	bl	800029c <__adddf3>
 800d222:	3701      	adds	r7, #1
 800d224:	4680      	mov	r8, r0
 800d226:	4689      	mov	r9, r1
 800d228:	e7e5      	b.n	800d1f6 <__kernel_rem_pio2+0x3ae>
 800d22a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d22e:	e754      	b.n	800d0da <__kernel_rem_pio2+0x292>
 800d230:	ec47 6b10 	vmov	d0, r6, r7
 800d234:	f1ca 0000 	rsb	r0, sl, #0
 800d238:	f000 fc5a 	bl	800daf0 <scalbn>
 800d23c:	ec57 6b10 	vmov	r6, r7, d0
 800d240:	4b9f      	ldr	r3, [pc, #636]	; (800d4c0 <__kernel_rem_pio2+0x678>)
 800d242:	ee10 0a10 	vmov	r0, s0
 800d246:	2200      	movs	r2, #0
 800d248:	4639      	mov	r1, r7
 800d24a:	f7f3 fc63 	bl	8000b14 <__aeabi_dcmpge>
 800d24e:	b300      	cbz	r0, 800d292 <__kernel_rem_pio2+0x44a>
 800d250:	4b9c      	ldr	r3, [pc, #624]	; (800d4c4 <__kernel_rem_pio2+0x67c>)
 800d252:	2200      	movs	r2, #0
 800d254:	4630      	mov	r0, r6
 800d256:	4639      	mov	r1, r7
 800d258:	f7f3 f9d6 	bl	8000608 <__aeabi_dmul>
 800d25c:	f7f3 fc84 	bl	8000b68 <__aeabi_d2iz>
 800d260:	4605      	mov	r5, r0
 800d262:	f7f3 f967 	bl	8000534 <__aeabi_i2d>
 800d266:	4b96      	ldr	r3, [pc, #600]	; (800d4c0 <__kernel_rem_pio2+0x678>)
 800d268:	2200      	movs	r2, #0
 800d26a:	f7f3 f9cd 	bl	8000608 <__aeabi_dmul>
 800d26e:	460b      	mov	r3, r1
 800d270:	4602      	mov	r2, r0
 800d272:	4639      	mov	r1, r7
 800d274:	4630      	mov	r0, r6
 800d276:	f7f3 f80f 	bl	8000298 <__aeabi_dsub>
 800d27a:	f7f3 fc75 	bl	8000b68 <__aeabi_d2iz>
 800d27e:	f104 0b01 	add.w	fp, r4, #1
 800d282:	ab0c      	add	r3, sp, #48	; 0x30
 800d284:	f10a 0a18 	add.w	sl, sl, #24
 800d288:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d28c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800d290:	e72b      	b.n	800d0ea <__kernel_rem_pio2+0x2a2>
 800d292:	4630      	mov	r0, r6
 800d294:	4639      	mov	r1, r7
 800d296:	f7f3 fc67 	bl	8000b68 <__aeabi_d2iz>
 800d29a:	ab0c      	add	r3, sp, #48	; 0x30
 800d29c:	46a3      	mov	fp, r4
 800d29e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d2a2:	e722      	b.n	800d0ea <__kernel_rem_pio2+0x2a2>
 800d2a4:	ab70      	add	r3, sp, #448	; 0x1c0
 800d2a6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800d2aa:	ab0c      	add	r3, sp, #48	; 0x30
 800d2ac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d2b0:	f7f3 f940 	bl	8000534 <__aeabi_i2d>
 800d2b4:	4622      	mov	r2, r4
 800d2b6:	462b      	mov	r3, r5
 800d2b8:	f7f3 f9a6 	bl	8000608 <__aeabi_dmul>
 800d2bc:	4632      	mov	r2, r6
 800d2be:	e9c9 0100 	strd	r0, r1, [r9]
 800d2c2:	463b      	mov	r3, r7
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	f7f3 f99e 	bl	8000608 <__aeabi_dmul>
 800d2cc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d2d0:	4604      	mov	r4, r0
 800d2d2:	460d      	mov	r5, r1
 800d2d4:	e713      	b.n	800d0fe <__kernel_rem_pio2+0x2b6>
 800d2d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d2da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800d2de:	f7f3 f993 	bl	8000608 <__aeabi_dmul>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	f7f2 ffd7 	bl	800029c <__adddf3>
 800d2ee:	3601      	adds	r6, #1
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	460d      	mov	r5, r1
 800d2f4:	9b04      	ldr	r3, [sp, #16]
 800d2f6:	429e      	cmp	r6, r3
 800d2f8:	dc01      	bgt.n	800d2fe <__kernel_rem_pio2+0x4b6>
 800d2fa:	45b0      	cmp	r8, r6
 800d2fc:	daeb      	bge.n	800d2d6 <__kernel_rem_pio2+0x48e>
 800d2fe:	ab48      	add	r3, sp, #288	; 0x120
 800d300:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d304:	e9c3 4500 	strd	r4, r5, [r3]
 800d308:	3f01      	subs	r7, #1
 800d30a:	f108 0801 	add.w	r8, r8, #1
 800d30e:	e6ff      	b.n	800d110 <__kernel_rem_pio2+0x2c8>
 800d310:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d312:	2b02      	cmp	r3, #2
 800d314:	dc0b      	bgt.n	800d32e <__kernel_rem_pio2+0x4e6>
 800d316:	2b00      	cmp	r3, #0
 800d318:	dc6e      	bgt.n	800d3f8 <__kernel_rem_pio2+0x5b0>
 800d31a:	d045      	beq.n	800d3a8 <__kernel_rem_pio2+0x560>
 800d31c:	9b07      	ldr	r3, [sp, #28]
 800d31e:	f003 0007 	and.w	r0, r3, #7
 800d322:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d326:	ecbd 8b02 	vpop	{d8}
 800d32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d32e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800d330:	2b03      	cmp	r3, #3
 800d332:	d1f3      	bne.n	800d31c <__kernel_rem_pio2+0x4d4>
 800d334:	ab48      	add	r3, sp, #288	; 0x120
 800d336:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800d33a:	46d0      	mov	r8, sl
 800d33c:	46d9      	mov	r9, fp
 800d33e:	f1b9 0f00 	cmp.w	r9, #0
 800d342:	f1a8 0808 	sub.w	r8, r8, #8
 800d346:	dc64      	bgt.n	800d412 <__kernel_rem_pio2+0x5ca>
 800d348:	465c      	mov	r4, fp
 800d34a:	2c01      	cmp	r4, #1
 800d34c:	f1aa 0a08 	sub.w	sl, sl, #8
 800d350:	dc7e      	bgt.n	800d450 <__kernel_rem_pio2+0x608>
 800d352:	2000      	movs	r0, #0
 800d354:	2100      	movs	r1, #0
 800d356:	f1bb 0f01 	cmp.w	fp, #1
 800d35a:	f300 8097 	bgt.w	800d48c <__kernel_rem_pio2+0x644>
 800d35e:	9b02      	ldr	r3, [sp, #8]
 800d360:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800d364:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f040 8099 	bne.w	800d4a0 <__kernel_rem_pio2+0x658>
 800d36e:	9b01      	ldr	r3, [sp, #4]
 800d370:	e9c3 5600 	strd	r5, r6, [r3]
 800d374:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800d378:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d37c:	e7ce      	b.n	800d31c <__kernel_rem_pio2+0x4d4>
 800d37e:	ab48      	add	r3, sp, #288	; 0x120
 800d380:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d388:	f7f2 ff88 	bl	800029c <__adddf3>
 800d38c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d390:	f1bb 0f00 	cmp.w	fp, #0
 800d394:	daf3      	bge.n	800d37e <__kernel_rem_pio2+0x536>
 800d396:	9b02      	ldr	r3, [sp, #8]
 800d398:	b113      	cbz	r3, 800d3a0 <__kernel_rem_pio2+0x558>
 800d39a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d39e:	4619      	mov	r1, r3
 800d3a0:	9b01      	ldr	r3, [sp, #4]
 800d3a2:	e9c3 0100 	strd	r0, r1, [r3]
 800d3a6:	e7b9      	b.n	800d31c <__kernel_rem_pio2+0x4d4>
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	e7f0      	b.n	800d390 <__kernel_rem_pio2+0x548>
 800d3ae:	ab48      	add	r3, sp, #288	; 0x120
 800d3b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	f7f2 ff70 	bl	800029c <__adddf3>
 800d3bc:	3c01      	subs	r4, #1
 800d3be:	2c00      	cmp	r4, #0
 800d3c0:	daf5      	bge.n	800d3ae <__kernel_rem_pio2+0x566>
 800d3c2:	9b02      	ldr	r3, [sp, #8]
 800d3c4:	b1e3      	cbz	r3, 800d400 <__kernel_rem_pio2+0x5b8>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3cc:	9c01      	ldr	r4, [sp, #4]
 800d3ce:	e9c4 2300 	strd	r2, r3, [r4]
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d3da:	f7f2 ff5d 	bl	8000298 <__aeabi_dsub>
 800d3de:	ad4a      	add	r5, sp, #296	; 0x128
 800d3e0:	2401      	movs	r4, #1
 800d3e2:	45a3      	cmp	fp, r4
 800d3e4:	da0f      	bge.n	800d406 <__kernel_rem_pio2+0x5be>
 800d3e6:	9b02      	ldr	r3, [sp, #8]
 800d3e8:	b113      	cbz	r3, 800d3f0 <__kernel_rem_pio2+0x5a8>
 800d3ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	9b01      	ldr	r3, [sp, #4]
 800d3f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d3f6:	e791      	b.n	800d31c <__kernel_rem_pio2+0x4d4>
 800d3f8:	465c      	mov	r4, fp
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	2100      	movs	r1, #0
 800d3fe:	e7de      	b.n	800d3be <__kernel_rem_pio2+0x576>
 800d400:	4602      	mov	r2, r0
 800d402:	460b      	mov	r3, r1
 800d404:	e7e2      	b.n	800d3cc <__kernel_rem_pio2+0x584>
 800d406:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d40a:	f7f2 ff47 	bl	800029c <__adddf3>
 800d40e:	3401      	adds	r4, #1
 800d410:	e7e7      	b.n	800d3e2 <__kernel_rem_pio2+0x59a>
 800d412:	e9d8 4500 	ldrd	r4, r5, [r8]
 800d416:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800d41a:	4620      	mov	r0, r4
 800d41c:	4632      	mov	r2, r6
 800d41e:	463b      	mov	r3, r7
 800d420:	4629      	mov	r1, r5
 800d422:	f7f2 ff3b 	bl	800029c <__adddf3>
 800d426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d42a:	4602      	mov	r2, r0
 800d42c:	460b      	mov	r3, r1
 800d42e:	4620      	mov	r0, r4
 800d430:	4629      	mov	r1, r5
 800d432:	f7f2 ff31 	bl	8000298 <__aeabi_dsub>
 800d436:	4632      	mov	r2, r6
 800d438:	463b      	mov	r3, r7
 800d43a:	f7f2 ff2f 	bl	800029c <__adddf3>
 800d43e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d442:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800d446:	ed88 7b00 	vstr	d7, [r8]
 800d44a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d44e:	e776      	b.n	800d33e <__kernel_rem_pio2+0x4f6>
 800d450:	e9da 8900 	ldrd	r8, r9, [sl]
 800d454:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d458:	4640      	mov	r0, r8
 800d45a:	4632      	mov	r2, r6
 800d45c:	463b      	mov	r3, r7
 800d45e:	4649      	mov	r1, r9
 800d460:	f7f2 ff1c 	bl	800029c <__adddf3>
 800d464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	4640      	mov	r0, r8
 800d46e:	4649      	mov	r1, r9
 800d470:	f7f2 ff12 	bl	8000298 <__aeabi_dsub>
 800d474:	4632      	mov	r2, r6
 800d476:	463b      	mov	r3, r7
 800d478:	f7f2 ff10 	bl	800029c <__adddf3>
 800d47c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d480:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d484:	ed8a 7b00 	vstr	d7, [sl]
 800d488:	3c01      	subs	r4, #1
 800d48a:	e75e      	b.n	800d34a <__kernel_rem_pio2+0x502>
 800d48c:	ab48      	add	r3, sp, #288	; 0x120
 800d48e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f2 ff01 	bl	800029c <__adddf3>
 800d49a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d49e:	e75a      	b.n	800d356 <__kernel_rem_pio2+0x50e>
 800d4a0:	9b01      	ldr	r3, [sp, #4]
 800d4a2:	9a01      	ldr	r2, [sp, #4]
 800d4a4:	601d      	str	r5, [r3, #0]
 800d4a6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800d4aa:	605c      	str	r4, [r3, #4]
 800d4ac:	609f      	str	r7, [r3, #8]
 800d4ae:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800d4b2:	60d3      	str	r3, [r2, #12]
 800d4b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4b8:	6110      	str	r0, [r2, #16]
 800d4ba:	6153      	str	r3, [r2, #20]
 800d4bc:	e72e      	b.n	800d31c <__kernel_rem_pio2+0x4d4>
 800d4be:	bf00      	nop
 800d4c0:	41700000 	.word	0x41700000
 800d4c4:	3e700000 	.word	0x3e700000

0800d4c8 <__kernel_sin>:
 800d4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	ed2d 8b04 	vpush	{d8-d9}
 800d4d0:	eeb0 8a41 	vmov.f32	s16, s2
 800d4d4:	eef0 8a61 	vmov.f32	s17, s3
 800d4d8:	ec55 4b10 	vmov	r4, r5, d0
 800d4dc:	b083      	sub	sp, #12
 800d4de:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d4e2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d4e6:	9001      	str	r0, [sp, #4]
 800d4e8:	da06      	bge.n	800d4f8 <__kernel_sin+0x30>
 800d4ea:	ee10 0a10 	vmov	r0, s0
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	f7f3 fb3a 	bl	8000b68 <__aeabi_d2iz>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d051      	beq.n	800d59c <__kernel_sin+0xd4>
 800d4f8:	4622      	mov	r2, r4
 800d4fa:	462b      	mov	r3, r5
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	4629      	mov	r1, r5
 800d500:	f7f3 f882 	bl	8000608 <__aeabi_dmul>
 800d504:	4682      	mov	sl, r0
 800d506:	468b      	mov	fp, r1
 800d508:	4602      	mov	r2, r0
 800d50a:	460b      	mov	r3, r1
 800d50c:	4620      	mov	r0, r4
 800d50e:	4629      	mov	r1, r5
 800d510:	f7f3 f87a 	bl	8000608 <__aeabi_dmul>
 800d514:	a341      	add	r3, pc, #260	; (adr r3, 800d61c <__kernel_sin+0x154>)
 800d516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d51a:	4680      	mov	r8, r0
 800d51c:	4689      	mov	r9, r1
 800d51e:	4650      	mov	r0, sl
 800d520:	4659      	mov	r1, fp
 800d522:	f7f3 f871 	bl	8000608 <__aeabi_dmul>
 800d526:	a33f      	add	r3, pc, #252	; (adr r3, 800d624 <__kernel_sin+0x15c>)
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	f7f2 feb4 	bl	8000298 <__aeabi_dsub>
 800d530:	4652      	mov	r2, sl
 800d532:	465b      	mov	r3, fp
 800d534:	f7f3 f868 	bl	8000608 <__aeabi_dmul>
 800d538:	a33c      	add	r3, pc, #240	; (adr r3, 800d62c <__kernel_sin+0x164>)
 800d53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53e:	f7f2 fead 	bl	800029c <__adddf3>
 800d542:	4652      	mov	r2, sl
 800d544:	465b      	mov	r3, fp
 800d546:	f7f3 f85f 	bl	8000608 <__aeabi_dmul>
 800d54a:	a33a      	add	r3, pc, #232	; (adr r3, 800d634 <__kernel_sin+0x16c>)
 800d54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d550:	f7f2 fea2 	bl	8000298 <__aeabi_dsub>
 800d554:	4652      	mov	r2, sl
 800d556:	465b      	mov	r3, fp
 800d558:	f7f3 f856 	bl	8000608 <__aeabi_dmul>
 800d55c:	a337      	add	r3, pc, #220	; (adr r3, 800d63c <__kernel_sin+0x174>)
 800d55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d562:	f7f2 fe9b 	bl	800029c <__adddf3>
 800d566:	9b01      	ldr	r3, [sp, #4]
 800d568:	4606      	mov	r6, r0
 800d56a:	460f      	mov	r7, r1
 800d56c:	b9eb      	cbnz	r3, 800d5aa <__kernel_sin+0xe2>
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	4650      	mov	r0, sl
 800d574:	4659      	mov	r1, fp
 800d576:	f7f3 f847 	bl	8000608 <__aeabi_dmul>
 800d57a:	a325      	add	r3, pc, #148	; (adr r3, 800d610 <__kernel_sin+0x148>)
 800d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d580:	f7f2 fe8a 	bl	8000298 <__aeabi_dsub>
 800d584:	4642      	mov	r2, r8
 800d586:	464b      	mov	r3, r9
 800d588:	f7f3 f83e 	bl	8000608 <__aeabi_dmul>
 800d58c:	4602      	mov	r2, r0
 800d58e:	460b      	mov	r3, r1
 800d590:	4620      	mov	r0, r4
 800d592:	4629      	mov	r1, r5
 800d594:	f7f2 fe82 	bl	800029c <__adddf3>
 800d598:	4604      	mov	r4, r0
 800d59a:	460d      	mov	r5, r1
 800d59c:	ec45 4b10 	vmov	d0, r4, r5
 800d5a0:	b003      	add	sp, #12
 800d5a2:	ecbd 8b04 	vpop	{d8-d9}
 800d5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5aa:	4b1b      	ldr	r3, [pc, #108]	; (800d618 <__kernel_sin+0x150>)
 800d5ac:	ec51 0b18 	vmov	r0, r1, d8
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f7f3 f829 	bl	8000608 <__aeabi_dmul>
 800d5b6:	4632      	mov	r2, r6
 800d5b8:	ec41 0b19 	vmov	d9, r0, r1
 800d5bc:	463b      	mov	r3, r7
 800d5be:	4640      	mov	r0, r8
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	f7f3 f821 	bl	8000608 <__aeabi_dmul>
 800d5c6:	4602      	mov	r2, r0
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	ec51 0b19 	vmov	r0, r1, d9
 800d5ce:	f7f2 fe63 	bl	8000298 <__aeabi_dsub>
 800d5d2:	4652      	mov	r2, sl
 800d5d4:	465b      	mov	r3, fp
 800d5d6:	f7f3 f817 	bl	8000608 <__aeabi_dmul>
 800d5da:	ec53 2b18 	vmov	r2, r3, d8
 800d5de:	f7f2 fe5b 	bl	8000298 <__aeabi_dsub>
 800d5e2:	a30b      	add	r3, pc, #44	; (adr r3, 800d610 <__kernel_sin+0x148>)
 800d5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	460f      	mov	r7, r1
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	4649      	mov	r1, r9
 800d5f0:	f7f3 f80a 	bl	8000608 <__aeabi_dmul>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4630      	mov	r0, r6
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	f7f2 fe4e 	bl	800029c <__adddf3>
 800d600:	4602      	mov	r2, r0
 800d602:	460b      	mov	r3, r1
 800d604:	4620      	mov	r0, r4
 800d606:	4629      	mov	r1, r5
 800d608:	f7f2 fe46 	bl	8000298 <__aeabi_dsub>
 800d60c:	e7c4      	b.n	800d598 <__kernel_sin+0xd0>
 800d60e:	bf00      	nop
 800d610:	55555549 	.word	0x55555549
 800d614:	3fc55555 	.word	0x3fc55555
 800d618:	3fe00000 	.word	0x3fe00000
 800d61c:	5acfd57c 	.word	0x5acfd57c
 800d620:	3de5d93a 	.word	0x3de5d93a
 800d624:	8a2b9ceb 	.word	0x8a2b9ceb
 800d628:	3e5ae5e6 	.word	0x3e5ae5e6
 800d62c:	57b1fe7d 	.word	0x57b1fe7d
 800d630:	3ec71de3 	.word	0x3ec71de3
 800d634:	19c161d5 	.word	0x19c161d5
 800d638:	3f2a01a0 	.word	0x3f2a01a0
 800d63c:	1110f8a6 	.word	0x1110f8a6
 800d640:	3f811111 	.word	0x3f811111
 800d644:	00000000 	.word	0x00000000

0800d648 <__kernel_tan>:
 800d648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64c:	ed2d 8b04 	vpush	{d8-d9}
 800d650:	ec5b ab10 	vmov	sl, fp, d0
 800d654:	4be2      	ldr	r3, [pc, #904]	; (800d9e0 <__kernel_tan+0x398>)
 800d656:	b085      	sub	sp, #20
 800d658:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800d65c:	429f      	cmp	r7, r3
 800d65e:	ed8d 1b00 	vstr	d1, [sp]
 800d662:	4606      	mov	r6, r0
 800d664:	f8cd b00c 	str.w	fp, [sp, #12]
 800d668:	dc24      	bgt.n	800d6b4 <__kernel_tan+0x6c>
 800d66a:	ee10 0a10 	vmov	r0, s0
 800d66e:	4659      	mov	r1, fp
 800d670:	f7f3 fa7a 	bl	8000b68 <__aeabi_d2iz>
 800d674:	2800      	cmp	r0, #0
 800d676:	d148      	bne.n	800d70a <__kernel_tan+0xc2>
 800d678:	1c73      	adds	r3, r6, #1
 800d67a:	4652      	mov	r2, sl
 800d67c:	4313      	orrs	r3, r2
 800d67e:	433b      	orrs	r3, r7
 800d680:	d112      	bne.n	800d6a8 <__kernel_tan+0x60>
 800d682:	ec4b ab10 	vmov	d0, sl, fp
 800d686:	f7fe ff93 	bl	800c5b0 <fabs>
 800d68a:	49d6      	ldr	r1, [pc, #856]	; (800d9e4 <__kernel_tan+0x39c>)
 800d68c:	ec53 2b10 	vmov	r2, r3, d0
 800d690:	2000      	movs	r0, #0
 800d692:	f7f3 f8e3 	bl	800085c <__aeabi_ddiv>
 800d696:	4682      	mov	sl, r0
 800d698:	468b      	mov	fp, r1
 800d69a:	ec4b ab10 	vmov	d0, sl, fp
 800d69e:	b005      	add	sp, #20
 800d6a0:	ecbd 8b04 	vpop	{d8-d9}
 800d6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a8:	2e01      	cmp	r6, #1
 800d6aa:	d0f6      	beq.n	800d69a <__kernel_tan+0x52>
 800d6ac:	49ce      	ldr	r1, [pc, #824]	; (800d9e8 <__kernel_tan+0x3a0>)
 800d6ae:	465b      	mov	r3, fp
 800d6b0:	2000      	movs	r0, #0
 800d6b2:	e7ee      	b.n	800d692 <__kernel_tan+0x4a>
 800d6b4:	4bcd      	ldr	r3, [pc, #820]	; (800d9ec <__kernel_tan+0x3a4>)
 800d6b6:	429f      	cmp	r7, r3
 800d6b8:	dd27      	ble.n	800d70a <__kernel_tan+0xc2>
 800d6ba:	9b03      	ldr	r3, [sp, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	da0a      	bge.n	800d6d6 <__kernel_tan+0x8e>
 800d6c0:	e9dd 2100 	ldrd	r2, r1, [sp]
 800d6c4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6c8:	469b      	mov	fp, r3
 800d6ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6ce:	e9cd 2300 	strd	r2, r3, [sp]
 800d6d2:	ee10 aa10 	vmov	sl, s0
 800d6d6:	4652      	mov	r2, sl
 800d6d8:	465b      	mov	r3, fp
 800d6da:	a1a1      	add	r1, pc, #644	; (adr r1, 800d960 <__kernel_tan+0x318>)
 800d6dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6e0:	f7f2 fdda 	bl	8000298 <__aeabi_dsub>
 800d6e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	460d      	mov	r5, r1
 800d6ec:	a19e      	add	r1, pc, #632	; (adr r1, 800d968 <__kernel_tan+0x320>)
 800d6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6f2:	f7f2 fdd1 	bl	8000298 <__aeabi_dsub>
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	462b      	mov	r3, r5
 800d6fa:	f7f2 fdcf 	bl	800029c <__adddf3>
 800d6fe:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800d970 <__kernel_tan+0x328>
 800d702:	ed8d 7b00 	vstr	d7, [sp]
 800d706:	4682      	mov	sl, r0
 800d708:	468b      	mov	fp, r1
 800d70a:	4652      	mov	r2, sl
 800d70c:	465b      	mov	r3, fp
 800d70e:	4650      	mov	r0, sl
 800d710:	4659      	mov	r1, fp
 800d712:	f7f2 ff79 	bl	8000608 <__aeabi_dmul>
 800d716:	4602      	mov	r2, r0
 800d718:	460b      	mov	r3, r1
 800d71a:	4680      	mov	r8, r0
 800d71c:	4689      	mov	r9, r1
 800d71e:	f7f2 ff73 	bl	8000608 <__aeabi_dmul>
 800d722:	4642      	mov	r2, r8
 800d724:	4604      	mov	r4, r0
 800d726:	460d      	mov	r5, r1
 800d728:	464b      	mov	r3, r9
 800d72a:	4650      	mov	r0, sl
 800d72c:	4659      	mov	r1, fp
 800d72e:	f7f2 ff6b 	bl	8000608 <__aeabi_dmul>
 800d732:	a391      	add	r3, pc, #580	; (adr r3, 800d978 <__kernel_tan+0x330>)
 800d734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d738:	ec41 0b18 	vmov	d8, r0, r1
 800d73c:	4620      	mov	r0, r4
 800d73e:	4629      	mov	r1, r5
 800d740:	f7f2 ff62 	bl	8000608 <__aeabi_dmul>
 800d744:	a38e      	add	r3, pc, #568	; (adr r3, 800d980 <__kernel_tan+0x338>)
 800d746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74a:	f7f2 fda7 	bl	800029c <__adddf3>
 800d74e:	4622      	mov	r2, r4
 800d750:	462b      	mov	r3, r5
 800d752:	f7f2 ff59 	bl	8000608 <__aeabi_dmul>
 800d756:	a38c      	add	r3, pc, #560	; (adr r3, 800d988 <__kernel_tan+0x340>)
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	f7f2 fd9e 	bl	800029c <__adddf3>
 800d760:	4622      	mov	r2, r4
 800d762:	462b      	mov	r3, r5
 800d764:	f7f2 ff50 	bl	8000608 <__aeabi_dmul>
 800d768:	a389      	add	r3, pc, #548	; (adr r3, 800d990 <__kernel_tan+0x348>)
 800d76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76e:	f7f2 fd95 	bl	800029c <__adddf3>
 800d772:	4622      	mov	r2, r4
 800d774:	462b      	mov	r3, r5
 800d776:	f7f2 ff47 	bl	8000608 <__aeabi_dmul>
 800d77a:	a387      	add	r3, pc, #540	; (adr r3, 800d998 <__kernel_tan+0x350>)
 800d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d780:	f7f2 fd8c 	bl	800029c <__adddf3>
 800d784:	4622      	mov	r2, r4
 800d786:	462b      	mov	r3, r5
 800d788:	f7f2 ff3e 	bl	8000608 <__aeabi_dmul>
 800d78c:	a384      	add	r3, pc, #528	; (adr r3, 800d9a0 <__kernel_tan+0x358>)
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	f7f2 fd83 	bl	800029c <__adddf3>
 800d796:	4642      	mov	r2, r8
 800d798:	464b      	mov	r3, r9
 800d79a:	f7f2 ff35 	bl	8000608 <__aeabi_dmul>
 800d79e:	a382      	add	r3, pc, #520	; (adr r3, 800d9a8 <__kernel_tan+0x360>)
 800d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a4:	ec41 0b19 	vmov	d9, r0, r1
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	f7f2 ff2c 	bl	8000608 <__aeabi_dmul>
 800d7b0:	a37f      	add	r3, pc, #508	; (adr r3, 800d9b0 <__kernel_tan+0x368>)
 800d7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b6:	f7f2 fd71 	bl	800029c <__adddf3>
 800d7ba:	4622      	mov	r2, r4
 800d7bc:	462b      	mov	r3, r5
 800d7be:	f7f2 ff23 	bl	8000608 <__aeabi_dmul>
 800d7c2:	a37d      	add	r3, pc, #500	; (adr r3, 800d9b8 <__kernel_tan+0x370>)
 800d7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c8:	f7f2 fd68 	bl	800029c <__adddf3>
 800d7cc:	4622      	mov	r2, r4
 800d7ce:	462b      	mov	r3, r5
 800d7d0:	f7f2 ff1a 	bl	8000608 <__aeabi_dmul>
 800d7d4:	a37a      	add	r3, pc, #488	; (adr r3, 800d9c0 <__kernel_tan+0x378>)
 800d7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7da:	f7f2 fd5f 	bl	800029c <__adddf3>
 800d7de:	4622      	mov	r2, r4
 800d7e0:	462b      	mov	r3, r5
 800d7e2:	f7f2 ff11 	bl	8000608 <__aeabi_dmul>
 800d7e6:	a378      	add	r3, pc, #480	; (adr r3, 800d9c8 <__kernel_tan+0x380>)
 800d7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ec:	f7f2 fd56 	bl	800029c <__adddf3>
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	462b      	mov	r3, r5
 800d7f4:	f7f2 ff08 	bl	8000608 <__aeabi_dmul>
 800d7f8:	a375      	add	r3, pc, #468	; (adr r3, 800d9d0 <__kernel_tan+0x388>)
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f7f2 fd4d 	bl	800029c <__adddf3>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	ec51 0b19 	vmov	r0, r1, d9
 800d80a:	f7f2 fd47 	bl	800029c <__adddf3>
 800d80e:	ec53 2b18 	vmov	r2, r3, d8
 800d812:	f7f2 fef9 	bl	8000608 <__aeabi_dmul>
 800d816:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d81a:	f7f2 fd3f 	bl	800029c <__adddf3>
 800d81e:	4642      	mov	r2, r8
 800d820:	464b      	mov	r3, r9
 800d822:	f7f2 fef1 	bl	8000608 <__aeabi_dmul>
 800d826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d82a:	f7f2 fd37 	bl	800029c <__adddf3>
 800d82e:	a36a      	add	r3, pc, #424	; (adr r3, 800d9d8 <__kernel_tan+0x390>)
 800d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d834:	4604      	mov	r4, r0
 800d836:	460d      	mov	r5, r1
 800d838:	ec51 0b18 	vmov	r0, r1, d8
 800d83c:	f7f2 fee4 	bl	8000608 <__aeabi_dmul>
 800d840:	4622      	mov	r2, r4
 800d842:	462b      	mov	r3, r5
 800d844:	f7f2 fd2a 	bl	800029c <__adddf3>
 800d848:	460b      	mov	r3, r1
 800d84a:	ec41 0b18 	vmov	d8, r0, r1
 800d84e:	4602      	mov	r2, r0
 800d850:	4659      	mov	r1, fp
 800d852:	4650      	mov	r0, sl
 800d854:	f7f2 fd22 	bl	800029c <__adddf3>
 800d858:	4b64      	ldr	r3, [pc, #400]	; (800d9ec <__kernel_tan+0x3a4>)
 800d85a:	429f      	cmp	r7, r3
 800d85c:	4604      	mov	r4, r0
 800d85e:	460d      	mov	r5, r1
 800d860:	dd3e      	ble.n	800d8e0 <__kernel_tan+0x298>
 800d862:	4630      	mov	r0, r6
 800d864:	f7f2 fe66 	bl	8000534 <__aeabi_i2d>
 800d868:	4622      	mov	r2, r4
 800d86a:	4680      	mov	r8, r0
 800d86c:	4689      	mov	r9, r1
 800d86e:	462b      	mov	r3, r5
 800d870:	4620      	mov	r0, r4
 800d872:	4629      	mov	r1, r5
 800d874:	f7f2 fec8 	bl	8000608 <__aeabi_dmul>
 800d878:	4642      	mov	r2, r8
 800d87a:	4606      	mov	r6, r0
 800d87c:	460f      	mov	r7, r1
 800d87e:	464b      	mov	r3, r9
 800d880:	4620      	mov	r0, r4
 800d882:	4629      	mov	r1, r5
 800d884:	f7f2 fd0a 	bl	800029c <__adddf3>
 800d888:	4602      	mov	r2, r0
 800d88a:	460b      	mov	r3, r1
 800d88c:	4630      	mov	r0, r6
 800d88e:	4639      	mov	r1, r7
 800d890:	f7f2 ffe4 	bl	800085c <__aeabi_ddiv>
 800d894:	ec53 2b18 	vmov	r2, r3, d8
 800d898:	f7f2 fcfe 	bl	8000298 <__aeabi_dsub>
 800d89c:	4602      	mov	r2, r0
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4650      	mov	r0, sl
 800d8a2:	4659      	mov	r1, fp
 800d8a4:	f7f2 fcf8 	bl	8000298 <__aeabi_dsub>
 800d8a8:	4602      	mov	r2, r0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	f7f2 fcf6 	bl	800029c <__adddf3>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4640      	mov	r0, r8
 800d8b6:	4649      	mov	r1, r9
 800d8b8:	f7f2 fcee 	bl	8000298 <__aeabi_dsub>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800d8c2:	f00a 0a02 	and.w	sl, sl, #2
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	f1ca 0001 	rsb	r0, sl, #1
 800d8cc:	460d      	mov	r5, r1
 800d8ce:	f7f2 fe31 	bl	8000534 <__aeabi_i2d>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	4620      	mov	r0, r4
 800d8d8:	4629      	mov	r1, r5
 800d8da:	f7f2 fe95 	bl	8000608 <__aeabi_dmul>
 800d8de:	e6da      	b.n	800d696 <__kernel_tan+0x4e>
 800d8e0:	2e01      	cmp	r6, #1
 800d8e2:	d038      	beq.n	800d956 <__kernel_tan+0x30e>
 800d8e4:	460f      	mov	r7, r1
 800d8e6:	4689      	mov	r9, r1
 800d8e8:	4602      	mov	r2, r0
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	493e      	ldr	r1, [pc, #248]	; (800d9e8 <__kernel_tan+0x3a0>)
 800d8f0:	f7f2 ffb4 	bl	800085c <__aeabi_ddiv>
 800d8f4:	2600      	movs	r6, #0
 800d8f6:	e9cd 0100 	strd	r0, r1, [sp]
 800d8fa:	4652      	mov	r2, sl
 800d8fc:	465b      	mov	r3, fp
 800d8fe:	4630      	mov	r0, r6
 800d900:	4639      	mov	r1, r7
 800d902:	f7f2 fcc9 	bl	8000298 <__aeabi_dsub>
 800d906:	e9dd 4500 	ldrd	r4, r5, [sp]
 800d90a:	4602      	mov	r2, r0
 800d90c:	460b      	mov	r3, r1
 800d90e:	ec51 0b18 	vmov	r0, r1, d8
 800d912:	f7f2 fcc1 	bl	8000298 <__aeabi_dsub>
 800d916:	4632      	mov	r2, r6
 800d918:	462b      	mov	r3, r5
 800d91a:	f7f2 fe75 	bl	8000608 <__aeabi_dmul>
 800d91e:	46b0      	mov	r8, r6
 800d920:	460f      	mov	r7, r1
 800d922:	4606      	mov	r6, r0
 800d924:	4642      	mov	r2, r8
 800d926:	462b      	mov	r3, r5
 800d928:	4640      	mov	r0, r8
 800d92a:	4649      	mov	r1, r9
 800d92c:	f7f2 fe6c 	bl	8000608 <__aeabi_dmul>
 800d930:	4b2c      	ldr	r3, [pc, #176]	; (800d9e4 <__kernel_tan+0x39c>)
 800d932:	2200      	movs	r2, #0
 800d934:	f7f2 fcb2 	bl	800029c <__adddf3>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4630      	mov	r0, r6
 800d93e:	4639      	mov	r1, r7
 800d940:	f7f2 fcac 	bl	800029c <__adddf3>
 800d944:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d948:	f7f2 fe5e 	bl	8000608 <__aeabi_dmul>
 800d94c:	4642      	mov	r2, r8
 800d94e:	462b      	mov	r3, r5
 800d950:	f7f2 fca4 	bl	800029c <__adddf3>
 800d954:	e69f      	b.n	800d696 <__kernel_tan+0x4e>
 800d956:	4682      	mov	sl, r0
 800d958:	468b      	mov	fp, r1
 800d95a:	e69e      	b.n	800d69a <__kernel_tan+0x52>
 800d95c:	f3af 8000 	nop.w
 800d960:	54442d18 	.word	0x54442d18
 800d964:	3fe921fb 	.word	0x3fe921fb
 800d968:	33145c07 	.word	0x33145c07
 800d96c:	3c81a626 	.word	0x3c81a626
	...
 800d978:	74bf7ad4 	.word	0x74bf7ad4
 800d97c:	3efb2a70 	.word	0x3efb2a70
 800d980:	32f0a7e9 	.word	0x32f0a7e9
 800d984:	3f12b80f 	.word	0x3f12b80f
 800d988:	1a8d1068 	.word	0x1a8d1068
 800d98c:	3f3026f7 	.word	0x3f3026f7
 800d990:	fee08315 	.word	0xfee08315
 800d994:	3f57dbc8 	.word	0x3f57dbc8
 800d998:	e96e8493 	.word	0xe96e8493
 800d99c:	3f8226e3 	.word	0x3f8226e3
 800d9a0:	1bb341fe 	.word	0x1bb341fe
 800d9a4:	3faba1ba 	.word	0x3faba1ba
 800d9a8:	db605373 	.word	0xdb605373
 800d9ac:	bef375cb 	.word	0xbef375cb
 800d9b0:	a03792a6 	.word	0xa03792a6
 800d9b4:	3f147e88 	.word	0x3f147e88
 800d9b8:	f2f26501 	.word	0xf2f26501
 800d9bc:	3f4344d8 	.word	0x3f4344d8
 800d9c0:	c9560328 	.word	0xc9560328
 800d9c4:	3f6d6d22 	.word	0x3f6d6d22
 800d9c8:	8406d637 	.word	0x8406d637
 800d9cc:	3f9664f4 	.word	0x3f9664f4
 800d9d0:	1110fe7a 	.word	0x1110fe7a
 800d9d4:	3fc11111 	.word	0x3fc11111
 800d9d8:	55555563 	.word	0x55555563
 800d9dc:	3fd55555 	.word	0x3fd55555
 800d9e0:	3e2fffff 	.word	0x3e2fffff
 800d9e4:	3ff00000 	.word	0x3ff00000
 800d9e8:	bff00000 	.word	0xbff00000
 800d9ec:	3fe59427 	.word	0x3fe59427

0800d9f0 <floor>:
 800d9f0:	ec51 0b10 	vmov	r0, r1, d0
 800d9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d9fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800da00:	2e13      	cmp	r6, #19
 800da02:	ee10 5a10 	vmov	r5, s0
 800da06:	ee10 8a10 	vmov	r8, s0
 800da0a:	460c      	mov	r4, r1
 800da0c:	dc32      	bgt.n	800da74 <floor+0x84>
 800da0e:	2e00      	cmp	r6, #0
 800da10:	da14      	bge.n	800da3c <floor+0x4c>
 800da12:	a333      	add	r3, pc, #204	; (adr r3, 800dae0 <floor+0xf0>)
 800da14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da18:	f7f2 fc40 	bl	800029c <__adddf3>
 800da1c:	2200      	movs	r2, #0
 800da1e:	2300      	movs	r3, #0
 800da20:	f7f3 f882 	bl	8000b28 <__aeabi_dcmpgt>
 800da24:	b138      	cbz	r0, 800da36 <floor+0x46>
 800da26:	2c00      	cmp	r4, #0
 800da28:	da57      	bge.n	800dada <floor+0xea>
 800da2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800da2e:	431d      	orrs	r5, r3
 800da30:	d001      	beq.n	800da36 <floor+0x46>
 800da32:	4c2d      	ldr	r4, [pc, #180]	; (800dae8 <floor+0xf8>)
 800da34:	2500      	movs	r5, #0
 800da36:	4621      	mov	r1, r4
 800da38:	4628      	mov	r0, r5
 800da3a:	e025      	b.n	800da88 <floor+0x98>
 800da3c:	4f2b      	ldr	r7, [pc, #172]	; (800daec <floor+0xfc>)
 800da3e:	4137      	asrs	r7, r6
 800da40:	ea01 0307 	and.w	r3, r1, r7
 800da44:	4303      	orrs	r3, r0
 800da46:	d01f      	beq.n	800da88 <floor+0x98>
 800da48:	a325      	add	r3, pc, #148	; (adr r3, 800dae0 <floor+0xf0>)
 800da4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4e:	f7f2 fc25 	bl	800029c <__adddf3>
 800da52:	2200      	movs	r2, #0
 800da54:	2300      	movs	r3, #0
 800da56:	f7f3 f867 	bl	8000b28 <__aeabi_dcmpgt>
 800da5a:	2800      	cmp	r0, #0
 800da5c:	d0eb      	beq.n	800da36 <floor+0x46>
 800da5e:	2c00      	cmp	r4, #0
 800da60:	bfbe      	ittt	lt
 800da62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800da66:	fa43 f606 	asrlt.w	r6, r3, r6
 800da6a:	19a4      	addlt	r4, r4, r6
 800da6c:	ea24 0407 	bic.w	r4, r4, r7
 800da70:	2500      	movs	r5, #0
 800da72:	e7e0      	b.n	800da36 <floor+0x46>
 800da74:	2e33      	cmp	r6, #51	; 0x33
 800da76:	dd0b      	ble.n	800da90 <floor+0xa0>
 800da78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800da7c:	d104      	bne.n	800da88 <floor+0x98>
 800da7e:	ee10 2a10 	vmov	r2, s0
 800da82:	460b      	mov	r3, r1
 800da84:	f7f2 fc0a 	bl	800029c <__adddf3>
 800da88:	ec41 0b10 	vmov	d0, r0, r1
 800da8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800da94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da98:	fa23 f707 	lsr.w	r7, r3, r7
 800da9c:	4207      	tst	r7, r0
 800da9e:	d0f3      	beq.n	800da88 <floor+0x98>
 800daa0:	a30f      	add	r3, pc, #60	; (adr r3, 800dae0 <floor+0xf0>)
 800daa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa6:	f7f2 fbf9 	bl	800029c <__adddf3>
 800daaa:	2200      	movs	r2, #0
 800daac:	2300      	movs	r3, #0
 800daae:	f7f3 f83b 	bl	8000b28 <__aeabi_dcmpgt>
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d0bf      	beq.n	800da36 <floor+0x46>
 800dab6:	2c00      	cmp	r4, #0
 800dab8:	da02      	bge.n	800dac0 <floor+0xd0>
 800daba:	2e14      	cmp	r6, #20
 800dabc:	d103      	bne.n	800dac6 <floor+0xd6>
 800dabe:	3401      	adds	r4, #1
 800dac0:	ea25 0507 	bic.w	r5, r5, r7
 800dac4:	e7b7      	b.n	800da36 <floor+0x46>
 800dac6:	2301      	movs	r3, #1
 800dac8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dacc:	fa03 f606 	lsl.w	r6, r3, r6
 800dad0:	4435      	add	r5, r6
 800dad2:	4545      	cmp	r5, r8
 800dad4:	bf38      	it	cc
 800dad6:	18e4      	addcc	r4, r4, r3
 800dad8:	e7f2      	b.n	800dac0 <floor+0xd0>
 800dada:	2500      	movs	r5, #0
 800dadc:	462c      	mov	r4, r5
 800dade:	e7aa      	b.n	800da36 <floor+0x46>
 800dae0:	8800759c 	.word	0x8800759c
 800dae4:	7e37e43c 	.word	0x7e37e43c
 800dae8:	bff00000 	.word	0xbff00000
 800daec:	000fffff 	.word	0x000fffff

0800daf0 <scalbn>:
 800daf0:	b570      	push	{r4, r5, r6, lr}
 800daf2:	ec55 4b10 	vmov	r4, r5, d0
 800daf6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dafa:	4606      	mov	r6, r0
 800dafc:	462b      	mov	r3, r5
 800dafe:	b99a      	cbnz	r2, 800db28 <scalbn+0x38>
 800db00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800db04:	4323      	orrs	r3, r4
 800db06:	d036      	beq.n	800db76 <scalbn+0x86>
 800db08:	4b39      	ldr	r3, [pc, #228]	; (800dbf0 <scalbn+0x100>)
 800db0a:	4629      	mov	r1, r5
 800db0c:	ee10 0a10 	vmov	r0, s0
 800db10:	2200      	movs	r2, #0
 800db12:	f7f2 fd79 	bl	8000608 <__aeabi_dmul>
 800db16:	4b37      	ldr	r3, [pc, #220]	; (800dbf4 <scalbn+0x104>)
 800db18:	429e      	cmp	r6, r3
 800db1a:	4604      	mov	r4, r0
 800db1c:	460d      	mov	r5, r1
 800db1e:	da10      	bge.n	800db42 <scalbn+0x52>
 800db20:	a32b      	add	r3, pc, #172	; (adr r3, 800dbd0 <scalbn+0xe0>)
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	e03a      	b.n	800db9e <scalbn+0xae>
 800db28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800db2c:	428a      	cmp	r2, r1
 800db2e:	d10c      	bne.n	800db4a <scalbn+0x5a>
 800db30:	ee10 2a10 	vmov	r2, s0
 800db34:	4620      	mov	r0, r4
 800db36:	4629      	mov	r1, r5
 800db38:	f7f2 fbb0 	bl	800029c <__adddf3>
 800db3c:	4604      	mov	r4, r0
 800db3e:	460d      	mov	r5, r1
 800db40:	e019      	b.n	800db76 <scalbn+0x86>
 800db42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db46:	460b      	mov	r3, r1
 800db48:	3a36      	subs	r2, #54	; 0x36
 800db4a:	4432      	add	r2, r6
 800db4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800db50:	428a      	cmp	r2, r1
 800db52:	dd08      	ble.n	800db66 <scalbn+0x76>
 800db54:	2d00      	cmp	r5, #0
 800db56:	a120      	add	r1, pc, #128	; (adr r1, 800dbd8 <scalbn+0xe8>)
 800db58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db5c:	da1c      	bge.n	800db98 <scalbn+0xa8>
 800db5e:	a120      	add	r1, pc, #128	; (adr r1, 800dbe0 <scalbn+0xf0>)
 800db60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db64:	e018      	b.n	800db98 <scalbn+0xa8>
 800db66:	2a00      	cmp	r2, #0
 800db68:	dd08      	ble.n	800db7c <scalbn+0x8c>
 800db6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800db6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800db72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800db76:	ec45 4b10 	vmov	d0, r4, r5
 800db7a:	bd70      	pop	{r4, r5, r6, pc}
 800db7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800db80:	da19      	bge.n	800dbb6 <scalbn+0xc6>
 800db82:	f24c 3350 	movw	r3, #50000	; 0xc350
 800db86:	429e      	cmp	r6, r3
 800db88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800db8c:	dd0a      	ble.n	800dba4 <scalbn+0xb4>
 800db8e:	a112      	add	r1, pc, #72	; (adr r1, 800dbd8 <scalbn+0xe8>)
 800db90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d1e2      	bne.n	800db5e <scalbn+0x6e>
 800db98:	a30f      	add	r3, pc, #60	; (adr r3, 800dbd8 <scalbn+0xe8>)
 800db9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9e:	f7f2 fd33 	bl	8000608 <__aeabi_dmul>
 800dba2:	e7cb      	b.n	800db3c <scalbn+0x4c>
 800dba4:	a10a      	add	r1, pc, #40	; (adr r1, 800dbd0 <scalbn+0xe0>)
 800dba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d0b8      	beq.n	800db20 <scalbn+0x30>
 800dbae:	a10e      	add	r1, pc, #56	; (adr r1, 800dbe8 <scalbn+0xf8>)
 800dbb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbb4:	e7b4      	b.n	800db20 <scalbn+0x30>
 800dbb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dbba:	3236      	adds	r2, #54	; 0x36
 800dbbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dbc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	4b0c      	ldr	r3, [pc, #48]	; (800dbf8 <scalbn+0x108>)
 800dbc8:	2200      	movs	r2, #0
 800dbca:	e7e8      	b.n	800db9e <scalbn+0xae>
 800dbcc:	f3af 8000 	nop.w
 800dbd0:	c2f8f359 	.word	0xc2f8f359
 800dbd4:	01a56e1f 	.word	0x01a56e1f
 800dbd8:	8800759c 	.word	0x8800759c
 800dbdc:	7e37e43c 	.word	0x7e37e43c
 800dbe0:	8800759c 	.word	0x8800759c
 800dbe4:	fe37e43c 	.word	0xfe37e43c
 800dbe8:	c2f8f359 	.word	0xc2f8f359
 800dbec:	81a56e1f 	.word	0x81a56e1f
 800dbf0:	43500000 	.word	0x43500000
 800dbf4:	ffff3cb0 	.word	0xffff3cb0
 800dbf8:	3c900000 	.word	0x3c900000

0800dbfc <_init>:
 800dbfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbfe:	bf00      	nop
 800dc00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc02:	bc08      	pop	{r3}
 800dc04:	469e      	mov	lr, r3
 800dc06:	4770      	bx	lr

0800dc08 <_fini>:
 800dc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc0a:	bf00      	nop
 800dc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc0e:	bc08      	pop	{r3}
 800dc10:	469e      	mov	lr, r3
 800dc12:	4770      	bx	lr
