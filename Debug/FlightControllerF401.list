
FlightControllerF401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fdc  08005fdc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005fdc  08005fdc  00015fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe4  08005fe4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe4  08005fe4  00015fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000074  08006060  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  08006060  00020758  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d454  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030e8  00000000  00000000  0003d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  000405e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  000418d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019e0e  00000000  00000000  00042a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001065c  00000000  00000000  0005c87e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097dee  00000000  00000000  0006ceda  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00104cc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  00104d44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f20 	.word	0x08005f20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005f20 	.word	0x08005f20

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SPI_I2S_SendData>:
#define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
#define I2S_DIV_MASK         ((uint32_t)(0x000000F0))


void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	460b      	mov	r3, r1
 800058a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800058c:	887a      	ldrh	r2, [r7, #2]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60da      	str	r2, [r3, #12]
}
 8000592:	bf00      	nop
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <SPI_I2S_ReceiveData>:

uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  /* Return the data in the DR register */
  return SPIx->DR;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	b29b      	uxth	r3, r3
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SPI_I2S_GetFlagStatus>:


FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	460b      	mov	r3, r1
 80005c2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80005c4:	2300      	movs	r3, #0
 80005c6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	887b      	ldrh	r3, [r7, #2]
 80005ce:	4013      	ands	r3, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d002      	beq.n	80005da <SPI_I2S_GetFlagStatus+0x22>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80005d4:	2301      	movs	r3, #1
 80005d6:	73fb      	strb	r3, [r7, #15]
 80005d8:	e001      	b.n	80005de <SPI_I2S_GetFlagStatus+0x26>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80005da:	2300      	movs	r3, #0
 80005dc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x98>)
 800061a:	2201      	movs	r2, #1
 800061c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x98>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x98>)
 800064e:	f002 f91b 	bl	8002888 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f000 faf4 	bl	8000c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000664:	2301      	movs	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x98>)
 800066e:	f002 fa87 	bl	8002b80 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f000 fae4 	bl	8000c44 <Error_Handler>
  }

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000bc 	.word	0x200000bc
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a17      	ldr	r2, [pc, #92]	; (800070c <HAL_ADC_MspInit+0x7c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d127      	bne.n	8000702 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <HAL_ADC_MspInit+0x80>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <HAL_ADC_MspInit+0x80>)
 80006bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <HAL_ADC_MspInit+0x80>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_ADC_MspInit+0x80>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_ADC_MspInit+0x80>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_ADC_MspInit+0x80>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ea:	2301      	movs	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_ADC_MspInit+0x84>)
 80006fe:	f002 fd6f 	bl	80031e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40012000 	.word	0x40012000
 8000710:	40023800 	.word	0x40023800
 8000714:	40020000 	.word	0x40020000

08000718 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	4b43      	ldr	r3, [pc, #268]	; (8000840 <MX_GPIO_Init+0x128>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a42      	ldr	r2, [pc, #264]	; (8000840 <MX_GPIO_Init+0x128>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <MX_GPIO_Init+0x128>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <MX_GPIO_Init+0x128>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a3b      	ldr	r2, [pc, #236]	; (8000840 <MX_GPIO_Init+0x128>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <MX_GPIO_Init+0x128>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60bb      	str	r3, [r7, #8]
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <MX_GPIO_Init+0x128>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <MX_GPIO_Init+0x128>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <MX_GPIO_Init+0x128>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_GPIO_Init+0x128>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <MX_GPIO_Init+0x128>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_GPIO_Init+0x128>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007a4:	4827      	ldr	r0, [pc, #156]	; (8000844 <MX_GPIO_Init+0x12c>)
 80007a6:	f002 fe9d 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CE_GPIO_Port, NRF24_CE_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b0:	4825      	ldr	r0, [pc, #148]	; (8000848 <MX_GPIO_Init+0x130>)
 80007b2:	f002 fe97 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF24_CSN_GPIO_Port, NRF24_CSN_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007bc:	4823      	ldr	r0, [pc, #140]	; (800084c <MX_GPIO_Init+0x134>)
 80007be:	f002 fe91 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80007c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	481a      	ldr	r0, [pc, #104]	; (8000844 <MX_GPIO_Init+0x12c>)
 80007dc:	f002 fd00 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CE_Pin;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CE_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	4813      	ldr	r0, [pc, #76]	; (8000848 <MX_GPIO_Init+0x130>)
 80007fa:	f002 fcf1 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_IRQ_Pin;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <MX_GPIO_Init+0x134>)
 8000814:	f002 fce4 	bl	80031e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF24_CSN_Pin;
 8000818:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF24_CSN_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_GPIO_Init+0x134>)
 8000832:	f002 fcd5 	bl	80031e0 <HAL_GPIO_Init>

}
 8000836:	bf00      	nop
 8000838:	3728      	adds	r7, #40	; 0x28
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020400 	.word	0x40020400
 800084c:	40020000 	.word	0x40020000

08000850 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000856:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <MX_I2C1_Init+0x54>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_I2C1_Init+0x50>)
 800085c:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_I2C1_Init+0x58>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_I2C1_Init+0x50>)
 800086e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000872:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_I2C1_Init+0x50>)
 800088e:	f002 fe5d 	bl	800354c <HAL_I2C_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000898:	f000 f9d4 	bl	8000c44 <Error_Handler>
  }

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000104 	.word	0x20000104
 80008a4:	40005400 	.word	0x40005400
 80008a8:	000186a0 	.word	0x000186a0

080008ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <HAL_I2C_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12c      	bne.n	8000928 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_I2C_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f0:	2312      	movs	r3, #18
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008fc:	2304      	movs	r3, #4
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <HAL_I2C_MspInit+0x8c>)
 8000908:	f002 fc6a 	bl	80031e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_I2C_MspInit+0x88>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	4a07      	ldr	r2, [pc, #28]	; (8000934 <HAL_I2C_MspInit+0x88>)
 8000916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <HAL_I2C_MspInit+0x88>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40005400 	.word	0x40005400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020400 	.word	0x40020400

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f001 ff0d 	bl	8002760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f8df 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f7ff fee5 	bl	8000718 <MX_GPIO_Init>
  MX_TIM2_Init();
 800094e:	f001 fda9 	bl	80024a4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000952:	f7ff fe4b 	bl	80005ec <MX_ADC1_Init>
  MX_I2C1_Init();
 8000956:	f7ff ff7b 	bl	8000850 <MX_I2C1_Init>
  MX_SPI1_Init();
 800095a:	f000 fd35 	bl	80013c8 <MX_SPI1_Init>
  MX_SPI2_Init();
 800095e:	f000 fd69 	bl	8001434 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000962:	f000 fd9d 	bl	80014a0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000966:	f001 fcd7 	bl	8002318 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800096a:	f001 fe5d 	bl	8002628 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 800096e:	4852      	ldr	r0, [pc, #328]	; (8000ab8 <main+0x17c>)
 8000970:	f001 ffce 	bl	8002910 <HAL_ADC_Start>

  HAL_Delay(400);//wait for stable power
 8000974:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000978:	f001 ff64 	bl	8002844 <HAL_Delay>

  //NRF24 INIT-----------------------------------
  SPI2->CR1|=SPI_CR1_SPE; //enable SPI
 800097c:	4b4f      	ldr	r3, [pc, #316]	; (8000abc <main+0x180>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a4e      	ldr	r2, [pc, #312]	; (8000abc <main+0x180>)
 8000982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000986:	6013      	str	r3, [r2, #0]

  nRF24_CE_L(); // RX/TX disabled
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098e:	484c      	ldr	r0, [pc, #304]	; (8000ac0 <main+0x184>)
 8000990:	f002 fda8 	bl	80034e4 <HAL_GPIO_WritePin>

  wifiOK=nRF24_Check();
 8000994:	f000 fae4 	bl	8000f60 <nRF24_Check>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	4b49      	ldr	r3, [pc, #292]	; (8000ac4 <main+0x188>)
 800099e:	601a      	str	r2, [r3, #0]

  nRF24_Init(); //Default init
 80009a0:	f000 fa8c 	bl	8000ebc <nRF24_Init>

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 80009a4:	20ff      	movs	r0, #255	; 0xff
 80009a6:	f000 fc6d 	bl	8001284 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(15); //2400Mhz + 15Mhz
 80009aa:	200f      	movs	r0, #15
 80009ac:	f000 fb67 	bl	800107e <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 80009b0:	2020      	movs	r0, #32
 80009b2:	f000 fbf8 	bl	80011a6 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_1byte);
 80009b6:	2008      	movs	r0, #8
 80009b8:	f000 fb40 	bl	800103c <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 fb6c 	bl	800109a <nRF24_SetAddrWidth>

  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); //PROGRAM PIPE1!! for RX
 80009c2:	4941      	ldr	r1, [pc, #260]	; (8000ac8 <main+0x18c>)
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 fb79 	bl	80010bc <nRF24_SetAddr>

  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 8); // Auto-ACK: disabled
 80009ca:	2208      	movs	r2, #8
 80009cc:	2100      	movs	r1, #0
 80009ce:	2001      	movs	r0, #1
 80009d0:	f000 fc04 	bl	80011dc <nRF24_SetRXPipe>


  nRF24_SetAddr(nRF24_PIPETX, nRF24_ADDR);
 80009d4:	493c      	ldr	r1, [pc, #240]	; (8000ac8 <main+0x18c>)
 80009d6:	2006      	movs	r0, #6
 80009d8:	f000 fb70 	bl	80010bc <nRF24_SetAddr>

  // Set TX power
  nRF24_SetTXPower(nRF24_TXPWR_18dBm);
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 fbc7 	bl	8001170 <nRF24_SetTXPower>

  // Set operational mode
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 80009e2:	2001      	movs	r0, #1
 80009e4:	f000 fb09 	bl	8000ffa <nRF24_SetOperationalMode>

  // Clear any pending IRQ flags
  nRF24_ClearIRQFlags();
 80009e8:	f000 fc96 	bl	8001318 <nRF24_ClearIRQFlags>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 80009ec:	2002      	movs	r0, #2
 80009ee:	f000 fae5 	bl	8000fbc <nRF24_SetPowerMode>

  nRF24_CE_H();//Enable RX
 80009f2:	2201      	movs	r2, #1
 80009f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f8:	4831      	ldr	r0, [pc, #196]	; (8000ac0 <main+0x184>)
 80009fa:	f002 fd73 	bl	80034e4 <HAL_GPIO_WritePin>

  HAL_Delay(5000);//wait to connect battery
 80009fe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a02:	f001 ff1f 	bl	8002844 <HAL_Delay>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a06:	2100      	movs	r1, #0
 8000a08:	4830      	ldr	r0, [pc, #192]	; (8000acc <main+0x190>)
 8000a0a:	f003 fbfb 	bl	8004204 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000a0e:	2104      	movs	r1, #4
 8000a10:	482e      	ldr	r0, [pc, #184]	; (8000acc <main+0x190>)
 8000a12:	f003 fbf7 	bl	8004204 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000a16:	2108      	movs	r1, #8
 8000a18:	482c      	ldr	r0, [pc, #176]	; (8000acc <main+0x190>)
 8000a1a:	f003 fbf3 	bl	8004204 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000a1e:	210c      	movs	r1, #12
 8000a20:	482a      	ldr	r0, [pc, #168]	; (8000acc <main+0x190>)
 8000a22:	f003 fbef 	bl	8004204 <HAL_TIM_PWM_Start>

  MotorStatus=MOTOROFF;
 8000a26:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <main+0x194>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	601a      	str	r2, [r3, #0]

  HAL_TIM_Base_Start_IT(&htim2);//Start at the END of Main Initialization
 8000a2c:	4829      	ldr	r0, [pc, #164]	; (8000ad4 <main+0x198>)
 8000a2e:	f003 fb90 	bl	8004152 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	  //own function is used for UART TX, very basic function for direct Register write one char at the time
	  //HAL_UART_Transmit ( &huart1, UartTXbuff0, strlen( UartTXbuff0 ), 1 ); //removed ->missing bytes on occasion

	  HAL_Delay(100);
 8000a32:	2064      	movs	r0, #100	; 0x64
 8000a34:	f001 ff06 	bl	8002844 <HAL_Delay>

	  sprintf(UartTXbuff0,T_HIDE_CUR);
 8000a38:	4b27      	ldr	r3, [pc, #156]	; (8000ad8 <main+0x19c>)
 8000a3a:	4a28      	ldr	r2, [pc, #160]	; (8000adc <main+0x1a0>)
 8000a3c:	6810      	ldr	r0, [r2, #0]
 8000a3e:	6018      	str	r0, [r3, #0]
 8000a40:	8891      	ldrh	r1, [r2, #4]
 8000a42:	7992      	ldrb	r2, [r2, #6]
 8000a44:	8099      	strh	r1, [r3, #4]
 8000a46:	719a      	strb	r2, [r3, #6]
	  WriteString(UartTXbuff0);
 8000a48:	4823      	ldr	r0, [pc, #140]	; (8000ad8 <main+0x19c>)
 8000a4a:	f000 f8c7 	bl	8000bdc <WriteString>

	  sprintf(UartTXbuff0,T_GO_TO,1,1); //Go to start Screen
 8000a4e:	2301      	movs	r3, #1
 8000a50:	2201      	movs	r2, #1
 8000a52:	4923      	ldr	r1, [pc, #140]	; (8000ae0 <main+0x1a4>)
 8000a54:	4820      	ldr	r0, [pc, #128]	; (8000ad8 <main+0x19c>)
 8000a56:	f004 ff1f 	bl	8005898 <siprintf>
	  WriteString(UartTXbuff0);
 8000a5a:	481f      	ldr	r0, [pc, #124]	; (8000ad8 <main+0x19c>)
 8000a5c:	f000 f8be 	bl	8000bdc <WriteString>

	  sprintf(UartTXbuff0,T_CLR_SCREEN);
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <main+0x19c>)
 8000a62:	4a20      	ldr	r2, [pc, #128]	; (8000ae4 <main+0x1a8>)
 8000a64:	6810      	ldr	r0, [r2, #0]
 8000a66:	6018      	str	r0, [r3, #0]
 8000a68:	7912      	ldrb	r2, [r2, #4]
 8000a6a:	711a      	strb	r2, [r3, #4]
	  WriteString(UartTXbuff0);
 8000a6c:	481a      	ldr	r0, [pc, #104]	; (8000ad8 <main+0x19c>)
 8000a6e:	f000 f8b5 	bl	8000bdc <WriteString>
	  WriteString(UartTXbuff0);

	  sprintf(UartTXbuff0, "Throttle Max %.2f Min I %.2f \n\r",FlashDataFlash.maxthrottle, FlashDataFlash.minthrottle);
	  WriteString(UartTXbuff0);*/

	  sprintf(UartTXbuff0, "\n\r" );
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <main+0x19c>)
 8000a74:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <main+0x1ac>)
 8000a76:	8811      	ldrh	r1, [r2, #0]
 8000a78:	7892      	ldrb	r2, [r2, #2]
 8000a7a:	8019      	strh	r1, [r3, #0]
 8000a7c:	709a      	strb	r2, [r3, #2]
	  WriteString(UartTXbuff0);
 8000a7e:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <main+0x19c>)
 8000a80:	f000 f8ac 	bl	8000bdc <WriteString>

	  sprintf(UartTXbuff0, "watch %d %d %d %d %d %d\n\r",watch1,watch2,watch3,watch4,watch5,watch6);
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <main+0x1b0>)
 8000a86:	681c      	ldr	r4, [r3, #0]
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <main+0x1b4>)
 8000a8a:	681d      	ldr	r5, [r3, #0]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <main+0x1b8>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <main+0x1bc>)
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	4919      	ldr	r1, [pc, #100]	; (8000afc <main+0x1c0>)
 8000a96:	6809      	ldr	r1, [r1, #0]
 8000a98:	4819      	ldr	r0, [pc, #100]	; (8000b00 <main+0x1c4>)
 8000a9a:	6800      	ldr	r0, [r0, #0]
 8000a9c:	9003      	str	r0, [sp, #12]
 8000a9e:	9102      	str	r1, [sp, #8]
 8000aa0:	9201      	str	r2, [sp, #4]
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	4622      	mov	r2, r4
 8000aa8:	4916      	ldr	r1, [pc, #88]	; (8000b04 <main+0x1c8>)
 8000aaa:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <main+0x19c>)
 8000aac:	f004 fef4 	bl	8005898 <siprintf>
	  WriteString(UartTXbuff0);
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <main+0x19c>)
 8000ab2:	f000 f893 	bl	8000bdc <WriteString>
	  HAL_Delay(100);
 8000ab6:	e7bc      	b.n	8000a32 <main+0xf6>
 8000ab8:	200000bc 	.word	0x200000bc
 8000abc:	40003800 	.word	0x40003800
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	200001e0 	.word	0x200001e0
 8000ac8:	08005f7c 	.word	0x08005f7c
 8000acc:	20000690 	.word	0x20000690
 8000ad0:	20000094 	.word	0x20000094
 8000ad4:	200006d0 	.word	0x200006d0
 8000ad8:	200001e8 	.word	0x200001e8
 8000adc:	08005f38 	.word	0x08005f38
 8000ae0:	08005f40 	.word	0x08005f40
 8000ae4:	08005f4c 	.word	0x08005f4c
 8000ae8:	08005f54 	.word	0x08005f54
 8000aec:	200001e4 	.word	0x200001e4
 8000af0:	200001d8 	.word	0x200001d8
 8000af4:	20000280 	.word	0x20000280
 8000af8:	200001dc 	.word	0x200001dc
 8000afc:	200003c0 	.word	0x200003c0
 8000b00:	20000274 	.word	0x20000274
 8000b04:	08005f58 	.word	0x08005f58

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	; 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	2230      	movs	r2, #48	; 0x30
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f004 fdfd 	bl	8005716 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b28      	ldr	r3, [pc, #160]	; (8000bd4 <SystemClock_Config+0xcc>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <SystemClock_Config+0xcc>)
 8000b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <SystemClock_Config+0xcc>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <SystemClock_Config+0xd0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b54:	4a20      	ldr	r2, [pc, #128]	; (8000bd8 <SystemClock_Config+0xd0>)
 8000b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <SystemClock_Config+0xd0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b7c:	2319      	movs	r3, #25
 8000b7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b80:	23a8      	movs	r3, #168	; 0xa8
 8000b82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	4618      	mov	r0, r3
 8000b92:	f002 fe13 	bl	80037bc <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b9c:	f000 f852 	bl	8000c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2102      	movs	r1, #2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 f86d 	bl	8003c9c <HAL_RCC_ClockConfig>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bc8:	f000 f83c 	bl	8000c44 <Error_Handler>
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3750      	adds	r7, #80	; 0x50
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40007000 	.word	0x40007000

08000bdc <WriteString>:
	p->maxthrottle=(float)( (*(( uint32_t *) (StartAddr+80) )) );
}

/* Print character to array */
void WriteString(char string[])
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  unsigned int i=0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  while (string[i])
 8000be8:	e009      	b.n	8000bfe <WriteString+0x22>
  {
	PrintCharUart (string[i]);
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f80e 	bl	8000c14 <PrintCharUart>
	i++;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
  while (string[i])
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1ef      	bne.n	8000bea <WriteString+0xe>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <PrintCharUart>:

/* Write character to Serial Port    */
void PrintCharUart (int ch)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
	while (!(USART1->SR & USART_SR_TXE));
 8000c1c:	bf00      	nop
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <PrintCharUart+0x2c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f9      	beq.n	8000c1e <PrintCharUart+0xa>
	USART1->DR = (USART_DR_DR & ch);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <PrintCharUart+0x2c>)
 8000c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c32:	6053      	str	r3, [r2, #4]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	40011000 	.word	0x40011000

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <nRF24_TransmitPacket>:
// Function to transmit data packet
// input:
//   pBuf - pointer to the buffer with data to transmit
//   length - length of the data buffer in bytes
// return: one of nRF24_TX_xx values
nRF24_TXResult nRF24_TransmitPacket(uint8_t *pBuf, uint8_t length) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	70fb      	strb	r3, [r7, #3]
	volatile uint32_t wait = nRF24_WAIT_TIMEOUT;
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <nRF24_TransmitPacket+0x98>)
 8000c62:	60bb      	str	r3, [r7, #8]
	uint8_t status;

	// Deassert the CE pin (in case if it still high)
	nRF24_CE_L();
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c6a:	4821      	ldr	r0, [pc, #132]	; (8000cf0 <nRF24_TransmitPacket+0x9c>)
 8000c6c:	f002 fc3a 	bl	80034e4 <HAL_GPIO_WritePin>

	// Transfer a data from the specified buffer to the TX FIFO
	nRF24_WritePayload(pBuf, length);
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	4619      	mov	r1, r3
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 fb64 	bl	8001342 <nRF24_WritePayload>

	// Start a transmission by asserting CE pin (must be held at least 10us)
	nRF24_CE_H();
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c80:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <nRF24_TransmitPacket+0x9c>)
 8000c82:	f002 fc2f 	bl	80034e4 <HAL_GPIO_WritePin>
	// Poll the transceiver status register until one of the following flags will be set:
	//   TX_DS  - means the packet has been transmitted
	//   MAX_RT - means the maximum number of TX retransmits happened
	// note: this solution is far from perfect, better to use IRQ instead of polling the status
	do {
		status = nRF24_GetStatus();
 8000c86:	f000 fb24 	bl	80012d2 <nRF24_GetStatus>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]
		if (status & (nRF24_FLAG_TX_DS | nRF24_FLAG_MAX_RT)) {
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d105      	bne.n	8000ca4 <nRF24_TransmitPacket+0x50>
			break;
		}
	} while (wait--);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1e5a      	subs	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d1f1      	bne.n	8000c86 <nRF24_TransmitPacket+0x32>
 8000ca2:	e000      	b.n	8000ca6 <nRF24_TransmitPacket+0x52>
			break;
 8000ca4:	bf00      	nop

	// Deassert the CE pin (Standby-II --> Standby-I)
	nRF24_CE_L();
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cac:	4810      	ldr	r0, [pc, #64]	; (8000cf0 <nRF24_TransmitPacket+0x9c>)
 8000cae:	f002 fc19 	bl	80034e4 <HAL_GPIO_WritePin>

	if (!wait) {
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d101      	bne.n	8000cbc <nRF24_TransmitPacket+0x68>
		// Timeout
		return nRF24_TX_TIMEOUT;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	e012      	b.n	8000ce2 <nRF24_TransmitPacket+0x8e>
	}

	// Clear pending IRQ flags
    nRF24_ClearIRQFlags();
 8000cbc:	f000 fb2c 	bl	8001318 <nRF24_ClearIRQFlags>

	if (status & nRF24_FLAG_MAX_RT) {
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <nRF24_TransmitPacket+0x7a>
		// Auto retransmit counter exceeds the programmed maximum limit (FIFO is not removed)
		return nRF24_TX_MAXRT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e009      	b.n	8000ce2 <nRF24_TransmitPacket+0x8e>
	}

	if (status & nRF24_FLAG_TX_DS) {
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	f003 0320 	and.w	r3, r3, #32
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <nRF24_TransmitPacket+0x88>
		// Successful transmission
		return nRF24_TX_SUCCESS;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e002      	b.n	8000ce2 <nRF24_TransmitPacket+0x8e>
	}

	// Some banana happens, a payload remains in the TX FIFO, flush it
	nRF24_FlushTX();
 8000cdc:	f000 fb0c 	bl	80012f8 <nRF24_FlushTX>

	return nRF24_TX_ERROR;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	000fffff 	.word	0x000fffff
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <nRF24_LL_RW>:




uint8_t nRF24_LL_RW(uint8_t data) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]

	 // Wait until TX buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_TXE) == RESET);
 8000cfe:	bf00      	nop
 8000d00:	2102      	movs	r1, #2
 8000d02:	480e      	ldr	r0, [pc, #56]	; (8000d3c <nRF24_LL_RW+0x48>)
 8000d04:	f7ff fc58 	bl	80005b8 <SPI_I2S_GetFlagStatus>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f8      	beq.n	8000d00 <nRF24_LL_RW+0xc>
	// Send byte to SPI (TXE cleared)
	SPI_I2S_SendData(nRF24_SPI_PORT, data);
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <nRF24_LL_RW+0x48>)
 8000d16:	f7ff fc33 	bl	8000580 <SPI_I2S_SendData>
	// Wait while receive buffer is empty
	while (SPI_I2S_GetFlagStatus(nRF24_SPI_PORT, SPI_I2S_FLAG_RXNE) == RESET);
 8000d1a:	bf00      	nop
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <nRF24_LL_RW+0x48>)
 8000d20:	f7ff fc4a 	bl	80005b8 <SPI_I2S_GetFlagStatus>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f8      	beq.n	8000d1c <nRF24_LL_RW+0x28>

	// Return received byte
	return (uint8_t)SPI_I2S_ReceiveData(nRF24_SPI_PORT);
 8000d2a:	4804      	ldr	r0, [pc, #16]	; (8000d3c <nRF24_LL_RW+0x48>)
 8000d2c:	f7ff fc37 	bl	800059e <SPI_I2S_ReceiveData>
 8000d30:	4603      	mov	r3, r0
 8000d32:	b2db      	uxtb	r3, r3
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40003800 	.word	0x40003800

08000d40 <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <nRF24_ReadReg+0x44>)
 8000d52:	f002 fbc7 	bl	80034e4 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	f003 031f 	and.w	r3, r3, #31
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff ffc8 	bl	8000cf4 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8000d64:	20ff      	movs	r0, #255	; 0xff
 8000d66:	f7ff ffc5 	bl	8000cf4 <nRF24_LL_RW>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <nRF24_ReadReg+0x44>)
 8000d76:	f002 fbb5 	bl	80034e4 <HAL_GPIO_WritePin>

	return value;
 8000d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40020000 	.word	0x40020000

08000d88 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460a      	mov	r2, r1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	4613      	mov	r3, r2
 8000d96:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9e:	481a      	ldr	r0, [pc, #104]	; (8000e08 <nRF24_WriteReg+0x80>)
 8000da0:	f002 fba0 	bl	80034e4 <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2b1f      	cmp	r3, #31
 8000da8:	d810      	bhi.n	8000dcc <nRF24_WriteReg+0x44>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	f003 031f 	and.w	r3, r3, #31
 8000db2:	b25b      	sxtb	r3, r3
 8000db4:	f043 0320 	orr.w	r3, r3, #32
 8000db8:	b25b      	sxtb	r3, r3
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff99 	bl	8000cf4 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff95 	bl	8000cf4 <nRF24_LL_RW>
 8000dca:	e013      	b.n	8000df4 <nRF24_WriteReg+0x6c>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff90 	bl	8000cf4 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	2be1      	cmp	r3, #225	; 0xe1
 8000dd8:	d00c      	beq.n	8000df4 <nRF24_WriteReg+0x6c>
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2be2      	cmp	r3, #226	; 0xe2
 8000dde:	d009      	beq.n	8000df4 <nRF24_WriteReg+0x6c>
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2be3      	cmp	r3, #227	; 0xe3
 8000de4:	d006      	beq.n	8000df4 <nRF24_WriteReg+0x6c>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	d003      	beq.n	8000df4 <nRF24_WriteReg+0x6c>
			// Send register value
			nRF24_LL_RW(value);
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ff80 	bl	8000cf4 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dfa:	4803      	ldr	r0, [pc, #12]	; (8000e08 <nRF24_WriteReg+0x80>)
 8000dfc:	f002 fb72 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40020000 	.word	0x40020000

08000e0c <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	6039      	str	r1, [r7, #0]
 8000e16:	71fb      	strb	r3, [r7, #7]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <nRF24_ReadMBReg+0x54>)
 8000e24:	f002 fb5e 	bl	80034e4 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff62 	bl	8000cf4 <nRF24_LL_RW>
	while (count--) {
 8000e30:	e007      	b.n	8000e42 <nRF24_ReadMBReg+0x36>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8000e32:	683c      	ldr	r4, [r7, #0]
 8000e34:	1c63      	adds	r3, r4, #1
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	20ff      	movs	r0, #255	; 0xff
 8000e3a:	f7ff ff5b 	bl	8000cf4 <nRF24_LL_RW>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	1e5a      	subs	r2, r3, #1
 8000e46:	71ba      	strb	r2, [r7, #6]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d1f2      	bne.n	8000e32 <nRF24_ReadMBReg+0x26>
	}
	nRF24_CSN_H();
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e52:	4803      	ldr	r0, [pc, #12]	; (8000e60 <nRF24_ReadMBReg+0x54>)
 8000e54:	f002 fb46 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	40020000 	.word	0x40020000

08000e64 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	4613      	mov	r3, r2
 8000e72:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <nRF24_WriteMBReg+0x54>)
 8000e7c:	f002 fb32 	bl	80034e4 <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff ff36 	bl	8000cf4 <nRF24_LL_RW>
	while (count--) {
 8000e88:	e006      	b.n	8000e98 <nRF24_WriteMBReg+0x34>

		nRF24_LL_RW(*pBuf++);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	1c5a      	adds	r2, r3, #1
 8000e8e:	603a      	str	r2, [r7, #0]
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff2e 	bl	8000cf4 <nRF24_LL_RW>
	while (count--) {
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	1e5a      	subs	r2, r3, #1
 8000e9c:	71ba      	strb	r2, [r7, #6]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f3      	bne.n	8000e8a <nRF24_WriteMBReg+0x26>
	}
	nRF24_CSN_H();
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <nRF24_WriteMBReg+0x54>)
 8000eaa:	f002 fb1b 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40020000 	.word	0x40020000

08000ebc <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8000ec0:	2108      	movs	r1, #8
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff ff60 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8000ec8:	213f      	movs	r1, #63	; 0x3f
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff5c 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8000ed0:	2103      	movs	r1, #3
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f7ff ff58 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8000ed8:	2103      	movs	r1, #3
 8000eda:	2003      	movs	r0, #3
 8000edc:	f7ff ff54 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f7ff ff50 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8000ee8:	2102      	movs	r1, #2
 8000eea:	2005      	movs	r0, #5
 8000eec:	f7ff ff4c 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8000ef0:	210e      	movs	r1, #14
 8000ef2:	2006      	movs	r0, #6
 8000ef4:	f7ff ff48 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2007      	movs	r0, #7
 8000efc:	f7ff ff44 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8000f00:	2100      	movs	r1, #0
 8000f02:	2011      	movs	r0, #17
 8000f04:	f7ff ff40 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2012      	movs	r0, #18
 8000f0c:	f7ff ff3c 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8000f10:	2100      	movs	r1, #0
 8000f12:	2013      	movs	r0, #19
 8000f14:	f7ff ff38 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2014      	movs	r0, #20
 8000f1c:	f7ff ff34 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8000f20:	2100      	movs	r1, #0
 8000f22:	2015      	movs	r0, #21
 8000f24:	f7ff ff30 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2016      	movs	r0, #22
 8000f2c:	f7ff ff2c 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8000f30:	2100      	movs	r1, #0
 8000f32:	201c      	movs	r0, #28
 8000f34:	f7ff ff28 	bl	8000d88 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	201d      	movs	r0, #29
 8000f3c:	f7ff ff24 	bl	8000d88 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8000f40:	f000 f9e2 	bl	8001308 <nRF24_FlushRX>
	nRF24_FlushTX();
 8000f44:	f000 f9d8 	bl	80012f8 <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8000f48:	f000 f9e6 	bl	8001318 <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f52:	4802      	ldr	r0, [pc, #8]	; (8000f5c <nRF24_Init+0xa0>)
 8000f54:	f002 fac6 	bl	80034e4 <HAL_GPIO_WritePin>
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40020000 	.word	0x40020000

08000f60 <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <nRF24_Check+0x58>)
 8000f68:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8000f6a:	2205      	movs	r2, #5
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	2030      	movs	r0, #48	; 0x30
 8000f70:	f7ff ff78 	bl	8000e64 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8000f74:	463b      	mov	r3, r7
 8000f76:	2205      	movs	r2, #5
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f7ff ff46 	bl	8000e0c <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	e010      	b.n	8000fa8 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
 8000f88:	f107 0210 	add.w	r2, r7, #16
 8000f8c:	4413      	add	r3, r2
 8000f8e:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1c59      	adds	r1, r3, #1
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d001      	beq.n	8000fa2 <nRF24_Check+0x42>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e006      	b.n	8000fb0 <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	d9eb      	bls.n	8000f86 <nRF24_Check+0x26>
	}

	return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	08005f74 	.word	0x08005f74

08000fbc <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff feba 	bl	8000d40 <nRF24_ReadReg>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d104      	bne.n	8000fe0 <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e003      	b.n	8000fe8 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	f023 0302 	bic.w	r3, r3, #2
 8000fe6:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2000      	movs	r0, #0
 8000fee:	f7ff fecb 	bl	8000d88 <nRF24_WriteReg>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	4603      	mov	r3, r0
 8001002:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fe9b 	bl	8000d40 <nRF24_ReadReg>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	b25a      	sxtb	r2, r3
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4313      	orrs	r3, r2
 8001026:	b25b      	sxtb	r3, r3
 8001028:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	4619      	mov	r1, r3
 800102e:	2000      	movs	r0, #0
 8001030:	f7ff feaa 	bl	8000d88 <nRF24_WriteReg>
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8001046:	2000      	movs	r0, #0
 8001048:	f7ff fe7a 	bl	8000d40 <nRF24_ReadReg>
 800104c:	4603      	mov	r3, r0
 800104e:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	f023 030c 	bic.w	r3, r3, #12
 8001056:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	b25a      	sxtb	r2, r3
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4313      	orrs	r3, r2
 8001068:	b25b      	sxtb	r3, r3
 800106a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	4619      	mov	r1, r3
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fe89 	bl	8000d88 <nRF24_WriteReg>
}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	4603      	mov	r3, r0
 8001086:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4619      	mov	r1, r3
 800108c:	2005      	movs	r0, #5
 800108e:	f7ff fe7b 	bl	8000d88 <nRF24_WriteReg>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	3b02      	subs	r3, #2
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	4619      	mov	r1, r3
 80010ac:	2003      	movs	r0, #3
 80010ae:	f7ff fe6b 	bl	8000d88 <nRF24_WriteReg>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d846      	bhi.n	800115c <nRF24_SetAddr+0xa0>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <nRF24_SetAddr+0x18>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	080010f1 	.word	0x080010f1
 80010d8:	080010f1 	.word	0x080010f1
 80010dc:	08001149 	.word	0x08001149
 80010e0:	08001149 	.word	0x08001149
 80010e4:	08001149 	.word	0x08001149
 80010e8:	08001149 	.word	0x08001149
 80010ec:	080010f1 	.word	0x080010f1
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 80010f0:	2003      	movs	r0, #3
 80010f2:	f7ff fe25 	bl	8000d40 <nRF24_ReadReg>
 80010f6:	4603      	mov	r3, r0
 80010f8:	3301      	adds	r3, #1
 80010fa:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800110a:	4817      	ldr	r0, [pc, #92]	; (8001168 <nRF24_SetAddr+0xac>)
 800110c:	f002 f9ea 	bl	80034e4 <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	4a16      	ldr	r2, [pc, #88]	; (800116c <nRF24_SetAddr+0xb0>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	b2db      	uxtb	r3, r3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fde9 	bl	8000cf4 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	1e5a      	subs	r2, r3, #1
 8001126:	603a      	str	r2, [r7, #0]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fde2 	bl	8000cf4 <nRF24_LL_RW>
			} while (addr_width--);
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	1e5a      	subs	r2, r3, #1
 8001134:	73fa      	strb	r2, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f3      	bne.n	8001122 <nRF24_SetAddr+0x66>
			nRF24_CSN_H();
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001140:	4809      	ldr	r0, [pc, #36]	; (8001168 <nRF24_SetAddr+0xac>)
 8001142:	f002 f9cf 	bl	80034e4 <HAL_GPIO_WritePin>
			break;
 8001146:	e00a      	b.n	800115e <nRF24_SetAddr+0xa2>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4a08      	ldr	r2, [pc, #32]	; (800116c <nRF24_SetAddr+0xb0>)
 800114c:	5cd2      	ldrb	r2, [r2, r3]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4619      	mov	r1, r3
 8001154:	4610      	mov	r0, r2
 8001156:	f7ff fe17 	bl	8000d88 <nRF24_WriteReg>
			break;
 800115a:	e000      	b.n	800115e <nRF24_SetAddr+0xa2>
		default:
			// Incorrect pipe number -> do nothing
			break;
 800115c:	bf00      	nop
	}
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40020000 	.word	0x40020000
 800116c:	08005f88 	.word	0x08005f88

08001170 <nRF24_SetTXPower>:

// Configure RF output power in TX mode
// input:
//   tx_pwr - RF output power, one of nRF24_TXPWR_xx values
void nRF24_SetTXPower(uint8_t tx_pwr) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_PWR[2:1] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 800117a:	2006      	movs	r0, #6
 800117c:	f7ff fde0 	bl	8000d40 <nRF24_ReadReg>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_RF_PWR;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	f023 0306 	bic.w	r3, r3, #6
 800118a:	73fb      	strb	r3, [r7, #15]
	reg |= tx_pwr;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4313      	orrs	r3, r2
 8001192:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	4619      	mov	r1, r3
 8001198:	2006      	movs	r0, #6
 800119a:	f7ff fdf5 	bl	8000d88 <nRF24_WriteReg>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <nRF24_SetDataRate>:

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 80011b0:	2006      	movs	r0, #6
 80011b2:	f7ff fdc5 	bl	8000d40 <nRF24_ReadReg>
 80011b6:	4603      	mov	r3, r0
 80011b8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80011c0:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4619      	mov	r1, r3
 80011ce:	2006      	movs	r0, #6
 80011d0:	f7ff fdda 	bl	8000d88 <nRF24_WriteReg>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
 80011e6:	460b      	mov	r3, r1
 80011e8:	71bb      	strb	r3, [r7, #6]
 80011ea:	4613      	mov	r3, r2
 80011ec:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 80011ee:	2002      	movs	r0, #2
 80011f0:	f7ff fda6 	bl	8000d40 <nRF24_ReadReg>
 80011f4:	4603      	mov	r3, r0
 80011f6:	b25a      	sxtb	r2, r3
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	2101      	movs	r1, #1
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	b25b      	sxtb	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b25b      	sxtb	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800120c:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	4619      	mov	r1, r3
 8001212:	2002      	movs	r0, #2
 8001214:	f7ff fdb8 	bl	8000d88 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <nRF24_SetRXPipe+0xa4>)
 800121c:	5cd2      	ldrb	r2, [r2, r3]
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4619      	mov	r1, r3
 8001228:	4610      	mov	r0, r2
 800122a:	f7ff fdad 	bl	8000d88 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff fd86 	bl	8000d40 <nRF24_ReadReg>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 8001238:	79bb      	ldrb	r3, [r7, #6]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10a      	bne.n	8001254 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2201      	movs	r2, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	b25a      	sxtb	r2, r3
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124c:	4313      	orrs	r3, r2
 800124e:	b25b      	sxtb	r3, r3
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	e00b      	b.n	800126c <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	2201      	movs	r2, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	b25b      	sxtb	r3, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	b25a      	sxtb	r2, r3
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4013      	ands	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	4619      	mov	r1, r3
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff fd89 	bl	8000d88 <nRF24_WriteReg>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	08005f80 	.word	0x08005f80

08001284 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d904      	bls.n	800129e <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8001294:	2100      	movs	r1, #0
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fd76 	bl	8000d88 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 800129c:	e015      	b.n	80012ca <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff fd4e 	bl	8000d40 <nRF24_ReadReg>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	2201      	movs	r2, #1
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	b25b      	sxtb	r3, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ba:	4013      	ands	r3, r2
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	4619      	mov	r1, r3
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fd5f 	bl	8000d88 <nRF24_WriteReg>
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <nRF24_GetStatus>:

// Get value of the STATUS register
// return: value of STATUS register
uint8_t nRF24_GetStatus(void) {
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
	return nRF24_ReadReg(nRF24_REG_STATUS);
 80012d6:	2007      	movs	r0, #7
 80012d8:	f7ff fd32 	bl	8000d40 <nRF24_ReadReg>
 80012dc:	4603      	mov	r3, r0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 80012e6:	2017      	movs	r0, #23
 80012e8:	f7ff fd2a 	bl	8000d40 <nRF24_ReadReg>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	b2db      	uxtb	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 80012fc:	21ff      	movs	r1, #255	; 0xff
 80012fe:	20e1      	movs	r0, #225	; 0xe1
 8001300:	f7ff fd42 	bl	8000d88 <nRF24_WriteReg>
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}

08001308 <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 800130c:	21ff      	movs	r1, #255	; 0xff
 800130e:	20e2      	movs	r0, #226	; 0xe2
 8001310:	f7ff fd3a 	bl	8000d88 <nRF24_WriteReg>
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 800131e:	2007      	movs	r0, #7
 8001320:	f7ff fd0e 	bl	8000d40 <nRF24_ReadReg>
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800132e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4619      	mov	r1, r3
 8001334:	2007      	movs	r0, #7
 8001336:	f7ff fd27 	bl	8000d88 <nRF24_WriteReg>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <nRF24_WritePayload>:

// Write TX payload
// input:
//   pBuf - pointer to the buffer with payload data
//   length - payload length in bytes
void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	70fb      	strb	r3, [r7, #3]
	nRF24_WriteMBReg(nRF24_CMD_W_TX_PAYLOAD, pBuf, length);
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	461a      	mov	r2, r3
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	20a0      	movs	r0, #160	; 0xa0
 8001356:	f7ff fd85 	bl	8000e64 <nRF24_WriteMBReg>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 800136e:	2007      	movs	r0, #7
 8001370:	f7ff fce6 	bl	8000d40 <nRF24_ReadReg>
 8001374:	4603      	mov	r3, r0
 8001376:	105b      	asrs	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b05      	cmp	r3, #5
 8001384:	d816      	bhi.n	80013b4 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <nRF24_ReadPayload+0x60>)
 800138a:	5cd3      	ldrb	r3, [r2, r3]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fcd7 	bl	8000d40 <nRF24_ReadReg>
 8001392:	4603      	mov	r3, r0
 8001394:	461a      	mov	r2, r3
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	2061      	movs	r0, #97	; 0x61
 80013ac:	f7ff fd2e 	bl	8000e0c <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	e003      	b.n	80013bc <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2200      	movs	r2, #0
 80013b8:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 80013ba:	23ff      	movs	r3, #255	; 0xff
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	08005f80 	.word	0x08005f80

080013c8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_SPI1_Init+0x64>)
 80013ce:	4a18      	ldr	r2, [pc, #96]	; (8001430 <MX_SPI1_Init+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <MX_SPI1_Init+0x64>)
 80013d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <MX_SPI1_Init+0x64>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_SPI1_Init+0x64>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_SPI1_Init+0x64>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013ec:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_SPI1_Init+0x64>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_SPI1_Init+0x64>)
 80013f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_SPI1_Init+0x64>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <MX_SPI1_Init+0x64>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_SPI1_Init+0x64>)
 8001408:	2200      	movs	r2, #0
 800140a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <MX_SPI1_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_SPI1_Init+0x64>)
 8001414:	220a      	movs	r2, #10
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_SPI1_Init+0x64>)
 800141a:	f002 fe0b 	bl	8004034 <HAL_SPI_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001424:	f7ff fc0e 	bl	8000c44 <Error_Handler>
  }

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000474 	.word	0x20000474
 8001430:	40013000 	.word	0x40013000

08001434 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <MX_SPI2_Init+0x64>)
 800143a:	4a18      	ldr	r2, [pc, #96]	; (800149c <MX_SPI2_Init+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <MX_SPI2_Init+0x64>)
 8001440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001444:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <MX_SPI2_Init+0x64>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_SPI2_Init+0x64>)
 800144e:	2200      	movs	r2, #0
 8001450:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_SPI2_Init+0x64>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001458:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <MX_SPI2_Init+0x64>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <MX_SPI2_Init+0x64>)
 8001460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001464:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <MX_SPI2_Init+0x64>)
 8001468:	2208      	movs	r2, #8
 800146a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <MX_SPI2_Init+0x64>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <MX_SPI2_Init+0x64>)
 8001474:	2200      	movs	r2, #0
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <MX_SPI2_Init+0x64>)
 800147a:	2200      	movs	r2, #0
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <MX_SPI2_Init+0x64>)
 8001480:	220a      	movs	r2, #10
 8001482:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <MX_SPI2_Init+0x64>)
 8001486:	f002 fdd5 	bl	8004034 <HAL_SPI_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001490:	f7ff fbd8 	bl	8000c44 <Error_Handler>
  }

}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200003c4 	.word	0x200003c4
 800149c:	40003800 	.word	0x40003800

080014a0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_SPI3_Init+0x64>)
 80014a6:	4a18      	ldr	r2, [pc, #96]	; (8001508 <MX_SPI3_Init+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_SPI3_Init+0x64>)
 80014ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_SPI3_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_SPI3_Init+0x64>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_SPI3_Init+0x64>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_SPI3_Init+0x64>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_SPI3_Init+0x64>)
 80014cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_SPI3_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_SPI3_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_SPI3_Init+0x64>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_SPI3_Init+0x64>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_SPI3_Init+0x64>)
 80014ec:	220a      	movs	r2, #10
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_SPI3_Init+0x64>)
 80014f2:	f002 fd9f 	bl	8004034 <HAL_SPI_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80014fc:	f7ff fba2 	bl	8000c44 <Error_Handler>
  }

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000041c 	.word	0x2000041c
 8001508:	40003c00 	.word	0x40003c00

0800150c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08e      	sub	sp, #56	; 0x38
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a4b      	ldr	r2, [pc, #300]	; (8001658 <HAL_SPI_MspInit+0x14c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12c      	bne.n	8001588 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
 8001532:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_SPI_MspInit+0x150>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	4a49      	ldr	r2, [pc, #292]	; (800165c <HAL_SPI_MspInit+0x150>)
 8001538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800153c:	6453      	str	r3, [r2, #68]	; 0x44
 800153e:	4b47      	ldr	r3, [pc, #284]	; (800165c <HAL_SPI_MspInit+0x150>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	623b      	str	r3, [r7, #32]
 8001548:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	4b43      	ldr	r3, [pc, #268]	; (800165c <HAL_SPI_MspInit+0x150>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a42      	ldr	r2, [pc, #264]	; (800165c <HAL_SPI_MspInit+0x150>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b40      	ldr	r3, [pc, #256]	; (800165c <HAL_SPI_MspInit+0x150>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
 8001564:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001566:	23e0      	movs	r3, #224	; 0xe0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001576:	2305      	movs	r3, #5
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	4837      	ldr	r0, [pc, #220]	; (8001660 <HAL_SPI_MspInit+0x154>)
 8001582:	f001 fe2d 	bl	80031e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001586:	e063      	b.n	8001650 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a35      	ldr	r2, [pc, #212]	; (8001664 <HAL_SPI_MspInit+0x158>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12d      	bne.n	80015ee <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <HAL_SPI_MspInit+0x150>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a30      	ldr	r2, [pc, #192]	; (800165c <HAL_SPI_MspInit+0x150>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b2e      	ldr	r3, [pc, #184]	; (800165c <HAL_SPI_MspInit+0x150>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_SPI_MspInit+0x150>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a29      	ldr	r2, [pc, #164]	; (800165c <HAL_SPI_MspInit+0x150>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_SPI_MspInit+0x150>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80015ca:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015dc:	2305      	movs	r3, #5
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4820      	ldr	r0, [pc, #128]	; (8001668 <HAL_SPI_MspInit+0x15c>)
 80015e8:	f001 fdfa 	bl	80031e0 <HAL_GPIO_Init>
}
 80015ec:	e030      	b.n	8001650 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI3)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1e      	ldr	r2, [pc, #120]	; (800166c <HAL_SPI_MspInit+0x160>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d12b      	bne.n	8001650 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_SPI_MspInit+0x150>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a16      	ldr	r2, [pc, #88]	; (800165c <HAL_SPI_MspInit+0x150>)
 8001602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_SPI_MspInit+0x150>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_SPI_MspInit+0x150>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	4a0f      	ldr	r2, [pc, #60]	; (800165c <HAL_SPI_MspInit+0x150>)
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	6313      	str	r3, [r2, #48]	; 0x30
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_SPI_MspInit+0x150>)
 8001626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001630:	2338      	movs	r3, #56	; 0x38
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001640:	2306      	movs	r3, #6
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	4807      	ldr	r0, [pc, #28]	; (8001668 <HAL_SPI_MspInit+0x15c>)
 800164c:	f001 fdc8 	bl	80031e0 <HAL_GPIO_Init>
}
 8001650:	bf00      	nop
 8001652:	3738      	adds	r7, #56	; 0x38
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40013000 	.word	0x40013000
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000
 8001664:	40003800 	.word	0x40003800
 8001668:	40020400 	.word	0x40020400
 800166c:	40003c00 	.word	0x40003c00

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_MspInit+0x4c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_MspInit+0x4c>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_MspInit+0x4c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_MspInit+0x4c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_MspInit+0x4c>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_MspInit+0x4c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001714:	f001 f876 	bl	8002804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001722:	4890      	ldr	r0, [pc, #576]	; (8001964 <TIM2_IRQHandler+0x248>)
 8001724:	f002 fda0 	bl	8004268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  //blinky--------------------------------------------------------------
  LEDcount++;
 8001728:	4b8f      	ldr	r3, [pc, #572]	; (8001968 <TIM2_IRQHandler+0x24c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	4a8e      	ldr	r2, [pc, #568]	; (8001968 <TIM2_IRQHandler+0x24c>)
 8001730:	6013      	str	r3, [r2, #0]
  if(LEDcount>=50)
 8001732:	4b8d      	ldr	r3, [pc, #564]	; (8001968 <TIM2_IRQHandler+0x24c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b31      	cmp	r3, #49	; 0x31
 8001738:	d907      	bls.n	800174a <TIM2_IRQHandler+0x2e>
  {
	  LEDcount=0;
 800173a:	4b8b      	ldr	r3, [pc, #556]	; (8001968 <TIM2_IRQHandler+0x24c>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8001740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001744:	4889      	ldr	r0, [pc, #548]	; (800196c <TIM2_IRQHandler+0x250>)
 8001746:	f001 fee6 	bl	8003516 <HAL_GPIO_TogglePin>
  }//-------------------------------------------------------------------


  //Read Battery Voltage-----------------------------------------------
  HAL_ADC_PollForConversion(&hadc1,1);
 800174a:	2101      	movs	r1, #1
 800174c:	4888      	ldr	r0, [pc, #544]	; (8001970 <TIM2_IRQHandler+0x254>)
 800174e:	f001 f985 	bl	8002a5c <HAL_ADC_PollForConversion>
  BattmV=HAL_ADC_GetValue(&hadc1)*BATTADCTOMV;
 8001752:	4887      	ldr	r0, [pc, #540]	; (8001970 <TIM2_IRQHandler+0x254>)
 8001754:	f001 fa06 	bl	8002b64 <HAL_ADC_GetValue>
 8001758:	ee07 0a90 	vmov	s15, r0
 800175c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001760:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001974 <TIM2_IRQHandler+0x258>
 8001764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800176c:	ee17 2a90 	vmov	r2, s15
 8001770:	4b81      	ldr	r3, [pc, #516]	; (8001978 <TIM2_IRQHandler+0x25c>)
 8001772:	601a      	str	r2, [r3, #0]

  //Battery average value-----------------------------------------------
  BAttmVhist[batthistindx]=BattmV;
 8001774:	4b81      	ldr	r3, [pc, #516]	; (800197c <TIM2_IRQHandler+0x260>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a7f      	ldr	r2, [pc, #508]	; (8001978 <TIM2_IRQHandler+0x25c>)
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4980      	ldr	r1, [pc, #512]	; (8001980 <TIM2_IRQHandler+0x264>)
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  batthistindx++;
 8001782:	4b7e      	ldr	r3, [pc, #504]	; (800197c <TIM2_IRQHandler+0x260>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	4a7c      	ldr	r2, [pc, #496]	; (800197c <TIM2_IRQHandler+0x260>)
 800178a:	6013      	str	r3, [r2, #0]

  if(batthistindx >= BATTAVERAGETIME)batthistindx=0;
 800178c:	4b7b      	ldr	r3, [pc, #492]	; (800197c <TIM2_IRQHandler+0x260>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b31      	cmp	r3, #49	; 0x31
 8001792:	d902      	bls.n	800179a <TIM2_IRQHandler+0x7e>
 8001794:	4b79      	ldr	r3, [pc, #484]	; (800197c <TIM2_IRQHandler+0x260>)
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]

  BattmVSUM=0;
 800179a:	4b7a      	ldr	r3, [pc, #488]	; (8001984 <TIM2_IRQHandler+0x268>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

  for(i=0;i<BATTAVERAGETIME;i++)
 80017a0:	4b79      	ldr	r3, [pc, #484]	; (8001988 <TIM2_IRQHandler+0x26c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00e      	b.n	80017c6 <TIM2_IRQHandler+0xaa>
  {
	  BattmVSUM+=BAttmVhist[i];
 80017a8:	4b77      	ldr	r3, [pc, #476]	; (8001988 <TIM2_IRQHandler+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a74      	ldr	r2, [pc, #464]	; (8001980 <TIM2_IRQHandler+0x264>)
 80017ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017b2:	4b74      	ldr	r3, [pc, #464]	; (8001984 <TIM2_IRQHandler+0x268>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a72      	ldr	r2, [pc, #456]	; (8001984 <TIM2_IRQHandler+0x268>)
 80017ba:	6013      	str	r3, [r2, #0]
  for(i=0;i<BATTAVERAGETIME;i++)
 80017bc:	4b72      	ldr	r3, [pc, #456]	; (8001988 <TIM2_IRQHandler+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3301      	adds	r3, #1
 80017c2:	4a71      	ldr	r2, [pc, #452]	; (8001988 <TIM2_IRQHandler+0x26c>)
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b70      	ldr	r3, [pc, #448]	; (8001988 <TIM2_IRQHandler+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b31      	cmp	r3, #49	; 0x31
 80017cc:	d9ec      	bls.n	80017a8 <TIM2_IRQHandler+0x8c>
  }

  BattmVAVG=BattmVSUM/(BATTAVERAGETIME);
 80017ce:	4b6d      	ldr	r3, [pc, #436]	; (8001984 <TIM2_IRQHandler+0x268>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a6e      	ldr	r2, [pc, #440]	; (800198c <TIM2_IRQHandler+0x270>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	4a6d      	ldr	r2, [pc, #436]	; (8001990 <TIM2_IRQHandler+0x274>)
 80017dc:	6013      	str	r3, [r2, #0]
  //--------------------------------------------------------------------

  //save OLD toggle values
  togg1hist=togg1;
 80017de:	4b6d      	ldr	r3, [pc, #436]	; (8001994 <TIM2_IRQHandler+0x278>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6d      	ldr	r2, [pc, #436]	; (8001998 <TIM2_IRQHandler+0x27c>)
 80017e4:	6013      	str	r3, [r2, #0]
  togg2hist=togg2;
 80017e6:	4b6d      	ldr	r3, [pc, #436]	; (800199c <TIM2_IRQHandler+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a6d      	ldr	r2, [pc, #436]	; (80019a0 <TIM2_IRQHandler+0x284>)
 80017ec:	6013      	str	r3, [r2, #0]
  togg3hist=togg3;
 80017ee:	4b6d      	ldr	r3, [pc, #436]	; (80019a4 <TIM2_IRQHandler+0x288>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a6d      	ldr	r2, [pc, #436]	; (80019a8 <TIM2_IRQHandler+0x28c>)
 80017f4:	6013      	str	r3, [r2, #0]
  togg4hist=togg4;
 80017f6:	4b6d      	ldr	r3, [pc, #436]	; (80019ac <TIM2_IRQHandler+0x290>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a6d      	ldr	r2, [pc, #436]	; (80019b0 <TIM2_IRQHandler+0x294>)
 80017fc:	6013      	str	r3, [r2, #0]
  togg5hist=togg5;
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <TIM2_IRQHandler+0x298>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6d      	ldr	r2, [pc, #436]	; (80019b8 <TIM2_IRQHandler+0x29c>)
 8001804:	6013      	str	r3, [r2, #0]
  togg6hist=togg6;
 8001806:	4b6d      	ldr	r3, [pc, #436]	; (80019bc <TIM2_IRQHandler+0x2a0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a6d      	ldr	r2, [pc, #436]	; (80019c0 <TIM2_IRQHandler+0x2a4>)
 800180c:	6013      	str	r3, [r2, #0]

  //NRF24--------------------------------------------------------------------
  //Ping for RX data when RXflag is SET
  if(RXactiveFlag)
 800180e:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <TIM2_IRQHandler+0x2a8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 823b 	beq.w	8001c8e <TIM2_IRQHandler+0x572>
  {
  		if ((nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) )
 8001818:	f7ff fd63 	bl	80012e2 <nRF24_GetStatus_RXFIFO>
 800181c:	4603      	mov	r3, r0
 800181e:	2b01      	cmp	r3, #1
 8001820:	f000 8235 	beq.w	8001c8e <TIM2_IRQHandler+0x572>
  		{

  			// Get a payload from the transceiver
  			nRF24_ReadPayload(nRF24_payloadRX, &RXstpaketov);
 8001824:	4968      	ldr	r1, [pc, #416]	; (80019c8 <TIM2_IRQHandler+0x2ac>)
 8001826:	4869      	ldr	r0, [pc, #420]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 8001828:	f7ff fd9c 	bl	8001364 <nRF24_ReadPayload>

  			// Clear all pending IRQ flags
  			nRF24_ClearIRQFlags();
 800182c:	f7ff fd74 	bl	8001318 <nRF24_ClearIRQFlags>

  			MSGSelector=(nRF24_payloadRX[0]);
 8001830:	4b66      	ldr	r3, [pc, #408]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <TIM2_IRQHandler+0x2b4>)
 8001838:	601a      	str	r2, [r3, #0]

  			switch(MSGSelector)
 800183a:	4b65      	ldr	r3, [pc, #404]	; (80019d0 <TIM2_IRQHandler+0x2b4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b04      	cmp	r3, #4
 8001840:	f200 80dd 	bhi.w	80019fe <TIM2_IRQHandler+0x2e2>
 8001844:	a201      	add	r2, pc, #4	; (adr r2, 800184c <TIM2_IRQHandler+0x130>)
 8001846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800184a:	bf00      	nop
 800184c:	08001861 	.word	0x08001861
 8001850:	0800192b 	.word	0x0800192b
 8001854:	08001959 	.word	0x08001959
 8001858:	0800191b 	.word	0x0800191b
 800185c:	08001923 	.word	0x08001923
  			{
  				case COMMCONTROLDATA:
  									{
  										if(nRF24_payloadRX[1]<=100 && nRF24_payloadRX[2]<=100 && nRF24_payloadRX[3]<=100 && nRF24_payloadRX[4]<=100)//Check if Data is in correct ranges
 8001860:	4b5a      	ldr	r3, [pc, #360]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	2b64      	cmp	r3, #100	; 0x64
 8001866:	f200 80c9 	bhi.w	80019fc <TIM2_IRQHandler+0x2e0>
 800186a:	4b58      	ldr	r3, [pc, #352]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 800186c:	789b      	ldrb	r3, [r3, #2]
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	f200 80c4 	bhi.w	80019fc <TIM2_IRQHandler+0x2e0>
 8001874:	4b55      	ldr	r3, [pc, #340]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 8001876:	78db      	ldrb	r3, [r3, #3]
 8001878:	2b64      	cmp	r3, #100	; 0x64
 800187a:	f200 80bf 	bhi.w	80019fc <TIM2_IRQHandler+0x2e0>
 800187e:	4b53      	ldr	r3, [pc, #332]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	f200 80ba 	bhi.w	80019fc <TIM2_IRQHandler+0x2e0>
  										{
  							  				Ljoyupdown=nRF24_payloadRX[1];
 8001888:	4b50      	ldr	r3, [pc, #320]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 800188a:	785b      	ldrb	r3, [r3, #1]
 800188c:	461a      	mov	r2, r3
 800188e:	4b51      	ldr	r3, [pc, #324]	; (80019d4 <TIM2_IRQHandler+0x2b8>)
 8001890:	601a      	str	r2, [r3, #0]
  							  				Ljoyleftright=nRF24_payloadRX[2];
 8001892:	4b4e      	ldr	r3, [pc, #312]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 8001894:	789b      	ldrb	r3, [r3, #2]
 8001896:	461a      	mov	r2, r3
 8001898:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <TIM2_IRQHandler+0x2bc>)
 800189a:	601a      	str	r2, [r3, #0]
  							  				Djoyupdown=nRF24_payloadRX[3];
 800189c:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 800189e:	78db      	ldrb	r3, [r3, #3]
 80018a0:	461a      	mov	r2, r3
 80018a2:	4b4e      	ldr	r3, [pc, #312]	; (80019dc <TIM2_IRQHandler+0x2c0>)
 80018a4:	601a      	str	r2, [r3, #0]
  							  				Djoyleftright=nRF24_payloadRX[4];
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 80018a8:	791b      	ldrb	r3, [r3, #4]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <TIM2_IRQHandler+0x2c4>)
 80018ae:	601a      	str	r2, [r3, #0]
  							  				potenc1=nRF24_payloadRX[5];
 80018b0:	4b46      	ldr	r3, [pc, #280]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 80018b2:	795b      	ldrb	r3, [r3, #5]
 80018b4:	461a      	mov	r2, r3
 80018b6:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <TIM2_IRQHandler+0x2c8>)
 80018b8:	601a      	str	r2, [r3, #0]
  							  				potenc2=nRF24_payloadRX[6];
 80018ba:	4b44      	ldr	r3, [pc, #272]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 80018bc:	799b      	ldrb	r3, [r3, #6]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b49      	ldr	r3, [pc, #292]	; (80019e8 <TIM2_IRQHandler+0x2cc>)
 80018c2:	601a      	str	r2, [r3, #0]

  							  				togg1=nRF24_payloadRX[7]>>7;
 80018c4:	4b41      	ldr	r3, [pc, #260]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 80018c6:	79db      	ldrb	r3, [r3, #7]
 80018c8:	09db      	lsrs	r3, r3, #7
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <TIM2_IRQHandler+0x278>)
 80018d0:	601a      	str	r2, [r3, #0]
  							  				togg2=(nRF24_payloadRX[7] & 64 )>>6;
 80018d2:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 80018d4:	79db      	ldrb	r3, [r3, #7]
 80018d6:	119b      	asrs	r3, r3, #6
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	4a2f      	ldr	r2, [pc, #188]	; (800199c <TIM2_IRQHandler+0x280>)
 80018de:	6013      	str	r3, [r2, #0]
  							  				togg3=(nRF24_payloadRX[7] & 32 )>>5;
 80018e0:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 80018e2:	79db      	ldrb	r3, [r3, #7]
 80018e4:	115b      	asrs	r3, r3, #5
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	4a2e      	ldr	r2, [pc, #184]	; (80019a4 <TIM2_IRQHandler+0x288>)
 80018ec:	6013      	str	r3, [r2, #0]
  							  				togg4=(nRF24_payloadRX[7] & 16 )>>4;
 80018ee:	4b37      	ldr	r3, [pc, #220]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 80018f0:	79db      	ldrb	r3, [r3, #7]
 80018f2:	111b      	asrs	r3, r3, #4
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	4a2c      	ldr	r2, [pc, #176]	; (80019ac <TIM2_IRQHandler+0x290>)
 80018fa:	6013      	str	r3, [r2, #0]
  							  				togg5=(nRF24_payloadRX[7] & 8 )>>3;
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 80018fe:	79db      	ldrb	r3, [r3, #7]
 8001900:	10db      	asrs	r3, r3, #3
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	4a2b      	ldr	r2, [pc, #172]	; (80019b4 <TIM2_IRQHandler+0x298>)
 8001908:	6013      	str	r3, [r2, #0]
  							  				togg6=(nRF24_payloadRX[7] & 4 )>>2;
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 800190c:	79db      	ldrb	r3, [r3, #7]
 800190e:	109b      	asrs	r3, r3, #2
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	4a29      	ldr	r2, [pc, #164]	; (80019bc <TIM2_IRQHandler+0x2a0>)
 8001916:	6013      	str	r3, [r2, #0]
  										}
  									}break;
 8001918:	e070      	b.n	80019fc <TIM2_IRQHandler+0x2e0>

  				case COMMERASEFLASHDR:
  									{
  										FlashEraseFlag=1;
 800191a:	4b34      	ldr	r3, [pc, #208]	; (80019ec <TIM2_IRQHandler+0x2d0>)
 800191c:	2201      	movs	r2, #1
 800191e:	601a      	str	r2, [r3, #0]

  									}break;
 8001920:	e06d      	b.n	80019fe <TIM2_IRQHandler+0x2e2>

  				case COMMWRITEFLASHDR:
  									{
  										FlashWriteFlag=1;
 8001922:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <TIM2_IRQHandler+0x2d4>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]

  									}break;
 8001928:	e069      	b.n	80019fe <TIM2_IRQHandler+0x2e2>

  				case COMMPARAMACTIVE:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 800192c:	785b      	ldrb	r3, [r3, #1]
 800192e:	461a      	mov	r2, r3
 8001930:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <TIM2_IRQHandler+0x2d8>)
 8001932:	601a      	str	r2, [r3, #0]
  				  						ParamDataRX=(nRF24_payloadRX[2]<<24) + (nRF24_payloadRX[3]<<16) + (nRF24_payloadRX[4]<<8) + (nRF24_payloadRX[5]);
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 8001936:	789b      	ldrb	r3, [r3, #2]
 8001938:	061a      	lsls	r2, r3, #24
 800193a:	4b24      	ldr	r3, [pc, #144]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 800193c:	78db      	ldrb	r3, [r3, #3]
 800193e:	041b      	lsls	r3, r3, #16
 8001940:	441a      	add	r2, r3
 8001942:	4b22      	ldr	r3, [pc, #136]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 8001944:	791b      	ldrb	r3, [r3, #4]
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	4413      	add	r3, r2
 800194a:	4a20      	ldr	r2, [pc, #128]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 800194c:	7952      	ldrb	r2, [r2, #5]
 800194e:	4413      	add	r3, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <TIM2_IRQHandler+0x2dc>)
 8001954:	601a      	str	r2, [r3, #0]

  				  					}break;
 8001956:	e052      	b.n	80019fe <TIM2_IRQHandler+0x2e2>

  				case COMMPARAMFLASH:
  				  					{
  				  						ParamSelector=nRF24_payloadRX[1];
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <TIM2_IRQHandler+0x2b0>)
 800195a:	785b      	ldrb	r3, [r3, #1]
 800195c:	461a      	mov	r2, r3
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <TIM2_IRQHandler+0x2d8>)
 8001960:	601a      	str	r2, [r3, #0]

  				  					}break;
 8001962:	e04c      	b.n	80019fe <TIM2_IRQHandler+0x2e2>
 8001964:	200006d0 	.word	0x200006d0
 8001968:	20000668 	.word	0x20000668
 800196c:	40020800 	.word	0x40020800
 8001970:	200000bc 	.word	0x200000bc
 8001974:	4090ac29 	.word	0x4090ac29
 8001978:	20000678 	.word	0x20000678
 800197c:	200000a4 	.word	0x200000a4
 8001980:	200004f4 	.word	0x200004f4
 8001984:	2000009c 	.word	0x2000009c
 8001988:	200005d4 	.word	0x200005d4
 800198c:	51eb851f 	.word	0x51eb851f
 8001990:	200000a0 	.word	0x200000a0
 8001994:	20000278 	.word	0x20000278
 8001998:	2000068c 	.word	0x2000068c
 800199c:	200003bc 	.word	0x200003bc
 80019a0:	200005f8 	.word	0x200005f8
 80019a4:	2000015c 	.word	0x2000015c
 80019a8:	20000688 	.word	0x20000688
 80019ac:	20000284 	.word	0x20000284
 80019b0:	200005bc 	.word	0x200005bc
 80019b4:	2000024c 	.word	0x2000024c
 80019b8:	200004e8 	.word	0x200004e8
 80019bc:	20000160 	.word	0x20000160
 80019c0:	20000670 	.word	0x20000670
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000090 	.word	0x20000090
 80019cc:	20000164 	.word	0x20000164
 80019d0:	200004ec 	.word	0x200004ec
 80019d4:	2000027c 	.word	0x2000027c
 80019d8:	20000270 	.word	0x20000270
 80019dc:	200003b4 	.word	0x200003b4
 80019e0:	20000158 	.word	0x20000158
 80019e4:	200002dc 	.word	0x200002dc
 80019e8:	200003b8 	.word	0x200003b8
 80019ec:	200004d4 	.word	0x200004d4
 80019f0:	20000674 	.word	0x20000674
 80019f4:	200005dc 	.word	0x200005dc
 80019f8:	200005c0 	.word	0x200005c0
  									}break;
 80019fc:	bf00      	nop


  			}


  			if(MSGSelector==COMMPARAMACTIVE)//save values in active structure
 80019fe:	4bb4      	ldr	r3, [pc, #720]	; (8001cd0 <TIM2_IRQHandler+0x5b4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	f040 8138 	bne.w	8001c78 <TIM2_IRQHandler+0x55c>
  			{
  				switch(ParamSelector)
 8001a08:	4bb2      	ldr	r3, [pc, #712]	; (8001cd4 <TIM2_IRQHandler+0x5b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	2b13      	cmp	r3, #19
 8001a10:	f200 8132 	bhi.w	8001c78 <TIM2_IRQHandler+0x55c>
 8001a14:	a201      	add	r2, pc, #4	; (adr r2, 8001a1c <TIM2_IRQHandler+0x300>)
 8001a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1a:	bf00      	nop
 8001a1c:	08001a6d 	.word	0x08001a6d
 8001a20:	08001a89 	.word	0x08001a89
 8001a24:	08001aa5 	.word	0x08001aa5
 8001a28:	08001ac1 	.word	0x08001ac1
 8001a2c:	08001add 	.word	0x08001add
 8001a30:	08001af9 	.word	0x08001af9
 8001a34:	08001b15 	.word	0x08001b15
 8001a38:	08001b31 	.word	0x08001b31
 8001a3c:	08001b4d 	.word	0x08001b4d
 8001a40:	08001b69 	.word	0x08001b69
 8001a44:	08001b7f 	.word	0x08001b7f
 8001a48:	08001b95 	.word	0x08001b95
 8001a4c:	08001bab 	.word	0x08001bab
 8001a50:	08001bc1 	.word	0x08001bc1
 8001a54:	08001bd7 	.word	0x08001bd7
 8001a58:	08001bed 	.word	0x08001bed
 8001a5c:	08001c09 	.word	0x08001c09
 8001a60:	08001c25 	.word	0x08001c25
 8001a64:	08001c41 	.word	0x08001c41
 8001a68:	08001c5d 	.word	0x08001c5d
  				{
					case  PARAM1 :{FlashDataActive.pid_p_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001a6c:	4b9a      	ldr	r3, [pc, #616]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a78:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	4b97      	ldr	r3, [pc, #604]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001a82:	edc3 7a01 	vstr	s15, [r3, #4]
 8001a86:	e0f7      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM2 :{FlashDataActive.pid_i_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001a88:	4b93      	ldr	r3, [pc, #588]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a94:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a9c:	4b90      	ldr	r3, [pc, #576]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001a9e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001aa2:	e0e9      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM3 :{FlashDataActive.pid_d_gain_pitch=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ab0:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab8:	4b89      	ldr	r3, [pc, #548]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001aba:	edc3 7a03 	vstr	s15, [r3, #12]
 8001abe:	e0db      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM4 :{FlashDataActive.pid_p_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001ac0:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001acc:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad4:	4b82      	ldr	r3, [pc, #520]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001ad6:	edc3 7a04 	vstr	s15, [r3, #16]
 8001ada:	e0cd      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM5 :{FlashDataActive.pid_i_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001adc:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ae8:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001aec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af0:	4b7b      	ldr	r3, [pc, #492]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001af2:	edc3 7a05 	vstr	s15, [r3, #20]
 8001af6:	e0bf      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM6 :{FlashDataActive.pid_d_gain_roll=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001af8:	4b77      	ldr	r3, [pc, #476]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	ee07 3a90 	vmov	s15, r3
 8001b00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b04:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001b08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0c:	4b74      	ldr	r3, [pc, #464]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001b0e:	edc3 7a06 	vstr	s15, [r3, #24]
 8001b12:	e0b1      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM7 :{FlashDataActive.pid_p_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001b14:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b20:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001b24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b28:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001b2a:	edc3 7a07 	vstr	s15, [r3, #28]
 8001b2e:	e0a3      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM8 :{FlashDataActive.pid_i_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001b30:	4b69      	ldr	r3, [pc, #420]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b3c:	eddf 6a67 	vldr	s13, [pc, #412]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b44:	4b66      	ldr	r3, [pc, #408]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001b46:	edc3 7a08 	vstr	s15, [r3, #32]
 8001b4a:	e095      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM9 :{FlashDataActive.pid_d_gain_yaw=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001b4c:	4b62      	ldr	r3, [pc, #392]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b58:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b60:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001b62:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 8001b66:	e087      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM10 :{FlashDataActive.pid_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8001b68:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	095b      	lsrs	r3, r3, #5
 8001b6e:	4a5d      	ldr	r2, [pc, #372]	; (8001ce4 <TIM2_IRQHandler+0x5c8>)
 8001b70:	fba2 2303 	umull	r2, r3, r2, r3
 8001b74:	09db      	lsrs	r3, r3, #7
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b59      	ldr	r3, [pc, #356]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
 8001b7c:	e07c      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM11 :{FlashDataActive.pid_i_max_pitch=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8001b7e:	4b56      	ldr	r3, [pc, #344]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	4a57      	ldr	r2, [pc, #348]	; (8001ce4 <TIM2_IRQHandler+0x5c8>)
 8001b86:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8a:	09db      	lsrs	r3, r3, #7
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b54      	ldr	r3, [pc, #336]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b92:	e071      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM12 :{FlashDataActive.pid_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	095b      	lsrs	r3, r3, #5
 8001b9a:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <TIM2_IRQHandler+0x5c8>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	09db      	lsrs	r3, r3, #7
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b4e      	ldr	r3, [pc, #312]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba8:	e066      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM13 :{FlashDataActive.pid_i_max_roll=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8001baa:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	095b      	lsrs	r3, r3, #5
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	; (8001ce4 <TIM2_IRQHandler+0x5c8>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	09db      	lsrs	r3, r3, #7
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bbe:	e05b      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM14 :{FlashDataActive.pid_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8001bc0:	4b45      	ldr	r3, [pc, #276]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	4a47      	ldr	r2, [pc, #284]	; (8001ce4 <TIM2_IRQHandler+0x5c8>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	09db      	lsrs	r3, r3, #7
 8001bce:	461a      	mov	r2, r3
 8001bd0:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8001bd4:	e050      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM15 :{FlashDataActive.pid_i_max_yaw=(int)(ParamDataRX/FLASHCONSTANTMULTIPLIER);}break;
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	4a41      	ldr	r2, [pc, #260]	; (8001ce4 <TIM2_IRQHandler+0x5c8>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	09db      	lsrs	r3, r3, #7
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b3e      	ldr	r3, [pc, #248]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001be8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bea:	e045      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM16 :{FlashDataActive.maxpitchdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001bec:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bf8:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001bfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c00:	4b37      	ldr	r3, [pc, #220]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001c02:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8001c06:	e037      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM17 :{FlashDataActive.maxrolldegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001c08:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	ee07 3a90 	vmov	s15, r3
 8001c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c14:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001c1e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
 8001c22:	e029      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM18 :{FlashDataActive.maxyawdegree=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	ee07 3a90 	vmov	s15, r3
 8001c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c30:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c38:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001c3a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8001c3e:	e01b      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM19 :{FlashDataActive.minthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c4c:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001c50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c54:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001c56:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8001c5a:	e00d      	b.n	8001c78 <TIM2_IRQHandler+0x55c>
					case  PARAM20 :{FlashDataActive.maxthrottle=(float)(ParamDataRX)/(float)(FLASHCONSTANTMULTIPLIER);}break;
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <TIM2_IRQHandler+0x5bc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c68:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001cdc <TIM2_IRQHandler+0x5c0>
 8001c6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001c72:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 8001c76:	bf00      	nop
  				}
  			}



  			SendBackFlag=1;
 8001c78:	4b1b      	ldr	r3, [pc, #108]	; (8001ce8 <TIM2_IRQHandler+0x5cc>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
  			RXactiveFlag=0;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <TIM2_IRQHandler+0x5d0>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

  			MSGcount++;
 8001c84:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <TIM2_IRQHandler+0x5d4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <TIM2_IRQHandler+0x5d4>)
 8001c8c:	6013      	str	r3, [r2, #0]
  		}
  }
  if(SendBackFlag)//Config between RX-TX
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <TIM2_IRQHandler+0x5cc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f000 82aa 	beq.w	80021ec <TIM2_IRQHandler+0xad0>
  {
    	BackTimer++;
 8001c98:	4b16      	ldr	r3, [pc, #88]	; (8001cf4 <TIM2_IRQHandler+0x5d8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <TIM2_IRQHandler+0x5d8>)
 8001ca0:	6013      	str	r3, [r2, #0]

    	//Calculate param for transfer
    	 if(MSGSelector==COMMPARAMACTIVE || MSGSelector==COMMPARAMFLASH)
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <TIM2_IRQHandler+0x5b4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d004      	beq.n	8001cb4 <TIM2_IRQHandler+0x598>
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <TIM2_IRQHandler+0x5b4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	f040 8158 	bne.w	8001f64 <TIM2_IRQHandler+0x848>
    	 {
    		 if(MSGSelector==COMMPARAMACTIVE)FlashDataTemp=FlashDataActive;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <TIM2_IRQHandler+0x5b4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d11f      	bne.n	8001cfc <TIM2_IRQHandler+0x5e0>
 8001cbc:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <TIM2_IRQHandler+0x5dc>)
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <TIM2_IRQHandler+0x5c4>)
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	2354      	movs	r3, #84	; 0x54
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f003 fd1a 	bl	8005700 <memcpy>
 8001ccc:	e01e      	b.n	8001d0c <TIM2_IRQHandler+0x5f0>
 8001cce:	bf00      	nop
 8001cd0:	200004ec 	.word	0x200004ec
 8001cd4:	200005dc 	.word	0x200005dc
 8001cd8:	200005c0 	.word	0x200005c0
 8001cdc:	47c35000 	.word	0x47c35000
 8001ce0:	20000288 	.word	0x20000288
 8001ce4:	0a7c5ac5 	.word	0x0a7c5ac5
 8001ce8:	200000a8 	.word	0x200000a8
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	200004e4 	.word	0x200004e4
 8001cf4:	200000ac 	.word	0x200000ac
 8001cf8:	20000608 	.word	0x20000608
    		 else FlashDataTemp=FlashDataFlash;
 8001cfc:	4ab5      	ldr	r2, [pc, #724]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001cfe:	4bb6      	ldr	r3, [pc, #728]	; (8001fd8 <TIM2_IRQHandler+0x8bc>)
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	2354      	movs	r3, #84	; 0x54
 8001d06:	461a      	mov	r2, r3
 8001d08:	f003 fcfa 	bl	8005700 <memcpy>

    		 switch(ParamSelector)
 8001d0c:	4bb3      	ldr	r3, [pc, #716]	; (8001fdc <TIM2_IRQHandler+0x8c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3b01      	subs	r3, #1
 8001d12:	2b13      	cmp	r3, #19
 8001d14:	f200 8126 	bhi.w	8001f64 <TIM2_IRQHandler+0x848>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <TIM2_IRQHandler+0x604>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d71 	.word	0x08001d71
 8001d24:	08001d8d 	.word	0x08001d8d
 8001d28:	08001da9 	.word	0x08001da9
 8001d2c:	08001dc5 	.word	0x08001dc5
 8001d30:	08001de1 	.word	0x08001de1
 8001d34:	08001dfd 	.word	0x08001dfd
 8001d38:	08001e19 	.word	0x08001e19
 8001d3c:	08001e35 	.word	0x08001e35
 8001d40:	08001e51 	.word	0x08001e51
 8001d44:	08001e6d 	.word	0x08001e6d
 8001d48:	08001e7f 	.word	0x08001e7f
 8001d4c:	08001e91 	.word	0x08001e91
 8001d50:	08001ea3 	.word	0x08001ea3
 8001d54:	08001eb5 	.word	0x08001eb5
 8001d58:	08001ec7 	.word	0x08001ec7
 8001d5c:	08001ed9 	.word	0x08001ed9
 8001d60:	08001ef5 	.word	0x08001ef5
 8001d64:	08001f11 	.word	0x08001f11
 8001d68:	08001f2d 	.word	0x08001f2d
 8001d6c:	08001f49 	.word	0x08001f49
    		 {
    	 	 	 case PARAM1: {ParamDataTX=FlashDataTemp.pid_p_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8001d70:	4b98      	ldr	r3, [pc, #608]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001d72:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d76:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001d7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d82:	ee17 2a90 	vmov	r2, s15
 8001d86:	4b97      	ldr	r3, [pc, #604]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e0eb      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM2: {ParamDataTX=FlashDataTemp.pid_i_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8001d8c:	4b91      	ldr	r3, [pc, #580]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d92:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d9e:	ee17 2a90 	vmov	r2, s15
 8001da2:	4b90      	ldr	r3, [pc, #576]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e0dd      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM3: {ParamDataTX=FlashDataTemp.pid_d_gain_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8001da8:	4b8a      	ldr	r3, [pc, #552]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001daa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dae:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dba:	ee17 2a90 	vmov	r2, s15
 8001dbe:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e0cf      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM4: {ParamDataTX=FlashDataTemp.pid_p_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8001dc4:	4b83      	ldr	r3, [pc, #524]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001dc6:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dca:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001dce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd6:	ee17 2a90 	vmov	r2, s15
 8001dda:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e0c1      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM5: {ParamDataTX=FlashDataTemp.pid_i_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8001de0:	4b7c      	ldr	r3, [pc, #496]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001de2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001de6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df2:	ee17 2a90 	vmov	r2, s15
 8001df6:	4b7b      	ldr	r3, [pc, #492]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	e0b3      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM6: {ParamDataTX=FlashDataTemp.pid_d_gain_roll*FLASHCONSTANTMULTIPLIER;}break;
 8001dfc:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001dfe:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e02:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e0e:	ee17 2a90 	vmov	r2, s15
 8001e12:	4b74      	ldr	r3, [pc, #464]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e0a5      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM7: {ParamDataTX=FlashDataTemp.pid_p_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8001e18:	4b6e      	ldr	r3, [pc, #440]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001e1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e1e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001e22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e2a:	ee17 2a90 	vmov	r2, s15
 8001e2e:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e097      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM8: {ParamDataTX=FlashDataTemp.pid_i_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001e36:	edd3 7a08 	vldr	s15, [r3, #32]
 8001e3a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e46:	ee17 2a90 	vmov	r2, s15
 8001e4a:	4b66      	ldr	r3, [pc, #408]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e089      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM9: {ParamDataTX=FlashDataTemp.pid_d_gain_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8001e50:	4b60      	ldr	r3, [pc, #384]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001e52:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e56:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e62:	ee17 2a90 	vmov	r2, s15
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e07b      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM10: {ParamDataTX=FlashDataTemp.pid_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <TIM2_IRQHandler+0x8cc>)
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	4b5a      	ldr	r3, [pc, #360]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e072      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM11: {ParamDataTX=FlashDataTemp.pid_i_max_pitch*FLASHCONSTANTMULTIPLIER;}break;
 8001e7e:	4b55      	ldr	r3, [pc, #340]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	4a59      	ldr	r2, [pc, #356]	; (8001fe8 <TIM2_IRQHandler+0x8cc>)
 8001e84:	fb02 f303 	mul.w	r3, r2, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b56      	ldr	r3, [pc, #344]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e069      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM12: {ParamDataTX=FlashDataTemp.pid_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8001e90:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e94:	4a54      	ldr	r2, [pc, #336]	; (8001fe8 <TIM2_IRQHandler+0x8cc>)
 8001e96:	fb02 f303 	mul.w	r3, r2, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e060      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM13: {ParamDataTX=FlashDataTemp.pid_i_max_roll*FLASHCONSTANTMULTIPLIER;}break;
 8001ea2:	4b4c      	ldr	r3, [pc, #304]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	4a50      	ldr	r2, [pc, #320]	; (8001fe8 <TIM2_IRQHandler+0x8cc>)
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e057      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM14: {ParamDataTX=FlashDataTemp.pid_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8001eb4:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	4a4b      	ldr	r2, [pc, #300]	; (8001fe8 <TIM2_IRQHandler+0x8cc>)
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e04e      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM15: {ParamDataTX=FlashDataTemp.pid_i_max_yaw*FLASHCONSTANTMULTIPLIER;}break;
 8001ec6:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	4a47      	ldr	r2, [pc, #284]	; (8001fe8 <TIM2_IRQHandler+0x8cc>)
 8001ecc:	fb02 f303 	mul.w	r3, r2, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e045      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM16: {ParamDataTX=FlashDataTemp.maxpitchdegree*FLASHCONSTANTMULTIPLIER;}break;
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001eda:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001ede:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eea:	ee17 2a90 	vmov	r2, s15
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	e037      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM17: {ParamDataTX=FlashDataTemp.maxrolldegree*FLASHCONSTANTMULTIPLIER;}break;
 8001ef4:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001ef6:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001efa:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e029      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM18: {ParamDataTX=FlashDataTemp.maxyawdegree*FLASHCONSTANTMULTIPLIER;}break;
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001f12:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001f16:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f22:	ee17 2a90 	vmov	r2, s15
 8001f26:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e01b      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM19: {ParamDataTX=FlashDataTemp.minthrottle*FLASHCONSTANTMULTIPLIER;}break;
 8001f2c:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001f2e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001f32:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3e:	ee17 2a90 	vmov	r2, s15
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e00d      	b.n	8001f64 <TIM2_IRQHandler+0x848>
    	 	 	 case PARAM20: {ParamDataTX=FlashDataTemp.maxthrottle*FLASHCONSTANTMULTIPLIER;}break;
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <TIM2_IRQHandler+0x8b8>)
 8001f4a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001f4e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001fe0 <TIM2_IRQHandler+0x8c4>
 8001f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f5a:	ee17 2a90 	vmov	r2, s15
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <TIM2_IRQHandler+0x8c8>)
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	bf00      	nop
    		 }
    	 }

      	switch(BackTimer)
 8001f64:	4b21      	ldr	r3, [pc, #132]	; (8001fec <TIM2_IRQHandler+0x8d0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	f200 813e 	bhi.w	80021ec <TIM2_IRQHandler+0xad0>
 8001f70:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <TIM2_IRQHandler+0x85c>)
 8001f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f76:	bf00      	nop
 8001f78:	08001f91 	.word	0x08001f91
 8001f7c:	080021ed 	.word	0x080021ed
 8001f80:	080021ed 	.word	0x080021ed
 8001f84:	08001fa5 	.word	0x08001fa5
 8001f88:	080021c5 	.word	0x080021c5
 8001f8c:	080021d9 	.word	0x080021d9
      	{
  	 	 case 1:
  	 	 	 	 {
  	 	 	 		//SET TX MODE
  	 	 	 		nRF24_CE_L();//END RX
 8001f90:	2200      	movs	r2, #0
 8001f92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f96:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <TIM2_IRQHandler+0x8d4>)
 8001f98:	f001 faa4 	bl	80034e4 <HAL_GPIO_WritePin>
  					nRF24_SetOperationalMode(nRF24_MODE_TX);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff f82c 	bl	8000ffa <nRF24_SetOperationalMode>
  	 	 	 	 }break;
 8001fa2:	e123      	b.n	80021ec <TIM2_IRQHandler+0xad0>

  	 	 case 4:
  	 	 	 	 {
  	 	 			//SEND DATA TO RC remote
  	 	 	 		 nRF24_payloadTX[0] = MSGSelector;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <TIM2_IRQHandler+0x8d8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <TIM2_IRQHandler+0x8dc>)
 8001fac:	701a      	strb	r2, [r3, #0]

  	 	 	 		switch(MSGSelector)
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <TIM2_IRQHandler+0x8d8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	f200 8101 	bhi.w	80021ba <TIM2_IRQHandler+0xa9e>
 8001fb8:	a201      	add	r2, pc, #4	; (adr r2, 8001fc0 <TIM2_IRQHandler+0x8a4>)
 8001fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fbe:	bf00      	nop
 8001fc0:	08001ffd 	.word	0x08001ffd
 8001fc4:	08002147 	.word	0x08002147
 8001fc8:	08002181 	.word	0x08002181
 8001fcc:	080020f7 	.word	0x080020f7
 8001fd0:	0800211f 	.word	0x0800211f
 8001fd4:	20000608 	.word	0x20000608
 8001fd8:	20000360 	.word	0x20000360
 8001fdc:	200005dc 	.word	0x200005dc
 8001fe0:	47c35000 	.word	0x47c35000
 8001fe4:	200005e4 	.word	0x200005e4
 8001fe8:	000186a0 	.word	0x000186a0
 8001fec:	200000ac 	.word	0x200000ac
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	200004ec 	.word	0x200004ec
 8001ff8:	20000250 	.word	0x20000250
  	 	 	 		{
  	 	 	 			case COMMCONTROLDATA:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = (uint8_t)(BattmVAVG & 0xFF);
 8001ffc:	4b8f      	ldr	r3, [pc, #572]	; (800223c <TIM2_IRQHandler+0xb20>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b8f      	ldr	r3, [pc, #572]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002004:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (uint8_t)((BattmVAVG & 0xFF00)>>8);
 8002006:	4b8d      	ldr	r3, [pc, #564]	; (800223c <TIM2_IRQHandler+0xb20>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	0a1b      	lsrs	r3, r3, #8
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b8c      	ldr	r3, [pc, #560]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002010:	709a      	strb	r2, [r3, #2]

  	 	 	 								  	//save Angle for NRF24 transfer
  	 	 	 								  	if(mpu6050DataStr.Pitch<0)
 8002012:	4b8c      	ldr	r3, [pc, #560]	; (8002244 <TIM2_IRQHandler+0xb28>)
 8002014:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	d510      	bpl.n	8002044 <TIM2_IRQHandler+0x928>
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=1;
 8002022:	4b89      	ldr	r3, [pc, #548]	; (8002248 <TIM2_IRQHandler+0xb2c>)
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=mpu6050DataStr.Pitch*(-1);
 8002028:	4b86      	ldr	r3, [pc, #536]	; (8002244 <TIM2_IRQHandler+0xb28>)
 800202a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800202e:	eef1 7a67 	vneg.f32	s15, s15
 8002032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002036:	edc7 7a01 	vstr	s15, [r7, #4]
 800203a:	793b      	ldrb	r3, [r7, #4]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b83      	ldr	r3, [pc, #524]	; (800224c <TIM2_IRQHandler+0xb30>)
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	e00d      	b.n	8002060 <TIM2_IRQHandler+0x944>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AnglePitchDIR=0;
 8002044:	4b80      	ldr	r3, [pc, #512]	; (8002248 <TIM2_IRQHandler+0xb2c>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	 	AnglePitchNRF24=mpu6050DataStr.Pitch;
 800204a:	4b7e      	ldr	r3, [pc, #504]	; (8002244 <TIM2_IRQHandler+0xb28>)
 800204c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002054:	edc7 7a01 	vstr	s15, [r7, #4]
 8002058:	793b      	ldrb	r3, [r7, #4]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b7b      	ldr	r3, [pc, #492]	; (800224c <TIM2_IRQHandler+0xb30>)
 800205e:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	if(mpu6050DataStr.Roll<0)
 8002060:	4b78      	ldr	r3, [pc, #480]	; (8002244 <TIM2_IRQHandler+0xb28>)
 8002062:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8002066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	d510      	bpl.n	8002092 <TIM2_IRQHandler+0x976>
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=1;
 8002070:	4b77      	ldr	r3, [pc, #476]	; (8002250 <TIM2_IRQHandler+0xb34>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=mpu6050DataStr.Roll*(-1);
 8002076:	4b73      	ldr	r3, [pc, #460]	; (8002244 <TIM2_IRQHandler+0xb28>)
 8002078:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800207c:	eef1 7a67 	vneg.f32	s15, s15
 8002080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002084:	edc7 7a01 	vstr	s15, [r7, #4]
 8002088:	793b      	ldrb	r3, [r7, #4]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b71      	ldr	r3, [pc, #452]	; (8002254 <TIM2_IRQHandler+0xb38>)
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e00d      	b.n	80020ae <TIM2_IRQHandler+0x992>
  	 	 	 								  	}
  	 	 	 								  	else
  	 	 	 								  	{
  	 	 	 								  		AngleRollDIR=0;
 8002092:	4b6f      	ldr	r3, [pc, #444]	; (8002250 <TIM2_IRQHandler+0xb34>)
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
  	 	 	 								  		AngleRollNRF24=mpu6050DataStr.Roll;
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <TIM2_IRQHandler+0xb28>)
 800209a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800209e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80020a6:	793b      	ldrb	r3, [r7, #4]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4b6a      	ldr	r3, [pc, #424]	; (8002254 <TIM2_IRQHandler+0xb38>)
 80020ac:	701a      	strb	r2, [r3, #0]
  	 	 	 								  	}

  	 	 	 								  	nRF24_payloadTX[3] = (uint8_t)(AnglePitchNRF24);
 80020ae:	4b67      	ldr	r3, [pc, #412]	; (800224c <TIM2_IRQHandler+0xb30>)
 80020b0:	781a      	ldrb	r2, [r3, #0]
 80020b2:	4b63      	ldr	r3, [pc, #396]	; (8002240 <TIM2_IRQHandler+0xb24>)
 80020b4:	70da      	strb	r2, [r3, #3]
  	 	 	 								  	nRF24_payloadTX[4] = (uint8_t)(AngleRollNRF24);
 80020b6:	4b67      	ldr	r3, [pc, #412]	; (8002254 <TIM2_IRQHandler+0xb38>)
 80020b8:	781a      	ldrb	r2, [r3, #0]
 80020ba:	4b61      	ldr	r3, [pc, #388]	; (8002240 <TIM2_IRQHandler+0xb24>)
 80020bc:	711a      	strb	r2, [r3, #4]
  	 	 	 								  	nRF24_payloadTX[5] = (uint8_t)(AnglePitchDIR + (AngleRollDIR<<1) + (GyroCalibStatus<<2) + ((MotorStatus & 0x7)<<3) ); //1bit Pitch DIR, 1bit Roll DIR, 1 bit GyroCalinFlag, 3 bit MotorStatus
 80020be:	4b64      	ldr	r3, [pc, #400]	; (8002250 <TIM2_IRQHandler+0xb34>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b60      	ldr	r3, [pc, #384]	; (8002248 <TIM2_IRQHandler+0xb2c>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	4b62      	ldr	r3, [pc, #392]	; (8002258 <TIM2_IRQHandler+0xb3c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	4413      	add	r3, r2
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b5f      	ldr	r3, [pc, #380]	; (800225c <TIM2_IRQHandler+0xb40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b53      	ldr	r3, [pc, #332]	; (8002240 <TIM2_IRQHandler+0xb24>)
 80020f2:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 80020f4:	e061      	b.n	80021ba <TIM2_IRQHandler+0xa9e>
  	 	 	 			case COMMERASEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 80020f6:	4b52      	ldr	r3, [pc, #328]	; (8002240 <TIM2_IRQHandler+0xb24>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2]=0;
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <TIM2_IRQHandler+0xb24>)
 80020fe:	2200      	movs	r2, #0
 8002100:	709a      	strb	r2, [r3, #2]
  	 	 	 							  	 	nRF24_payloadTX[3]=0;
 8002102:	4b4f      	ldr	r3, [pc, #316]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002104:	2200      	movs	r2, #0
 8002106:	70da      	strb	r2, [r3, #3]
  	 	 	 							  	 	nRF24_payloadTX[4]=0;
 8002108:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <TIM2_IRQHandler+0xb24>)
 800210a:	2200      	movs	r2, #0
 800210c:	711a      	strb	r2, [r3, #4]
  	 	 	 							  	 	nRF24_payloadTX[5]=0;
 800210e:	4b4c      	ldr	r3, [pc, #304]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002110:	2200      	movs	r2, #0
 8002112:	715a      	strb	r2, [r3, #5]
  	 	 	 							  	 	FlashEraseTimeoutCount=FLASHOPERATIONTIMEOUT;//set timeout to prevent multiple calls
 8002114:	4b52      	ldr	r3, [pc, #328]	; (8002260 <TIM2_IRQHandler+0xb44>)
 8002116:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800211a:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 800211c:	e04d      	b.n	80021ba <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMWRITEFLASHDR:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1]=0;
 800211e:	4b48      	ldr	r3, [pc, #288]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002120:	2200      	movs	r2, #0
 8002122:	705a      	strb	r2, [r3, #1]
  	 	 	 						  	 	  	nRF24_payloadTX[2]=0;
 8002124:	4b46      	ldr	r3, [pc, #280]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002126:	2200      	movs	r2, #0
 8002128:	709a      	strb	r2, [r3, #2]
  	 	 	 						  	 	  	nRF24_payloadTX[3]=0;
 800212a:	4b45      	ldr	r3, [pc, #276]	; (8002240 <TIM2_IRQHandler+0xb24>)
 800212c:	2200      	movs	r2, #0
 800212e:	70da      	strb	r2, [r3, #3]
  	 	 	 						  	 	  	nRF24_payloadTX[4]=0;
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002132:	2200      	movs	r2, #0
 8002134:	711a      	strb	r2, [r3, #4]
  	 	 	 						  	 	  	nRF24_payloadTX[5]=0;
 8002136:	4b42      	ldr	r3, [pc, #264]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002138:	2200      	movs	r2, #0
 800213a:	715a      	strb	r2, [r3, #5]
  	 	 	 						  	 	  	FlashWriteTimeoutCount=FLASHOPERATIONTIMEOUT; //set timeout to prevent multiple calls
 800213c:	4b49      	ldr	r3, [pc, #292]	; (8002264 <TIM2_IRQHandler+0xb48>)
 800213e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002142:	601a      	str	r2, [r3, #0]
  	 	 	 								}break;
 8002144:	e039      	b.n	80021ba <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMPARAMACTIVE:
											{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 8002146:	4b48      	ldr	r3, [pc, #288]	; (8002268 <TIM2_IRQHandler+0xb4c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b3c      	ldr	r3, [pc, #240]	; (8002240 <TIM2_IRQHandler+0xb24>)
 800214e:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 8002150:	4b46      	ldr	r3, [pc, #280]	; (800226c <TIM2_IRQHandler+0xb50>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e1b      	lsrs	r3, r3, #24
 8002156:	b2da      	uxtb	r2, r3
 8002158:	4b39      	ldr	r3, [pc, #228]	; (8002240 <TIM2_IRQHandler+0xb24>)
 800215a:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 800215c:	4b43      	ldr	r3, [pc, #268]	; (800226c <TIM2_IRQHandler+0xb50>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002166:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 8002168:	4b40      	ldr	r3, [pc, #256]	; (800226c <TIM2_IRQHandler+0xb50>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	b2da      	uxtb	r2, r3
 8002170:	4b33      	ldr	r3, [pc, #204]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002172:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 8002174:	4b3d      	ldr	r3, [pc, #244]	; (800226c <TIM2_IRQHandler+0xb50>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b31      	ldr	r3, [pc, #196]	; (8002240 <TIM2_IRQHandler+0xb24>)
 800217c:	715a      	strb	r2, [r3, #5]
											}break;
 800217e:	e01c      	b.n	80021ba <TIM2_IRQHandler+0xa9e>

  	 	 	 			case COMMPARAMFLASH:
  	 	 	 								{
  	 	 	 									nRF24_payloadTX[1] = ParamSelector;
 8002180:	4b39      	ldr	r3, [pc, #228]	; (8002268 <TIM2_IRQHandler+0xb4c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002188:	705a      	strb	r2, [r3, #1]
  	 	 	 									nRF24_payloadTX[2] = (ParamDataTX & 0xFF000000)>>24;
 800218a:	4b38      	ldr	r3, [pc, #224]	; (800226c <TIM2_IRQHandler+0xb50>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0e1b      	lsrs	r3, r3, #24
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <TIM2_IRQHandler+0xb24>)
 8002194:	709a      	strb	r2, [r3, #2]
  	 	 	 									nRF24_payloadTX[3] = (ParamDataTX & 0x00FF0000)>>16;
 8002196:	4b35      	ldr	r3, [pc, #212]	; (800226c <TIM2_IRQHandler+0xb50>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b28      	ldr	r3, [pc, #160]	; (8002240 <TIM2_IRQHandler+0xb24>)
 80021a0:	70da      	strb	r2, [r3, #3]
  	 	 	 									nRF24_payloadTX[4] = (ParamDataTX & 0x0000FF00)>>8;
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <TIM2_IRQHandler+0xb50>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	0a1b      	lsrs	r3, r3, #8
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b25      	ldr	r3, [pc, #148]	; (8002240 <TIM2_IRQHandler+0xb24>)
 80021ac:	711a      	strb	r2, [r3, #4]
  	 	 	 									nRF24_payloadTX[5] = (ParamDataTX & 0x000000FF);
 80021ae:	4b2f      	ldr	r3, [pc, #188]	; (800226c <TIM2_IRQHandler+0xb50>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <TIM2_IRQHandler+0xb24>)
 80021b6:	715a      	strb	r2, [r3, #5]
  	 	 	 								}break;
 80021b8:	bf00      	nop
  	 	 	 		}

  	 	 			// Transmit a packet
  	 	 			nRF24_TransmitPacket(nRF24_payloadTX, 6);
 80021ba:	2106      	movs	r1, #6
 80021bc:	4820      	ldr	r0, [pc, #128]	; (8002240 <TIM2_IRQHandler+0xb24>)
 80021be:	f7fe fd49 	bl	8000c54 <nRF24_TransmitPacket>
  	 	 	 	 }break;
 80021c2:	e013      	b.n	80021ec <TIM2_IRQHandler+0xad0>

      	case 5:
      			{
  	 	 	 		//SET RX MODE
  	 				nRF24_SetOperationalMode(nRF24_MODE_RX);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7fe ff18 	bl	8000ffa <nRF24_SetOperationalMode>
  	 				nRF24_CE_H(); //Start RX)
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d0:	4827      	ldr	r0, [pc, #156]	; (8002270 <TIM2_IRQHandler+0xb54>)
 80021d2:	f001 f987 	bl	80034e4 <HAL_GPIO_WritePin>

  	 	 	 	 }break;
 80021d6:	e009      	b.n	80021ec <TIM2_IRQHandler+0xad0>

      	case 6:
  				{
      				RXactiveFlag=1; //start pinging for data
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <TIM2_IRQHandler+0xb58>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
      				SendBackFlag=0; //Exit routine
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <TIM2_IRQHandler+0xb5c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
      				BackTimer=0;	//reset counter
 80021e4:	4b25      	ldr	r3, [pc, #148]	; (800227c <TIM2_IRQHandler+0xb60>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]

  				}break;
 80021ea:	bf00      	nop
      	}
  }//End Send Back config routine

  //Communication diagnostics
  LoopCounter++;
 80021ec:	4b24      	ldr	r3, [pc, #144]	; (8002280 <TIM2_IRQHandler+0xb64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a23      	ldr	r2, [pc, #140]	; (8002280 <TIM2_IRQHandler+0xb64>)
 80021f4:	6013      	str	r3, [r2, #0]
  if(LoopCounter==1000)
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <TIM2_IRQHandler+0xb64>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021fe:	d119      	bne.n	8002234 <TIM2_IRQHandler+0xb18>
  {
    		MSGprerSecond=MSGcount;
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <TIM2_IRQHandler+0xb68>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <TIM2_IRQHandler+0xb6c>)
 8002206:	6013      	str	r3, [r2, #0]

    		if(MSGcount<MINMSGPERSEC)
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <TIM2_IRQHandler+0xb68>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b09      	cmp	r3, #9
 800220e:	d808      	bhi.n	8002222 <TIM2_IRQHandler+0xb06>
    		{
    			MSGLowCount++;
 8002210:	4b1e      	ldr	r3, [pc, #120]	; (800228c <TIM2_IRQHandler+0xb70>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <TIM2_IRQHandler+0xb70>)
 8002218:	6013      	str	r3, [r2, #0]
    			ConnectWeakFlag=1;
 800221a:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <TIM2_IRQHandler+0xb74>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e002      	b.n	8002228 <TIM2_IRQHandler+0xb0c>
    		}
    		 else  ConnectWeakFlag=0;
 8002222:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <TIM2_IRQHandler+0xb74>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

    		MSGcount=0;
 8002228:	4b16      	ldr	r3, [pc, #88]	; (8002284 <TIM2_IRQHandler+0xb68>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
    		LoopCounter=0;
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <TIM2_IRQHandler+0xb64>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
  }//-----------------------------------------------------------------

  /* USER CODE END TIM2_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200000a0 	.word	0x200000a0
 8002240:	20000250 	.word	0x20000250
 8002244:	200002e0 	.word	0x200002e0
 8002248:	200005d0 	.word	0x200005d0
 800224c:	20000664 	.word	0x20000664
 8002250:	200005fc 	.word	0x200005fc
 8002254:	2000066c 	.word	0x2000066c
 8002258:	20000098 	.word	0x20000098
 800225c:	20000094 	.word	0x20000094
 8002260:	200004e0 	.word	0x200004e0
 8002264:	2000067c 	.word	0x2000067c
 8002268:	200005dc 	.word	0x200005dc
 800226c:	200005e4 	.word	0x200005e4
 8002270:	40020400 	.word	0x40020400
 8002274:	20000000 	.word	0x20000000
 8002278:	200000a8 	.word	0x200000a8
 800227c:	200000ac 	.word	0x200000ac
 8002280:	200004cc 	.word	0x200004cc
 8002284:	200004e4 	.word	0x200004e4
 8002288:	200005c8 	.word	0x200005c8
 800228c:	200005c4 	.word	0x200005c4
 8002290:	20000604 	.word	0x20000604

08002294 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <_sbrk+0x50>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <_sbrk+0x16>
		heap_end = &end;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	; (80022e4 <_sbrk+0x50>)
 80022a6:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <_sbrk+0x54>)
 80022a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <_sbrk+0x50>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <_sbrk+0x50>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	466a      	mov	r2, sp
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d907      	bls.n	80022ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80022be:	f003 f9f5 	bl	80056ac <__errno>
 80022c2:	4602      	mov	r2, r0
 80022c4:	230c      	movs	r3, #12
 80022c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80022c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022cc:	e006      	b.n	80022dc <_sbrk+0x48>
	}

	heap_end += incr;
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <_sbrk+0x50>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4413      	add	r3, r2
 80022d6:	4a03      	ldr	r2, [pc, #12]	; (80022e4 <_sbrk+0x50>)
 80022d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80022da:	68fb      	ldr	r3, [r7, #12]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3710      	adds	r7, #16
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200000b0 	.word	0x200000b0
 80022e8:	20000758 	.word	0x20000758

080022ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <SystemInit+0x28>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <SystemInit+0x28>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <SystemInit+0x28>)
 8002302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002306:	609a      	str	r2, [r3, #8]
#endif
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b096      	sub	sp, #88	; 0x58
 800231c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800231e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2220      	movs	r2, #32
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f003 f9e0 	bl	8005716 <memset>

  htim1.Instance = TIM1;
 8002356:	4b51      	ldr	r3, [pc, #324]	; (800249c <MX_TIM1_Init+0x184>)
 8002358:	4a51      	ldr	r2, [pc, #324]	; (80024a0 <MX_TIM1_Init+0x188>)
 800235a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800235c:	4b4f      	ldr	r3, [pc, #316]	; (800249c <MX_TIM1_Init+0x184>)
 800235e:	2253      	movs	r2, #83	; 0x53
 8002360:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b4e      	ldr	r3, [pc, #312]	; (800249c <MX_TIM1_Init+0x184>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8002368:	4b4c      	ldr	r3, [pc, #304]	; (800249c <MX_TIM1_Init+0x184>)
 800236a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800236e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	4b4a      	ldr	r3, [pc, #296]	; (800249c <MX_TIM1_Init+0x184>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002376:	4b49      	ldr	r3, [pc, #292]	; (800249c <MX_TIM1_Init+0x184>)
 8002378:	2200      	movs	r2, #0
 800237a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237c:	4b47      	ldr	r3, [pc, #284]	; (800249c <MX_TIM1_Init+0x184>)
 800237e:	2200      	movs	r2, #0
 8002380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002382:	4846      	ldr	r0, [pc, #280]	; (800249c <MX_TIM1_Init+0x184>)
 8002384:	f001 feba 	bl	80040fc <HAL_TIM_Base_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800238e:	f7fe fc59 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002396:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002398:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800239c:	4619      	mov	r1, r3
 800239e:	483f      	ldr	r0, [pc, #252]	; (800249c <MX_TIM1_Init+0x184>)
 80023a0:	f002 f930 	bl	8004604 <HAL_TIM_ConfigClockSource>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80023aa:	f7fe fc4b 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80023ae:	483b      	ldr	r0, [pc, #236]	; (800249c <MX_TIM1_Init+0x184>)
 80023b0:	f001 fef3 	bl	800419a <HAL_TIM_PWM_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80023ba:	f7fe fc43 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023ca:	4619      	mov	r1, r3
 80023cc:	4833      	ldr	r0, [pc, #204]	; (800249c <MX_TIM1_Init+0x184>)
 80023ce:	f002 fccf 	bl	8004d70 <HAL_TIMEx_MasterConfigSynchronization>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80023d8:	f7fe fc34 	bl	8000c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023dc:	2360      	movs	r3, #96	; 0x60
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 80023e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e6:	2300      	movs	r3, #0
 80023e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023ea:	2300      	movs	r3, #0
 80023ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80023ee:	2304      	movs	r3, #4
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023fe:	2200      	movs	r2, #0
 8002400:	4619      	mov	r1, r3
 8002402:	4826      	ldr	r0, [pc, #152]	; (800249c <MX_TIM1_Init+0x184>)
 8002404:	f002 f838 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800240e:	f7fe fc19 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002416:	2204      	movs	r2, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4820      	ldr	r0, [pc, #128]	; (800249c <MX_TIM1_Init+0x184>)
 800241c:	f002 f82c 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8002426:	f7fe fc0d 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800242a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242e:	2208      	movs	r2, #8
 8002430:	4619      	mov	r1, r3
 8002432:	481a      	ldr	r0, [pc, #104]	; (800249c <MX_TIM1_Init+0x184>)
 8002434:	f002 f820 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800243e:	f7fe fc01 	bl	8000c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002446:	220c      	movs	r2, #12
 8002448:	4619      	mov	r1, r3
 800244a:	4814      	ldr	r0, [pc, #80]	; (800249c <MX_TIM1_Init+0x184>)
 800244c:	f002 f814 	bl	8004478 <HAL_TIM_PWM_ConfigChannel>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002456:	f7fe fbf5 	bl	8000c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800246e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002472:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	4619      	mov	r1, r3
 800247c:	4807      	ldr	r0, [pc, #28]	; (800249c <MX_TIM1_Init+0x184>)
 800247e:	f002 fce5 	bl	8004e4c <HAL_TIMEx_ConfigBreakDeadTime>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8002488:	f7fe fbdc 	bl	8000c44 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800248c:	4803      	ldr	r0, [pc, #12]	; (800249c <MX_TIM1_Init+0x184>)
 800248e:	f000 f891 	bl	80025b4 <HAL_TIM_MspPostInit>

}
 8002492:	bf00      	nop
 8002494:	3758      	adds	r7, #88	; 0x58
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000690 	.word	0x20000690
 80024a0:	40010000 	.word	0x40010000

080024a4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024aa:	f107 0308 	add.w	r3, r7, #8
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b8:	463b      	mov	r3, r7
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80024c0:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <MX_TIM2_Init+0x94>)
 80024c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <MX_TIM2_Init+0x94>)
 80024ca:	2253      	movs	r2, #83	; 0x53
 80024cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <MX_TIM2_Init+0x94>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <MX_TIM2_Init+0x94>)
 80024d6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <MX_TIM2_Init+0x94>)
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <MX_TIM2_Init+0x94>)
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024e8:	4813      	ldr	r0, [pc, #76]	; (8002538 <MX_TIM2_Init+0x94>)
 80024ea:	f001 fe07 	bl	80040fc <HAL_TIM_Base_Init>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80024f4:	f7fe fba6 	bl	8000c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024fe:	f107 0308 	add.w	r3, r7, #8
 8002502:	4619      	mov	r1, r3
 8002504:	480c      	ldr	r0, [pc, #48]	; (8002538 <MX_TIM2_Init+0x94>)
 8002506:	f002 f87d 	bl	8004604 <HAL_TIM_ConfigClockSource>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002510:	f7fe fb98 	bl	8000c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800251c:	463b      	mov	r3, r7
 800251e:	4619      	mov	r1, r3
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <MX_TIM2_Init+0x94>)
 8002522:	f002 fc25 	bl	8004d70 <HAL_TIMEx_MasterConfigSynchronization>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800252c:	f7fe fb8a 	bl	8000c44 <Error_Handler>
  }

}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200006d0 	.word	0x200006d0

0800253c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_TIM_Base_MspInit+0x70>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10e      	bne.n	800256c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800256a:	e01a      	b.n	80025a2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d115      	bne.n	80025a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a0c      	ldr	r2, [pc, #48]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <HAL_TIM_Base_MspInit+0x74>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002592:	2200      	movs	r2, #0
 8002594:	2101      	movs	r1, #1
 8002596:	201c      	movs	r0, #28
 8002598:	f000 fdeb 	bl	8003172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800259c:	201c      	movs	r0, #28
 800259e:	f000 fe04 	bl	80031aa <HAL_NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_TIM_MspPostInit+0x68>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d11e      	bne.n	8002614 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_TIM_MspPostInit+0x6c>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_TIM_MspPostInit+0x6c>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_TIM_MspPostInit+0x6c>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80025f2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80025f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002604:	2301      	movs	r3, #1
 8002606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 030c 	add.w	r3, r7, #12
 800260c:	4619      	mov	r1, r3
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <HAL_TIM_MspPostInit+0x70>)
 8002610:	f000 fde6 	bl	80031e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40010000 	.word	0x40010000
 8002620:	40023800 	.word	0x40023800
 8002624:	40020000 	.word	0x40020000

08002628 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_USART1_UART_Init+0x4c>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <MX_USART1_UART_Init+0x50>)
 8002630:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <MX_USART1_UART_Init+0x4c>)
 8002634:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002638:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_USART1_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_USART1_UART_Init+0x4c>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <MX_USART1_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_USART1_UART_Init+0x4c>)
 800264e:	220c      	movs	r2, #12
 8002650:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <MX_USART1_UART_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_USART1_UART_Init+0x4c>)
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_USART1_UART_Init+0x4c>)
 8002660:	f002 fc5a 	bl	8004f18 <HAL_UART_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800266a:	f7fe faeb 	bl	8000c44 <Error_Handler>
  }

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000710 	.word	0x20000710
 8002678:	40011000 	.word	0x40011000

0800267c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_UART_MspInit+0x84>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12b      	bne.n	80026f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026a8:	f043 0310 	orr.w	r3, r3, #16
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_UART_MspInit+0x88>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026d6:	23c0      	movs	r3, #192	; 0xc0
 80026d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026e6:	2307      	movs	r3, #7
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_UART_MspInit+0x8c>)
 80026f2:	f000 fd75 	bl	80031e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026f6:	bf00      	nop
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40011000 	.word	0x40011000
 8002704:	40023800 	.word	0x40023800
 8002708:	40020400 	.word	0x40020400

0800270c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800270c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002744 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002710:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002712:	e003      	b.n	800271c <LoopCopyDataInit>

08002714 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002716:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002718:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800271a:	3104      	adds	r1, #4

0800271c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800271c:	480b      	ldr	r0, [pc, #44]	; (800274c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002720:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002722:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002724:	d3f6      	bcc.n	8002714 <CopyDataInit>
  ldr  r2, =_sbss
 8002726:	4a0b      	ldr	r2, [pc, #44]	; (8002754 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002728:	e002      	b.n	8002730 <LoopFillZerobss>

0800272a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800272a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800272c:	f842 3b04 	str.w	r3, [r2], #4

08002730 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002732:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002734:	d3f9      	bcc.n	800272a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002736:	f7ff fdd9 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800273a:	f002 ffbd 	bl	80056b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800273e:	f7fe f8fd 	bl	800093c <main>
  bx  lr    
 8002742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002744:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8002748:	08005fec 	.word	0x08005fec
  ldr  r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002750:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002754:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002758:	20000758 	.word	0x20000758

0800275c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC_IRQHandler>
	...

08002760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002764:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <HAL_Init+0x40>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0d      	ldr	r2, [pc, #52]	; (80027a0 <HAL_Init+0x40>)
 800276a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800276e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <HAL_Init+0x40>)
 8002776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a07      	ldr	r2, [pc, #28]	; (80027a0 <HAL_Init+0x40>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002788:	2003      	movs	r0, #3
 800278a:	f000 fce7 	bl	800315c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800278e:	2002      	movs	r0, #2
 8002790:	f000 f808 	bl	80027a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002794:	f7fe ff6c 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023c00 	.word	0x40023c00

080027a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027ac:	4b12      	ldr	r3, [pc, #72]	; (80027f8 <HAL_InitTick+0x54>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_InitTick+0x58>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fcff 	bl	80031c6 <HAL_SYSTICK_Config>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00e      	b.n	80027f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b0f      	cmp	r3, #15
 80027d6:	d80a      	bhi.n	80027ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027d8:	2200      	movs	r2, #0
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027e0:	f000 fcc7 	bl	8003172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027e4:	4a06      	ldr	r2, [pc, #24]	; (8002800 <HAL_InitTick+0x5c>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e000      	b.n	80027f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	20000004 	.word	0x20000004
 80027fc:	2000000c 	.word	0x2000000c
 8002800:	20000008 	.word	0x20000008

08002804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HAL_IncTick+0x20>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	461a      	mov	r2, r3
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_IncTick+0x24>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4413      	add	r3, r2
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <HAL_IncTick+0x24>)
 8002816:	6013      	str	r3, [r2, #0]
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	2000000c 	.word	0x2000000c
 8002828:	20000750 	.word	0x20000750

0800282c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return uwTick;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_GetTick+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000750 	.word	0x20000750

08002844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800284c:	f7ff ffee 	bl	800282c <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800285c:	d005      	beq.n	800286a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_Delay+0x40>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800286a:	bf00      	nop
 800286c:	f7ff ffde 	bl	800282c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	429a      	cmp	r2, r3
 800287a:	d8f7      	bhi.n	800286c <HAL_Delay+0x28>
  {
  }
}
 800287c:	bf00      	nop
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	2000000c 	.word	0x2000000c

08002888 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e033      	b.n	8002906 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7fd fef2 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d118      	bne.n	80028f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028ce:	f023 0302 	bic.w	r3, r3, #2
 80028d2:	f043 0202 	orr.w	r2, r3, #2
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa72 	bl	8002dc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f023 0303 	bic.w	r3, r3, #3
 80028ee:	f043 0201 	orr.w	r2, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
 80028f6:	e001      	b.n	80028fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_ADC_Start+0x1a>
 8002926:	2302      	movs	r3, #2
 8002928:	e08a      	b.n	8002a40 <HAL_ADC_Start+0x130>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d018      	beq.n	8002972 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002950:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <HAL_ADC_Start+0x13c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3e      	ldr	r2, [pc, #248]	; (8002a50 <HAL_ADC_Start+0x140>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0c9a      	lsrs	r2, r3, #18
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002964:	e002      	b.n	800296c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3b01      	subs	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f9      	bne.n	8002966 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b01      	cmp	r3, #1
 800297e:	d15e      	bne.n	8002a3e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002988:	f023 0301 	bic.w	r3, r3, #1
 800298c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029be:	d106      	bne.n	80029ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c4:	f023 0206 	bic.w	r2, r3, #6
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	645a      	str	r2, [r3, #68]	; 0x44
 80029cc:	e002      	b.n	80029d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029dc:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_ADC_Start+0x144>)
 80029de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 031f 	and.w	r3, r3, #31
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11c      	bne.n	8002a3e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e013      	b.n	8002a3e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <HAL_ADC_Start+0x148>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d10e      	bne.n	8002a3e <HAL_ADC_Start+0x12e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a3c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	20000004 	.word	0x20000004
 8002a50:	431bde83 	.word	0x431bde83
 8002a54:	40012300 	.word	0x40012300
 8002a58:	40012000 	.word	0x40012000

08002a5c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a78:	d113      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a88:	d10b      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e05c      	b.n	8002b5c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002aa2:	f7ff fec3 	bl	800282c <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aa8:	e01a      	b.n	8002ae0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab0:	d016      	beq.n	8002ae0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_ADC_PollForConversion+0x6c>
 8002ab8:	f7ff feb8 	bl	800282c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d20b      	bcs.n	8002ae0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e03d      	b.n	8002b5c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d1dd      	bne.n	8002aaa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0212 	mvn.w	r2, #18
 8002af6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d123      	bne.n	8002b5a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11f      	bne.n	8002b5a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d111      	bne.n	8002b5a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x1c>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e105      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x228>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b09      	cmp	r3, #9
 8002baa:	d925      	bls.n	8002bf8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68d9      	ldr	r1, [r3, #12]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4613      	mov	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3b1e      	subs	r3, #30
 8002bc2:	2207      	movs	r2, #7
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43da      	mvns	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	400a      	ands	r2, r1
 8002bd0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68d9      	ldr	r1, [r3, #12]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	4603      	mov	r3, r0
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4403      	add	r3, r0
 8002bea:	3b1e      	subs	r3, #30
 8002bec:	409a      	lsls	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	e022      	b.n	8002c3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6919      	ldr	r1, [r3, #16]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	400a      	ands	r2, r1
 8002c1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6919      	ldr	r1, [r3, #16]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	4403      	add	r3, r0
 8002c34:	409a      	lsls	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d824      	bhi.n	8002c90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	3b05      	subs	r3, #5
 8002c58:	221f      	movs	r2, #31
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	400a      	ands	r2, r1
 8002c66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	3b05      	subs	r3, #5
 8002c82:	fa00 f203 	lsl.w	r2, r0, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c8e:	e04c      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b0c      	cmp	r3, #12
 8002c96:	d824      	bhi.n	8002ce2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b23      	subs	r3, #35	; 0x23
 8002caa:	221f      	movs	r2, #31
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b23      	subs	r3, #35	; 0x23
 8002cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce0:	e023      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3b41      	subs	r3, #65	; 0x41
 8002cf4:	221f      	movs	r2, #31
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	400a      	ands	r2, r1
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4618      	mov	r0, r3
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3b41      	subs	r3, #65	; 0x41
 8002d1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d2a:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_ADC_ConfigChannel+0x234>)
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a21      	ldr	r2, [pc, #132]	; (8002db8 <HAL_ADC_ConfigChannel+0x238>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d109      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1cc>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b12      	cmp	r3, #18
 8002d3e:	d105      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a19      	ldr	r2, [pc, #100]	; (8002db8 <HAL_ADC_ConfigChannel+0x238>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d123      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x21e>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d003      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x1e6>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b11      	cmp	r3, #17
 8002d64:	d11b      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d111      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_ADC_ConfigChannel+0x23c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HAL_ADC_ConfigChannel+0x240>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	0c9a      	lsrs	r2, r3, #18
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d90:	e002      	b.n	8002d98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f9      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	40012300 	.word	0x40012300
 8002db8:	40012000 	.word	0x40012000
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	431bde83 	.word	0x431bde83

08002dc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dcc:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <ADC_Init+0x1f0>)
 8002dce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	021a      	lsls	r2, r3, #8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6859      	ldr	r1, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6899      	ldr	r1, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <ADC_Init+0x1f4>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d022      	beq.n	8002ea2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	e00f      	b.n	8002ec2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ec0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0202 	bic.w	r2, r2, #2
 8002ed0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6899      	ldr	r1, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
 8002edc:	005a      	lsls	r2, r3, #1
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01b      	beq.n	8002f28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	035a      	lsls	r2, r3, #13
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	e007      	b.n	8002f38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	051a      	lsls	r2, r3, #20
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6899      	ldr	r1, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f7a:	025a      	lsls	r2, r3, #9
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	029a      	lsls	r2, r3, #10
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	40012300 	.word	0x40012300
 8002fb8:	0f000001 	.word	0x0f000001

08002fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	60d3      	str	r3, [r2, #12]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <__NVIC_GetPriorityGrouping+0x18>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	f003 0307 	and.w	r3, r3, #7
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	2b00      	cmp	r3, #0
 8003030:	db0b      	blt.n	800304a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	f003 021f 	and.w	r2, r3, #31
 8003038:	4907      	ldr	r1, [pc, #28]	; (8003058 <__NVIC_EnableIRQ+0x38>)
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2001      	movs	r0, #1
 8003042:	fa00 f202 	lsl.w	r2, r0, r2
 8003046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	e000e100 	.word	0xe000e100

0800305c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	6039      	str	r1, [r7, #0]
 8003066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	db0a      	blt.n	8003086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	490c      	ldr	r1, [pc, #48]	; (80030a8 <__NVIC_SetPriority+0x4c>)
 8003076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307a:	0112      	lsls	r2, r2, #4
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	440b      	add	r3, r1
 8003080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003084:	e00a      	b.n	800309c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4908      	ldr	r1, [pc, #32]	; (80030ac <__NVIC_SetPriority+0x50>)
 800308c:	79fb      	ldrb	r3, [r7, #7]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	3b04      	subs	r3, #4
 8003094:	0112      	lsls	r2, r2, #4
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	440b      	add	r3, r1
 800309a:	761a      	strb	r2, [r3, #24]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000e100 	.word	0xe000e100
 80030ac:	e000ed00 	.word	0xe000ed00

080030b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f1c3 0307 	rsb	r3, r3, #7
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	bf28      	it	cs
 80030ce:	2304      	movcs	r3, #4
 80030d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3304      	adds	r3, #4
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d902      	bls.n	80030e0 <NVIC_EncodePriority+0x30>
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3b03      	subs	r3, #3
 80030de:	e000      	b.n	80030e2 <NVIC_EncodePriority+0x32>
 80030e0:	2300      	movs	r3, #0
 80030e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	401a      	ands	r2, r3
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003102:	43d9      	mvns	r1, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	4313      	orrs	r3, r2
         );
}
 800310a:	4618      	mov	r0, r3
 800310c:	3724      	adds	r7, #36	; 0x24
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3b01      	subs	r3, #1
 8003124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003128:	d301      	bcc.n	800312e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800312a:	2301      	movs	r3, #1
 800312c:	e00f      	b.n	800314e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <SysTick_Config+0x40>)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3b01      	subs	r3, #1
 8003134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003136:	210f      	movs	r1, #15
 8003138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800313c:	f7ff ff8e 	bl	800305c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SysTick_Config+0x40>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003146:	4b04      	ldr	r3, [pc, #16]	; (8003158 <SysTick_Config+0x40>)
 8003148:	2207      	movs	r2, #7
 800314a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	e000e010 	.word	0xe000e010

0800315c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff ff29 	bl	8002fbc <__NVIC_SetPriorityGrouping>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003184:	f7ff ff3e 	bl	8003004 <__NVIC_GetPriorityGrouping>
 8003188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	6978      	ldr	r0, [r7, #20]
 8003190:	f7ff ff8e 	bl	80030b0 <NVIC_EncodePriority>
 8003194:	4602      	mov	r2, r0
 8003196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff5d 	bl	800305c <__NVIC_SetPriority>
}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff ff31 	bl	8003020 <__NVIC_EnableIRQ>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b082      	sub	sp, #8
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ffa2 	bl	8003118 <SysTick_Config>
 80031d4:	4603      	mov	r3, r0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	e159      	b.n	80034b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031fc:	2201      	movs	r2, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	429a      	cmp	r2, r3
 8003216:	f040 8148 	bne.w	80034aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d00b      	beq.n	800323a <HAL_GPIO_Init+0x5a>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d007      	beq.n	800323a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800322e:	2b11      	cmp	r3, #17
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b12      	cmp	r3, #18
 8003238:	d130      	bne.n	800329c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003270:	2201      	movs	r2, #1
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 0201 	and.w	r2, r3, #1
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	689a      	ldr	r2, [r3, #8]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0xfc>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b12      	cmp	r3, #18
 80032da:	d123      	bne.n	8003324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	08da      	lsrs	r2, r3, #3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3208      	adds	r2, #8
 80032e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	08da      	lsrs	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3208      	adds	r2, #8
 800331e:	69b9      	ldr	r1, [r7, #24]
 8003320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	2203      	movs	r2, #3
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f003 0203 	and.w	r2, r3, #3
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a2 	beq.w	80034aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	4b56      	ldr	r3, [pc, #344]	; (80034c4 <HAL_GPIO_Init+0x2e4>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <HAL_GPIO_Init+0x2e4>)
 8003370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b53      	ldr	r3, [pc, #332]	; (80034c4 <HAL_GPIO_Init+0x2e4>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003382:	4a51      	ldr	r2, [pc, #324]	; (80034c8 <HAL_GPIO_Init+0x2e8>)
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3302      	adds	r3, #2
 800338a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	220f      	movs	r2, #15
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a48      	ldr	r2, [pc, #288]	; (80034cc <HAL_GPIO_Init+0x2ec>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d019      	beq.n	80033e2 <HAL_GPIO_Init+0x202>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a47      	ldr	r2, [pc, #284]	; (80034d0 <HAL_GPIO_Init+0x2f0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_GPIO_Init+0x1fe>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a46      	ldr	r2, [pc, #280]	; (80034d4 <HAL_GPIO_Init+0x2f4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00d      	beq.n	80033da <HAL_GPIO_Init+0x1fa>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a45      	ldr	r2, [pc, #276]	; (80034d8 <HAL_GPIO_Init+0x2f8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d007      	beq.n	80033d6 <HAL_GPIO_Init+0x1f6>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a44      	ldr	r2, [pc, #272]	; (80034dc <HAL_GPIO_Init+0x2fc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d101      	bne.n	80033d2 <HAL_GPIO_Init+0x1f2>
 80033ce:	2304      	movs	r3, #4
 80033d0:	e008      	b.n	80033e4 <HAL_GPIO_Init+0x204>
 80033d2:	2307      	movs	r3, #7
 80033d4:	e006      	b.n	80033e4 <HAL_GPIO_Init+0x204>
 80033d6:	2303      	movs	r3, #3
 80033d8:	e004      	b.n	80033e4 <HAL_GPIO_Init+0x204>
 80033da:	2302      	movs	r3, #2
 80033dc:	e002      	b.n	80033e4 <HAL_GPIO_Init+0x204>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_GPIO_Init+0x204>
 80033e2:	2300      	movs	r3, #0
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	f002 0203 	and.w	r2, r2, #3
 80033ea:	0092      	lsls	r2, r2, #2
 80033ec:	4093      	lsls	r3, r2
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f4:	4934      	ldr	r1, [pc, #208]	; (80034c8 <HAL_GPIO_Init+0x2e8>)
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	089b      	lsrs	r3, r3, #2
 80033fa:	3302      	adds	r3, #2
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003402:	4b37      	ldr	r3, [pc, #220]	; (80034e0 <HAL_GPIO_Init+0x300>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003426:	4a2e      	ldr	r2, [pc, #184]	; (80034e0 <HAL_GPIO_Init+0x300>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800342c:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_GPIO_Init+0x300>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003450:	4a23      	ldr	r2, [pc, #140]	; (80034e0 <HAL_GPIO_Init+0x300>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_GPIO_Init+0x300>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347a:	4a19      	ldr	r2, [pc, #100]	; (80034e0 <HAL_GPIO_Init+0x300>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003480:	4b17      	ldr	r3, [pc, #92]	; (80034e0 <HAL_GPIO_Init+0x300>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a4:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <HAL_GPIO_Init+0x300>)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3301      	adds	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	f67f aea2 	bls.w	80031fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034b8:	bf00      	nop
 80034ba:	3724      	adds	r7, #36	; 0x24
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40013800 	.word	0x40013800
 80034cc:	40020000 	.word	0x40020000
 80034d0:	40020400 	.word	0x40020400
 80034d4:	40020800 	.word	0x40020800
 80034d8:	40020c00 	.word	0x40020c00
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40013c00 	.word	0x40013c00

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f4:	787b      	ldrb	r3, [r7, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003500:	e003      	b.n	800350a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003502:	887b      	ldrh	r3, [r7, #2]
 8003504:	041a      	lsls	r2, r3, #16
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	401a      	ands	r2, r3
 800352a:	887b      	ldrh	r3, [r7, #2]
 800352c:	429a      	cmp	r2, r3
 800352e:	d104      	bne.n	800353a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003530:	887b      	ldrh	r3, [r7, #2]
 8003532:	041a      	lsls	r2, r3, #16
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003538:	e002      	b.n	8003540 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e11f      	b.n	800379e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd f99a 	bl	80008ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	; 0x24
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800359e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035b0:	f000 fd18 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 80035b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4a7b      	ldr	r2, [pc, #492]	; (80037a8 <HAL_I2C_Init+0x25c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d807      	bhi.n	80035d0 <HAL_I2C_Init+0x84>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a7a      	ldr	r2, [pc, #488]	; (80037ac <HAL_I2C_Init+0x260>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e006      	b.n	80035de <HAL_I2C_Init+0x92>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4a77      	ldr	r2, [pc, #476]	; (80037b0 <HAL_I2C_Init+0x264>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	bf94      	ite	ls
 80035d8:	2301      	movls	r3, #1
 80035da:	2300      	movhi	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e0db      	b.n	800379e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a72      	ldr	r2, [pc, #456]	; (80037b4 <HAL_I2C_Init+0x268>)
 80035ea:	fba2 2303 	umull	r2, r3, r2, r3
 80035ee:	0c9b      	lsrs	r3, r3, #18
 80035f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a64      	ldr	r2, [pc, #400]	; (80037a8 <HAL_I2C_Init+0x25c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d802      	bhi.n	8003620 <HAL_I2C_Init+0xd4>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	3301      	adds	r3, #1
 800361e:	e009      	b.n	8003634 <HAL_I2C_Init+0xe8>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	4a63      	ldr	r2, [pc, #396]	; (80037b8 <HAL_I2C_Init+0x26c>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	099b      	lsrs	r3, r3, #6
 8003632:	3301      	adds	r3, #1
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	430b      	orrs	r3, r1
 800363a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003646:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4956      	ldr	r1, [pc, #344]	; (80037a8 <HAL_I2C_Init+0x25c>)
 8003650:	428b      	cmp	r3, r1
 8003652:	d80d      	bhi.n	8003670 <HAL_I2C_Init+0x124>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	1e59      	subs	r1, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	2b04      	cmp	r3, #4
 800366a:	bf38      	it	cc
 800366c:	2304      	movcc	r3, #4
 800366e:	e04f      	b.n	8003710 <HAL_I2C_Init+0x1c4>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d111      	bne.n	800369c <HAL_I2C_Init+0x150>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	1e58      	subs	r0, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6859      	ldr	r1, [r3, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	440b      	add	r3, r1
 8003686:	fbb0 f3f3 	udiv	r3, r0, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003690:	2b00      	cmp	r3, #0
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	e012      	b.n	80036c2 <HAL_I2C_Init+0x176>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e58      	subs	r0, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	0099      	lsls	r1, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Init+0x17e>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e022      	b.n	8003710 <HAL_I2C_Init+0x1c4>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10e      	bne.n	80036f0 <HAL_I2C_Init+0x1a4>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1e58      	subs	r0, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6859      	ldr	r1, [r3, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	440b      	add	r3, r1
 80036e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ee:	e00f      	b.n	8003710 <HAL_I2C_Init+0x1c4>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	0099      	lsls	r1, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	6809      	ldr	r1, [r1, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800373e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6911      	ldr	r1, [r2, #16]
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	68d2      	ldr	r2, [r2, #12]
 800374a:	4311      	orrs	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	430b      	orrs	r3, r1
 8003752:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	000186a0 	.word	0x000186a0
 80037ac:	001e847f 	.word	0x001e847f
 80037b0:	003d08ff 	.word	0x003d08ff
 80037b4:	431bde83 	.word	0x431bde83
 80037b8:	10624dd3 	.word	0x10624dd3

080037bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e25b      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d075      	beq.n	80038c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037da:	4ba3      	ldr	r3, [pc, #652]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d00c      	beq.n	8003800 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4ba0      	ldr	r3, [pc, #640]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d112      	bne.n	8003818 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b9d      	ldr	r3, [pc, #628]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037fe:	d10b      	bne.n	8003818 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003800:	4b99      	ldr	r3, [pc, #612]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d05b      	beq.n	80038c4 <HAL_RCC_OscConfig+0x108>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d157      	bne.n	80038c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e236      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003820:	d106      	bne.n	8003830 <HAL_RCC_OscConfig+0x74>
 8003822:	4b91      	ldr	r3, [pc, #580]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a90      	ldr	r2, [pc, #576]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e01d      	b.n	800386c <HAL_RCC_OscConfig+0xb0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003838:	d10c      	bne.n	8003854 <HAL_RCC_OscConfig+0x98>
 800383a:	4b8b      	ldr	r3, [pc, #556]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a8a      	ldr	r2, [pc, #552]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	4b88      	ldr	r3, [pc, #544]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a87      	ldr	r2, [pc, #540]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e00b      	b.n	800386c <HAL_RCC_OscConfig+0xb0>
 8003854:	4b84      	ldr	r3, [pc, #528]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a83      	ldr	r2, [pc, #524]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 800385a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385e:	6013      	str	r3, [r2, #0]
 8003860:	4b81      	ldr	r3, [pc, #516]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a80      	ldr	r2, [pc, #512]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d013      	beq.n	800389c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fe ffda 	bl	800282c <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe ffd6 	bl	800282c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1fb      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4b76      	ldr	r3, [pc, #472]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0xc0>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389c:	f7fe ffc6 	bl	800282c <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038a4:	f7fe ffc2 	bl	800282c <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e1e7      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b6:	4b6c      	ldr	r3, [pc, #432]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0xe8>
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d063      	beq.n	800399a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d2:	4b65      	ldr	r3, [pc, #404]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038de:	4b62      	ldr	r3, [pc, #392]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d11c      	bne.n	8003924 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ea:	4b5f      	ldr	r3, [pc, #380]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d116      	bne.n	8003924 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f6:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d005      	beq.n	800390e <HAL_RCC_OscConfig+0x152>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e1bb      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390e:	4b56      	ldr	r3, [pc, #344]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4952      	ldr	r1, [pc, #328]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	e03a      	b.n	800399a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800392c:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <HAL_RCC_OscConfig+0x2b0>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003932:	f7fe ff7b 	bl	800282c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800393a:	f7fe ff77 	bl	800282c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e19c      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394c:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003958:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4940      	ldr	r1, [pc, #256]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	4313      	orrs	r3, r2
 800396a:	600b      	str	r3, [r1, #0]
 800396c:	e015      	b.n	800399a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396e:	4b3f      	ldr	r3, [pc, #252]	; (8003a6c <HAL_RCC_OscConfig+0x2b0>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003974:	f7fe ff5a 	bl	800282c <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800397c:	f7fe ff56 	bl	800282c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e17b      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398e:	4b36      	ldr	r3, [pc, #216]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d030      	beq.n	8003a08 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d016      	beq.n	80039dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ae:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <HAL_RCC_OscConfig+0x2b4>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fe ff3a 	bl	800282c <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fe ff36 	bl	800282c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e15b      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ce:	4b26      	ldr	r3, [pc, #152]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80039d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x200>
 80039da:	e015      	b.n	8003a08 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039dc:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <HAL_RCC_OscConfig+0x2b4>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e2:	f7fe ff23 	bl	800282c <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ea:	f7fe ff1f 	bl	800282c <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e144      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fc:	4b1a      	ldr	r3, [pc, #104]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 80039fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80a0 	beq.w	8003b56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10f      	bne.n	8003a46 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4a0e      	ldr	r2, [pc, #56]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <HAL_RCC_OscConfig+0x2ac>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a42:	2301      	movs	r3, #1
 8003a44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCC_OscConfig+0x2b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d121      	bne.n	8003a96 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a52:	4b08      	ldr	r3, [pc, #32]	; (8003a74 <HAL_RCC_OscConfig+0x2b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a07      	ldr	r2, [pc, #28]	; (8003a74 <HAL_RCC_OscConfig+0x2b8>)
 8003a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5e:	f7fe fee5 	bl	800282c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	e011      	b.n	8003a8a <HAL_RCC_OscConfig+0x2ce>
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	42470000 	.word	0x42470000
 8003a70:	42470e80 	.word	0x42470e80
 8003a74:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a78:	f7fe fed8 	bl	800282c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e0fd      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCC_OscConfig+0x4d4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d106      	bne.n	8003aac <HAL_RCC_OscConfig+0x2f0>
 8003a9e:	4b7d      	ldr	r3, [pc, #500]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a7c      	ldr	r2, [pc, #496]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8003aaa:	e01c      	b.n	8003ae6 <HAL_RCC_OscConfig+0x32a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d10c      	bne.n	8003ace <HAL_RCC_OscConfig+0x312>
 8003ab4:	4b77      	ldr	r3, [pc, #476]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a76      	ldr	r2, [pc, #472]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003aba:	f043 0304 	orr.w	r3, r3, #4
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac0:	4b74      	ldr	r3, [pc, #464]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a73      	ldr	r2, [pc, #460]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003ac6:	f043 0301 	orr.w	r3, r3, #1
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
 8003acc:	e00b      	b.n	8003ae6 <HAL_RCC_OscConfig+0x32a>
 8003ace:	4b71      	ldr	r3, [pc, #452]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	4a70      	ldr	r2, [pc, #448]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003ad4:	f023 0301 	bic.w	r3, r3, #1
 8003ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8003ada:	4b6e      	ldr	r3, [pc, #440]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	4a6d      	ldr	r2, [pc, #436]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003ae0:	f023 0304 	bic.w	r3, r3, #4
 8003ae4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d015      	beq.n	8003b1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fe fe9d 	bl	800282c <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fe fe99 	bl	800282c <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0bc      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0c:	4b61      	ldr	r3, [pc, #388]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ee      	beq.n	8003af6 <HAL_RCC_OscConfig+0x33a>
 8003b18:	e014      	b.n	8003b44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe fe87 	bl	800282c <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b20:	e00a      	b.n	8003b38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b22:	f7fe fe83 	bl	800282c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e0a6      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b38:	4b56      	ldr	r3, [pc, #344]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ee      	bne.n	8003b22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d105      	bne.n	8003b56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4a:	4b52      	ldr	r3, [pc, #328]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	4a51      	ldr	r2, [pc, #324]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 8092 	beq.w	8003c84 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b60:	4b4c      	ldr	r3, [pc, #304]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 030c 	and.w	r3, r3, #12
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d05c      	beq.n	8003c26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d141      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b74:	4b48      	ldr	r3, [pc, #288]	; (8003c98 <HAL_RCC_OscConfig+0x4dc>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7a:	f7fe fe57 	bl	800282c <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b82:	f7fe fe53 	bl	800282c <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e078      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b94:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1f0      	bne.n	8003b82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69da      	ldr	r2, [r3, #28]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	019b      	lsls	r3, r3, #6
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	061b      	lsls	r3, r3, #24
 8003bc4:	4933      	ldr	r1, [pc, #204]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bca:	4b33      	ldr	r3, [pc, #204]	; (8003c98 <HAL_RCC_OscConfig+0x4dc>)
 8003bcc:	2201      	movs	r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fe2c 	bl	800282c <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe fe28 	bl	800282c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e04d      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bea:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x41c>
 8003bf6:	e045      	b.n	8003c84 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf8:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <HAL_RCC_OscConfig+0x4dc>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfe:	f7fe fe15 	bl	800282c <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fe fe11 	bl	800282c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e036      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c18:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f0      	bne.n	8003c06 <HAL_RCC_OscConfig+0x44a>
 8003c24:	e02e      	b.n	8003c84 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e029      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_RCC_OscConfig+0x4d8>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d11c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d115      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10d      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d106      	bne.n	8003c80 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40007000 	.word	0x40007000
 8003c94:	40023800 	.word	0x40023800
 8003c98:	42470060 	.word	0x42470060

08003c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0cc      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b68      	ldr	r3, [pc, #416]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 030f 	and.w	r3, r3, #15
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d90c      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d001      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0b8      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf0:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	4a58      	ldr	r2, [pc, #352]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a52      	ldr	r2, [pc, #328]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d14:	4b50      	ldr	r3, [pc, #320]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	494d      	ldr	r1, [pc, #308]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d044      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d119      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e07f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d107      	bne.n	8003d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	4b3f      	ldr	r3, [pc, #252]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d109      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6a:	4b3b      	ldr	r3, [pc, #236]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e067      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f023 0203 	bic.w	r2, r3, #3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4934      	ldr	r1, [pc, #208]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7fe fd4e 	bl	800282c <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d94:	f7fe fd4a 	bl	800282c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e04f      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003daa:	4b2b      	ldr	r3, [pc, #172]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 020c 	and.w	r2, r3, #12
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d1eb      	bne.n	8003d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dbc:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d20c      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d001      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e032      	b.n	8003e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4916      	ldr	r1, [pc, #88]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0e:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	490e      	ldr	r1, [pc, #56]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e22:	f000 f821 	bl	8003e68 <HAL_RCC_GetSysClockFreq>
 8003e26:	4601      	mov	r1, r0
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	4a0a      	ldr	r2, [pc, #40]	; (8003e5c <HAL_RCC_ClockConfig+0x1c0>)
 8003e34:	5cd3      	ldrb	r3, [r2, r3]
 8003e36:	fa21 f303 	lsr.w	r3, r1, r3
 8003e3a:	4a09      	ldr	r2, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_ClockConfig+0x1c8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fcae 	bl	80027a4 <HAL_InitTick>

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023c00 	.word	0x40023c00
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	08005f90 	.word	0x08005f90
 8003e60:	20000004 	.word	0x20000004
 8003e64:	20000008 	.word	0x20000008

08003e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	2300      	movs	r3, #0
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	2300      	movs	r3, #0
 8003e78:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7e:	4b50      	ldr	r3, [pc, #320]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d007      	beq.n	8003e9a <HAL_RCC_GetSysClockFreq+0x32>
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d008      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x38>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f040 808d 	bne.w	8003fae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e94:	4b4b      	ldr	r3, [pc, #300]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e96:	60bb      	str	r3, [r7, #8]
       break;
 8003e98:	e08c      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e9a:	4b4b      	ldr	r3, [pc, #300]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e9c:	60bb      	str	r3, [r7, #8]
      break;
 8003e9e:	e089      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea0:	4b47      	ldr	r3, [pc, #284]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eaa:	4b45      	ldr	r3, [pc, #276]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d023      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb6:	4b42      	ldr	r3, [pc, #264]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	099b      	lsrs	r3, r3, #6
 8003ebc:	f04f 0400 	mov.w	r4, #0
 8003ec0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	ea03 0501 	and.w	r5, r3, r1
 8003ecc:	ea04 0602 	and.w	r6, r4, r2
 8003ed0:	4a3d      	ldr	r2, [pc, #244]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ed2:	fb02 f106 	mul.w	r1, r2, r6
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	fb02 f205 	mul.w	r2, r2, r5
 8003edc:	440a      	add	r2, r1
 8003ede:	493a      	ldr	r1, [pc, #232]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ee0:	fba5 0101 	umull	r0, r1, r5, r1
 8003ee4:	1853      	adds	r3, r2, r1
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f04f 0400 	mov.w	r4, #0
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	f7fc f9c5 	bl	8000280 <__aeabi_uldivmod>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	460c      	mov	r4, r1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e049      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003efe:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	099b      	lsrs	r3, r3, #6
 8003f04:	f04f 0400 	mov.w	r4, #0
 8003f08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	ea03 0501 	and.w	r5, r3, r1
 8003f14:	ea04 0602 	and.w	r6, r4, r2
 8003f18:	4629      	mov	r1, r5
 8003f1a:	4632      	mov	r2, r6
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	f04f 0400 	mov.w	r4, #0
 8003f24:	0154      	lsls	r4, r2, #5
 8003f26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f2a:	014b      	lsls	r3, r1, #5
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4622      	mov	r2, r4
 8003f30:	1b49      	subs	r1, r1, r5
 8003f32:	eb62 0206 	sbc.w	r2, r2, r6
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	f04f 0400 	mov.w	r4, #0
 8003f3e:	0194      	lsls	r4, r2, #6
 8003f40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f44:	018b      	lsls	r3, r1, #6
 8003f46:	1a5b      	subs	r3, r3, r1
 8003f48:	eb64 0402 	sbc.w	r4, r4, r2
 8003f4c:	f04f 0100 	mov.w	r1, #0
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	00e2      	lsls	r2, r4, #3
 8003f56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f5a:	00d9      	lsls	r1, r3, #3
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4614      	mov	r4, r2
 8003f60:	195b      	adds	r3, r3, r5
 8003f62:	eb44 0406 	adc.w	r4, r4, r6
 8003f66:	f04f 0100 	mov.w	r1, #0
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	02a2      	lsls	r2, r4, #10
 8003f70:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f74:	0299      	lsls	r1, r3, #10
 8003f76:	460b      	mov	r3, r1
 8003f78:	4614      	mov	r4, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f04f 0400 	mov.w	r4, #0
 8003f84:	461a      	mov	r2, r3
 8003f86:	4623      	mov	r3, r4
 8003f88:	f7fc f97a 	bl	8000280 <__aeabi_uldivmod>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f92:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	0c1b      	lsrs	r3, r3, #16
 8003f98:	f003 0303 	and.w	r3, r3, #3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	60bb      	str	r3, [r7, #8]
      break;
 8003fac:	e002      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003fb0:	60bb      	str	r3, [r7, #8]
      break;
 8003fb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	00f42400 	.word	0x00f42400
 8003fc8:	017d7840 	.word	0x017d7840

08003fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000004 	.word	0x20000004

08003fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fe8:	f7ff fff0 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8003fec:	4601      	mov	r1, r0
 8003fee:	4b05      	ldr	r3, [pc, #20]	; (8004004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	0a9b      	lsrs	r3, r3, #10
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	4a03      	ldr	r2, [pc, #12]	; (8004008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004000:	4618      	mov	r0, r3
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40023800 	.word	0x40023800
 8004008:	08005fa0 	.word	0x08005fa0

0800400c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004010:	f7ff ffdc 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8004014:	4601      	mov	r1, r0
 8004016:	4b05      	ldr	r3, [pc, #20]	; (800402c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	0b5b      	lsrs	r3, r3, #13
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	4a03      	ldr	r2, [pc, #12]	; (8004030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004022:	5cd3      	ldrb	r3, [r2, r3]
 8004024:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40023800 	.word	0x40023800
 8004030:	08005fa0 	.word	0x08005fa0

08004034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e056      	b.n	80040f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fd fa53 	bl	800150c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2202      	movs	r2, #2
 800406a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	ea42 0103 	orr.w	r1, r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	f003 0104 	and.w	r1, r3, #4
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69da      	ldr	r2, [r3, #28]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e01d      	b.n	800414a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fe fa0a 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3304      	adds	r3, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f000 fb4c 	bl	80047d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3708      	adds	r7, #8
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b06      	cmp	r3, #6
 800417a:	d007      	beq.n	800418c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e01d      	b.n	80041e8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f815 	bl	80041f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	4619      	mov	r1, r3
 80041d8:	4610      	mov	r0, r2
 80041da:	f000 fafd 	bl	80047d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2201      	movs	r2, #1
 8004214:	6839      	ldr	r1, [r7, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f000 fd84 	bl	8004d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a10      	ldr	r2, [pc, #64]	; (8004264 <HAL_TIM_PWM_Start+0x60>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d107      	bne.n	8004236 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004234:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b06      	cmp	r3, #6
 8004246:	d007      	beq.n	8004258 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000

08004268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b02      	cmp	r3, #2
 800427c:	d122      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b02      	cmp	r3, #2
 800428a:	d11b      	bne.n	80042c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0202 	mvn.w	r2, #2
 8004294:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fa75 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fa67 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fa78 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d122      	bne.n	8004318 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d11b      	bne.n	8004318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0204 	mvn.w	r2, #4
 80042e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa4b 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa3d 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fa4e 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b08      	cmp	r3, #8
 8004324:	d122      	bne.n	800436c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d11b      	bne.n	800436c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0208 	mvn.w	r2, #8
 800433c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2204      	movs	r2, #4
 8004342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa21 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 8004358:	e005      	b.n	8004366 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fa13 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fa24 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b10      	cmp	r3, #16
 8004378:	d122      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b10      	cmp	r3, #16
 8004386:	d11b      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0210 	mvn.w	r2, #16
 8004390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2208      	movs	r2, #8
 8004396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f9f7 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 80043ac:	e005      	b.n	80043ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f9e9 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f9fa 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d10e      	bne.n	80043ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d107      	bne.n	80043ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f06f 0201 	mvn.w	r2, #1
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f9c3 	bl	8004772 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043f6:	2b80      	cmp	r3, #128	; 0x80
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004404:	2b80      	cmp	r3, #128	; 0x80
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fd76 	bl	8004f04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b40      	cmp	r3, #64	; 0x40
 8004424:	d10e      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d107      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f9bf 	bl	80047c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b20      	cmp	r3, #32
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b20      	cmp	r3, #32
 800445e:	d107      	bne.n	8004470 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0220 	mvn.w	r2, #32
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fd40 	bl	8004ef0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800448e:	2302      	movs	r3, #2
 8004490:	e0b4      	b.n	80045fc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2202      	movs	r2, #2
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b0c      	cmp	r3, #12
 80044a6:	f200 809f 	bhi.w	80045e8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044e5 	.word	0x080044e5
 80044b4:	080045e9 	.word	0x080045e9
 80044b8:	080045e9 	.word	0x080045e9
 80044bc:	080045e9 	.word	0x080045e9
 80044c0:	08004525 	.word	0x08004525
 80044c4:	080045e9 	.word	0x080045e9
 80044c8:	080045e9 	.word	0x080045e9
 80044cc:	080045e9 	.word	0x080045e9
 80044d0:	08004567 	.word	0x08004567
 80044d4:	080045e9 	.word	0x080045e9
 80044d8:	080045e9 	.word	0x080045e9
 80044dc:	080045e9 	.word	0x080045e9
 80044e0:	080045a7 	.word	0x080045a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f9f4 	bl	80048d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	699a      	ldr	r2, [r3, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0208 	orr.w	r2, r2, #8
 80044fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0204 	bic.w	r2, r2, #4
 800450e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6999      	ldr	r1, [r3, #24]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	691a      	ldr	r2, [r3, #16]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	619a      	str	r2, [r3, #24]
      break;
 8004522:	e062      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fa3a 	bl	80049a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699a      	ldr	r2, [r3, #24]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800454e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6999      	ldr	r1, [r3, #24]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	021a      	lsls	r2, r3, #8
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	619a      	str	r2, [r3, #24]
      break;
 8004564:	e041      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68b9      	ldr	r1, [r7, #8]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fa85 	bl	8004a7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69da      	ldr	r2, [r3, #28]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0208 	orr.w	r2, r2, #8
 8004580:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0204 	bic.w	r2, r2, #4
 8004590:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69d9      	ldr	r1, [r3, #28]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	61da      	str	r2, [r3, #28]
      break;
 80045a4:	e021      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 facf 	bl	8004b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69da      	ldr	r2, [r3, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69d9      	ldr	r1, [r3, #28]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	021a      	lsls	r2, r3, #8
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	61da      	str	r2, [r3, #28]
      break;
 80045e6:	e000      	b.n	80045ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80045e8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d101      	bne.n	800461c <HAL_TIM_ConfigClockSource+0x18>
 8004618:	2302      	movs	r3, #2
 800461a:	e0a6      	b.n	800476a <HAL_TIM_ConfigClockSource+0x166>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800463a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004642:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b40      	cmp	r3, #64	; 0x40
 8004652:	d067      	beq.n	8004724 <HAL_TIM_ConfigClockSource+0x120>
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d80b      	bhi.n	8004670 <HAL_TIM_ConfigClockSource+0x6c>
 8004658:	2b10      	cmp	r3, #16
 800465a:	d073      	beq.n	8004744 <HAL_TIM_ConfigClockSource+0x140>
 800465c:	2b10      	cmp	r3, #16
 800465e:	d802      	bhi.n	8004666 <HAL_TIM_ConfigClockSource+0x62>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d06f      	beq.n	8004744 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004664:	e078      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004666:	2b20      	cmp	r3, #32
 8004668:	d06c      	beq.n	8004744 <HAL_TIM_ConfigClockSource+0x140>
 800466a:	2b30      	cmp	r3, #48	; 0x30
 800466c:	d06a      	beq.n	8004744 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800466e:	e073      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004670:	2b70      	cmp	r3, #112	; 0x70
 8004672:	d00d      	beq.n	8004690 <HAL_TIM_ConfigClockSource+0x8c>
 8004674:	2b70      	cmp	r3, #112	; 0x70
 8004676:	d804      	bhi.n	8004682 <HAL_TIM_ConfigClockSource+0x7e>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d033      	beq.n	80046e4 <HAL_TIM_ConfigClockSource+0xe0>
 800467c:	2b60      	cmp	r3, #96	; 0x60
 800467e:	d041      	beq.n	8004704 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004680:	e06a      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	d066      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x152>
 8004688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468c:	d017      	beq.n	80046be <HAL_TIM_ConfigClockSource+0xba>
      break;
 800468e:	e063      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6899      	ldr	r1, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f000 fb20 	bl	8004ce4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	609a      	str	r2, [r3, #8]
      break;
 80046bc:	e04c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6899      	ldr	r1, [r3, #8]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f000 fb09 	bl	8004ce4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046e0:	609a      	str	r2, [r3, #8]
      break;
 80046e2:	e039      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6859      	ldr	r1, [r3, #4]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	461a      	mov	r2, r3
 80046f2:	f000 fa7d 	bl	8004bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2150      	movs	r1, #80	; 0x50
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fad6 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8004702:	e029      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	6859      	ldr	r1, [r3, #4]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	461a      	mov	r2, r3
 8004712:	f000 fa9c 	bl	8004c4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2160      	movs	r1, #96	; 0x60
 800471c:	4618      	mov	r0, r3
 800471e:	f000 fac6 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8004722:	e019      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	461a      	mov	r2, r3
 8004732:	f000 fa5d 	bl	8004bf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2140      	movs	r1, #64	; 0x40
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fab6 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8004742:	e009      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f000 faad 	bl	8004cae <TIM_ITRx_SetConfig>
      break;
 8004754:	e000      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a34      	ldr	r2, [pc, #208]	; (80048bc <TIM_Base_SetConfig+0xe4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00f      	beq.n	8004810 <TIM_Base_SetConfig+0x38>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f6:	d00b      	beq.n	8004810 <TIM_Base_SetConfig+0x38>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a31      	ldr	r2, [pc, #196]	; (80048c0 <TIM_Base_SetConfig+0xe8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_Base_SetConfig+0x38>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a30      	ldr	r2, [pc, #192]	; (80048c4 <TIM_Base_SetConfig+0xec>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_Base_SetConfig+0x38>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a2f      	ldr	r2, [pc, #188]	; (80048c8 <TIM_Base_SetConfig+0xf0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <TIM_Base_SetConfig+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01b      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d017      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <TIM_Base_SetConfig+0xe8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <TIM_Base_SetConfig+0xec>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00f      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a20      	ldr	r2, [pc, #128]	; (80048c8 <TIM_Base_SetConfig+0xf0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1f      	ldr	r2, [pc, #124]	; (80048cc <TIM_Base_SetConfig+0xf4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <TIM_Base_SetConfig+0xf8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <TIM_Base_SetConfig+0xfc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d108      	bne.n	8004874 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <TIM_Base_SetConfig+0xe4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d103      	bne.n	80048a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	615a      	str	r2, [r3, #20]
}
 80048ae:	bf00      	nop
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800

080048d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f023 0201 	bic.w	r2, r3, #1
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0303 	bic.w	r3, r3, #3
 800490e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	4313      	orrs	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 0302 	bic.w	r3, r3, #2
 8004920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <TIM_OC1_SetConfig+0xc8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10c      	bne.n	800494e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f023 0308 	bic.w	r3, r3, #8
 800493a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 0304 	bic.w	r3, r3, #4
 800494c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <TIM_OC1_SetConfig+0xc8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d111      	bne.n	800497a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800495c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	621a      	str	r2, [r3, #32]
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	40010000 	.word	0x40010000

080049a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f023 0210 	bic.w	r2, r3, #16
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f023 0320 	bic.w	r3, r3, #32
 80049ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <TIM_OC2_SetConfig+0xd4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d10d      	bne.n	8004a20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <TIM_OC2_SetConfig+0xd4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d113      	bne.n	8004a50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	621a      	str	r2, [r3, #32]
}
 8004a6a:	bf00      	nop
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000

08004a7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <TIM_OC3_SetConfig+0xd0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d10d      	bne.n	8004af6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	021b      	lsls	r3, r3, #8
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <TIM_OC3_SetConfig+0xd0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d113      	bne.n	8004b26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	621a      	str	r2, [r3, #32]
}
 8004b40:	bf00      	nop
 8004b42:	371c      	adds	r7, #28
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	40010000 	.word	0x40010000

08004b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	031b      	lsls	r3, r3, #12
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a10      	ldr	r2, [pc, #64]	; (8004bec <TIM_OC4_SetConfig+0x9c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d109      	bne.n	8004bc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	019b      	lsls	r3, r3, #6
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000

08004bf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	f023 0201 	bic.w	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 030a 	bic.w	r3, r3, #10
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr

08004c4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	b087      	sub	sp, #28
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0210 	bic.w	r2, r3, #16
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	031b      	lsls	r3, r3, #12
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	621a      	str	r2, [r3, #32]
}
 8004ca2:	bf00      	nop
 8004ca4:	371c      	adds	r7, #28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b085      	sub	sp, #20
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
 8004cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f043 0307 	orr.w	r3, r3, #7
 8004cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	609a      	str	r2, [r3, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cfe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	021a      	lsls	r2, r3, #8
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	431a      	orrs	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	609a      	str	r2, [r3, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	371c      	adds	r7, #28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2201      	movs	r2, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1a      	ldr	r2, [r3, #32]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	401a      	ands	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 031f 	and.w	r3, r3, #31
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
	...

08004d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e050      	b.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d018      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd4:	d013      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00e      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a16      	ldr	r2, [pc, #88]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d009      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d004      	beq.n	8004dfe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a13      	ldr	r2, [pc, #76]	; (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d10c      	bne.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40000800 	.word	0x40000800
 8004e44:	40000c00 	.word	0x40000c00
 8004e48:	40014000 	.word	0x40014000

08004e4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e03d      	b.n	8004ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e03f      	b.n	8004faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fd fb9c 	bl	800267c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2224      	movs	r2, #36	; 0x24
 8004f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68da      	ldr	r2, [r3, #12]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f829 	bl	8004fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695a      	ldr	r2, [r3, #20]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	69db      	ldr	r3, [r3, #28]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ff6:	f023 030c 	bic.w	r3, r3, #12
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	68f9      	ldr	r1, [r7, #12]
 8005000:	430b      	orrs	r3, r1
 8005002:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005022:	f040 818b 	bne.w	800533c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4ac1      	ldr	r2, [pc, #772]	; (8005330 <UART_SetConfig+0x37c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d005      	beq.n	800503c <UART_SetConfig+0x88>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4abf      	ldr	r2, [pc, #764]	; (8005334 <UART_SetConfig+0x380>)
 8005036:	4293      	cmp	r3, r2
 8005038:	f040 80bd 	bne.w	80051b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800503c:	f7fe ffe6 	bl	800400c <HAL_RCC_GetPCLK2Freq>
 8005040:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	461d      	mov	r5, r3
 8005046:	f04f 0600 	mov.w	r6, #0
 800504a:	46a8      	mov	r8, r5
 800504c:	46b1      	mov	r9, r6
 800504e:	eb18 0308 	adds.w	r3, r8, r8
 8005052:	eb49 0409 	adc.w	r4, r9, r9
 8005056:	4698      	mov	r8, r3
 8005058:	46a1      	mov	r9, r4
 800505a:	eb18 0805 	adds.w	r8, r8, r5
 800505e:	eb49 0906 	adc.w	r9, r9, r6
 8005062:	f04f 0100 	mov.w	r1, #0
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800506e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005072:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005076:	4688      	mov	r8, r1
 8005078:	4691      	mov	r9, r2
 800507a:	eb18 0005 	adds.w	r0, r8, r5
 800507e:	eb49 0106 	adc.w	r1, r9, r6
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	461d      	mov	r5, r3
 8005088:	f04f 0600 	mov.w	r6, #0
 800508c:	196b      	adds	r3, r5, r5
 800508e:	eb46 0406 	adc.w	r4, r6, r6
 8005092:	461a      	mov	r2, r3
 8005094:	4623      	mov	r3, r4
 8005096:	f7fb f8f3 	bl	8000280 <__aeabi_uldivmod>
 800509a:	4603      	mov	r3, r0
 800509c:	460c      	mov	r4, r1
 800509e:	461a      	mov	r2, r3
 80050a0:	4ba5      	ldr	r3, [pc, #660]	; (8005338 <UART_SetConfig+0x384>)
 80050a2:	fba3 2302 	umull	r2, r3, r3, r2
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	461d      	mov	r5, r3
 80050b0:	f04f 0600 	mov.w	r6, #0
 80050b4:	46a9      	mov	r9, r5
 80050b6:	46b2      	mov	sl, r6
 80050b8:	eb19 0309 	adds.w	r3, r9, r9
 80050bc:	eb4a 040a 	adc.w	r4, sl, sl
 80050c0:	4699      	mov	r9, r3
 80050c2:	46a2      	mov	sl, r4
 80050c4:	eb19 0905 	adds.w	r9, r9, r5
 80050c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050e0:	4689      	mov	r9, r1
 80050e2:	4692      	mov	sl, r2
 80050e4:	eb19 0005 	adds.w	r0, r9, r5
 80050e8:	eb4a 0106 	adc.w	r1, sl, r6
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	461d      	mov	r5, r3
 80050f2:	f04f 0600 	mov.w	r6, #0
 80050f6:	196b      	adds	r3, r5, r5
 80050f8:	eb46 0406 	adc.w	r4, r6, r6
 80050fc:	461a      	mov	r2, r3
 80050fe:	4623      	mov	r3, r4
 8005100:	f7fb f8be 	bl	8000280 <__aeabi_uldivmod>
 8005104:	4603      	mov	r3, r0
 8005106:	460c      	mov	r4, r1
 8005108:	461a      	mov	r2, r3
 800510a:	4b8b      	ldr	r3, [pc, #556]	; (8005338 <UART_SetConfig+0x384>)
 800510c:	fba3 1302 	umull	r1, r3, r3, r2
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	2164      	movs	r1, #100	; 0x64
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	3332      	adds	r3, #50	; 0x32
 800511e:	4a86      	ldr	r2, [pc, #536]	; (8005338 <UART_SetConfig+0x384>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800512c:	4498      	add	r8, r3
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	461d      	mov	r5, r3
 8005132:	f04f 0600 	mov.w	r6, #0
 8005136:	46a9      	mov	r9, r5
 8005138:	46b2      	mov	sl, r6
 800513a:	eb19 0309 	adds.w	r3, r9, r9
 800513e:	eb4a 040a 	adc.w	r4, sl, sl
 8005142:	4699      	mov	r9, r3
 8005144:	46a2      	mov	sl, r4
 8005146:	eb19 0905 	adds.w	r9, r9, r5
 800514a:	eb4a 0a06 	adc.w	sl, sl, r6
 800514e:	f04f 0100 	mov.w	r1, #0
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800515a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800515e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005162:	4689      	mov	r9, r1
 8005164:	4692      	mov	sl, r2
 8005166:	eb19 0005 	adds.w	r0, r9, r5
 800516a:	eb4a 0106 	adc.w	r1, sl, r6
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	461d      	mov	r5, r3
 8005174:	f04f 0600 	mov.w	r6, #0
 8005178:	196b      	adds	r3, r5, r5
 800517a:	eb46 0406 	adc.w	r4, r6, r6
 800517e:	461a      	mov	r2, r3
 8005180:	4623      	mov	r3, r4
 8005182:	f7fb f87d 	bl	8000280 <__aeabi_uldivmod>
 8005186:	4603      	mov	r3, r0
 8005188:	460c      	mov	r4, r1
 800518a:	461a      	mov	r2, r3
 800518c:	4b6a      	ldr	r3, [pc, #424]	; (8005338 <UART_SetConfig+0x384>)
 800518e:	fba3 1302 	umull	r1, r3, r3, r2
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2164      	movs	r1, #100	; 0x64
 8005196:	fb01 f303 	mul.w	r3, r1, r3
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	3332      	adds	r3, #50	; 0x32
 80051a0:	4a65      	ldr	r2, [pc, #404]	; (8005338 <UART_SetConfig+0x384>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f003 0207 	and.w	r2, r3, #7
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4442      	add	r2, r8
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	e26f      	b.n	8005696 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051b6:	f7fe ff15 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 80051ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	461d      	mov	r5, r3
 80051c0:	f04f 0600 	mov.w	r6, #0
 80051c4:	46a8      	mov	r8, r5
 80051c6:	46b1      	mov	r9, r6
 80051c8:	eb18 0308 	adds.w	r3, r8, r8
 80051cc:	eb49 0409 	adc.w	r4, r9, r9
 80051d0:	4698      	mov	r8, r3
 80051d2:	46a1      	mov	r9, r4
 80051d4:	eb18 0805 	adds.w	r8, r8, r5
 80051d8:	eb49 0906 	adc.w	r9, r9, r6
 80051dc:	f04f 0100 	mov.w	r1, #0
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051f0:	4688      	mov	r8, r1
 80051f2:	4691      	mov	r9, r2
 80051f4:	eb18 0005 	adds.w	r0, r8, r5
 80051f8:	eb49 0106 	adc.w	r1, r9, r6
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	461d      	mov	r5, r3
 8005202:	f04f 0600 	mov.w	r6, #0
 8005206:	196b      	adds	r3, r5, r5
 8005208:	eb46 0406 	adc.w	r4, r6, r6
 800520c:	461a      	mov	r2, r3
 800520e:	4623      	mov	r3, r4
 8005210:	f7fb f836 	bl	8000280 <__aeabi_uldivmod>
 8005214:	4603      	mov	r3, r0
 8005216:	460c      	mov	r4, r1
 8005218:	461a      	mov	r2, r3
 800521a:	4b47      	ldr	r3, [pc, #284]	; (8005338 <UART_SetConfig+0x384>)
 800521c:	fba3 2302 	umull	r2, r3, r3, r2
 8005220:	095b      	lsrs	r3, r3, #5
 8005222:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	461d      	mov	r5, r3
 800522a:	f04f 0600 	mov.w	r6, #0
 800522e:	46a9      	mov	r9, r5
 8005230:	46b2      	mov	sl, r6
 8005232:	eb19 0309 	adds.w	r3, r9, r9
 8005236:	eb4a 040a 	adc.w	r4, sl, sl
 800523a:	4699      	mov	r9, r3
 800523c:	46a2      	mov	sl, r4
 800523e:	eb19 0905 	adds.w	r9, r9, r5
 8005242:	eb4a 0a06 	adc.w	sl, sl, r6
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005252:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005256:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800525a:	4689      	mov	r9, r1
 800525c:	4692      	mov	sl, r2
 800525e:	eb19 0005 	adds.w	r0, r9, r5
 8005262:	eb4a 0106 	adc.w	r1, sl, r6
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	461d      	mov	r5, r3
 800526c:	f04f 0600 	mov.w	r6, #0
 8005270:	196b      	adds	r3, r5, r5
 8005272:	eb46 0406 	adc.w	r4, r6, r6
 8005276:	461a      	mov	r2, r3
 8005278:	4623      	mov	r3, r4
 800527a:	f7fb f801 	bl	8000280 <__aeabi_uldivmod>
 800527e:	4603      	mov	r3, r0
 8005280:	460c      	mov	r4, r1
 8005282:	461a      	mov	r2, r3
 8005284:	4b2c      	ldr	r3, [pc, #176]	; (8005338 <UART_SetConfig+0x384>)
 8005286:	fba3 1302 	umull	r1, r3, r3, r2
 800528a:	095b      	lsrs	r3, r3, #5
 800528c:	2164      	movs	r1, #100	; 0x64
 800528e:	fb01 f303 	mul.w	r3, r1, r3
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	3332      	adds	r3, #50	; 0x32
 8005298:	4a27      	ldr	r2, [pc, #156]	; (8005338 <UART_SetConfig+0x384>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052a6:	4498      	add	r8, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	461d      	mov	r5, r3
 80052ac:	f04f 0600 	mov.w	r6, #0
 80052b0:	46a9      	mov	r9, r5
 80052b2:	46b2      	mov	sl, r6
 80052b4:	eb19 0309 	adds.w	r3, r9, r9
 80052b8:	eb4a 040a 	adc.w	r4, sl, sl
 80052bc:	4699      	mov	r9, r3
 80052be:	46a2      	mov	sl, r4
 80052c0:	eb19 0905 	adds.w	r9, r9, r5
 80052c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80052c8:	f04f 0100 	mov.w	r1, #0
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052dc:	4689      	mov	r9, r1
 80052de:	4692      	mov	sl, r2
 80052e0:	eb19 0005 	adds.w	r0, r9, r5
 80052e4:	eb4a 0106 	adc.w	r1, sl, r6
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	461d      	mov	r5, r3
 80052ee:	f04f 0600 	mov.w	r6, #0
 80052f2:	196b      	adds	r3, r5, r5
 80052f4:	eb46 0406 	adc.w	r4, r6, r6
 80052f8:	461a      	mov	r2, r3
 80052fa:	4623      	mov	r3, r4
 80052fc:	f7fa ffc0 	bl	8000280 <__aeabi_uldivmod>
 8005300:	4603      	mov	r3, r0
 8005302:	460c      	mov	r4, r1
 8005304:	461a      	mov	r2, r3
 8005306:	4b0c      	ldr	r3, [pc, #48]	; (8005338 <UART_SetConfig+0x384>)
 8005308:	fba3 1302 	umull	r1, r3, r3, r2
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2164      	movs	r1, #100	; 0x64
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a07      	ldr	r2, [pc, #28]	; (8005338 <UART_SetConfig+0x384>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 0207 	and.w	r2, r3, #7
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4442      	add	r2, r8
 800532c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800532e:	e1b2      	b.n	8005696 <UART_SetConfig+0x6e2>
 8005330:	40011000 	.word	0x40011000
 8005334:	40011400 	.word	0x40011400
 8005338:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4ad7      	ldr	r2, [pc, #860]	; (80056a0 <UART_SetConfig+0x6ec>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d005      	beq.n	8005352 <UART_SetConfig+0x39e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4ad6      	ldr	r2, [pc, #856]	; (80056a4 <UART_SetConfig+0x6f0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	f040 80d1 	bne.w	80054f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005352:	f7fe fe5b 	bl	800400c <HAL_RCC_GetPCLK2Freq>
 8005356:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	469a      	mov	sl, r3
 800535c:	f04f 0b00 	mov.w	fp, #0
 8005360:	46d0      	mov	r8, sl
 8005362:	46d9      	mov	r9, fp
 8005364:	eb18 0308 	adds.w	r3, r8, r8
 8005368:	eb49 0409 	adc.w	r4, r9, r9
 800536c:	4698      	mov	r8, r3
 800536e:	46a1      	mov	r9, r4
 8005370:	eb18 080a 	adds.w	r8, r8, sl
 8005374:	eb49 090b 	adc.w	r9, r9, fp
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005384:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005388:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800538c:	4688      	mov	r8, r1
 800538e:	4691      	mov	r9, r2
 8005390:	eb1a 0508 	adds.w	r5, sl, r8
 8005394:	eb4b 0609 	adc.w	r6, fp, r9
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	4619      	mov	r1, r3
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	f04f 0400 	mov.w	r4, #0
 80053aa:	0094      	lsls	r4, r2, #2
 80053ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053b0:	008b      	lsls	r3, r1, #2
 80053b2:	461a      	mov	r2, r3
 80053b4:	4623      	mov	r3, r4
 80053b6:	4628      	mov	r0, r5
 80053b8:	4631      	mov	r1, r6
 80053ba:	f7fa ff61 	bl	8000280 <__aeabi_uldivmod>
 80053be:	4603      	mov	r3, r0
 80053c0:	460c      	mov	r4, r1
 80053c2:	461a      	mov	r2, r3
 80053c4:	4bb8      	ldr	r3, [pc, #736]	; (80056a8 <UART_SetConfig+0x6f4>)
 80053c6:	fba3 2302 	umull	r2, r3, r3, r2
 80053ca:	095b      	lsrs	r3, r3, #5
 80053cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	469b      	mov	fp, r3
 80053d4:	f04f 0c00 	mov.w	ip, #0
 80053d8:	46d9      	mov	r9, fp
 80053da:	46e2      	mov	sl, ip
 80053dc:	eb19 0309 	adds.w	r3, r9, r9
 80053e0:	eb4a 040a 	adc.w	r4, sl, sl
 80053e4:	4699      	mov	r9, r3
 80053e6:	46a2      	mov	sl, r4
 80053e8:	eb19 090b 	adds.w	r9, r9, fp
 80053ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053f0:	f04f 0100 	mov.w	r1, #0
 80053f4:	f04f 0200 	mov.w	r2, #0
 80053f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005400:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005404:	4689      	mov	r9, r1
 8005406:	4692      	mov	sl, r2
 8005408:	eb1b 0509 	adds.w	r5, fp, r9
 800540c:	eb4c 060a 	adc.w	r6, ip, sl
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4619      	mov	r1, r3
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	f04f 0400 	mov.w	r4, #0
 8005422:	0094      	lsls	r4, r2, #2
 8005424:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005428:	008b      	lsls	r3, r1, #2
 800542a:	461a      	mov	r2, r3
 800542c:	4623      	mov	r3, r4
 800542e:	4628      	mov	r0, r5
 8005430:	4631      	mov	r1, r6
 8005432:	f7fa ff25 	bl	8000280 <__aeabi_uldivmod>
 8005436:	4603      	mov	r3, r0
 8005438:	460c      	mov	r4, r1
 800543a:	461a      	mov	r2, r3
 800543c:	4b9a      	ldr	r3, [pc, #616]	; (80056a8 <UART_SetConfig+0x6f4>)
 800543e:	fba3 1302 	umull	r1, r3, r3, r2
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	2164      	movs	r1, #100	; 0x64
 8005446:	fb01 f303 	mul.w	r3, r1, r3
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	3332      	adds	r3, #50	; 0x32
 8005450:	4a95      	ldr	r2, [pc, #596]	; (80056a8 <UART_SetConfig+0x6f4>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	095b      	lsrs	r3, r3, #5
 8005458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800545c:	4498      	add	r8, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	469b      	mov	fp, r3
 8005462:	f04f 0c00 	mov.w	ip, #0
 8005466:	46d9      	mov	r9, fp
 8005468:	46e2      	mov	sl, ip
 800546a:	eb19 0309 	adds.w	r3, r9, r9
 800546e:	eb4a 040a 	adc.w	r4, sl, sl
 8005472:	4699      	mov	r9, r3
 8005474:	46a2      	mov	sl, r4
 8005476:	eb19 090b 	adds.w	r9, r9, fp
 800547a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800547e:	f04f 0100 	mov.w	r1, #0
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800548a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800548e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005492:	4689      	mov	r9, r1
 8005494:	4692      	mov	sl, r2
 8005496:	eb1b 0509 	adds.w	r5, fp, r9
 800549a:	eb4c 060a 	adc.w	r6, ip, sl
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4619      	mov	r1, r3
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	f04f 0400 	mov.w	r4, #0
 80054b0:	0094      	lsls	r4, r2, #2
 80054b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054b6:	008b      	lsls	r3, r1, #2
 80054b8:	461a      	mov	r2, r3
 80054ba:	4623      	mov	r3, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	4631      	mov	r1, r6
 80054c0:	f7fa fede 	bl	8000280 <__aeabi_uldivmod>
 80054c4:	4603      	mov	r3, r0
 80054c6:	460c      	mov	r4, r1
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b77      	ldr	r3, [pc, #476]	; (80056a8 <UART_SetConfig+0x6f4>)
 80054cc:	fba3 1302 	umull	r1, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2164      	movs	r1, #100	; 0x64
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	3332      	adds	r3, #50	; 0x32
 80054de:	4a72      	ldr	r2, [pc, #456]	; (80056a8 <UART_SetConfig+0x6f4>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f003 020f 	and.w	r2, r3, #15
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4442      	add	r2, r8
 80054f0:	609a      	str	r2, [r3, #8]
 80054f2:	e0d0      	b.n	8005696 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80054f4:	f7fe fd76 	bl	8003fe4 <HAL_RCC_GetPCLK1Freq>
 80054f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	469a      	mov	sl, r3
 80054fe:	f04f 0b00 	mov.w	fp, #0
 8005502:	46d0      	mov	r8, sl
 8005504:	46d9      	mov	r9, fp
 8005506:	eb18 0308 	adds.w	r3, r8, r8
 800550a:	eb49 0409 	adc.w	r4, r9, r9
 800550e:	4698      	mov	r8, r3
 8005510:	46a1      	mov	r9, r4
 8005512:	eb18 080a 	adds.w	r8, r8, sl
 8005516:	eb49 090b 	adc.w	r9, r9, fp
 800551a:	f04f 0100 	mov.w	r1, #0
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005526:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800552a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800552e:	4688      	mov	r8, r1
 8005530:	4691      	mov	r9, r2
 8005532:	eb1a 0508 	adds.w	r5, sl, r8
 8005536:	eb4b 0609 	adc.w	r6, fp, r9
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4619      	mov	r1, r3
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	f04f 0400 	mov.w	r4, #0
 800554c:	0094      	lsls	r4, r2, #2
 800554e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005552:	008b      	lsls	r3, r1, #2
 8005554:	461a      	mov	r2, r3
 8005556:	4623      	mov	r3, r4
 8005558:	4628      	mov	r0, r5
 800555a:	4631      	mov	r1, r6
 800555c:	f7fa fe90 	bl	8000280 <__aeabi_uldivmod>
 8005560:	4603      	mov	r3, r0
 8005562:	460c      	mov	r4, r1
 8005564:	461a      	mov	r2, r3
 8005566:	4b50      	ldr	r3, [pc, #320]	; (80056a8 <UART_SetConfig+0x6f4>)
 8005568:	fba3 2302 	umull	r2, r3, r3, r2
 800556c:	095b      	lsrs	r3, r3, #5
 800556e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	469b      	mov	fp, r3
 8005576:	f04f 0c00 	mov.w	ip, #0
 800557a:	46d9      	mov	r9, fp
 800557c:	46e2      	mov	sl, ip
 800557e:	eb19 0309 	adds.w	r3, r9, r9
 8005582:	eb4a 040a 	adc.w	r4, sl, sl
 8005586:	4699      	mov	r9, r3
 8005588:	46a2      	mov	sl, r4
 800558a:	eb19 090b 	adds.w	r9, r9, fp
 800558e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005592:	f04f 0100 	mov.w	r1, #0
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800559e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055a6:	4689      	mov	r9, r1
 80055a8:	4692      	mov	sl, r2
 80055aa:	eb1b 0509 	adds.w	r5, fp, r9
 80055ae:	eb4c 060a 	adc.w	r6, ip, sl
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	4619      	mov	r1, r3
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	f04f 0400 	mov.w	r4, #0
 80055c4:	0094      	lsls	r4, r2, #2
 80055c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055ca:	008b      	lsls	r3, r1, #2
 80055cc:	461a      	mov	r2, r3
 80055ce:	4623      	mov	r3, r4
 80055d0:	4628      	mov	r0, r5
 80055d2:	4631      	mov	r1, r6
 80055d4:	f7fa fe54 	bl	8000280 <__aeabi_uldivmod>
 80055d8:	4603      	mov	r3, r0
 80055da:	460c      	mov	r4, r1
 80055dc:	461a      	mov	r2, r3
 80055de:	4b32      	ldr	r3, [pc, #200]	; (80056a8 <UART_SetConfig+0x6f4>)
 80055e0:	fba3 1302 	umull	r1, r3, r3, r2
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	2164      	movs	r1, #100	; 0x64
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	3332      	adds	r3, #50	; 0x32
 80055f2:	4a2d      	ldr	r2, [pc, #180]	; (80056a8 <UART_SetConfig+0x6f4>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055fe:	4498      	add	r8, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	469b      	mov	fp, r3
 8005604:	f04f 0c00 	mov.w	ip, #0
 8005608:	46d9      	mov	r9, fp
 800560a:	46e2      	mov	sl, ip
 800560c:	eb19 0309 	adds.w	r3, r9, r9
 8005610:	eb4a 040a 	adc.w	r4, sl, sl
 8005614:	4699      	mov	r9, r3
 8005616:	46a2      	mov	sl, r4
 8005618:	eb19 090b 	adds.w	r9, r9, fp
 800561c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005620:	f04f 0100 	mov.w	r1, #0
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800562c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005630:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005634:	4689      	mov	r9, r1
 8005636:	4692      	mov	sl, r2
 8005638:	eb1b 0509 	adds.w	r5, fp, r9
 800563c:	eb4c 060a 	adc.w	r6, ip, sl
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	4619      	mov	r1, r3
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	f04f 0400 	mov.w	r4, #0
 8005652:	0094      	lsls	r4, r2, #2
 8005654:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005658:	008b      	lsls	r3, r1, #2
 800565a:	461a      	mov	r2, r3
 800565c:	4623      	mov	r3, r4
 800565e:	4628      	mov	r0, r5
 8005660:	4631      	mov	r1, r6
 8005662:	f7fa fe0d 	bl	8000280 <__aeabi_uldivmod>
 8005666:	4603      	mov	r3, r0
 8005668:	460c      	mov	r4, r1
 800566a:	461a      	mov	r2, r3
 800566c:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <UART_SetConfig+0x6f4>)
 800566e:	fba3 1302 	umull	r1, r3, r3, r2
 8005672:	095b      	lsrs	r3, r3, #5
 8005674:	2164      	movs	r1, #100	; 0x64
 8005676:	fb01 f303 	mul.w	r3, r1, r3
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	3332      	adds	r3, #50	; 0x32
 8005680:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <UART_SetConfig+0x6f4>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	f003 020f 	and.w	r2, r3, #15
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4442      	add	r2, r8
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	e7ff      	b.n	8005696 <UART_SetConfig+0x6e2>
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a0:	40011000 	.word	0x40011000
 80056a4:	40011400 	.word	0x40011400
 80056a8:	51eb851f 	.word	0x51eb851f

080056ac <__errno>:
 80056ac:	4b01      	ldr	r3, [pc, #4]	; (80056b4 <__errno+0x8>)
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	20000010 	.word	0x20000010

080056b8 <__libc_init_array>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	4e0d      	ldr	r6, [pc, #52]	; (80056f0 <__libc_init_array+0x38>)
 80056bc:	4c0d      	ldr	r4, [pc, #52]	; (80056f4 <__libc_init_array+0x3c>)
 80056be:	1ba4      	subs	r4, r4, r6
 80056c0:	10a4      	asrs	r4, r4, #2
 80056c2:	2500      	movs	r5, #0
 80056c4:	42a5      	cmp	r5, r4
 80056c6:	d109      	bne.n	80056dc <__libc_init_array+0x24>
 80056c8:	4e0b      	ldr	r6, [pc, #44]	; (80056f8 <__libc_init_array+0x40>)
 80056ca:	4c0c      	ldr	r4, [pc, #48]	; (80056fc <__libc_init_array+0x44>)
 80056cc:	f000 fc28 	bl	8005f20 <_init>
 80056d0:	1ba4      	subs	r4, r4, r6
 80056d2:	10a4      	asrs	r4, r4, #2
 80056d4:	2500      	movs	r5, #0
 80056d6:	42a5      	cmp	r5, r4
 80056d8:	d105      	bne.n	80056e6 <__libc_init_array+0x2e>
 80056da:	bd70      	pop	{r4, r5, r6, pc}
 80056dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056e0:	4798      	blx	r3
 80056e2:	3501      	adds	r5, #1
 80056e4:	e7ee      	b.n	80056c4 <__libc_init_array+0xc>
 80056e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056ea:	4798      	blx	r3
 80056ec:	3501      	adds	r5, #1
 80056ee:	e7f2      	b.n	80056d6 <__libc_init_array+0x1e>
 80056f0:	08005fe4 	.word	0x08005fe4
 80056f4:	08005fe4 	.word	0x08005fe4
 80056f8:	08005fe4 	.word	0x08005fe4
 80056fc:	08005fe8 	.word	0x08005fe8

08005700 <memcpy>:
 8005700:	b510      	push	{r4, lr}
 8005702:	1e43      	subs	r3, r0, #1
 8005704:	440a      	add	r2, r1
 8005706:	4291      	cmp	r1, r2
 8005708:	d100      	bne.n	800570c <memcpy+0xc>
 800570a:	bd10      	pop	{r4, pc}
 800570c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005710:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005714:	e7f7      	b.n	8005706 <memcpy+0x6>

08005716 <memset>:
 8005716:	4402      	add	r2, r0
 8005718:	4603      	mov	r3, r0
 800571a:	4293      	cmp	r3, r2
 800571c:	d100      	bne.n	8005720 <memset+0xa>
 800571e:	4770      	bx	lr
 8005720:	f803 1b01 	strb.w	r1, [r3], #1
 8005724:	e7f9      	b.n	800571a <memset+0x4>
	...

08005728 <_free_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4605      	mov	r5, r0
 800572c:	2900      	cmp	r1, #0
 800572e:	d045      	beq.n	80057bc <_free_r+0x94>
 8005730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005734:	1f0c      	subs	r4, r1, #4
 8005736:	2b00      	cmp	r3, #0
 8005738:	bfb8      	it	lt
 800573a:	18e4      	addlt	r4, r4, r3
 800573c:	f000 f8cc 	bl	80058d8 <__malloc_lock>
 8005740:	4a1f      	ldr	r2, [pc, #124]	; (80057c0 <_free_r+0x98>)
 8005742:	6813      	ldr	r3, [r2, #0]
 8005744:	4610      	mov	r0, r2
 8005746:	b933      	cbnz	r3, 8005756 <_free_r+0x2e>
 8005748:	6063      	str	r3, [r4, #4]
 800574a:	6014      	str	r4, [r2, #0]
 800574c:	4628      	mov	r0, r5
 800574e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005752:	f000 b8c2 	b.w	80058da <__malloc_unlock>
 8005756:	42a3      	cmp	r3, r4
 8005758:	d90c      	bls.n	8005774 <_free_r+0x4c>
 800575a:	6821      	ldr	r1, [r4, #0]
 800575c:	1862      	adds	r2, r4, r1
 800575e:	4293      	cmp	r3, r2
 8005760:	bf04      	itt	eq
 8005762:	681a      	ldreq	r2, [r3, #0]
 8005764:	685b      	ldreq	r3, [r3, #4]
 8005766:	6063      	str	r3, [r4, #4]
 8005768:	bf04      	itt	eq
 800576a:	1852      	addeq	r2, r2, r1
 800576c:	6022      	streq	r2, [r4, #0]
 800576e:	6004      	str	r4, [r0, #0]
 8005770:	e7ec      	b.n	800574c <_free_r+0x24>
 8005772:	4613      	mov	r3, r2
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	b10a      	cbz	r2, 800577c <_free_r+0x54>
 8005778:	42a2      	cmp	r2, r4
 800577a:	d9fa      	bls.n	8005772 <_free_r+0x4a>
 800577c:	6819      	ldr	r1, [r3, #0]
 800577e:	1858      	adds	r0, r3, r1
 8005780:	42a0      	cmp	r0, r4
 8005782:	d10b      	bne.n	800579c <_free_r+0x74>
 8005784:	6820      	ldr	r0, [r4, #0]
 8005786:	4401      	add	r1, r0
 8005788:	1858      	adds	r0, r3, r1
 800578a:	4282      	cmp	r2, r0
 800578c:	6019      	str	r1, [r3, #0]
 800578e:	d1dd      	bne.n	800574c <_free_r+0x24>
 8005790:	6810      	ldr	r0, [r2, #0]
 8005792:	6852      	ldr	r2, [r2, #4]
 8005794:	605a      	str	r2, [r3, #4]
 8005796:	4401      	add	r1, r0
 8005798:	6019      	str	r1, [r3, #0]
 800579a:	e7d7      	b.n	800574c <_free_r+0x24>
 800579c:	d902      	bls.n	80057a4 <_free_r+0x7c>
 800579e:	230c      	movs	r3, #12
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	e7d3      	b.n	800574c <_free_r+0x24>
 80057a4:	6820      	ldr	r0, [r4, #0]
 80057a6:	1821      	adds	r1, r4, r0
 80057a8:	428a      	cmp	r2, r1
 80057aa:	bf04      	itt	eq
 80057ac:	6811      	ldreq	r1, [r2, #0]
 80057ae:	6852      	ldreq	r2, [r2, #4]
 80057b0:	6062      	str	r2, [r4, #4]
 80057b2:	bf04      	itt	eq
 80057b4:	1809      	addeq	r1, r1, r0
 80057b6:	6021      	streq	r1, [r4, #0]
 80057b8:	605c      	str	r4, [r3, #4]
 80057ba:	e7c7      	b.n	800574c <_free_r+0x24>
 80057bc:	bd38      	pop	{r3, r4, r5, pc}
 80057be:	bf00      	nop
 80057c0:	200000b4 	.word	0x200000b4

080057c4 <_malloc_r>:
 80057c4:	b570      	push	{r4, r5, r6, lr}
 80057c6:	1ccd      	adds	r5, r1, #3
 80057c8:	f025 0503 	bic.w	r5, r5, #3
 80057cc:	3508      	adds	r5, #8
 80057ce:	2d0c      	cmp	r5, #12
 80057d0:	bf38      	it	cc
 80057d2:	250c      	movcc	r5, #12
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	4606      	mov	r6, r0
 80057d8:	db01      	blt.n	80057de <_malloc_r+0x1a>
 80057da:	42a9      	cmp	r1, r5
 80057dc:	d903      	bls.n	80057e6 <_malloc_r+0x22>
 80057de:	230c      	movs	r3, #12
 80057e0:	6033      	str	r3, [r6, #0]
 80057e2:	2000      	movs	r0, #0
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
 80057e6:	f000 f877 	bl	80058d8 <__malloc_lock>
 80057ea:	4a21      	ldr	r2, [pc, #132]	; (8005870 <_malloc_r+0xac>)
 80057ec:	6814      	ldr	r4, [r2, #0]
 80057ee:	4621      	mov	r1, r4
 80057f0:	b991      	cbnz	r1, 8005818 <_malloc_r+0x54>
 80057f2:	4c20      	ldr	r4, [pc, #128]	; (8005874 <_malloc_r+0xb0>)
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	b91b      	cbnz	r3, 8005800 <_malloc_r+0x3c>
 80057f8:	4630      	mov	r0, r6
 80057fa:	f000 f83d 	bl	8005878 <_sbrk_r>
 80057fe:	6020      	str	r0, [r4, #0]
 8005800:	4629      	mov	r1, r5
 8005802:	4630      	mov	r0, r6
 8005804:	f000 f838 	bl	8005878 <_sbrk_r>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d124      	bne.n	8005856 <_malloc_r+0x92>
 800580c:	230c      	movs	r3, #12
 800580e:	6033      	str	r3, [r6, #0]
 8005810:	4630      	mov	r0, r6
 8005812:	f000 f862 	bl	80058da <__malloc_unlock>
 8005816:	e7e4      	b.n	80057e2 <_malloc_r+0x1e>
 8005818:	680b      	ldr	r3, [r1, #0]
 800581a:	1b5b      	subs	r3, r3, r5
 800581c:	d418      	bmi.n	8005850 <_malloc_r+0x8c>
 800581e:	2b0b      	cmp	r3, #11
 8005820:	d90f      	bls.n	8005842 <_malloc_r+0x7e>
 8005822:	600b      	str	r3, [r1, #0]
 8005824:	50cd      	str	r5, [r1, r3]
 8005826:	18cc      	adds	r4, r1, r3
 8005828:	4630      	mov	r0, r6
 800582a:	f000 f856 	bl	80058da <__malloc_unlock>
 800582e:	f104 000b 	add.w	r0, r4, #11
 8005832:	1d23      	adds	r3, r4, #4
 8005834:	f020 0007 	bic.w	r0, r0, #7
 8005838:	1ac3      	subs	r3, r0, r3
 800583a:	d0d3      	beq.n	80057e4 <_malloc_r+0x20>
 800583c:	425a      	negs	r2, r3
 800583e:	50e2      	str	r2, [r4, r3]
 8005840:	e7d0      	b.n	80057e4 <_malloc_r+0x20>
 8005842:	428c      	cmp	r4, r1
 8005844:	684b      	ldr	r3, [r1, #4]
 8005846:	bf16      	itet	ne
 8005848:	6063      	strne	r3, [r4, #4]
 800584a:	6013      	streq	r3, [r2, #0]
 800584c:	460c      	movne	r4, r1
 800584e:	e7eb      	b.n	8005828 <_malloc_r+0x64>
 8005850:	460c      	mov	r4, r1
 8005852:	6849      	ldr	r1, [r1, #4]
 8005854:	e7cc      	b.n	80057f0 <_malloc_r+0x2c>
 8005856:	1cc4      	adds	r4, r0, #3
 8005858:	f024 0403 	bic.w	r4, r4, #3
 800585c:	42a0      	cmp	r0, r4
 800585e:	d005      	beq.n	800586c <_malloc_r+0xa8>
 8005860:	1a21      	subs	r1, r4, r0
 8005862:	4630      	mov	r0, r6
 8005864:	f000 f808 	bl	8005878 <_sbrk_r>
 8005868:	3001      	adds	r0, #1
 800586a:	d0cf      	beq.n	800580c <_malloc_r+0x48>
 800586c:	6025      	str	r5, [r4, #0]
 800586e:	e7db      	b.n	8005828 <_malloc_r+0x64>
 8005870:	200000b4 	.word	0x200000b4
 8005874:	200000b8 	.word	0x200000b8

08005878 <_sbrk_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	4c06      	ldr	r4, [pc, #24]	; (8005894 <_sbrk_r+0x1c>)
 800587c:	2300      	movs	r3, #0
 800587e:	4605      	mov	r5, r0
 8005880:	4608      	mov	r0, r1
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	f7fc fd06 	bl	8002294 <_sbrk>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_sbrk_r+0x1a>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	b103      	cbz	r3, 8005892 <_sbrk_r+0x1a>
 8005890:	602b      	str	r3, [r5, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	20000754 	.word	0x20000754

08005898 <siprintf>:
 8005898:	b40e      	push	{r1, r2, r3}
 800589a:	b500      	push	{lr}
 800589c:	b09c      	sub	sp, #112	; 0x70
 800589e:	ab1d      	add	r3, sp, #116	; 0x74
 80058a0:	9002      	str	r0, [sp, #8]
 80058a2:	9006      	str	r0, [sp, #24]
 80058a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058a8:	4809      	ldr	r0, [pc, #36]	; (80058d0 <siprintf+0x38>)
 80058aa:	9107      	str	r1, [sp, #28]
 80058ac:	9104      	str	r1, [sp, #16]
 80058ae:	4909      	ldr	r1, [pc, #36]	; (80058d4 <siprintf+0x3c>)
 80058b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b4:	9105      	str	r1, [sp, #20]
 80058b6:	6800      	ldr	r0, [r0, #0]
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	a902      	add	r1, sp, #8
 80058bc:	f000 f868 	bl	8005990 <_svfiprintf_r>
 80058c0:	9b02      	ldr	r3, [sp, #8]
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	b01c      	add	sp, #112	; 0x70
 80058c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058cc:	b003      	add	sp, #12
 80058ce:	4770      	bx	lr
 80058d0:	20000010 	.word	0x20000010
 80058d4:	ffff0208 	.word	0xffff0208

080058d8 <__malloc_lock>:
 80058d8:	4770      	bx	lr

080058da <__malloc_unlock>:
 80058da:	4770      	bx	lr

080058dc <__ssputs_r>:
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	688e      	ldr	r6, [r1, #8]
 80058e2:	429e      	cmp	r6, r3
 80058e4:	4682      	mov	sl, r0
 80058e6:	460c      	mov	r4, r1
 80058e8:	4690      	mov	r8, r2
 80058ea:	4699      	mov	r9, r3
 80058ec:	d837      	bhi.n	800595e <__ssputs_r+0x82>
 80058ee:	898a      	ldrh	r2, [r1, #12]
 80058f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058f4:	d031      	beq.n	800595a <__ssputs_r+0x7e>
 80058f6:	6825      	ldr	r5, [r4, #0]
 80058f8:	6909      	ldr	r1, [r1, #16]
 80058fa:	1a6f      	subs	r7, r5, r1
 80058fc:	6965      	ldr	r5, [r4, #20]
 80058fe:	2302      	movs	r3, #2
 8005900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005904:	fb95 f5f3 	sdiv	r5, r5, r3
 8005908:	f109 0301 	add.w	r3, r9, #1
 800590c:	443b      	add	r3, r7
 800590e:	429d      	cmp	r5, r3
 8005910:	bf38      	it	cc
 8005912:	461d      	movcc	r5, r3
 8005914:	0553      	lsls	r3, r2, #21
 8005916:	d530      	bpl.n	800597a <__ssputs_r+0x9e>
 8005918:	4629      	mov	r1, r5
 800591a:	f7ff ff53 	bl	80057c4 <_malloc_r>
 800591e:	4606      	mov	r6, r0
 8005920:	b950      	cbnz	r0, 8005938 <__ssputs_r+0x5c>
 8005922:	230c      	movs	r3, #12
 8005924:	f8ca 3000 	str.w	r3, [sl]
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800592e:	81a3      	strh	r3, [r4, #12]
 8005930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005938:	463a      	mov	r2, r7
 800593a:	6921      	ldr	r1, [r4, #16]
 800593c:	f7ff fee0 	bl	8005700 <memcpy>
 8005940:	89a3      	ldrh	r3, [r4, #12]
 8005942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594a:	81a3      	strh	r3, [r4, #12]
 800594c:	6126      	str	r6, [r4, #16]
 800594e:	6165      	str	r5, [r4, #20]
 8005950:	443e      	add	r6, r7
 8005952:	1bed      	subs	r5, r5, r7
 8005954:	6026      	str	r6, [r4, #0]
 8005956:	60a5      	str	r5, [r4, #8]
 8005958:	464e      	mov	r6, r9
 800595a:	454e      	cmp	r6, r9
 800595c:	d900      	bls.n	8005960 <__ssputs_r+0x84>
 800595e:	464e      	mov	r6, r9
 8005960:	4632      	mov	r2, r6
 8005962:	4641      	mov	r1, r8
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	f000 fa93 	bl	8005e90 <memmove>
 800596a:	68a3      	ldr	r3, [r4, #8]
 800596c:	1b9b      	subs	r3, r3, r6
 800596e:	60a3      	str	r3, [r4, #8]
 8005970:	6823      	ldr	r3, [r4, #0]
 8005972:	441e      	add	r6, r3
 8005974:	6026      	str	r6, [r4, #0]
 8005976:	2000      	movs	r0, #0
 8005978:	e7dc      	b.n	8005934 <__ssputs_r+0x58>
 800597a:	462a      	mov	r2, r5
 800597c:	f000 faa1 	bl	8005ec2 <_realloc_r>
 8005980:	4606      	mov	r6, r0
 8005982:	2800      	cmp	r0, #0
 8005984:	d1e2      	bne.n	800594c <__ssputs_r+0x70>
 8005986:	6921      	ldr	r1, [r4, #16]
 8005988:	4650      	mov	r0, sl
 800598a:	f7ff fecd 	bl	8005728 <_free_r>
 800598e:	e7c8      	b.n	8005922 <__ssputs_r+0x46>

08005990 <_svfiprintf_r>:
 8005990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005994:	461d      	mov	r5, r3
 8005996:	898b      	ldrh	r3, [r1, #12]
 8005998:	061f      	lsls	r7, r3, #24
 800599a:	b09d      	sub	sp, #116	; 0x74
 800599c:	4680      	mov	r8, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	4616      	mov	r6, r2
 80059a2:	d50f      	bpl.n	80059c4 <_svfiprintf_r+0x34>
 80059a4:	690b      	ldr	r3, [r1, #16]
 80059a6:	b96b      	cbnz	r3, 80059c4 <_svfiprintf_r+0x34>
 80059a8:	2140      	movs	r1, #64	; 0x40
 80059aa:	f7ff ff0b 	bl	80057c4 <_malloc_r>
 80059ae:	6020      	str	r0, [r4, #0]
 80059b0:	6120      	str	r0, [r4, #16]
 80059b2:	b928      	cbnz	r0, 80059c0 <_svfiprintf_r+0x30>
 80059b4:	230c      	movs	r3, #12
 80059b6:	f8c8 3000 	str.w	r3, [r8]
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059be:	e0c8      	b.n	8005b52 <_svfiprintf_r+0x1c2>
 80059c0:	2340      	movs	r3, #64	; 0x40
 80059c2:	6163      	str	r3, [r4, #20]
 80059c4:	2300      	movs	r3, #0
 80059c6:	9309      	str	r3, [sp, #36]	; 0x24
 80059c8:	2320      	movs	r3, #32
 80059ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059ce:	2330      	movs	r3, #48	; 0x30
 80059d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059d4:	9503      	str	r5, [sp, #12]
 80059d6:	f04f 0b01 	mov.w	fp, #1
 80059da:	4637      	mov	r7, r6
 80059dc:	463d      	mov	r5, r7
 80059de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059e2:	b10b      	cbz	r3, 80059e8 <_svfiprintf_r+0x58>
 80059e4:	2b25      	cmp	r3, #37	; 0x25
 80059e6:	d13e      	bne.n	8005a66 <_svfiprintf_r+0xd6>
 80059e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80059ec:	d00b      	beq.n	8005a06 <_svfiprintf_r+0x76>
 80059ee:	4653      	mov	r3, sl
 80059f0:	4632      	mov	r2, r6
 80059f2:	4621      	mov	r1, r4
 80059f4:	4640      	mov	r0, r8
 80059f6:	f7ff ff71 	bl	80058dc <__ssputs_r>
 80059fa:	3001      	adds	r0, #1
 80059fc:	f000 80a4 	beq.w	8005b48 <_svfiprintf_r+0x1b8>
 8005a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a02:	4453      	add	r3, sl
 8005a04:	9309      	str	r3, [sp, #36]	; 0x24
 8005a06:	783b      	ldrb	r3, [r7, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 809d 	beq.w	8005b48 <_svfiprintf_r+0x1b8>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a18:	9304      	str	r3, [sp, #16]
 8005a1a:	9307      	str	r3, [sp, #28]
 8005a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a20:	931a      	str	r3, [sp, #104]	; 0x68
 8005a22:	462f      	mov	r7, r5
 8005a24:	2205      	movs	r2, #5
 8005a26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a2a:	4850      	ldr	r0, [pc, #320]	; (8005b6c <_svfiprintf_r+0x1dc>)
 8005a2c:	f7fa fbd8 	bl	80001e0 <memchr>
 8005a30:	9b04      	ldr	r3, [sp, #16]
 8005a32:	b9d0      	cbnz	r0, 8005a6a <_svfiprintf_r+0xda>
 8005a34:	06d9      	lsls	r1, r3, #27
 8005a36:	bf44      	itt	mi
 8005a38:	2220      	movmi	r2, #32
 8005a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a3e:	071a      	lsls	r2, r3, #28
 8005a40:	bf44      	itt	mi
 8005a42:	222b      	movmi	r2, #43	; 0x2b
 8005a44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a48:	782a      	ldrb	r2, [r5, #0]
 8005a4a:	2a2a      	cmp	r2, #42	; 0x2a
 8005a4c:	d015      	beq.n	8005a7a <_svfiprintf_r+0xea>
 8005a4e:	9a07      	ldr	r2, [sp, #28]
 8005a50:	462f      	mov	r7, r5
 8005a52:	2000      	movs	r0, #0
 8005a54:	250a      	movs	r5, #10
 8005a56:	4639      	mov	r1, r7
 8005a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a5c:	3b30      	subs	r3, #48	; 0x30
 8005a5e:	2b09      	cmp	r3, #9
 8005a60:	d94d      	bls.n	8005afe <_svfiprintf_r+0x16e>
 8005a62:	b1b8      	cbz	r0, 8005a94 <_svfiprintf_r+0x104>
 8005a64:	e00f      	b.n	8005a86 <_svfiprintf_r+0xf6>
 8005a66:	462f      	mov	r7, r5
 8005a68:	e7b8      	b.n	80059dc <_svfiprintf_r+0x4c>
 8005a6a:	4a40      	ldr	r2, [pc, #256]	; (8005b6c <_svfiprintf_r+0x1dc>)
 8005a6c:	1a80      	subs	r0, r0, r2
 8005a6e:	fa0b f000 	lsl.w	r0, fp, r0
 8005a72:	4318      	orrs	r0, r3
 8005a74:	9004      	str	r0, [sp, #16]
 8005a76:	463d      	mov	r5, r7
 8005a78:	e7d3      	b.n	8005a22 <_svfiprintf_r+0x92>
 8005a7a:	9a03      	ldr	r2, [sp, #12]
 8005a7c:	1d11      	adds	r1, r2, #4
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	9103      	str	r1, [sp, #12]
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	db01      	blt.n	8005a8a <_svfiprintf_r+0xfa>
 8005a86:	9207      	str	r2, [sp, #28]
 8005a88:	e004      	b.n	8005a94 <_svfiprintf_r+0x104>
 8005a8a:	4252      	negs	r2, r2
 8005a8c:	f043 0302 	orr.w	r3, r3, #2
 8005a90:	9207      	str	r2, [sp, #28]
 8005a92:	9304      	str	r3, [sp, #16]
 8005a94:	783b      	ldrb	r3, [r7, #0]
 8005a96:	2b2e      	cmp	r3, #46	; 0x2e
 8005a98:	d10c      	bne.n	8005ab4 <_svfiprintf_r+0x124>
 8005a9a:	787b      	ldrb	r3, [r7, #1]
 8005a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a9e:	d133      	bne.n	8005b08 <_svfiprintf_r+0x178>
 8005aa0:	9b03      	ldr	r3, [sp, #12]
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	9203      	str	r2, [sp, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bfb8      	it	lt
 8005aac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ab0:	3702      	adds	r7, #2
 8005ab2:	9305      	str	r3, [sp, #20]
 8005ab4:	4d2e      	ldr	r5, [pc, #184]	; (8005b70 <_svfiprintf_r+0x1e0>)
 8005ab6:	7839      	ldrb	r1, [r7, #0]
 8005ab8:	2203      	movs	r2, #3
 8005aba:	4628      	mov	r0, r5
 8005abc:	f7fa fb90 	bl	80001e0 <memchr>
 8005ac0:	b138      	cbz	r0, 8005ad2 <_svfiprintf_r+0x142>
 8005ac2:	2340      	movs	r3, #64	; 0x40
 8005ac4:	1b40      	subs	r0, r0, r5
 8005ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aca:	9b04      	ldr	r3, [sp, #16]
 8005acc:	4303      	orrs	r3, r0
 8005ace:	3701      	adds	r7, #1
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	7839      	ldrb	r1, [r7, #0]
 8005ad4:	4827      	ldr	r0, [pc, #156]	; (8005b74 <_svfiprintf_r+0x1e4>)
 8005ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ada:	2206      	movs	r2, #6
 8005adc:	1c7e      	adds	r6, r7, #1
 8005ade:	f7fa fb7f 	bl	80001e0 <memchr>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d038      	beq.n	8005b58 <_svfiprintf_r+0x1c8>
 8005ae6:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <_svfiprintf_r+0x1e8>)
 8005ae8:	bb13      	cbnz	r3, 8005b30 <_svfiprintf_r+0x1a0>
 8005aea:	9b03      	ldr	r3, [sp, #12]
 8005aec:	3307      	adds	r3, #7
 8005aee:	f023 0307 	bic.w	r3, r3, #7
 8005af2:	3308      	adds	r3, #8
 8005af4:	9303      	str	r3, [sp, #12]
 8005af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af8:	444b      	add	r3, r9
 8005afa:	9309      	str	r3, [sp, #36]	; 0x24
 8005afc:	e76d      	b.n	80059da <_svfiprintf_r+0x4a>
 8005afe:	fb05 3202 	mla	r2, r5, r2, r3
 8005b02:	2001      	movs	r0, #1
 8005b04:	460f      	mov	r7, r1
 8005b06:	e7a6      	b.n	8005a56 <_svfiprintf_r+0xc6>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	3701      	adds	r7, #1
 8005b0c:	9305      	str	r3, [sp, #20]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	250a      	movs	r5, #10
 8005b12:	4638      	mov	r0, r7
 8005b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b18:	3a30      	subs	r2, #48	; 0x30
 8005b1a:	2a09      	cmp	r2, #9
 8005b1c:	d903      	bls.n	8005b26 <_svfiprintf_r+0x196>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0c8      	beq.n	8005ab4 <_svfiprintf_r+0x124>
 8005b22:	9105      	str	r1, [sp, #20]
 8005b24:	e7c6      	b.n	8005ab4 <_svfiprintf_r+0x124>
 8005b26:	fb05 2101 	mla	r1, r5, r1, r2
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	e7f0      	b.n	8005b12 <_svfiprintf_r+0x182>
 8005b30:	ab03      	add	r3, sp, #12
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	4622      	mov	r2, r4
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <_svfiprintf_r+0x1ec>)
 8005b38:	a904      	add	r1, sp, #16
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	f3af 8000 	nop.w
 8005b40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b44:	4681      	mov	r9, r0
 8005b46:	d1d6      	bne.n	8005af6 <_svfiprintf_r+0x166>
 8005b48:	89a3      	ldrh	r3, [r4, #12]
 8005b4a:	065b      	lsls	r3, r3, #25
 8005b4c:	f53f af35 	bmi.w	80059ba <_svfiprintf_r+0x2a>
 8005b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b52:	b01d      	add	sp, #116	; 0x74
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	ab03      	add	r3, sp, #12
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	4622      	mov	r2, r4
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <_svfiprintf_r+0x1ec>)
 8005b60:	a904      	add	r1, sp, #16
 8005b62:	4640      	mov	r0, r8
 8005b64:	f000 f882 	bl	8005c6c <_printf_i>
 8005b68:	e7ea      	b.n	8005b40 <_svfiprintf_r+0x1b0>
 8005b6a:	bf00      	nop
 8005b6c:	08005fa8 	.word	0x08005fa8
 8005b70:	08005fae 	.word	0x08005fae
 8005b74:	08005fb2 	.word	0x08005fb2
 8005b78:	00000000 	.word	0x00000000
 8005b7c:	080058dd 	.word	0x080058dd

08005b80 <_printf_common>:
 8005b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b84:	4691      	mov	r9, r2
 8005b86:	461f      	mov	r7, r3
 8005b88:	688a      	ldr	r2, [r1, #8]
 8005b8a:	690b      	ldr	r3, [r1, #16]
 8005b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	bfb8      	it	lt
 8005b94:	4613      	movlt	r3, r2
 8005b96:	f8c9 3000 	str.w	r3, [r9]
 8005b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	b112      	cbz	r2, 8005baa <_printf_common+0x2a>
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f8c9 3000 	str.w	r3, [r9]
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	0699      	lsls	r1, r3, #26
 8005bae:	bf42      	ittt	mi
 8005bb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bb4:	3302      	addmi	r3, #2
 8005bb6:	f8c9 3000 	strmi.w	r3, [r9]
 8005bba:	6825      	ldr	r5, [r4, #0]
 8005bbc:	f015 0506 	ands.w	r5, r5, #6
 8005bc0:	d107      	bne.n	8005bd2 <_printf_common+0x52>
 8005bc2:	f104 0a19 	add.w	sl, r4, #25
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	42ab      	cmp	r3, r5
 8005bd0:	dc28      	bgt.n	8005c24 <_printf_common+0xa4>
 8005bd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	3300      	adds	r3, #0
 8005bda:	bf18      	it	ne
 8005bdc:	2301      	movne	r3, #1
 8005bde:	0692      	lsls	r2, r2, #26
 8005be0:	d42d      	bmi.n	8005c3e <_printf_common+0xbe>
 8005be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005be6:	4639      	mov	r1, r7
 8005be8:	4630      	mov	r0, r6
 8005bea:	47c0      	blx	r8
 8005bec:	3001      	adds	r0, #1
 8005bee:	d020      	beq.n	8005c32 <_printf_common+0xb2>
 8005bf0:	6823      	ldr	r3, [r4, #0]
 8005bf2:	68e5      	ldr	r5, [r4, #12]
 8005bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8005bf8:	f003 0306 	and.w	r3, r3, #6
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	bf08      	it	eq
 8005c00:	1aad      	subeq	r5, r5, r2
 8005c02:	68a3      	ldr	r3, [r4, #8]
 8005c04:	6922      	ldr	r2, [r4, #16]
 8005c06:	bf0c      	ite	eq
 8005c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c0c:	2500      	movne	r5, #0
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	bfc4      	itt	gt
 8005c12:	1a9b      	subgt	r3, r3, r2
 8005c14:	18ed      	addgt	r5, r5, r3
 8005c16:	f04f 0900 	mov.w	r9, #0
 8005c1a:	341a      	adds	r4, #26
 8005c1c:	454d      	cmp	r5, r9
 8005c1e:	d11a      	bne.n	8005c56 <_printf_common+0xd6>
 8005c20:	2000      	movs	r0, #0
 8005c22:	e008      	b.n	8005c36 <_printf_common+0xb6>
 8005c24:	2301      	movs	r3, #1
 8005c26:	4652      	mov	r2, sl
 8005c28:	4639      	mov	r1, r7
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	47c0      	blx	r8
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d103      	bne.n	8005c3a <_printf_common+0xba>
 8005c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3a:	3501      	adds	r5, #1
 8005c3c:	e7c3      	b.n	8005bc6 <_printf_common+0x46>
 8005c3e:	18e1      	adds	r1, r4, r3
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	2030      	movs	r0, #48	; 0x30
 8005c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c48:	4422      	add	r2, r4
 8005c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c52:	3302      	adds	r3, #2
 8005c54:	e7c5      	b.n	8005be2 <_printf_common+0x62>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4622      	mov	r2, r4
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	47c0      	blx	r8
 8005c60:	3001      	adds	r0, #1
 8005c62:	d0e6      	beq.n	8005c32 <_printf_common+0xb2>
 8005c64:	f109 0901 	add.w	r9, r9, #1
 8005c68:	e7d8      	b.n	8005c1c <_printf_common+0x9c>
	...

08005c6c <_printf_i>:
 8005c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c74:	460c      	mov	r4, r1
 8005c76:	7e09      	ldrb	r1, [r1, #24]
 8005c78:	b085      	sub	sp, #20
 8005c7a:	296e      	cmp	r1, #110	; 0x6e
 8005c7c:	4617      	mov	r7, r2
 8005c7e:	4606      	mov	r6, r0
 8005c80:	4698      	mov	r8, r3
 8005c82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c84:	f000 80b3 	beq.w	8005dee <_printf_i+0x182>
 8005c88:	d822      	bhi.n	8005cd0 <_printf_i+0x64>
 8005c8a:	2963      	cmp	r1, #99	; 0x63
 8005c8c:	d036      	beq.n	8005cfc <_printf_i+0x90>
 8005c8e:	d80a      	bhi.n	8005ca6 <_printf_i+0x3a>
 8005c90:	2900      	cmp	r1, #0
 8005c92:	f000 80b9 	beq.w	8005e08 <_printf_i+0x19c>
 8005c96:	2958      	cmp	r1, #88	; 0x58
 8005c98:	f000 8083 	beq.w	8005da2 <_printf_i+0x136>
 8005c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005ca4:	e032      	b.n	8005d0c <_printf_i+0xa0>
 8005ca6:	2964      	cmp	r1, #100	; 0x64
 8005ca8:	d001      	beq.n	8005cae <_printf_i+0x42>
 8005caa:	2969      	cmp	r1, #105	; 0x69
 8005cac:	d1f6      	bne.n	8005c9c <_printf_i+0x30>
 8005cae:	6820      	ldr	r0, [r4, #0]
 8005cb0:	6813      	ldr	r3, [r2, #0]
 8005cb2:	0605      	lsls	r5, r0, #24
 8005cb4:	f103 0104 	add.w	r1, r3, #4
 8005cb8:	d52a      	bpl.n	8005d10 <_printf_i+0xa4>
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6011      	str	r1, [r2, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	da03      	bge.n	8005cca <_printf_i+0x5e>
 8005cc2:	222d      	movs	r2, #45	; 0x2d
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cca:	486f      	ldr	r0, [pc, #444]	; (8005e88 <_printf_i+0x21c>)
 8005ccc:	220a      	movs	r2, #10
 8005cce:	e039      	b.n	8005d44 <_printf_i+0xd8>
 8005cd0:	2973      	cmp	r1, #115	; 0x73
 8005cd2:	f000 809d 	beq.w	8005e10 <_printf_i+0x1a4>
 8005cd6:	d808      	bhi.n	8005cea <_printf_i+0x7e>
 8005cd8:	296f      	cmp	r1, #111	; 0x6f
 8005cda:	d020      	beq.n	8005d1e <_printf_i+0xb2>
 8005cdc:	2970      	cmp	r1, #112	; 0x70
 8005cde:	d1dd      	bne.n	8005c9c <_printf_i+0x30>
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	f043 0320 	orr.w	r3, r3, #32
 8005ce6:	6023      	str	r3, [r4, #0]
 8005ce8:	e003      	b.n	8005cf2 <_printf_i+0x86>
 8005cea:	2975      	cmp	r1, #117	; 0x75
 8005cec:	d017      	beq.n	8005d1e <_printf_i+0xb2>
 8005cee:	2978      	cmp	r1, #120	; 0x78
 8005cf0:	d1d4      	bne.n	8005c9c <_printf_i+0x30>
 8005cf2:	2378      	movs	r3, #120	; 0x78
 8005cf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cf8:	4864      	ldr	r0, [pc, #400]	; (8005e8c <_printf_i+0x220>)
 8005cfa:	e055      	b.n	8005da8 <_printf_i+0x13c>
 8005cfc:	6813      	ldr	r3, [r2, #0]
 8005cfe:	1d19      	adds	r1, r3, #4
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6011      	str	r1, [r2, #0]
 8005d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e08c      	b.n	8005e2a <_printf_i+0x1be>
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	6011      	str	r1, [r2, #0]
 8005d14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d18:	bf18      	it	ne
 8005d1a:	b21b      	sxthne	r3, r3
 8005d1c:	e7cf      	b.n	8005cbe <_printf_i+0x52>
 8005d1e:	6813      	ldr	r3, [r2, #0]
 8005d20:	6825      	ldr	r5, [r4, #0]
 8005d22:	1d18      	adds	r0, r3, #4
 8005d24:	6010      	str	r0, [r2, #0]
 8005d26:	0628      	lsls	r0, r5, #24
 8005d28:	d501      	bpl.n	8005d2e <_printf_i+0xc2>
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	e002      	b.n	8005d34 <_printf_i+0xc8>
 8005d2e:	0668      	lsls	r0, r5, #25
 8005d30:	d5fb      	bpl.n	8005d2a <_printf_i+0xbe>
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	4854      	ldr	r0, [pc, #336]	; (8005e88 <_printf_i+0x21c>)
 8005d36:	296f      	cmp	r1, #111	; 0x6f
 8005d38:	bf14      	ite	ne
 8005d3a:	220a      	movne	r2, #10
 8005d3c:	2208      	moveq	r2, #8
 8005d3e:	2100      	movs	r1, #0
 8005d40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d44:	6865      	ldr	r5, [r4, #4]
 8005d46:	60a5      	str	r5, [r4, #8]
 8005d48:	2d00      	cmp	r5, #0
 8005d4a:	f2c0 8095 	blt.w	8005e78 <_printf_i+0x20c>
 8005d4e:	6821      	ldr	r1, [r4, #0]
 8005d50:	f021 0104 	bic.w	r1, r1, #4
 8005d54:	6021      	str	r1, [r4, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d13d      	bne.n	8005dd6 <_printf_i+0x16a>
 8005d5a:	2d00      	cmp	r5, #0
 8005d5c:	f040 808e 	bne.w	8005e7c <_printf_i+0x210>
 8005d60:	4665      	mov	r5, ip
 8005d62:	2a08      	cmp	r2, #8
 8005d64:	d10b      	bne.n	8005d7e <_printf_i+0x112>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	07db      	lsls	r3, r3, #31
 8005d6a:	d508      	bpl.n	8005d7e <_printf_i+0x112>
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	6862      	ldr	r2, [r4, #4]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	bfde      	ittt	le
 8005d74:	2330      	movle	r3, #48	; 0x30
 8005d76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d7a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005d7e:	ebac 0305 	sub.w	r3, ip, r5
 8005d82:	6123      	str	r3, [r4, #16]
 8005d84:	f8cd 8000 	str.w	r8, [sp]
 8005d88:	463b      	mov	r3, r7
 8005d8a:	aa03      	add	r2, sp, #12
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4630      	mov	r0, r6
 8005d90:	f7ff fef6 	bl	8005b80 <_printf_common>
 8005d94:	3001      	adds	r0, #1
 8005d96:	d14d      	bne.n	8005e34 <_printf_i+0x1c8>
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d9c:	b005      	add	sp, #20
 8005d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005da2:	4839      	ldr	r0, [pc, #228]	; (8005e88 <_printf_i+0x21c>)
 8005da4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005da8:	6813      	ldr	r3, [r2, #0]
 8005daa:	6821      	ldr	r1, [r4, #0]
 8005dac:	1d1d      	adds	r5, r3, #4
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6015      	str	r5, [r2, #0]
 8005db2:	060a      	lsls	r2, r1, #24
 8005db4:	d50b      	bpl.n	8005dce <_printf_i+0x162>
 8005db6:	07ca      	lsls	r2, r1, #31
 8005db8:	bf44      	itt	mi
 8005dba:	f041 0120 	orrmi.w	r1, r1, #32
 8005dbe:	6021      	strmi	r1, [r4, #0]
 8005dc0:	b91b      	cbnz	r3, 8005dca <_printf_i+0x15e>
 8005dc2:	6822      	ldr	r2, [r4, #0]
 8005dc4:	f022 0220 	bic.w	r2, r2, #32
 8005dc8:	6022      	str	r2, [r4, #0]
 8005dca:	2210      	movs	r2, #16
 8005dcc:	e7b7      	b.n	8005d3e <_printf_i+0xd2>
 8005dce:	064d      	lsls	r5, r1, #25
 8005dd0:	bf48      	it	mi
 8005dd2:	b29b      	uxthmi	r3, r3
 8005dd4:	e7ef      	b.n	8005db6 <_printf_i+0x14a>
 8005dd6:	4665      	mov	r5, ip
 8005dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ddc:	fb02 3311 	mls	r3, r2, r1, r3
 8005de0:	5cc3      	ldrb	r3, [r0, r3]
 8005de2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005de6:	460b      	mov	r3, r1
 8005de8:	2900      	cmp	r1, #0
 8005dea:	d1f5      	bne.n	8005dd8 <_printf_i+0x16c>
 8005dec:	e7b9      	b.n	8005d62 <_printf_i+0xf6>
 8005dee:	6813      	ldr	r3, [r2, #0]
 8005df0:	6825      	ldr	r5, [r4, #0]
 8005df2:	6961      	ldr	r1, [r4, #20]
 8005df4:	1d18      	adds	r0, r3, #4
 8005df6:	6010      	str	r0, [r2, #0]
 8005df8:	0628      	lsls	r0, r5, #24
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	d501      	bpl.n	8005e02 <_printf_i+0x196>
 8005dfe:	6019      	str	r1, [r3, #0]
 8005e00:	e002      	b.n	8005e08 <_printf_i+0x19c>
 8005e02:	066a      	lsls	r2, r5, #25
 8005e04:	d5fb      	bpl.n	8005dfe <_printf_i+0x192>
 8005e06:	8019      	strh	r1, [r3, #0]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	6123      	str	r3, [r4, #16]
 8005e0c:	4665      	mov	r5, ip
 8005e0e:	e7b9      	b.n	8005d84 <_printf_i+0x118>
 8005e10:	6813      	ldr	r3, [r2, #0]
 8005e12:	1d19      	adds	r1, r3, #4
 8005e14:	6011      	str	r1, [r2, #0]
 8005e16:	681d      	ldr	r5, [r3, #0]
 8005e18:	6862      	ldr	r2, [r4, #4]
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f7fa f9df 	bl	80001e0 <memchr>
 8005e22:	b108      	cbz	r0, 8005e28 <_printf_i+0x1bc>
 8005e24:	1b40      	subs	r0, r0, r5
 8005e26:	6060      	str	r0, [r4, #4]
 8005e28:	6863      	ldr	r3, [r4, #4]
 8005e2a:	6123      	str	r3, [r4, #16]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e32:	e7a7      	b.n	8005d84 <_printf_i+0x118>
 8005e34:	6923      	ldr	r3, [r4, #16]
 8005e36:	462a      	mov	r2, r5
 8005e38:	4639      	mov	r1, r7
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	47c0      	blx	r8
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d0aa      	beq.n	8005d98 <_printf_i+0x12c>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	079b      	lsls	r3, r3, #30
 8005e46:	d413      	bmi.n	8005e70 <_printf_i+0x204>
 8005e48:	68e0      	ldr	r0, [r4, #12]
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	4298      	cmp	r0, r3
 8005e4e:	bfb8      	it	lt
 8005e50:	4618      	movlt	r0, r3
 8005e52:	e7a3      	b.n	8005d9c <_printf_i+0x130>
 8005e54:	2301      	movs	r3, #1
 8005e56:	464a      	mov	r2, r9
 8005e58:	4639      	mov	r1, r7
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	47c0      	blx	r8
 8005e5e:	3001      	adds	r0, #1
 8005e60:	d09a      	beq.n	8005d98 <_printf_i+0x12c>
 8005e62:	3501      	adds	r5, #1
 8005e64:	68e3      	ldr	r3, [r4, #12]
 8005e66:	9a03      	ldr	r2, [sp, #12]
 8005e68:	1a9b      	subs	r3, r3, r2
 8005e6a:	42ab      	cmp	r3, r5
 8005e6c:	dcf2      	bgt.n	8005e54 <_printf_i+0x1e8>
 8005e6e:	e7eb      	b.n	8005e48 <_printf_i+0x1dc>
 8005e70:	2500      	movs	r5, #0
 8005e72:	f104 0919 	add.w	r9, r4, #25
 8005e76:	e7f5      	b.n	8005e64 <_printf_i+0x1f8>
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1ac      	bne.n	8005dd6 <_printf_i+0x16a>
 8005e7c:	7803      	ldrb	r3, [r0, #0]
 8005e7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e86:	e76c      	b.n	8005d62 <_printf_i+0xf6>
 8005e88:	08005fb9 	.word	0x08005fb9
 8005e8c:	08005fca 	.word	0x08005fca

08005e90 <memmove>:
 8005e90:	4288      	cmp	r0, r1
 8005e92:	b510      	push	{r4, lr}
 8005e94:	eb01 0302 	add.w	r3, r1, r2
 8005e98:	d807      	bhi.n	8005eaa <memmove+0x1a>
 8005e9a:	1e42      	subs	r2, r0, #1
 8005e9c:	4299      	cmp	r1, r3
 8005e9e:	d00a      	beq.n	8005eb6 <memmove+0x26>
 8005ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ea4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ea8:	e7f8      	b.n	8005e9c <memmove+0xc>
 8005eaa:	4283      	cmp	r3, r0
 8005eac:	d9f5      	bls.n	8005e9a <memmove+0xa>
 8005eae:	1881      	adds	r1, r0, r2
 8005eb0:	1ad2      	subs	r2, r2, r3
 8005eb2:	42d3      	cmn	r3, r2
 8005eb4:	d100      	bne.n	8005eb8 <memmove+0x28>
 8005eb6:	bd10      	pop	{r4, pc}
 8005eb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ebc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ec0:	e7f7      	b.n	8005eb2 <memmove+0x22>

08005ec2 <_realloc_r>:
 8005ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec4:	4607      	mov	r7, r0
 8005ec6:	4614      	mov	r4, r2
 8005ec8:	460e      	mov	r6, r1
 8005eca:	b921      	cbnz	r1, 8005ed6 <_realloc_r+0x14>
 8005ecc:	4611      	mov	r1, r2
 8005ece:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ed2:	f7ff bc77 	b.w	80057c4 <_malloc_r>
 8005ed6:	b922      	cbnz	r2, 8005ee2 <_realloc_r+0x20>
 8005ed8:	f7ff fc26 	bl	8005728 <_free_r>
 8005edc:	4625      	mov	r5, r4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee2:	f000 f814 	bl	8005f0e <_malloc_usable_size_r>
 8005ee6:	42a0      	cmp	r0, r4
 8005ee8:	d20f      	bcs.n	8005f0a <_realloc_r+0x48>
 8005eea:	4621      	mov	r1, r4
 8005eec:	4638      	mov	r0, r7
 8005eee:	f7ff fc69 	bl	80057c4 <_malloc_r>
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d0f2      	beq.n	8005ede <_realloc_r+0x1c>
 8005ef8:	4631      	mov	r1, r6
 8005efa:	4622      	mov	r2, r4
 8005efc:	f7ff fc00 	bl	8005700 <memcpy>
 8005f00:	4631      	mov	r1, r6
 8005f02:	4638      	mov	r0, r7
 8005f04:	f7ff fc10 	bl	8005728 <_free_r>
 8005f08:	e7e9      	b.n	8005ede <_realloc_r+0x1c>
 8005f0a:	4635      	mov	r5, r6
 8005f0c:	e7e7      	b.n	8005ede <_realloc_r+0x1c>

08005f0e <_malloc_usable_size_r>:
 8005f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f12:	1f18      	subs	r0, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bfbc      	itt	lt
 8005f18:	580b      	ldrlt	r3, [r1, r0]
 8005f1a:	18c0      	addlt	r0, r0, r3
 8005f1c:	4770      	bx	lr
	...

08005f20 <_init>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	bf00      	nop
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr

08005f2c <_fini>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr
